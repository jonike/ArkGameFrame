// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AFMsgShare.proto

#ifndef PROTOBUF_AFMsgShare_2eproto__INCLUDED
#define PROTOBUF_AFMsgShare_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2007000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "AFDefine.pb.h"
#include "AFMsgBase.pb.h"
// @@protoc_insertion_point(includes)

namespace AFMsg {

// Internal implementation detail -- do not call these.
void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
void protobuf_AssignDesc_AFMsgShare_2eproto();
void protobuf_ShutdownFile_AFMsgShare_2eproto();

class AckBigMapGridInfo;
class AckBigMapInfo;
class AckCreatePVPEctype;
class AckElementlevelToEquip;
class AckGetMapAward;
class AckGuildEctypeInfo;
class AckHoldMapGrid;
class AckHoleToEquip;
class AckInlaystoneToEquip;
class AckIntensifylevelToEquip;
class AckLeaveMapMsg;
class AckMapHunting;
class AckMapKingWar;
class AckPVPApplyMatch;
class AckPlayerEntryList;
class AckPlayerLeaveList;
class AckSearchGuild;
class AckSearchGuild_SearchGuildObject;
class AckSwitchServer;
class AckTeamEnterEctype;
class BigMapGridBaseInfo;
class BigMapGridDetailInfo;
class BigMapLeaveMsg;
class BigMapWarHistory;
class ChatContainer;
class ChatInfo;
class CurrencyStruct;
class EffectData;
class GridGuildBaseInfo;
class GuildEctypeInfo;
class ItemStruct;
class PVPRoomInfo;
class PlayerEntryInfo;
class ReqAcceptTask;
class ReqAckBattleOppnent;
class ReqAckCreateChatGroup;
class ReqAckCreateGuild;
class ReqAckCreateTeam;
class ReqAckDonateGuildItem;
class ReqAckEndBattle;
class ReqAckInviteTeam;
class ReqAckJoinActivity;
class ReqAckJoinGuild;
class ReqAckJoinTeam;
class ReqAckLeaveGuild;
class ReqAckLeaveTeam;
class ReqAckOprGuild;
class ReqAckOprGuildMember;
class ReqAckOprTeamMember;
class ReqAckPlayerChat;
class ReqAckPlayerMove;
class ReqAckQuitChatGroup;
class ReqAckSearchOppnent;
class ReqAckSwapScene;
class ReqAckSynData;
class ReqAckUseItem;
class ReqAckUseSkill;
class ReqAckjoinChatGroup;
class ReqBigMapGridInfo;
class ReqBigMapInfo;
class ReqCancelSubscriptionChatGroup;
class ReqCompeleteTask;
class ReqCreatePVPEctype;
class ReqElementlevelToEquip;
class ReqEnterGameServer;
class ReqEnterGuildEctype;
class ReqGetMapAward;
class ReqGuildEctypeInfo;
class ReqHeartBeat;
class ReqHoldMapGrid;
class ReqHoleToEquip;
class ReqInlaystoneToEquip;
class ReqIntensifylevelToEquip;
class ReqLeaveGameServer;
class ReqLeaveMapMsg;
class ReqMapHunting;
class ReqMapKingWar;
class ReqMiningTitle;
class ReqPVPApplyMatch;
class ReqPickDropItem;
class ReqSearchGuild;
class ReqSendMail;
class ReqSetFightHero;
class ReqSubscriptionChatGroup;
class ReqSwitchServer;
class ReqTeamEnterEctype;
class ReqWearEquip;
class SetGuildEctypeInfo;
class TakeOffEquip;
class TeamInfo;
class TeammemberInfo;

enum ReqAckSynData_SynType {
  ReqAckSynData_SynType_EST_SCENE = 1,
  ReqAckSynData_SynType_EST_GROUP = 2,
  ReqAckSynData_SynType_EST_GUILD = 3,
  ReqAckSynData_SynType_EST_FRIEND = 4
};
LIBPROTOC_EXPORT bool ReqAckSynData_SynType_IsValid(int value);
const ReqAckSynData_SynType ReqAckSynData_SynType_SynType_MIN = ReqAckSynData_SynType_EST_SCENE;
const ReqAckSynData_SynType ReqAckSynData_SynType_SynType_MAX = ReqAckSynData_SynType_EST_FRIEND;
const int ReqAckSynData_SynType_SynType_ARRAYSIZE = ReqAckSynData_SynType_SynType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReqAckSynData_SynType_descriptor();
inline const ::std::string& ReqAckSynData_SynType_Name(ReqAckSynData_SynType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqAckSynData_SynType_descriptor(), value);
}
inline bool ReqAckSynData_SynType_Parse(
    const ::std::string& name, ReqAckSynData_SynType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqAckSynData_SynType>(
    ReqAckSynData_SynType_descriptor(), name, value);
}
enum ChatContainer_ContainerType {
  ChatContainer_ContainerType_EGCT_ITEM = 1
};
LIBPROTOC_EXPORT bool ChatContainer_ContainerType_IsValid(int value);
const ChatContainer_ContainerType ChatContainer_ContainerType_ContainerType_MIN = ChatContainer_ContainerType_EGCT_ITEM;
const ChatContainer_ContainerType ChatContainer_ContainerType_ContainerType_MAX = ChatContainer_ContainerType_EGCT_ITEM;
const int ChatContainer_ContainerType_ContainerType_ARRAYSIZE = ChatContainer_ContainerType_ContainerType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ChatContainer_ContainerType_descriptor();
inline const ::std::string& ChatContainer_ContainerType_Name(ChatContainer_ContainerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatContainer_ContainerType_descriptor(), value);
}
inline bool ChatContainer_ContainerType_Parse(
    const ::std::string& name, ChatContainer_ContainerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatContainer_ContainerType>(
    ChatContainer_ContainerType_descriptor(), name, value);
}
enum ReqAckPlayerChat_EGameChatType {
  ReqAckPlayerChat_EGameChatType_EGCT_GUILD = 0,
  ReqAckPlayerChat_EGameChatType_EGCT_PRIVATE = 1,
  ReqAckPlayerChat_EGameChatType_EGCT_TEAM = 2,
  ReqAckPlayerChat_EGameChatType_EGCT_WORLD = 3
};
LIBPROTOC_EXPORT bool ReqAckPlayerChat_EGameChatType_IsValid(int value);
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat_EGameChatType_EGameChatType_MIN = ReqAckPlayerChat_EGameChatType_EGCT_GUILD;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat_EGameChatType_EGameChatType_MAX = ReqAckPlayerChat_EGameChatType_EGCT_WORLD;
const int ReqAckPlayerChat_EGameChatType_EGameChatType_ARRAYSIZE = ReqAckPlayerChat_EGameChatType_EGameChatType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReqAckPlayerChat_EGameChatType_descriptor();
inline const ::std::string& ReqAckPlayerChat_EGameChatType_Name(ReqAckPlayerChat_EGameChatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqAckPlayerChat_EGameChatType_descriptor(), value);
}
inline bool ReqAckPlayerChat_EGameChatType_Parse(
    const ::std::string& name, ReqAckPlayerChat_EGameChatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqAckPlayerChat_EGameChatType>(
    ReqAckPlayerChat_EGameChatType_descriptor(), name, value);
}
enum EffectData_EResultType {
  EffectData_EResultType_EET_SUCCESS = 0,
  EffectData_EResultType_EET_FAIL = 1,
  EffectData_EResultType_EET_REFUSE = 2
};
LIBPROTOC_EXPORT bool EffectData_EResultType_IsValid(int value);
const EffectData_EResultType EffectData_EResultType_EResultType_MIN = EffectData_EResultType_EET_SUCCESS;
const EffectData_EResultType EffectData_EResultType_EResultType_MAX = EffectData_EResultType_EET_REFUSE;
const int EffectData_EResultType_EResultType_ARRAYSIZE = EffectData_EResultType_EResultType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* EffectData_EResultType_descriptor();
inline const ::std::string& EffectData_EResultType_Name(EffectData_EResultType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EffectData_EResultType_descriptor(), value);
}
inline bool EffectData_EResultType_Parse(
    const ::std::string& name, EffectData_EResultType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EffectData_EResultType>(
    EffectData_EResultType_descriptor(), name, value);
}
enum ReqAckSwapScene_EGameSwapType {
  ReqAckSwapScene_EGameSwapType_EGST_NARMAL = 0,
  ReqAckSwapScene_EGameSwapType_EGST_CLONE = 1,
  ReqAckSwapScene_EGameSwapType_EGST_ARENA = 2,
  ReqAckSwapScene_EGameSwapType_EGST_MIRROR = 3
};
LIBPROTOC_EXPORT bool ReqAckSwapScene_EGameSwapType_IsValid(int value);
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene_EGameSwapType_EGameSwapType_MIN = ReqAckSwapScene_EGameSwapType_EGST_NARMAL;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene_EGameSwapType_EGameSwapType_MAX = ReqAckSwapScene_EGameSwapType_EGST_MIRROR;
const int ReqAckSwapScene_EGameSwapType_EGameSwapType_ARRAYSIZE = ReqAckSwapScene_EGameSwapType_EGameSwapType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReqAckSwapScene_EGameSwapType_descriptor();
inline const ::std::string& ReqAckSwapScene_EGameSwapType_Name(ReqAckSwapScene_EGameSwapType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqAckSwapScene_EGameSwapType_descriptor(), value);
}
inline bool ReqAckSwapScene_EGameSwapType_Parse(
    const ::std::string& name, ReqAckSwapScene_EGameSwapType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqAckSwapScene_EGameSwapType>(
    ReqAckSwapScene_EGameSwapType_descriptor(), name, value);
}
enum ReqAckJoinActivity_EGameActivityType {
  ReqAckJoinActivity_EGameActivityType_EGAT_PVP = 0
};
LIBPROTOC_EXPORT bool ReqAckJoinActivity_EGameActivityType_IsValid(int value);
const ReqAckJoinActivity_EGameActivityType ReqAckJoinActivity_EGameActivityType_EGameActivityType_MIN = ReqAckJoinActivity_EGameActivityType_EGAT_PVP;
const ReqAckJoinActivity_EGameActivityType ReqAckJoinActivity_EGameActivityType_EGameActivityType_MAX = ReqAckJoinActivity_EGameActivityType_EGAT_PVP;
const int ReqAckJoinActivity_EGameActivityType_EGameActivityType_ARRAYSIZE = ReqAckJoinActivity_EGameActivityType_EGameActivityType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReqAckJoinActivity_EGameActivityType_descriptor();
inline const ::std::string& ReqAckJoinActivity_EGameActivityType_Name(ReqAckJoinActivity_EGameActivityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqAckJoinActivity_EGameActivityType_descriptor(), value);
}
inline bool ReqAckJoinActivity_EGameActivityType_Parse(
    const ::std::string& name, ReqAckJoinActivity_EGameActivityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqAckJoinActivity_EGameActivityType>(
    ReqAckJoinActivity_EGameActivityType_descriptor(), name, value);
}
enum ReqAckJoinActivity_EGameActivitySubType {
  ReqAckJoinActivity_EGameActivitySubType_EGAT_NORMAL = 0
};
LIBPROTOC_EXPORT bool ReqAckJoinActivity_EGameActivitySubType_IsValid(int value);
const ReqAckJoinActivity_EGameActivitySubType ReqAckJoinActivity_EGameActivitySubType_EGameActivitySubType_MIN = ReqAckJoinActivity_EGameActivitySubType_EGAT_NORMAL;
const ReqAckJoinActivity_EGameActivitySubType ReqAckJoinActivity_EGameActivitySubType_EGameActivitySubType_MAX = ReqAckJoinActivity_EGameActivitySubType_EGAT_NORMAL;
const int ReqAckJoinActivity_EGameActivitySubType_EGameActivitySubType_ARRAYSIZE = ReqAckJoinActivity_EGameActivitySubType_EGameActivitySubType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReqAckJoinActivity_EGameActivitySubType_descriptor();
inline const ::std::string& ReqAckJoinActivity_EGameActivitySubType_Name(ReqAckJoinActivity_EGameActivitySubType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqAckJoinActivity_EGameActivitySubType_descriptor(), value);
}
inline bool ReqAckJoinActivity_EGameActivitySubType_Parse(
    const ::std::string& name, ReqAckJoinActivity_EGameActivitySubType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqAckJoinActivity_EGameActivitySubType>(
    ReqAckJoinActivity_EGameActivitySubType_descriptor(), name, value);
}
enum ReqAckOprGuildMember_EGGuildMemberOprType {
  ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_DOWN = 0,
  ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_UP = 1,
  ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_KICK = 2,
  ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_APPOINT = 3,
  ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_FIRE = 4,
  ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_DEMISE = 5,
  ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_ACCEPTAPPLY = 6,
  ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_DENYAPPLY = 7,
  ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_KICKOUT = 8
};
LIBPROTOC_EXPORT bool ReqAckOprGuildMember_EGGuildMemberOprType_IsValid(int value);
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember_EGGuildMemberOprType_EGGuildMemberOprType_MIN = ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_DOWN;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember_EGGuildMemberOprType_EGGuildMemberOprType_MAX = ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_KICKOUT;
const int ReqAckOprGuildMember_EGGuildMemberOprType_EGGuildMemberOprType_ARRAYSIZE = ReqAckOprGuildMember_EGGuildMemberOprType_EGGuildMemberOprType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReqAckOprGuildMember_EGGuildMemberOprType_descriptor();
inline const ::std::string& ReqAckOprGuildMember_EGGuildMemberOprType_Name(ReqAckOprGuildMember_EGGuildMemberOprType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqAckOprGuildMember_EGGuildMemberOprType_descriptor(), value);
}
inline bool ReqAckOprGuildMember_EGGuildMemberOprType_Parse(
    const ::std::string& name, ReqAckOprGuildMember_EGGuildMemberOprType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqAckOprGuildMember_EGGuildMemberOprType>(
    ReqAckOprGuildMember_EGGuildMemberOprType_descriptor(), name, value);
}
enum ReqAckOprGuild_EGGuildOprType {
  ReqAckOprGuild_EGGuildOprType_EGAT_APPLYDISMISS = 1,
  ReqAckOprGuild_EGGuildOprType_EGAT_STOPDISMISS = 2,
  ReqAckOprGuild_EGGuildOprType_EGAT_SETRECRUIT = 3,
  ReqAckOprGuild_EGGuildOprType_EGAT_PUBLISHRECRUIT = 4,
  ReqAckOprGuild_EGGuildOprType_EGAT_EDITAD = 5,
  ReqAckOprGuild_EGGuildOprType_EGAT_LEVELUP = 6
};
LIBPROTOC_EXPORT bool ReqAckOprGuild_EGGuildOprType_IsValid(int value);
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild_EGGuildOprType_EGGuildOprType_MIN = ReqAckOprGuild_EGGuildOprType_EGAT_APPLYDISMISS;
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild_EGGuildOprType_EGGuildOprType_MAX = ReqAckOprGuild_EGGuildOprType_EGAT_LEVELUP;
const int ReqAckOprGuild_EGGuildOprType_EGGuildOprType_ARRAYSIZE = ReqAckOprGuild_EGGuildOprType_EGGuildOprType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReqAckOprGuild_EGGuildOprType_descriptor();
inline const ::std::string& ReqAckOprGuild_EGGuildOprType_Name(ReqAckOprGuild_EGGuildOprType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqAckOprGuild_EGGuildOprType_descriptor(), value);
}
inline bool ReqAckOprGuild_EGGuildOprType_Parse(
    const ::std::string& name, ReqAckOprGuild_EGGuildOprType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqAckOprGuild_EGGuildOprType>(
    ReqAckOprGuild_EGGuildOprType_descriptor(), name, value);
}
enum ChatInfo_EChatType {
  ChatInfo_EChatType_ECHATTYPE_NORMAL = 0,
  ChatInfo_EChatType_ECHATTYPE_PRIVATE = 1,
  ChatInfo_EChatType_ECHATTYPE_GUILD = 2,
  ChatInfo_EChatType_ECHATTYPE_WORLD = 3
};
LIBPROTOC_EXPORT bool ChatInfo_EChatType_IsValid(int value);
const ChatInfo_EChatType ChatInfo_EChatType_EChatType_MIN = ChatInfo_EChatType_ECHATTYPE_NORMAL;
const ChatInfo_EChatType ChatInfo_EChatType_EChatType_MAX = ChatInfo_EChatType_ECHATTYPE_WORLD;
const int ChatInfo_EChatType_EChatType_ARRAYSIZE = ChatInfo_EChatType_EChatType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ChatInfo_EChatType_descriptor();
inline const ::std::string& ChatInfo_EChatType_Name(ChatInfo_EChatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatInfo_EChatType_descriptor(), value);
}
inline bool ChatInfo_EChatType_Parse(
    const ::std::string& name, ChatInfo_EChatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatInfo_EChatType>(
    ChatInfo_EChatType_descriptor(), name, value);
}
enum ReqAckOprTeamMember_EGTeamMemberOprType {
  ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_DOWN = 0,
  ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_UP = 1,
  ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_KICK = 2,
  ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_APPOINT = 3,
  ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_FIRE = 4,
  ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_DEMISE = 5,
  ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_ACCEPTAPPLY = 6,
  ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_DENYAPPLY = 7,
  ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_KICKOUT = 8
};
LIBPROTOC_EXPORT bool ReqAckOprTeamMember_EGTeamMemberOprType_IsValid(int value);
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember_EGTeamMemberOprType_EGTeamMemberOprType_MIN = ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_DOWN;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember_EGTeamMemberOprType_EGTeamMemberOprType_MAX = ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_KICKOUT;
const int ReqAckOprTeamMember_EGTeamMemberOprType_EGTeamMemberOprType_ARRAYSIZE = ReqAckOprTeamMember_EGTeamMemberOprType_EGTeamMemberOprType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReqAckOprTeamMember_EGTeamMemberOprType_descriptor();
inline const ::std::string& ReqAckOprTeamMember_EGTeamMemberOprType_Name(ReqAckOprTeamMember_EGTeamMemberOprType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqAckOprTeamMember_EGTeamMemberOprType_descriptor(), value);
}
inline bool ReqAckOprTeamMember_EGTeamMemberOprType_Parse(
    const ::std::string& name, ReqAckOprTeamMember_EGTeamMemberOprType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqAckOprTeamMember_EGTeamMemberOprType>(
    ReqAckOprTeamMember_EGTeamMemberOprType_descriptor(), name, value);
}
enum ReqPVPApplyMatch_EApplyType {
  ReqPVPApplyMatch_EApplyType_EApplyType_Single = 0,
  ReqPVPApplyMatch_EApplyType_EApplyType_Team = 1
};
LIBPROTOC_EXPORT bool ReqPVPApplyMatch_EApplyType_IsValid(int value);
const ReqPVPApplyMatch_EApplyType ReqPVPApplyMatch_EApplyType_EApplyType_MIN = ReqPVPApplyMatch_EApplyType_EApplyType_Single;
const ReqPVPApplyMatch_EApplyType ReqPVPApplyMatch_EApplyType_EApplyType_MAX = ReqPVPApplyMatch_EApplyType_EApplyType_Team;
const int ReqPVPApplyMatch_EApplyType_EApplyType_ARRAYSIZE = ReqPVPApplyMatch_EApplyType_EApplyType_MAX + 1;

LIBPROTOC_EXPORT const ::google::protobuf::EnumDescriptor* ReqPVPApplyMatch_EApplyType_descriptor();
inline const ::std::string& ReqPVPApplyMatch_EApplyType_Name(ReqPVPApplyMatch_EApplyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqPVPApplyMatch_EApplyType_descriptor(), value);
}
inline bool ReqPVPApplyMatch_EApplyType_Parse(
    const ::std::string& name, ReqPVPApplyMatch_EApplyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqPVPApplyMatch_EApplyType>(
    ReqPVPApplyMatch_EApplyType_descriptor(), name, value);
}
// ===================================================================

class LIBPROTOC_EXPORT ReqEnterGameServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqEnterGameServer) */ {
 public:
  ReqEnterGameServer();
  virtual ~ReqEnterGameServer();

  ReqEnterGameServer(const ReqEnterGameServer& from);

  inline ReqEnterGameServer& operator=(const ReqEnterGameServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqEnterGameServer& default_instance();

  void Swap(ReqEnterGameServer* other);

  // implements Message ----------------------------------------------

  inline ReqEnterGameServer* New() const { return New(NULL); }

  ReqEnterGameServer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqEnterGameServer& from);
  void MergeFrom(const ReqEnterGameServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqEnterGameServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::AFMsg::Ident& id() const;
  ::AFMsg::Ident* mutable_id();
  ::AFMsg::Ident* release_id();
  void set_allocated_id(::AFMsg::Ident* id);

  // required bytes account = 2;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // required int32 game_id = 3;
  bool has_game_id() const;
  void clear_game_id();
  static const int kGameIdFieldNumber = 3;
  ::google::protobuf::int32 game_id() const;
  void set_game_id(::google::protobuf::int32 value);

  // required bytes name = 4;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqEnterGameServer)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_game_id();
  inline void clear_has_game_id();
  inline void set_has_name();
  inline void clear_has_name();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* id_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 game_id_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqEnterGameServer* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqHeartBeat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqHeartBeat) */ {
 public:
  ReqHeartBeat();
  virtual ~ReqHeartBeat();

  ReqHeartBeat(const ReqHeartBeat& from);

  inline ReqHeartBeat& operator=(const ReqHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqHeartBeat& default_instance();

  void Swap(ReqHeartBeat* other);

  // implements Message ----------------------------------------------

  inline ReqHeartBeat* New() const { return New(NULL); }

  ReqHeartBeat* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqHeartBeat& from);
  void MergeFrom(const ReqHeartBeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqHeartBeat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AFMsg.ReqHeartBeat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqHeartBeat* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqLeaveGameServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqLeaveGameServer) */ {
 public:
  ReqLeaveGameServer();
  virtual ~ReqLeaveGameServer();

  ReqLeaveGameServer(const ReqLeaveGameServer& from);

  inline ReqLeaveGameServer& operator=(const ReqLeaveGameServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqLeaveGameServer& default_instance();

  void Swap(ReqLeaveGameServer* other);

  // implements Message ----------------------------------------------

  inline ReqLeaveGameServer* New() const { return New(NULL); }

  ReqLeaveGameServer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqLeaveGameServer& from);
  void MergeFrom(const ReqLeaveGameServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqLeaveGameServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AFMsg.ReqLeaveGameServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqLeaveGameServer* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PlayerEntryInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.PlayerEntryInfo) */ {
 public:
  PlayerEntryInfo();
  virtual ~PlayerEntryInfo();

  PlayerEntryInfo(const PlayerEntryInfo& from);

  inline PlayerEntryInfo& operator=(const PlayerEntryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerEntryInfo& default_instance();

  void Swap(PlayerEntryInfo* other);

  // implements Message ----------------------------------------------

  inline PlayerEntryInfo* New() const { return New(NULL); }

  PlayerEntryInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerEntryInfo& from);
  void MergeFrom(const PlayerEntryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlayerEntryInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident object_guid = 1;
  bool has_object_guid() const;
  void clear_object_guid();
  static const int kObjectGuidFieldNumber = 1;
  const ::AFMsg::Ident& object_guid() const;
  ::AFMsg::Ident* mutable_object_guid();
  ::AFMsg::Ident* release_object_guid();
  void set_allocated_object_guid(::AFMsg::Ident* object_guid);

  // required .AFMsg.Point3D pos = 2;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  const ::AFMsg::Point3D& pos() const;
  ::AFMsg::Point3D* mutable_pos();
  ::AFMsg::Point3D* release_pos();
  void set_allocated_pos(::AFMsg::Point3D* pos);

  // required int32 career_type = 3;
  bool has_career_type() const;
  void clear_career_type();
  static const int kCareerTypeFieldNumber = 3;
  ::google::protobuf::int32 career_type() const;
  void set_career_type(::google::protobuf::int32 value);

  // required int32 player_state = 4;
  bool has_player_state() const;
  void clear_player_state();
  static const int kPlayerStateFieldNumber = 4;
  ::google::protobuf::int32 player_state() const;
  void set_player_state(::google::protobuf::int32 value);

  // required bytes config_id = 5;
  bool has_config_id() const;
  void clear_config_id();
  static const int kConfigIdFieldNumber = 5;
  const ::std::string& config_id() const;
  void set_config_id(const ::std::string& value);
  void set_config_id(const char* value);
  void set_config_id(const void* value, size_t size);
  ::std::string* mutable_config_id();
  ::std::string* release_config_id();
  void set_allocated_config_id(::std::string* config_id);

  // required int32 scene_id = 6;
  bool has_scene_id() const;
  void clear_scene_id();
  static const int kSceneIdFieldNumber = 6;
  ::google::protobuf::int32 scene_id() const;
  void set_scene_id(::google::protobuf::int32 value);

  // required bytes class_id = 7;
  bool has_class_id() const;
  void clear_class_id();
  static const int kClassIdFieldNumber = 7;
  const ::std::string& class_id() const;
  void set_class_id(const ::std::string& value);
  void set_class_id(const char* value);
  void set_class_id(const void* value, size_t size);
  ::std::string* mutable_class_id();
  ::std::string* release_class_id();
  void set_allocated_class_id(::std::string* class_id);

  // @@protoc_insertion_point(class_scope:AFMsg.PlayerEntryInfo)
 private:
  inline void set_has_object_guid();
  inline void clear_has_object_guid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_career_type();
  inline void clear_has_career_type();
  inline void set_has_player_state();
  inline void clear_has_player_state();
  inline void set_has_config_id();
  inline void clear_has_config_id();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_class_id();
  inline void clear_has_class_id();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* object_guid_;
  ::AFMsg::Point3D* pos_;
  ::google::protobuf::int32 career_type_;
  ::google::protobuf::int32 player_state_;
  ::google::protobuf::internal::ArenaStringPtr config_id_;
  ::google::protobuf::internal::ArenaStringPtr class_id_;
  ::google::protobuf::int32 scene_id_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static PlayerEntryInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckPlayerEntryList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckPlayerEntryList) */ {
 public:
  AckPlayerEntryList();
  virtual ~AckPlayerEntryList();

  AckPlayerEntryList(const AckPlayerEntryList& from);

  inline AckPlayerEntryList& operator=(const AckPlayerEntryList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckPlayerEntryList& default_instance();

  void Swap(AckPlayerEntryList* other);

  // implements Message ----------------------------------------------

  inline AckPlayerEntryList* New() const { return New(NULL); }

  AckPlayerEntryList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckPlayerEntryList& from);
  void MergeFrom(const AckPlayerEntryList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AckPlayerEntryList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFMsg.PlayerEntryInfo object_list = 1;
  int object_list_size() const;
  void clear_object_list();
  static const int kObjectListFieldNumber = 1;
  const ::AFMsg::PlayerEntryInfo& object_list(int index) const;
  ::AFMsg::PlayerEntryInfo* mutable_object_list(int index);
  ::AFMsg::PlayerEntryInfo* add_object_list();
  ::google::protobuf::RepeatedPtrField< ::AFMsg::PlayerEntryInfo >*
      mutable_object_list();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::PlayerEntryInfo >&
      object_list() const;

  // @@protoc_insertion_point(class_scope:AFMsg.AckPlayerEntryList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::PlayerEntryInfo > object_list_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static AckPlayerEntryList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckPlayerLeaveList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckPlayerLeaveList) */ {
 public:
  AckPlayerLeaveList();
  virtual ~AckPlayerLeaveList();

  AckPlayerLeaveList(const AckPlayerLeaveList& from);

  inline AckPlayerLeaveList& operator=(const AckPlayerLeaveList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckPlayerLeaveList& default_instance();

  void Swap(AckPlayerLeaveList* other);

  // implements Message ----------------------------------------------

  inline AckPlayerLeaveList* New() const { return New(NULL); }

  AckPlayerLeaveList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckPlayerLeaveList& from);
  void MergeFrom(const AckPlayerLeaveList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AckPlayerLeaveList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFMsg.Ident object_list = 1;
  int object_list_size() const;
  void clear_object_list();
  static const int kObjectListFieldNumber = 1;
  const ::AFMsg::Ident& object_list(int index) const;
  ::AFMsg::Ident* mutable_object_list(int index);
  ::AFMsg::Ident* add_object_list();
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
      mutable_object_list();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
      object_list() const;

  // @@protoc_insertion_point(class_scope:AFMsg.AckPlayerLeaveList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident > object_list_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static AckPlayerLeaveList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckSynData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckSynData) */ {
 public:
  ReqAckSynData();
  virtual ~ReqAckSynData();

  ReqAckSynData(const ReqAckSynData& from);

  inline ReqAckSynData& operator=(const ReqAckSynData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckSynData& default_instance();

  void Swap(ReqAckSynData* other);

  // implements Message ----------------------------------------------

  inline ReqAckSynData* New() const { return New(NULL); }

  ReqAckSynData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckSynData& from);
  void MergeFrom(const ReqAckSynData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqAckSynData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqAckSynData_SynType SynType;
  static const SynType EST_SCENE =
    ReqAckSynData_SynType_EST_SCENE;
  static const SynType EST_GROUP =
    ReqAckSynData_SynType_EST_GROUP;
  static const SynType EST_GUILD =
    ReqAckSynData_SynType_EST_GUILD;
  static const SynType EST_FRIEND =
    ReqAckSynData_SynType_EST_FRIEND;
  static inline bool SynType_IsValid(int value) {
    return ReqAckSynData_SynType_IsValid(value);
  }
  static const SynType SynType_MIN =
    ReqAckSynData_SynType_SynType_MIN;
  static const SynType SynType_MAX =
    ReqAckSynData_SynType_SynType_MAX;
  static const int SynType_ARRAYSIZE =
    ReqAckSynData_SynType_SynType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SynType_descriptor() {
    return ReqAckSynData_SynType_descriptor();
  }
  static inline const ::std::string& SynType_Name(SynType value) {
    return ReqAckSynData_SynType_Name(value);
  }
  static inline bool SynType_Parse(const ::std::string& name,
      SynType* value) {
    return ReqAckSynData_SynType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident syser = 1;
  bool has_syser() const;
  void clear_syser();
  static const int kSyserFieldNumber = 1;
  const ::AFMsg::Ident& syser() const;
  ::AFMsg::Ident* mutable_syser();
  ::AFMsg::Ident* release_syser();
  void set_allocated_syser(::AFMsg::Ident* syser);

  // repeated .AFMsg.Ident object_list = 2;
  int object_list_size() const;
  void clear_object_list();
  static const int kObjectListFieldNumber = 2;
  const ::AFMsg::Ident& object_list(int index) const;
  ::AFMsg::Ident* mutable_object_list(int index);
  ::AFMsg::Ident* add_object_list();
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
      mutable_object_list();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
      object_list() const;

  // required bytes data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // required .AFMsg.ReqAckSynData.SynType syn_type = 4;
  bool has_syn_type() const;
  void clear_syn_type();
  static const int kSynTypeFieldNumber = 4;
  ::AFMsg::ReqAckSynData_SynType syn_type() const;
  void set_syn_type(::AFMsg::ReqAckSynData_SynType value);

  // required .AFMsg.EGameMsgID msg_id = 5;
  bool has_msg_id() const;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 5;
  ::AFMsg::EGameMsgID msg_id() const;
  void set_msg_id(::AFMsg::EGameMsgID value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckSynData)
 private:
  inline void set_has_syser();
  inline void clear_has_syser();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_syn_type();
  inline void clear_has_syn_type();
  inline void set_has_msg_id();
  inline void clear_has_msg_id();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* syser_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident > object_list_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int syn_type_;
  int msg_id_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckSynData* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckPlayerMove : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckPlayerMove) */ {
 public:
  ReqAckPlayerMove();
  virtual ~ReqAckPlayerMove();

  ReqAckPlayerMove(const ReqAckPlayerMove& from);

  inline ReqAckPlayerMove& operator=(const ReqAckPlayerMove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckPlayerMove& default_instance();

  void Swap(ReqAckPlayerMove* other);

  // implements Message ----------------------------------------------

  inline ReqAckPlayerMove* New() const { return New(NULL); }

  ReqAckPlayerMove* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckPlayerMove& from);
  void MergeFrom(const ReqAckPlayerMove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqAckPlayerMove* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident mover = 1;
  bool has_mover() const;
  void clear_mover();
  static const int kMoverFieldNumber = 1;
  const ::AFMsg::Ident& mover() const;
  ::AFMsg::Ident* mutable_mover();
  ::AFMsg::Ident* release_mover();
  void set_allocated_mover(::AFMsg::Ident* mover);

  // required int32 moveType = 2;
  bool has_movetype() const;
  void clear_movetype();
  static const int kMoveTypeFieldNumber = 2;
  ::google::protobuf::int32 movetype() const;
  void set_movetype(::google::protobuf::int32 value);

  // repeated .AFMsg.Position target_pos = 3;
  int target_pos_size() const;
  void clear_target_pos();
  static const int kTargetPosFieldNumber = 3;
  const ::AFMsg::Position& target_pos(int index) const;
  ::AFMsg::Position* mutable_target_pos(int index);
  ::AFMsg::Position* add_target_pos();
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Position >*
      mutable_target_pos();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::Position >&
      target_pos() const;

  // repeated .AFMsg.Position source_pos = 4;
  int source_pos_size() const;
  void clear_source_pos();
  static const int kSourcePosFieldNumber = 4;
  const ::AFMsg::Position& source_pos(int index) const;
  ::AFMsg::Position* mutable_source_pos(int index);
  ::AFMsg::Position* add_source_pos();
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Position >*
      mutable_source_pos();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::Position >&
      source_pos() const;

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckPlayerMove)
 private:
  inline void set_has_mover();
  inline void clear_has_mover();
  inline void set_has_movetype();
  inline void clear_has_movetype();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* mover_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Position > target_pos_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Position > source_pos_;
  ::google::protobuf::int32 movetype_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckPlayerMove* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ChatContainer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ChatContainer) */ {
 public:
  ChatContainer();
  virtual ~ChatContainer();

  ChatContainer(const ChatContainer& from);

  inline ChatContainer& operator=(const ChatContainer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatContainer& default_instance();

  void Swap(ChatContainer* other);

  // implements Message ----------------------------------------------

  inline ChatContainer* New() const { return New(NULL); }

  ChatContainer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatContainer& from);
  void MergeFrom(const ChatContainer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChatContainer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ChatContainer_ContainerType ContainerType;
  static const ContainerType EGCT_ITEM =
    ChatContainer_ContainerType_EGCT_ITEM;
  static inline bool ContainerType_IsValid(int value) {
    return ChatContainer_ContainerType_IsValid(value);
  }
  static const ContainerType ContainerType_MIN =
    ChatContainer_ContainerType_ContainerType_MIN;
  static const ContainerType ContainerType_MAX =
    ChatContainer_ContainerType_ContainerType_MAX;
  static const int ContainerType_ARRAYSIZE =
    ChatContainer_ContainerType_ContainerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ContainerType_descriptor() {
    return ChatContainer_ContainerType_descriptor();
  }
  static inline const ::std::string& ContainerType_Name(ContainerType value) {
    return ChatContainer_ContainerType_Name(value);
  }
  static inline bool ContainerType_Parse(const ::std::string& name,
      ContainerType* value) {
    return ChatContainer_ContainerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 ConTainerType = 2;
  bool has_containertype() const;
  void clear_containertype();
  static const int kConTainerTypeFieldNumber = 2;
  ::google::protobuf::int32 containertype() const;
  void set_containertype(::google::protobuf::int32 value);

  // required bytes data_info = 3;
  bool has_data_info() const;
  void clear_data_info();
  static const int kDataInfoFieldNumber = 3;
  const ::std::string& data_info() const;
  void set_data_info(const ::std::string& value);
  void set_data_info(const char* value);
  void set_data_info(const void* value, size_t size);
  ::std::string* mutable_data_info();
  ::std::string* release_data_info();
  void set_allocated_data_info(::std::string* data_info);

  // @@protoc_insertion_point(class_scope:AFMsg.ChatContainer)
 private:
  inline void set_has_containertype();
  inline void clear_has_containertype();
  inline void set_has_data_info();
  inline void clear_has_data_info();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_info_;
  ::google::protobuf::int32 containertype_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ChatContainer* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckPlayerChat : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckPlayerChat) */ {
 public:
  ReqAckPlayerChat();
  virtual ~ReqAckPlayerChat();

  ReqAckPlayerChat(const ReqAckPlayerChat& from);

  inline ReqAckPlayerChat& operator=(const ReqAckPlayerChat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckPlayerChat& default_instance();

  void Swap(ReqAckPlayerChat* other);

  // implements Message ----------------------------------------------

  inline ReqAckPlayerChat* New() const { return New(NULL); }

  ReqAckPlayerChat* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckPlayerChat& from);
  void MergeFrom(const ReqAckPlayerChat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqAckPlayerChat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqAckPlayerChat_EGameChatType EGameChatType;
  static const EGameChatType EGCT_GUILD =
    ReqAckPlayerChat_EGameChatType_EGCT_GUILD;
  static const EGameChatType EGCT_PRIVATE =
    ReqAckPlayerChat_EGameChatType_EGCT_PRIVATE;
  static const EGameChatType EGCT_TEAM =
    ReqAckPlayerChat_EGameChatType_EGCT_TEAM;
  static const EGameChatType EGCT_WORLD =
    ReqAckPlayerChat_EGameChatType_EGCT_WORLD;
  static inline bool EGameChatType_IsValid(int value) {
    return ReqAckPlayerChat_EGameChatType_IsValid(value);
  }
  static const EGameChatType EGameChatType_MIN =
    ReqAckPlayerChat_EGameChatType_EGameChatType_MIN;
  static const EGameChatType EGameChatType_MAX =
    ReqAckPlayerChat_EGameChatType_EGameChatType_MAX;
  static const int EGameChatType_ARRAYSIZE =
    ReqAckPlayerChat_EGameChatType_EGameChatType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EGameChatType_descriptor() {
    return ReqAckPlayerChat_EGameChatType_descriptor();
  }
  static inline const ::std::string& EGameChatType_Name(EGameChatType value) {
    return ReqAckPlayerChat_EGameChatType_Name(value);
  }
  static inline bool EGameChatType_Parse(const ::std::string& name,
      EGameChatType* value) {
    return ReqAckPlayerChat_EGameChatType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident chat_id = 1;
  bool has_chat_id() const;
  void clear_chat_id();
  static const int kChatIdFieldNumber = 1;
  const ::AFMsg::Ident& chat_id() const;
  ::AFMsg::Ident* mutable_chat_id();
  ::AFMsg::Ident* release_chat_id();
  void set_allocated_chat_id(::AFMsg::Ident* chat_id);

  // required .AFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
  bool has_chat_type() const;
  void clear_chat_type();
  static const int kChatTypeFieldNumber = 2;
  ::AFMsg::ReqAckPlayerChat_EGameChatType chat_type() const;
  void set_chat_type(::AFMsg::ReqAckPlayerChat_EGameChatType value);

  // required bytes chat_info = 3;
  bool has_chat_info() const;
  void clear_chat_info();
  static const int kChatInfoFieldNumber = 3;
  const ::std::string& chat_info() const;
  void set_chat_info(const ::std::string& value);
  void set_chat_info(const char* value);
  void set_chat_info(const void* value, size_t size);
  ::std::string* mutable_chat_info();
  ::std::string* release_chat_info();
  void set_allocated_chat_info(::std::string* chat_info);

  // required bytes chat_name = 4;
  bool has_chat_name() const;
  void clear_chat_name();
  static const int kChatNameFieldNumber = 4;
  const ::std::string& chat_name() const;
  void set_chat_name(const ::std::string& value);
  void set_chat_name(const char* value);
  void set_chat_name(const void* value, size_t size);
  ::std::string* mutable_chat_name();
  ::std::string* release_chat_name();
  void set_allocated_chat_name(::std::string* chat_name);

  // optional .AFMsg.Ident target_id = 5;
  bool has_target_id() const;
  void clear_target_id();
  static const int kTargetIdFieldNumber = 5;
  const ::AFMsg::Ident& target_id() const;
  ::AFMsg::Ident* mutable_target_id();
  ::AFMsg::Ident* release_target_id();
  void set_allocated_target_id(::AFMsg::Ident* target_id);

  // repeated .AFMsg.ChatContainer Container_data = 6;
  int container_data_size() const;
  void clear_container_data();
  static const int kContainerDataFieldNumber = 6;
  const ::AFMsg::ChatContainer& container_data(int index) const;
  ::AFMsg::ChatContainer* mutable_container_data(int index);
  ::AFMsg::ChatContainer* add_container_data();
  ::google::protobuf::RepeatedPtrField< ::AFMsg::ChatContainer >*
      mutable_container_data();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::ChatContainer >&
      container_data() const;

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckPlayerChat)
 private:
  inline void set_has_chat_id();
  inline void clear_has_chat_id();
  inline void set_has_chat_type();
  inline void clear_has_chat_type();
  inline void set_has_chat_info();
  inline void clear_has_chat_info();
  inline void set_has_chat_name();
  inline void clear_has_chat_name();
  inline void set_has_target_id();
  inline void clear_has_target_id();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* chat_id_;
  ::google::protobuf::internal::ArenaStringPtr chat_info_;
  ::google::protobuf::internal::ArenaStringPtr chat_name_;
  ::AFMsg::Ident* target_id_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::ChatContainer > container_data_;
  int chat_type_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckPlayerChat* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT EffectData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.EffectData) */ {
 public:
  EffectData();
  virtual ~EffectData();

  EffectData(const EffectData& from);

  inline EffectData& operator=(const EffectData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EffectData& default_instance();

  void Swap(EffectData* other);

  // implements Message ----------------------------------------------

  inline EffectData* New() const { return New(NULL); }

  EffectData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EffectData& from);
  void MergeFrom(const EffectData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EffectData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EffectData_EResultType EResultType;
  static const EResultType EET_SUCCESS =
    EffectData_EResultType_EET_SUCCESS;
  static const EResultType EET_FAIL =
    EffectData_EResultType_EET_FAIL;
  static const EResultType EET_REFUSE =
    EffectData_EResultType_EET_REFUSE;
  static inline bool EResultType_IsValid(int value) {
    return EffectData_EResultType_IsValid(value);
  }
  static const EResultType EResultType_MIN =
    EffectData_EResultType_EResultType_MIN;
  static const EResultType EResultType_MAX =
    EffectData_EResultType_EResultType_MAX;
  static const int EResultType_ARRAYSIZE =
    EffectData_EResultType_EResultType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EResultType_descriptor() {
    return EffectData_EResultType_descriptor();
  }
  static inline const ::std::string& EResultType_Name(EResultType value) {
    return EffectData_EResultType_Name(value);
  }
  static inline bool EResultType_Parse(const ::std::string& name,
      EResultType* value) {
    return EffectData_EResultType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident effect_ident = 1;
  bool has_effect_ident() const;
  void clear_effect_ident();
  static const int kEffectIdentFieldNumber = 1;
  const ::AFMsg::Ident& effect_ident() const;
  ::AFMsg::Ident* mutable_effect_ident();
  ::AFMsg::Ident* release_effect_ident();
  void set_allocated_effect_ident(::AFMsg::Ident* effect_ident);

  // required int32 effect_value = 2;
  bool has_effect_value() const;
  void clear_effect_value();
  static const int kEffectValueFieldNumber = 2;
  ::google::protobuf::int32 effect_value() const;
  void set_effect_value(::google::protobuf::int32 value);

  // required .AFMsg.EffectData.EResultType effect_rlt = 3;
  bool has_effect_rlt() const;
  void clear_effect_rlt();
  static const int kEffectRltFieldNumber = 3;
  ::AFMsg::EffectData_EResultType effect_rlt() const;
  void set_effect_rlt(::AFMsg::EffectData_EResultType value);

  // @@protoc_insertion_point(class_scope:AFMsg.EffectData)
 private:
  inline void set_has_effect_ident();
  inline void clear_has_effect_ident();
  inline void set_has_effect_value();
  inline void clear_has_effect_value();
  inline void set_has_effect_rlt();
  inline void clear_has_effect_rlt();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* effect_ident_;
  ::google::protobuf::int32 effect_value_;
  int effect_rlt_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static EffectData* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckUseSkill : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckUseSkill) */ {
 public:
  ReqAckUseSkill();
  virtual ~ReqAckUseSkill();

  ReqAckUseSkill(const ReqAckUseSkill& from);

  inline ReqAckUseSkill& operator=(const ReqAckUseSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckUseSkill& default_instance();

  void Swap(ReqAckUseSkill* other);

  // implements Message ----------------------------------------------

  inline ReqAckUseSkill* New() const { return New(NULL); }

  ReqAckUseSkill* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckUseSkill& from);
  void MergeFrom(const ReqAckUseSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqAckUseSkill* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident user = 1;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::AFMsg::Ident& user() const;
  ::AFMsg::Ident* mutable_user();
  ::AFMsg::Ident* release_user();
  void set_allocated_user(::AFMsg::Ident* user);

  // required bytes skill_id = 2;
  bool has_skill_id() const;
  void clear_skill_id();
  static const int kSkillIdFieldNumber = 2;
  const ::std::string& skill_id() const;
  void set_skill_id(const ::std::string& value);
  void set_skill_id(const char* value);
  void set_skill_id(const void* value, size_t size);
  ::std::string* mutable_skill_id();
  ::std::string* release_skill_id();
  void set_allocated_skill_id(::std::string* skill_id);

  // required .AFMsg.Position now_pos = 3;
  bool has_now_pos() const;
  void clear_now_pos();
  static const int kNowPosFieldNumber = 3;
  const ::AFMsg::Position& now_pos() const;
  ::AFMsg::Position* mutable_now_pos();
  ::AFMsg::Position* release_now_pos();
  void set_allocated_now_pos(::AFMsg::Position* now_pos);

  // required .AFMsg.Position tar_pos = 4;
  bool has_tar_pos() const;
  void clear_tar_pos();
  static const int kTarPosFieldNumber = 4;
  const ::AFMsg::Position& tar_pos() const;
  ::AFMsg::Position* mutable_tar_pos();
  ::AFMsg::Position* release_tar_pos();
  void set_allocated_tar_pos(::AFMsg::Position* tar_pos);

  // required int32 use_index = 5;
  bool has_use_index() const;
  void clear_use_index();
  static const int kUseIndexFieldNumber = 5;
  ::google::protobuf::int32 use_index() const;
  void set_use_index(::google::protobuf::int32 value);

  // repeated .AFMsg.EffectData effect_data = 6;
  int effect_data_size() const;
  void clear_effect_data();
  static const int kEffectDataFieldNumber = 6;
  const ::AFMsg::EffectData& effect_data(int index) const;
  ::AFMsg::EffectData* mutable_effect_data(int index);
  ::AFMsg::EffectData* add_effect_data();
  ::google::protobuf::RepeatedPtrField< ::AFMsg::EffectData >*
      mutable_effect_data();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::EffectData >&
      effect_data() const;

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckUseSkill)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_now_pos();
  inline void clear_has_now_pos();
  inline void set_has_tar_pos();
  inline void clear_has_tar_pos();
  inline void set_has_use_index();
  inline void clear_has_use_index();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* user_;
  ::google::protobuf::internal::ArenaStringPtr skill_id_;
  ::AFMsg::Position* now_pos_;
  ::AFMsg::Position* tar_pos_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::EffectData > effect_data_;
  ::google::protobuf::int32 use_index_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckUseSkill* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckUseItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckUseItem) */ {
 public:
  ReqAckUseItem();
  virtual ~ReqAckUseItem();

  ReqAckUseItem(const ReqAckUseItem& from);

  inline ReqAckUseItem& operator=(const ReqAckUseItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckUseItem& default_instance();

  void Swap(ReqAckUseItem* other);

  // implements Message ----------------------------------------------

  inline ReqAckUseItem* New() const { return New(NULL); }

  ReqAckUseItem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckUseItem& from);
  void MergeFrom(const ReqAckUseItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqAckUseItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident user = 1;
  bool has_user() const;
  void clear_user();
  static const int kUserFieldNumber = 1;
  const ::AFMsg::Ident& user() const;
  ::AFMsg::Ident* mutable_user();
  ::AFMsg::Ident* release_user();
  void set_allocated_user(::AFMsg::Ident* user);

  // required .AFMsg.Ident item_guid = 2;
  bool has_item_guid() const;
  void clear_item_guid();
  static const int kItemGuidFieldNumber = 2;
  const ::AFMsg::Ident& item_guid() const;
  ::AFMsg::Ident* mutable_item_guid();
  ::AFMsg::Ident* release_item_guid();
  void set_allocated_item_guid(::AFMsg::Ident* item_guid);

  // repeated .AFMsg.EffectData effect_data = 3;
  int effect_data_size() const;
  void clear_effect_data();
  static const int kEffectDataFieldNumber = 3;
  const ::AFMsg::EffectData& effect_data(int index) const;
  ::AFMsg::EffectData* mutable_effect_data(int index);
  ::AFMsg::EffectData* add_effect_data();
  ::google::protobuf::RepeatedPtrField< ::AFMsg::EffectData >*
      mutable_effect_data();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::EffectData >&
      effect_data() const;

  // required .AFMsg.ItemStruct item = 4;
  bool has_item() const;
  void clear_item();
  static const int kItemFieldNumber = 4;
  const ::AFMsg::ItemStruct& item() const;
  ::AFMsg::ItemStruct* mutable_item();
  ::AFMsg::ItemStruct* release_item();
  void set_allocated_item(::AFMsg::ItemStruct* item);

  // required .AFMsg.Ident targetid = 5;
  bool has_targetid() const;
  void clear_targetid();
  static const int kTargetidFieldNumber = 5;
  const ::AFMsg::Ident& targetid() const;
  ::AFMsg::Ident* mutable_targetid();
  ::AFMsg::Ident* release_targetid();
  void set_allocated_targetid(::AFMsg::Ident* targetid);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckUseItem)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_item_guid();
  inline void clear_has_item_guid();
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_targetid();
  inline void clear_has_targetid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* user_;
  ::AFMsg::Ident* item_guid_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::EffectData > effect_data_;
  ::AFMsg::ItemStruct* item_;
  ::AFMsg::Ident* targetid_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckUseItem* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckSwapScene : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckSwapScene) */ {
 public:
  ReqAckSwapScene();
  virtual ~ReqAckSwapScene();

  ReqAckSwapScene(const ReqAckSwapScene& from);

  inline ReqAckSwapScene& operator=(const ReqAckSwapScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckSwapScene& default_instance();

  void Swap(ReqAckSwapScene* other);

  // implements Message ----------------------------------------------

  inline ReqAckSwapScene* New() const { return New(NULL); }

  ReqAckSwapScene* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckSwapScene& from);
  void MergeFrom(const ReqAckSwapScene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqAckSwapScene* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqAckSwapScene_EGameSwapType EGameSwapType;
  static const EGameSwapType EGST_NARMAL =
    ReqAckSwapScene_EGameSwapType_EGST_NARMAL;
  static const EGameSwapType EGST_CLONE =
    ReqAckSwapScene_EGameSwapType_EGST_CLONE;
  static const EGameSwapType EGST_ARENA =
    ReqAckSwapScene_EGameSwapType_EGST_ARENA;
  static const EGameSwapType EGST_MIRROR =
    ReqAckSwapScene_EGameSwapType_EGST_MIRROR;
  static inline bool EGameSwapType_IsValid(int value) {
    return ReqAckSwapScene_EGameSwapType_IsValid(value);
  }
  static const EGameSwapType EGameSwapType_MIN =
    ReqAckSwapScene_EGameSwapType_EGameSwapType_MIN;
  static const EGameSwapType EGameSwapType_MAX =
    ReqAckSwapScene_EGameSwapType_EGameSwapType_MAX;
  static const int EGameSwapType_ARRAYSIZE =
    ReqAckSwapScene_EGameSwapType_EGameSwapType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EGameSwapType_descriptor() {
    return ReqAckSwapScene_EGameSwapType_descriptor();
  }
  static inline const ::std::string& EGameSwapType_Name(EGameSwapType value) {
    return ReqAckSwapScene_EGameSwapType_Name(value);
  }
  static inline bool EGameSwapType_Parse(const ::std::string& name,
      EGameSwapType* value) {
    return ReqAckSwapScene_EGameSwapType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .AFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
  bool has_transfer_type() const;
  void clear_transfer_type();
  static const int kTransferTypeFieldNumber = 1;
  ::AFMsg::ReqAckSwapScene_EGameSwapType transfer_type() const;
  void set_transfer_type(::AFMsg::ReqAckSwapScene_EGameSwapType value);

  // required int32 scene_id = 2;
  bool has_scene_id() const;
  void clear_scene_id();
  static const int kSceneIdFieldNumber = 2;
  ::google::protobuf::int32 scene_id() const;
  void set_scene_id(::google::protobuf::int32 value);

  // required int32 line_id = 3;
  bool has_line_id() const;
  void clear_line_id();
  static const int kLineIdFieldNumber = 3;
  ::google::protobuf::int32 line_id() const;
  void set_line_id(::google::protobuf::int32 value);

  // optional float x = 4;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 4;
  float x() const;
  void set_x(float value);

  // optional float y = 5;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 5;
  float y() const;
  void set_y(float value);

  // optional float z = 6;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 6;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckSwapScene)
 private:
  inline void set_has_transfer_type();
  inline void clear_has_transfer_type();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();
  inline void set_has_line_id();
  inline void clear_has_line_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int transfer_type_;
  ::google::protobuf::int32 scene_id_;
  ::google::protobuf::int32 line_id_;
  float x_;
  float y_;
  float z_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckSwapScene* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ItemStruct : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ItemStruct) */ {
 public:
  ItemStruct();
  virtual ~ItemStruct();

  ItemStruct(const ItemStruct& from);

  inline ItemStruct& operator=(const ItemStruct& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemStruct& default_instance();

  void Swap(ItemStruct* other);

  // implements Message ----------------------------------------------

  inline ItemStruct* New() const { return New(NULL); }

  ItemStruct* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemStruct& from);
  void MergeFrom(const ItemStruct& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ItemStruct* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string item_id = 1;
  bool has_item_id() const;
  void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  const ::std::string& item_id() const;
  void set_item_id(const ::std::string& value);
  void set_item_id(const char* value);
  void set_item_id(const char* value, size_t size);
  ::std::string* mutable_item_id();
  ::std::string* release_item_id();
  void set_allocated_item_id(::std::string* item_id);

  // required int32 item_count = 2;
  bool has_item_count() const;
  void clear_item_count();
  static const int kItemCountFieldNumber = 2;
  ::google::protobuf::int32 item_count() const;
  void set_item_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ItemStruct)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_count();
  inline void clear_has_item_count();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr item_id_;
  ::google::protobuf::int32 item_count_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ItemStruct* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT CurrencyStruct : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.CurrencyStruct) */ {
 public:
  CurrencyStruct();
  virtual ~CurrencyStruct();

  CurrencyStruct(const CurrencyStruct& from);

  inline CurrencyStruct& operator=(const CurrencyStruct& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CurrencyStruct& default_instance();

  void Swap(CurrencyStruct* other);

  // implements Message ----------------------------------------------

  inline CurrencyStruct* New() const { return New(NULL); }

  CurrencyStruct* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CurrencyStruct& from);
  void MergeFrom(const CurrencyStruct& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CurrencyStruct* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 currency_type = 1;
  bool has_currency_type() const;
  void clear_currency_type();
  static const int kCurrencyTypeFieldNumber = 1;
  ::google::protobuf::int32 currency_type() const;
  void set_currency_type(::google::protobuf::int32 value);

  // required int32 currency_count = 2;
  bool has_currency_count() const;
  void clear_currency_count();
  static const int kCurrencyCountFieldNumber = 2;
  ::google::protobuf::int32 currency_count() const;
  void set_currency_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.CurrencyStruct)
 private:
  inline void set_has_currency_type();
  inline void clear_has_currency_type();
  inline void set_has_currency_count();
  inline void clear_has_currency_count();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 currency_type_;
  ::google::protobuf::int32 currency_count_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static CurrencyStruct* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckEndBattle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckEndBattle) */ {
 public:
  ReqAckEndBattle();
  virtual ~ReqAckEndBattle();

  ReqAckEndBattle(const ReqAckEndBattle& from);

  inline ReqAckEndBattle& operator=(const ReqAckEndBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckEndBattle& default_instance();

  void Swap(ReqAckEndBattle* other);

  // implements Message ----------------------------------------------

  inline ReqAckEndBattle* New() const { return New(NULL); }

  ReqAckEndBattle* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckEndBattle& from);
  void MergeFrom(const ReqAckEndBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqAckEndBattle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 money = 1;
  bool has_money() const;
  void clear_money();
  static const int kMoneyFieldNumber = 1;
  ::google::protobuf::int32 money() const;
  void set_money(::google::protobuf::int32 value);

  // required int32 exp = 2;
  bool has_exp() const;
  void clear_exp();
  static const int kExpFieldNumber = 2;
  ::google::protobuf::int32 exp() const;
  void set_exp(::google::protobuf::int32 value);

  // required int32 diamond = 3;
  bool has_diamond() const;
  void clear_diamond();
  static const int kDiamondFieldNumber = 3;
  ::google::protobuf::int32 diamond() const;
  void set_diamond(::google::protobuf::int32 value);

  // repeated .AFMsg.ItemStruct item_list = 4;
  int item_list_size() const;
  void clear_item_list();
  static const int kItemListFieldNumber = 4;
  const ::AFMsg::ItemStruct& item_list(int index) const;
  ::AFMsg::ItemStruct* mutable_item_list(int index);
  ::AFMsg::ItemStruct* add_item_list();
  ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >*
      mutable_item_list();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >&
      item_list() const;

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckEndBattle)
 private:
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_diamond();
  inline void clear_has_diamond();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 money_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct > item_list_;
  ::google::protobuf::int32 diamond_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckEndBattle* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqPickDropItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqPickDropItem) */ {
 public:
  ReqPickDropItem();
  virtual ~ReqPickDropItem();

  ReqPickDropItem(const ReqPickDropItem& from);

  inline ReqPickDropItem& operator=(const ReqPickDropItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqPickDropItem& default_instance();

  void Swap(ReqPickDropItem* other);

  // implements Message ----------------------------------------------

  inline ReqPickDropItem* New() const { return New(NULL); }

  ReqPickDropItem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqPickDropItem& from);
  void MergeFrom(const ReqPickDropItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqPickDropItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident item_guid = 2;
  bool has_item_guid() const;
  void clear_item_guid();
  static const int kItemGuidFieldNumber = 2;
  const ::AFMsg::Ident& item_guid() const;
  ::AFMsg::Ident* mutable_item_guid();
  ::AFMsg::Ident* release_item_guid();
  void set_allocated_item_guid(::AFMsg::Ident* item_guid);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqPickDropItem)
 private:
  inline void set_has_item_guid();
  inline void clear_has_item_guid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* item_guid_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqPickDropItem* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAcceptTask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAcceptTask) */ {
 public:
  ReqAcceptTask();
  virtual ~ReqAcceptTask();

  ReqAcceptTask(const ReqAcceptTask& from);

  inline ReqAcceptTask& operator=(const ReqAcceptTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAcceptTask& default_instance();

  void Swap(ReqAcceptTask* other);

  // implements Message ----------------------------------------------

  inline ReqAcceptTask* New() const { return New(NULL); }

  ReqAcceptTask* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAcceptTask& from);
  void MergeFrom(const ReqAcceptTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqAcceptTask* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes task_id = 1;
  bool has_task_id() const;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  const ::std::string& task_id() const;
  void set_task_id(const ::std::string& value);
  void set_task_id(const char* value);
  void set_task_id(const void* value, size_t size);
  ::std::string* mutable_task_id();
  ::std::string* release_task_id();
  void set_allocated_task_id(::std::string* task_id);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAcceptTask)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr task_id_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAcceptTask* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqCompeleteTask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqCompeleteTask) */ {
 public:
  ReqCompeleteTask();
  virtual ~ReqCompeleteTask();

  ReqCompeleteTask(const ReqCompeleteTask& from);

  inline ReqCompeleteTask& operator=(const ReqCompeleteTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqCompeleteTask& default_instance();

  void Swap(ReqCompeleteTask* other);

  // implements Message ----------------------------------------------

  inline ReqCompeleteTask* New() const { return New(NULL); }

  ReqCompeleteTask* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqCompeleteTask& from);
  void MergeFrom(const ReqCompeleteTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqCompeleteTask* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes task_id = 1;
  bool has_task_id() const;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  const ::std::string& task_id() const;
  void set_task_id(const ::std::string& value);
  void set_task_id(const char* value);
  void set_task_id(const void* value, size_t size);
  ::std::string* mutable_task_id();
  ::std::string* release_task_id();
  void set_allocated_task_id(::std::string* task_id);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqCompeleteTask)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr task_id_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqCompeleteTask* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckJoinActivity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckJoinActivity) */ {
 public:
  ReqAckJoinActivity();
  virtual ~ReqAckJoinActivity();

  ReqAckJoinActivity(const ReqAckJoinActivity& from);

  inline ReqAckJoinActivity& operator=(const ReqAckJoinActivity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckJoinActivity& default_instance();

  void Swap(ReqAckJoinActivity* other);

  // implements Message ----------------------------------------------

  inline ReqAckJoinActivity* New() const { return New(NULL); }

  ReqAckJoinActivity* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckJoinActivity& from);
  void MergeFrom(const ReqAckJoinActivity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqAckJoinActivity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqAckJoinActivity_EGameActivityType EGameActivityType;
  static const EGameActivityType EGAT_PVP =
    ReqAckJoinActivity_EGameActivityType_EGAT_PVP;
  static inline bool EGameActivityType_IsValid(int value) {
    return ReqAckJoinActivity_EGameActivityType_IsValid(value);
  }
  static const EGameActivityType EGameActivityType_MIN =
    ReqAckJoinActivity_EGameActivityType_EGameActivityType_MIN;
  static const EGameActivityType EGameActivityType_MAX =
    ReqAckJoinActivity_EGameActivityType_EGameActivityType_MAX;
  static const int EGameActivityType_ARRAYSIZE =
    ReqAckJoinActivity_EGameActivityType_EGameActivityType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EGameActivityType_descriptor() {
    return ReqAckJoinActivity_EGameActivityType_descriptor();
  }
  static inline const ::std::string& EGameActivityType_Name(EGameActivityType value) {
    return ReqAckJoinActivity_EGameActivityType_Name(value);
  }
  static inline bool EGameActivityType_Parse(const ::std::string& name,
      EGameActivityType* value) {
    return ReqAckJoinActivity_EGameActivityType_Parse(name, value);
  }

  typedef ReqAckJoinActivity_EGameActivitySubType EGameActivitySubType;
  static const EGameActivitySubType EGAT_NORMAL =
    ReqAckJoinActivity_EGameActivitySubType_EGAT_NORMAL;
  static inline bool EGameActivitySubType_IsValid(int value) {
    return ReqAckJoinActivity_EGameActivitySubType_IsValid(value);
  }
  static const EGameActivitySubType EGameActivitySubType_MIN =
    ReqAckJoinActivity_EGameActivitySubType_EGameActivitySubType_MIN;
  static const EGameActivitySubType EGameActivitySubType_MAX =
    ReqAckJoinActivity_EGameActivitySubType_EGameActivitySubType_MAX;
  static const int EGameActivitySubType_ARRAYSIZE =
    ReqAckJoinActivity_EGameActivitySubType_EGameActivitySubType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EGameActivitySubType_descriptor() {
    return ReqAckJoinActivity_EGameActivitySubType_descriptor();
  }
  static inline const ::std::string& EGameActivitySubType_Name(EGameActivitySubType value) {
    return ReqAckJoinActivity_EGameActivitySubType_Name(value);
  }
  static inline bool EGameActivitySubType_Parse(const ::std::string& name,
      EGameActivitySubType* value) {
    return ReqAckJoinActivity_EGameActivitySubType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .AFMsg.ReqAckJoinActivity.EGameActivityType activity_type = 1;
  bool has_activity_type() const;
  void clear_activity_type();
  static const int kActivityTypeFieldNumber = 1;
  ::AFMsg::ReqAckJoinActivity_EGameActivityType activity_type() const;
  void set_activity_type(::AFMsg::ReqAckJoinActivity_EGameActivityType value);

  // required .AFMsg.ReqAckJoinActivity.EGameActivitySubType sub_activity_type = 2;
  bool has_sub_activity_type() const;
  void clear_sub_activity_type();
  static const int kSubActivityTypeFieldNumber = 2;
  ::AFMsg::ReqAckJoinActivity_EGameActivitySubType sub_activity_type() const;
  void set_sub_activity_type(::AFMsg::ReqAckJoinActivity_EGameActivitySubType value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckJoinActivity)
 private:
  inline void set_has_activity_type();
  inline void clear_has_activity_type();
  inline void set_has_sub_activity_type();
  inline void clear_has_sub_activity_type();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int activity_type_;
  int sub_activity_type_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckJoinActivity* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckSearchOppnent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckSearchOppnent) */ {
 public:
  ReqAckSearchOppnent();
  virtual ~ReqAckSearchOppnent();

  ReqAckSearchOppnent(const ReqAckSearchOppnent& from);

  inline ReqAckSearchOppnent& operator=(const ReqAckSearchOppnent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckSearchOppnent& default_instance();

  void Swap(ReqAckSearchOppnent* other);

  // implements Message ----------------------------------------------

  inline ReqAckSearchOppnent* New() const { return New(NULL); }

  ReqAckSearchOppnent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckSearchOppnent& from);
  void MergeFrom(const ReqAckSearchOppnent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqAckSearchOppnent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.EBattleType search_type = 1;
  bool has_search_type() const;
  void clear_search_type();
  static const int kSearchTypeFieldNumber = 1;
  ::AFMsg::EBattleType search_type() const;
  void set_search_type(::AFMsg::EBattleType value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckSearchOppnent)
 private:
  inline void set_has_search_type();
  inline void clear_has_search_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int search_type_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckSearchOppnent* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckBattleOppnent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckBattleOppnent) */ {
 public:
  ReqAckBattleOppnent();
  virtual ~ReqAckBattleOppnent();

  ReqAckBattleOppnent(const ReqAckBattleOppnent& from);

  inline ReqAckBattleOppnent& operator=(const ReqAckBattleOppnent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckBattleOppnent& default_instance();

  void Swap(ReqAckBattleOppnent* other);

  // implements Message ----------------------------------------------

  inline ReqAckBattleOppnent* New() const { return New(NULL); }

  ReqAckBattleOppnent* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckBattleOppnent& from);
  void MergeFrom(const ReqAckBattleOppnent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqAckBattleOppnent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.EBattleType battle_type = 1;
  bool has_battle_type() const;
  void clear_battle_type();
  static const int kBattleTypeFieldNumber = 1;
  ::AFMsg::EBattleType battle_type() const;
  void set_battle_type(::AFMsg::EBattleType value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckBattleOppnent)
 private:
  inline void set_has_battle_type();
  inline void clear_has_battle_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int battle_type_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckBattleOppnent* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckCreateGuild : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckCreateGuild) */ {
 public:
  ReqAckCreateGuild();
  virtual ~ReqAckCreateGuild();

  ReqAckCreateGuild(const ReqAckCreateGuild& from);

  inline ReqAckCreateGuild& operator=(const ReqAckCreateGuild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckCreateGuild& default_instance();

  void Swap(ReqAckCreateGuild* other);

  // implements Message ----------------------------------------------

  inline ReqAckCreateGuild* New() const { return New(NULL); }

  ReqAckCreateGuild* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckCreateGuild& from);
  void MergeFrom(const ReqAckCreateGuild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqAckCreateGuild* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident guild_id = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  const ::AFMsg::Ident& guild_id() const;
  ::AFMsg::Ident* mutable_guild_id();
  ::AFMsg::Ident* release_guild_id();
  void set_allocated_guild_id(::AFMsg::Ident* guild_id);

  // required string guild_name = 2;
  bool has_guild_name() const;
  void clear_guild_name();
  static const int kGuildNameFieldNumber = 2;
  const ::std::string& guild_name() const;
  void set_guild_name(const ::std::string& value);
  void set_guild_name(const char* value);
  void set_guild_name(const char* value, size_t size);
  ::std::string* mutable_guild_name();
  ::std::string* release_guild_name();
  void set_allocated_guild_name(::std::string* guild_name);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckCreateGuild)
 private:
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_guild_name();
  inline void clear_has_guild_name();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* guild_id_;
  ::google::protobuf::internal::ArenaStringPtr guild_name_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckCreateGuild* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqSearchGuild : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqSearchGuild) */ {
 public:
  ReqSearchGuild();
  virtual ~ReqSearchGuild();

  ReqSearchGuild(const ReqSearchGuild& from);

  inline ReqSearchGuild& operator=(const ReqSearchGuild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSearchGuild& default_instance();

  void Swap(ReqSearchGuild* other);

  // implements Message ----------------------------------------------

  inline ReqSearchGuild* New() const { return New(NULL); }

  ReqSearchGuild* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqSearchGuild& from);
  void MergeFrom(const ReqSearchGuild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqSearchGuild* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string guild_name = 1;
  bool has_guild_name() const;
  void clear_guild_name();
  static const int kGuildNameFieldNumber = 1;
  const ::std::string& guild_name() const;
  void set_guild_name(const ::std::string& value);
  void set_guild_name(const char* value);
  void set_guild_name(const char* value, size_t size);
  ::std::string* mutable_guild_name();
  ::std::string* release_guild_name();
  void set_allocated_guild_name(::std::string* guild_name);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqSearchGuild)
 private:
  inline void set_has_guild_name();
  inline void clear_has_guild_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr guild_name_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqSearchGuild* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckSearchGuild_SearchGuildObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckSearchGuild.SearchGuildObject) */ {
 public:
  AckSearchGuild_SearchGuildObject();
  virtual ~AckSearchGuild_SearchGuildObject();

  AckSearchGuild_SearchGuildObject(const AckSearchGuild_SearchGuildObject& from);

  inline AckSearchGuild_SearchGuildObject& operator=(const AckSearchGuild_SearchGuildObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckSearchGuild_SearchGuildObject& default_instance();

  void Swap(AckSearchGuild_SearchGuildObject* other);

  // implements Message ----------------------------------------------

  inline AckSearchGuild_SearchGuildObject* New() const { return New(NULL); }

  AckSearchGuild_SearchGuildObject* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckSearchGuild_SearchGuildObject& from);
  void MergeFrom(const AckSearchGuild_SearchGuildObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AckSearchGuild_SearchGuildObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident guild_ID = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIDFieldNumber = 1;
  const ::AFMsg::Ident& guild_id() const;
  ::AFMsg::Ident* mutable_guild_id();
  ::AFMsg::Ident* release_guild_id();
  void set_allocated_guild_id(::AFMsg::Ident* guild_id);

  // required string guild_name = 2;
  bool has_guild_name() const;
  void clear_guild_name();
  static const int kGuildNameFieldNumber = 2;
  const ::std::string& guild_name() const;
  void set_guild_name(const ::std::string& value);
  void set_guild_name(const char* value);
  void set_guild_name(const char* value, size_t size);
  ::std::string* mutable_guild_name();
  ::std::string* release_guild_name();
  void set_allocated_guild_name(::std::string* guild_name);

  // required string guild_icon = 3;
  bool has_guild_icon() const;
  void clear_guild_icon();
  static const int kGuildIconFieldNumber = 3;
  const ::std::string& guild_icon() const;
  void set_guild_icon(const ::std::string& value);
  void set_guild_icon(const char* value);
  void set_guild_icon(const char* value, size_t size);
  ::std::string* mutable_guild_icon();
  ::std::string* release_guild_icon();
  void set_allocated_guild_icon(::std::string* guild_icon);

  // required int32 guild_member_count = 4;
  bool has_guild_member_count() const;
  void clear_guild_member_count();
  static const int kGuildMemberCountFieldNumber = 4;
  ::google::protobuf::int32 guild_member_count() const;
  void set_guild_member_count(::google::protobuf::int32 value);

  // required int32 guild_member_max_count = 5;
  bool has_guild_member_max_count() const;
  void clear_guild_member_max_count();
  static const int kGuildMemberMaxCountFieldNumber = 5;
  ::google::protobuf::int32 guild_member_max_count() const;
  void set_guild_member_max_count(::google::protobuf::int32 value);

  // required int32 guild_honor = 6;
  bool has_guild_honor() const;
  void clear_guild_honor();
  static const int kGuildHonorFieldNumber = 6;
  ::google::protobuf::int32 guild_honor() const;
  void set_guild_honor(::google::protobuf::int32 value);

  // required int32 guild_rank = 7;
  bool has_guild_rank() const;
  void clear_guild_rank();
  static const int kGuildRankFieldNumber = 7;
  ::google::protobuf::int32 guild_rank() const;
  void set_guild_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.AckSearchGuild.SearchGuildObject)
 private:
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_guild_name();
  inline void clear_has_guild_name();
  inline void set_has_guild_icon();
  inline void clear_has_guild_icon();
  inline void set_has_guild_member_count();
  inline void clear_has_guild_member_count();
  inline void set_has_guild_member_max_count();
  inline void clear_has_guild_member_max_count();
  inline void set_has_guild_honor();
  inline void clear_has_guild_honor();
  inline void set_has_guild_rank();
  inline void clear_has_guild_rank();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* guild_id_;
  ::google::protobuf::internal::ArenaStringPtr guild_name_;
  ::google::protobuf::internal::ArenaStringPtr guild_icon_;
  ::google::protobuf::int32 guild_member_count_;
  ::google::protobuf::int32 guild_member_max_count_;
  ::google::protobuf::int32 guild_honor_;
  ::google::protobuf::int32 guild_rank_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static AckSearchGuild_SearchGuildObject* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckSearchGuild : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckSearchGuild) */ {
 public:
  AckSearchGuild();
  virtual ~AckSearchGuild();

  AckSearchGuild(const AckSearchGuild& from);

  inline AckSearchGuild& operator=(const AckSearchGuild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckSearchGuild& default_instance();

  void Swap(AckSearchGuild* other);

  // implements Message ----------------------------------------------

  inline AckSearchGuild* New() const { return New(NULL); }

  AckSearchGuild* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckSearchGuild& from);
  void MergeFrom(const AckSearchGuild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AckSearchGuild* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AckSearchGuild_SearchGuildObject SearchGuildObject;

  // accessors -------------------------------------------------------

  // repeated .AFMsg.AckSearchGuild.SearchGuildObject guild_list = 1;
  int guild_list_size() const;
  void clear_guild_list();
  static const int kGuildListFieldNumber = 1;
  const ::AFMsg::AckSearchGuild_SearchGuildObject& guild_list(int index) const;
  ::AFMsg::AckSearchGuild_SearchGuildObject* mutable_guild_list(int index);
  ::AFMsg::AckSearchGuild_SearchGuildObject* add_guild_list();
  ::google::protobuf::RepeatedPtrField< ::AFMsg::AckSearchGuild_SearchGuildObject >*
      mutable_guild_list();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::AckSearchGuild_SearchGuildObject >&
      guild_list() const;

  // @@protoc_insertion_point(class_scope:AFMsg.AckSearchGuild)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::AckSearchGuild_SearchGuildObject > guild_list_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static AckSearchGuild* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckJoinGuild : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckJoinGuild) */ {
 public:
  ReqAckJoinGuild();
  virtual ~ReqAckJoinGuild();

  ReqAckJoinGuild(const ReqAckJoinGuild& from);

  inline ReqAckJoinGuild& operator=(const ReqAckJoinGuild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckJoinGuild& default_instance();

  void Swap(ReqAckJoinGuild* other);

  // implements Message ----------------------------------------------

  inline ReqAckJoinGuild* New() const { return New(NULL); }

  ReqAckJoinGuild* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckJoinGuild& from);
  void MergeFrom(const ReqAckJoinGuild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqAckJoinGuild* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident guild_id = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  const ::AFMsg::Ident& guild_id() const;
  ::AFMsg::Ident* mutable_guild_id();
  ::AFMsg::Ident* release_guild_id();
  void set_allocated_guild_id(::AFMsg::Ident* guild_id);

  // required string guild_name = 2;
  bool has_guild_name() const;
  void clear_guild_name();
  static const int kGuildNameFieldNumber = 2;
  const ::std::string& guild_name() const;
  void set_guild_name(const ::std::string& value);
  void set_guild_name(const char* value);
  void set_guild_name(const char* value, size_t size);
  ::std::string* mutable_guild_name();
  ::std::string* release_guild_name();
  void set_allocated_guild_name(::std::string* guild_name);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckJoinGuild)
 private:
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_guild_name();
  inline void clear_has_guild_name();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* guild_id_;
  ::google::protobuf::internal::ArenaStringPtr guild_name_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckJoinGuild* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckLeaveGuild : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckLeaveGuild) */ {
 public:
  ReqAckLeaveGuild();
  virtual ~ReqAckLeaveGuild();

  ReqAckLeaveGuild(const ReqAckLeaveGuild& from);

  inline ReqAckLeaveGuild& operator=(const ReqAckLeaveGuild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckLeaveGuild& default_instance();

  void Swap(ReqAckLeaveGuild* other);

  // implements Message ----------------------------------------------

  inline ReqAckLeaveGuild* New() const { return New(NULL); }

  ReqAckLeaveGuild* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckLeaveGuild& from);
  void MergeFrom(const ReqAckLeaveGuild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqAckLeaveGuild* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident guild_id = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  const ::AFMsg::Ident& guild_id() const;
  ::AFMsg::Ident* mutable_guild_id();
  ::AFMsg::Ident* release_guild_id();
  void set_allocated_guild_id(::AFMsg::Ident* guild_id);

  // required string guild_name = 2;
  bool has_guild_name() const;
  void clear_guild_name();
  static const int kGuildNameFieldNumber = 2;
  const ::std::string& guild_name() const;
  void set_guild_name(const ::std::string& value);
  void set_guild_name(const char* value);
  void set_guild_name(const char* value, size_t size);
  ::std::string* mutable_guild_name();
  ::std::string* release_guild_name();
  void set_allocated_guild_name(::std::string* guild_name);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckLeaveGuild)
 private:
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_guild_name();
  inline void clear_has_guild_name();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* guild_id_;
  ::google::protobuf::internal::ArenaStringPtr guild_name_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckLeaveGuild* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckOprGuildMember : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckOprGuildMember) */ {
 public:
  ReqAckOprGuildMember();
  virtual ~ReqAckOprGuildMember();

  ReqAckOprGuildMember(const ReqAckOprGuildMember& from);

  inline ReqAckOprGuildMember& operator=(const ReqAckOprGuildMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckOprGuildMember& default_instance();

  void Swap(ReqAckOprGuildMember* other);

  // implements Message ----------------------------------------------

  inline ReqAckOprGuildMember* New() const { return New(NULL); }

  ReqAckOprGuildMember* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckOprGuildMember& from);
  void MergeFrom(const ReqAckOprGuildMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqAckOprGuildMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqAckOprGuildMember_EGGuildMemberOprType EGGuildMemberOprType;
  static const EGGuildMemberOprType EGAT_DOWN =
    ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_DOWN;
  static const EGGuildMemberOprType EGAT_UP =
    ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_UP;
  static const EGGuildMemberOprType EGAT_KICK =
    ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_KICK;
  static const EGGuildMemberOprType EGAT_APPOINT =
    ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_APPOINT;
  static const EGGuildMemberOprType EGAT_FIRE =
    ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_FIRE;
  static const EGGuildMemberOprType EGAT_DEMISE =
    ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_DEMISE;
  static const EGGuildMemberOprType EGAT_ACCEPTAPPLY =
    ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_ACCEPTAPPLY;
  static const EGGuildMemberOprType EGAT_DENYAPPLY =
    ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_DENYAPPLY;
  static const EGGuildMemberOprType EGAT_KICKOUT =
    ReqAckOprGuildMember_EGGuildMemberOprType_EGAT_KICKOUT;
  static inline bool EGGuildMemberOprType_IsValid(int value) {
    return ReqAckOprGuildMember_EGGuildMemberOprType_IsValid(value);
  }
  static const EGGuildMemberOprType EGGuildMemberOprType_MIN =
    ReqAckOprGuildMember_EGGuildMemberOprType_EGGuildMemberOprType_MIN;
  static const EGGuildMemberOprType EGGuildMemberOprType_MAX =
    ReqAckOprGuildMember_EGGuildMemberOprType_EGGuildMemberOprType_MAX;
  static const int EGGuildMemberOprType_ARRAYSIZE =
    ReqAckOprGuildMember_EGGuildMemberOprType_EGGuildMemberOprType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EGGuildMemberOprType_descriptor() {
    return ReqAckOprGuildMember_EGGuildMemberOprType_descriptor();
  }
  static inline const ::std::string& EGGuildMemberOprType_Name(EGGuildMemberOprType value) {
    return ReqAckOprGuildMember_EGGuildMemberOprType_Name(value);
  }
  static inline bool EGGuildMemberOprType_Parse(const ::std::string& name,
      EGGuildMemberOprType* value) {
    return ReqAckOprGuildMember_EGGuildMemberOprType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident guild_id = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  const ::AFMsg::Ident& guild_id() const;
  ::AFMsg::Ident* mutable_guild_id();
  ::AFMsg::Ident* release_guild_id();
  void set_allocated_guild_id(::AFMsg::Ident* guild_id);

  // required .AFMsg.Ident member_id = 2;
  bool has_member_id() const;
  void clear_member_id();
  static const int kMemberIdFieldNumber = 2;
  const ::AFMsg::Ident& member_id() const;
  ::AFMsg::Ident* mutable_member_id();
  ::AFMsg::Ident* release_member_id();
  void set_allocated_member_id(::AFMsg::Ident* member_id);

  // required .AFMsg.ReqAckOprGuildMember.EGGuildMemberOprType type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::AFMsg::ReqAckOprGuildMember_EGGuildMemberOprType type() const;
  void set_type(::AFMsg::ReqAckOprGuildMember_EGGuildMemberOprType value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckOprGuildMember)
 private:
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_member_id();
  inline void clear_has_member_id();
  inline void set_has_type();
  inline void clear_has_type();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* guild_id_;
  ::AFMsg::Ident* member_id_;
  int type_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckOprGuildMember* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckOprGuild : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckOprGuild) */ {
 public:
  ReqAckOprGuild();
  virtual ~ReqAckOprGuild();

  ReqAckOprGuild(const ReqAckOprGuild& from);

  inline ReqAckOprGuild& operator=(const ReqAckOprGuild& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckOprGuild& default_instance();

  void Swap(ReqAckOprGuild* other);

  // implements Message ----------------------------------------------

  inline ReqAckOprGuild* New() const { return New(NULL); }

  ReqAckOprGuild* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckOprGuild& from);
  void MergeFrom(const ReqAckOprGuild& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqAckOprGuild* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqAckOprGuild_EGGuildOprType EGGuildOprType;
  static const EGGuildOprType EGAT_APPLYDISMISS =
    ReqAckOprGuild_EGGuildOprType_EGAT_APPLYDISMISS;
  static const EGGuildOprType EGAT_STOPDISMISS =
    ReqAckOprGuild_EGGuildOprType_EGAT_STOPDISMISS;
  static const EGGuildOprType EGAT_SETRECRUIT =
    ReqAckOprGuild_EGGuildOprType_EGAT_SETRECRUIT;
  static const EGGuildOprType EGAT_PUBLISHRECRUIT =
    ReqAckOprGuild_EGGuildOprType_EGAT_PUBLISHRECRUIT;
  static const EGGuildOprType EGAT_EDITAD =
    ReqAckOprGuild_EGGuildOprType_EGAT_EDITAD;
  static const EGGuildOprType EGAT_LEVELUP =
    ReqAckOprGuild_EGGuildOprType_EGAT_LEVELUP;
  static inline bool EGGuildOprType_IsValid(int value) {
    return ReqAckOprGuild_EGGuildOprType_IsValid(value);
  }
  static const EGGuildOprType EGGuildOprType_MIN =
    ReqAckOprGuild_EGGuildOprType_EGGuildOprType_MIN;
  static const EGGuildOprType EGGuildOprType_MAX =
    ReqAckOprGuild_EGGuildOprType_EGGuildOprType_MAX;
  static const int EGGuildOprType_ARRAYSIZE =
    ReqAckOprGuild_EGGuildOprType_EGGuildOprType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EGGuildOprType_descriptor() {
    return ReqAckOprGuild_EGGuildOprType_descriptor();
  }
  static inline const ::std::string& EGGuildOprType_Name(EGGuildOprType value) {
    return ReqAckOprGuild_EGGuildOprType_Name(value);
  }
  static inline bool EGGuildOprType_Parse(const ::std::string& name,
      EGGuildOprType* value) {
    return ReqAckOprGuild_EGGuildOprType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident guild_id = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  const ::AFMsg::Ident& guild_id() const;
  ::AFMsg::Ident* mutable_guild_id();
  ::AFMsg::Ident* release_guild_id();
  void set_allocated_guild_id(::AFMsg::Ident* guild_id);

  // required .AFMsg.Ident player_id = 2;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  const ::AFMsg::Ident& player_id() const;
  ::AFMsg::Ident* mutable_player_id();
  ::AFMsg::Ident* release_player_id();
  void set_allocated_player_id(::AFMsg::Ident* player_id);

  // required .AFMsg.ReqAckOprGuild.EGGuildOprType type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::AFMsg::ReqAckOprGuild_EGGuildOprType type() const;
  void set_type(::AFMsg::ReqAckOprGuild_EGGuildOprType value);

  // required string Recruit_data = 4;
  bool has_recruit_data() const;
  void clear_recruit_data();
  static const int kRecruitDataFieldNumber = 4;
  const ::std::string& recruit_data() const;
  void set_recruit_data(const ::std::string& value);
  void set_recruit_data(const char* value);
  void set_recruit_data(const char* value, size_t size);
  ::std::string* mutable_recruit_data();
  ::std::string* release_recruit_data();
  void set_allocated_recruit_data(::std::string* recruit_data);

  // required string Ad_data = 5;
  bool has_ad_data() const;
  void clear_ad_data();
  static const int kAdDataFieldNumber = 5;
  const ::std::string& ad_data() const;
  void set_ad_data(const ::std::string& value);
  void set_ad_data(const char* value);
  void set_ad_data(const char* value, size_t size);
  ::std::string* mutable_ad_data();
  ::std::string* release_ad_data();
  void set_allocated_ad_data(::std::string* ad_data);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckOprGuild)
 private:
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_recruit_data();
  inline void clear_has_recruit_data();
  inline void set_has_ad_data();
  inline void clear_has_ad_data();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* guild_id_;
  ::AFMsg::Ident* player_id_;
  ::google::protobuf::internal::ArenaStringPtr recruit_data_;
  ::google::protobuf::internal::ArenaStringPtr ad_data_;
  int type_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckOprGuild* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckDonateGuildItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckDonateGuildItem) */ {
 public:
  ReqAckDonateGuildItem();
  virtual ~ReqAckDonateGuildItem();

  ReqAckDonateGuildItem(const ReqAckDonateGuildItem& from);

  inline ReqAckDonateGuildItem& operator=(const ReqAckDonateGuildItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckDonateGuildItem& default_instance();

  void Swap(ReqAckDonateGuildItem* other);

  // implements Message ----------------------------------------------

  inline ReqAckDonateGuildItem* New() const { return New(NULL); }

  ReqAckDonateGuildItem* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckDonateGuildItem& from);
  void MergeFrom(const ReqAckDonateGuildItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqAckDonateGuildItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident guild_id = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  const ::AFMsg::Ident& guild_id() const;
  ::AFMsg::Ident* mutable_guild_id();
  ::AFMsg::Ident* release_guild_id();
  void set_allocated_guild_id(::AFMsg::Ident* guild_id);

  // required .AFMsg.Ident target_id = 2;
  bool has_target_id() const;
  void clear_target_id();
  static const int kTargetIdFieldNumber = 2;
  const ::AFMsg::Ident& target_id() const;
  ::AFMsg::Ident* mutable_target_id();
  ::AFMsg::Ident* release_target_id();
  void set_allocated_target_id(::AFMsg::Ident* target_id);

  // repeated .AFMsg.ItemStruct item_list = 3;
  int item_list_size() const;
  void clear_item_list();
  static const int kItemListFieldNumber = 3;
  const ::AFMsg::ItemStruct& item_list(int index) const;
  ::AFMsg::ItemStruct* mutable_item_list(int index);
  ::AFMsg::ItemStruct* add_item_list();
  ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >*
      mutable_item_list();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >&
      item_list() const;

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckDonateGuildItem)
 private:
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_target_id();
  inline void clear_has_target_id();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* guild_id_;
  ::AFMsg::Ident* target_id_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct > item_list_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckDonateGuildItem* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqGuildEctypeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqGuildEctypeInfo) */ {
 public:
  ReqGuildEctypeInfo();
  virtual ~ReqGuildEctypeInfo();

  ReqGuildEctypeInfo(const ReqGuildEctypeInfo& from);

  inline ReqGuildEctypeInfo& operator=(const ReqGuildEctypeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqGuildEctypeInfo& default_instance();

  void Swap(ReqGuildEctypeInfo* other);

  // implements Message ----------------------------------------------

  inline ReqGuildEctypeInfo* New() const { return New(NULL); }

  ReqGuildEctypeInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqGuildEctypeInfo& from);
  void MergeFrom(const ReqGuildEctypeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqGuildEctypeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* mutable_selfid();
  ::AFMsg::Ident* release_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // required .AFMsg.Ident guild_id = 2;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 2;
  const ::AFMsg::Ident& guild_id() const;
  ::AFMsg::Ident* mutable_guild_id();
  ::AFMsg::Ident* release_guild_id();
  void set_allocated_guild_id(::AFMsg::Ident* guild_id);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqGuildEctypeInfo)
 private:
  inline void set_has_selfid();
  inline void clear_has_selfid();
  inline void set_has_guild_id();
  inline void clear_has_guild_id();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* guild_id_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqGuildEctypeInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT GuildEctypeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.GuildEctypeInfo) */ {
 public:
  GuildEctypeInfo();
  virtual ~GuildEctypeInfo();

  GuildEctypeInfo(const GuildEctypeInfo& from);

  inline GuildEctypeInfo& operator=(const GuildEctypeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildEctypeInfo& default_instance();

  void Swap(GuildEctypeInfo* other);

  // implements Message ----------------------------------------------

  inline GuildEctypeInfo* New() const { return New(NULL); }

  GuildEctypeInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildEctypeInfo& from);
  void MergeFrom(const GuildEctypeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GuildEctypeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident guild_id = 1;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  const ::AFMsg::Ident& guild_id() const;
  ::AFMsg::Ident* mutable_guild_id();
  ::AFMsg::Ident* release_guild_id();
  void set_allocated_guild_id(::AFMsg::Ident* guild_id);

  // required int64 server_id = 2;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  ::google::protobuf::int64 server_id() const;
  void set_server_id(::google::protobuf::int64 value);

  // required int64 Ectype_id = 3;
  bool has_ectype_id() const;
  void clear_ectype_id();
  static const int kEctypeIdFieldNumber = 3;
  ::google::protobuf::int64 ectype_id() const;
  void set_ectype_id(::google::protobuf::int64 value);

  // required int64 Ectype_Group = 4;
  bool has_ectype_group() const;
  void clear_ectype_group();
  static const int kEctypeGroupFieldNumber = 4;
  ::google::protobuf::int64 ectype_group() const;
  void set_ectype_group(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:AFMsg.GuildEctypeInfo)
 private:
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_ectype_id();
  inline void clear_has_ectype_id();
  inline void set_has_ectype_group();
  inline void clear_has_ectype_group();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* guild_id_;
  ::google::protobuf::int64 server_id_;
  ::google::protobuf::int64 ectype_id_;
  ::google::protobuf::int64 ectype_group_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static GuildEctypeInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckGuildEctypeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckGuildEctypeInfo) */ {
 public:
  AckGuildEctypeInfo();
  virtual ~AckGuildEctypeInfo();

  AckGuildEctypeInfo(const AckGuildEctypeInfo& from);

  inline AckGuildEctypeInfo& operator=(const AckGuildEctypeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckGuildEctypeInfo& default_instance();

  void Swap(AckGuildEctypeInfo* other);

  // implements Message ----------------------------------------------

  inline AckGuildEctypeInfo* New() const { return New(NULL); }

  AckGuildEctypeInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckGuildEctypeInfo& from);
  void MergeFrom(const AckGuildEctypeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AckGuildEctypeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* mutable_selfid();
  ::AFMsg::Ident* release_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // required .AFMsg.GuildEctypeInfo xectypeinfo = 2;
  bool has_xectypeinfo() const;
  void clear_xectypeinfo();
  static const int kXectypeinfoFieldNumber = 2;
  const ::AFMsg::GuildEctypeInfo& xectypeinfo() const;
  ::AFMsg::GuildEctypeInfo* mutable_xectypeinfo();
  ::AFMsg::GuildEctypeInfo* release_xectypeinfo();
  void set_allocated_xectypeinfo(::AFMsg::GuildEctypeInfo* xectypeinfo);

  // @@protoc_insertion_point(class_scope:AFMsg.AckGuildEctypeInfo)
 private:
  inline void set_has_selfid();
  inline void clear_has_selfid();
  inline void set_has_xectypeinfo();
  inline void clear_has_xectypeinfo();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::GuildEctypeInfo* xectypeinfo_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static AckGuildEctypeInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT SetGuildEctypeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.SetGuildEctypeInfo) */ {
 public:
  SetGuildEctypeInfo();
  virtual ~SetGuildEctypeInfo();

  SetGuildEctypeInfo(const SetGuildEctypeInfo& from);

  inline SetGuildEctypeInfo& operator=(const SetGuildEctypeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetGuildEctypeInfo& default_instance();

  void Swap(SetGuildEctypeInfo* other);

  // implements Message ----------------------------------------------

  inline SetGuildEctypeInfo* New() const { return New(NULL); }

  SetGuildEctypeInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetGuildEctypeInfo& from);
  void MergeFrom(const SetGuildEctypeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetGuildEctypeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* mutable_selfid();
  ::AFMsg::Ident* release_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // required .AFMsg.GuildEctypeInfo xectypeinfo = 2;
  bool has_xectypeinfo() const;
  void clear_xectypeinfo();
  static const int kXectypeinfoFieldNumber = 2;
  const ::AFMsg::GuildEctypeInfo& xectypeinfo() const;
  ::AFMsg::GuildEctypeInfo* mutable_xectypeinfo();
  ::AFMsg::GuildEctypeInfo* release_xectypeinfo();
  void set_allocated_xectypeinfo(::AFMsg::GuildEctypeInfo* xectypeinfo);

  // @@protoc_insertion_point(class_scope:AFMsg.SetGuildEctypeInfo)
 private:
  inline void set_has_selfid();
  inline void clear_has_selfid();
  inline void set_has_xectypeinfo();
  inline void clear_has_xectypeinfo();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::GuildEctypeInfo* xectypeinfo_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static SetGuildEctypeInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqEnterGuildEctype : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqEnterGuildEctype) */ {
 public:
  ReqEnterGuildEctype();
  virtual ~ReqEnterGuildEctype();

  ReqEnterGuildEctype(const ReqEnterGuildEctype& from);

  inline ReqEnterGuildEctype& operator=(const ReqEnterGuildEctype& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqEnterGuildEctype& default_instance();

  void Swap(ReqEnterGuildEctype* other);

  // implements Message ----------------------------------------------

  inline ReqEnterGuildEctype* New() const { return New(NULL); }

  ReqEnterGuildEctype* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqEnterGuildEctype& from);
  void MergeFrom(const ReqEnterGuildEctype& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqEnterGuildEctype* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* mutable_selfid();
  ::AFMsg::Ident* release_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqEnterGuildEctype)
 private:
  inline void set_has_selfid();
  inline void clear_has_selfid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* selfid_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqEnterGuildEctype* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ChatInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ChatInfo) */ {
 public:
  ChatInfo();
  virtual ~ChatInfo();

  ChatInfo(const ChatInfo& from);

  inline ChatInfo& operator=(const ChatInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatInfo& default_instance();

  void Swap(ChatInfo* other);

  // implements Message ----------------------------------------------

  inline ChatInfo* New() const { return New(NULL); }

  ChatInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatInfo& from);
  void MergeFrom(const ChatInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChatInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ChatInfo_EChatType EChatType;
  static const EChatType ECHATTYPE_NORMAL =
    ChatInfo_EChatType_ECHATTYPE_NORMAL;
  static const EChatType ECHATTYPE_PRIVATE =
    ChatInfo_EChatType_ECHATTYPE_PRIVATE;
  static const EChatType ECHATTYPE_GUILD =
    ChatInfo_EChatType_ECHATTYPE_GUILD;
  static const EChatType ECHATTYPE_WORLD =
    ChatInfo_EChatType_ECHATTYPE_WORLD;
  static inline bool EChatType_IsValid(int value) {
    return ChatInfo_EChatType_IsValid(value);
  }
  static const EChatType EChatType_MIN =
    ChatInfo_EChatType_EChatType_MIN;
  static const EChatType EChatType_MAX =
    ChatInfo_EChatType_EChatType_MAX;
  static const int EChatType_ARRAYSIZE =
    ChatInfo_EChatType_EChatType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EChatType_descriptor() {
    return ChatInfo_EChatType_descriptor();
  }
  static inline const ::std::string& EChatType_Name(EChatType value) {
    return ChatInfo_EChatType_Name(value);
  }
  static inline bool EChatType_Parse(const ::std::string& name,
      EChatType* value) {
    return ChatInfo_EChatType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .AFMsg.ChatInfo.EChatType chat_type = 1;
  bool has_chat_type() const;
  void clear_chat_type();
  static const int kChatTypeFieldNumber = 1;
  ::AFMsg::ChatInfo_EChatType chat_type() const;
  void set_chat_type(::AFMsg::ChatInfo_EChatType value);

  // required bytes chat_info = 2;
  bool has_chat_info() const;
  void clear_chat_info();
  static const int kChatInfoFieldNumber = 2;
  const ::std::string& chat_info() const;
  void set_chat_info(const ::std::string& value);
  void set_chat_info(const char* value);
  void set_chat_info(const void* value, size_t size);
  ::std::string* mutable_chat_info();
  ::std::string* release_chat_info();
  void set_allocated_chat_info(::std::string* chat_info);

  // required int64 chat_time = 3;
  bool has_chat_time() const;
  void clear_chat_time();
  static const int kChatTimeFieldNumber = 3;
  ::google::protobuf::int64 chat_time() const;
  void set_chat_time(::google::protobuf::int64 value);

  // optional bytes addtional_info = 4;
  bool has_addtional_info() const;
  void clear_addtional_info();
  static const int kAddtionalInfoFieldNumber = 4;
  const ::std::string& addtional_info() const;
  void set_addtional_info(const ::std::string& value);
  void set_addtional_info(const char* value);
  void set_addtional_info(const void* value, size_t size);
  ::std::string* mutable_addtional_info();
  ::std::string* release_addtional_info();
  void set_allocated_addtional_info(::std::string* addtional_info);

  // required .AFMsg.Ident send_id = 5;
  bool has_send_id() const;
  void clear_send_id();
  static const int kSendIdFieldNumber = 5;
  const ::AFMsg::Ident& send_id() const;
  ::AFMsg::Ident* mutable_send_id();
  ::AFMsg::Ident* release_send_id();
  void set_allocated_send_id(::AFMsg::Ident* send_id);

  // required bytes send_name = 6;
  bool has_send_name() const;
  void clear_send_name();
  static const int kSendNameFieldNumber = 6;
  const ::std::string& send_name() const;
  void set_send_name(const ::std::string& value);
  void set_send_name(const char* value);
  void set_send_name(const void* value, size_t size);
  ::std::string* mutable_send_name();
  ::std::string* release_send_name();
  void set_allocated_send_name(::std::string* send_name);

  // optional int32 send_level = 7;
  bool has_send_level() const;
  void clear_send_level();
  static const int kSendLevelFieldNumber = 7;
  ::google::protobuf::int32 send_level() const;
  void set_send_level(::google::protobuf::int32 value);

  // repeated .AFMsg.Ident recvier_id = 8;
  int recvier_id_size() const;
  void clear_recvier_id();
  static const int kRecvierIdFieldNumber = 8;
  const ::AFMsg::Ident& recvier_id(int index) const;
  ::AFMsg::Ident* mutable_recvier_id(int index);
  ::AFMsg::Ident* add_recvier_id();
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
      mutable_recvier_id();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
      recvier_id() const;

  // optional bytes guid_name = 9;
  bool has_guid_name() const;
  void clear_guid_name();
  static const int kGuidNameFieldNumber = 9;
  const ::std::string& guid_name() const;
  void set_guid_name(const ::std::string& value);
  void set_guid_name(const char* value);
  void set_guid_name(const void* value, size_t size);
  ::std::string* mutable_guid_name();
  ::std::string* release_guid_name();
  void set_allocated_guid_name(::std::string* guid_name);

  // @@protoc_insertion_point(class_scope:AFMsg.ChatInfo)
 private:
  inline void set_has_chat_type();
  inline void clear_has_chat_type();
  inline void set_has_chat_info();
  inline void clear_has_chat_info();
  inline void set_has_chat_time();
  inline void clear_has_chat_time();
  inline void set_has_addtional_info();
  inline void clear_has_addtional_info();
  inline void set_has_send_id();
  inline void clear_has_send_id();
  inline void set_has_send_name();
  inline void clear_has_send_name();
  inline void set_has_send_level();
  inline void clear_has_send_level();
  inline void set_has_guid_name();
  inline void clear_has_guid_name();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr chat_info_;
  ::google::protobuf::int64 chat_time_;
  ::google::protobuf::internal::ArenaStringPtr addtional_info_;
  int chat_type_;
  ::google::protobuf::int32 send_level_;
  ::AFMsg::Ident* send_id_;
  ::google::protobuf::internal::ArenaStringPtr send_name_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident > recvier_id_;
  ::google::protobuf::internal::ArenaStringPtr guid_name_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ChatInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckCreateChatGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckCreateChatGroup) */ {
 public:
  ReqAckCreateChatGroup();
  virtual ~ReqAckCreateChatGroup();

  ReqAckCreateChatGroup(const ReqAckCreateChatGroup& from);

  inline ReqAckCreateChatGroup& operator=(const ReqAckCreateChatGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckCreateChatGroup& default_instance();

  void Swap(ReqAckCreateChatGroup* other);

  // implements Message ----------------------------------------------

  inline ReqAckCreateChatGroup* New() const { return New(NULL); }

  ReqAckCreateChatGroup* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckCreateChatGroup& from);
  void MergeFrom(const ReqAckCreateChatGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqAckCreateChatGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required .AFMsg.Ident selfid = 2;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 2;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* mutable_selfid();
  ::AFMsg::Ident* release_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // optional .AFMsg.Ident xChatGroupid = 3;
  bool has_xchatgroupid() const;
  void clear_xchatgroupid();
  static const int kXChatGroupidFieldNumber = 3;
  const ::AFMsg::Ident& xchatgroupid() const;
  ::AFMsg::Ident* mutable_xchatgroupid();
  ::AFMsg::Ident* release_xchatgroupid();
  void set_allocated_xchatgroupid(::AFMsg::Ident* xchatgroupid);

  // optional int32 chatType = 4;
  bool has_chattype() const;
  void clear_chattype();
  static const int kChatTypeFieldNumber = 4;
  ::google::protobuf::int32 chattype() const;
  void set_chattype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckCreateChatGroup)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_selfid();
  inline void clear_has_selfid();
  inline void set_has_xchatgroupid();
  inline void clear_has_xchatgroupid();
  inline void set_has_chattype();
  inline void clear_has_chattype();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* xchatgroupid_;
  ::google::protobuf::int32 chattype_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckCreateChatGroup* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckjoinChatGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckjoinChatGroup) */ {
 public:
  ReqAckjoinChatGroup();
  virtual ~ReqAckjoinChatGroup();

  ReqAckjoinChatGroup(const ReqAckjoinChatGroup& from);

  inline ReqAckjoinChatGroup& operator=(const ReqAckjoinChatGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckjoinChatGroup& default_instance();

  void Swap(ReqAckjoinChatGroup* other);

  // implements Message ----------------------------------------------

  inline ReqAckjoinChatGroup* New() const { return New(NULL); }

  ReqAckjoinChatGroup* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckjoinChatGroup& from);
  void MergeFrom(const ReqAckjoinChatGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqAckjoinChatGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* mutable_selfid();
  ::AFMsg::Ident* release_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // optional .AFMsg.Ident xChatGroupid = 2;
  bool has_xchatgroupid() const;
  void clear_xchatgroupid();
  static const int kXChatGroupidFieldNumber = 2;
  const ::AFMsg::Ident& xchatgroupid() const;
  ::AFMsg::Ident* mutable_xchatgroupid();
  ::AFMsg::Ident* release_xchatgroupid();
  void set_allocated_xchatgroupid(::AFMsg::Ident* xchatgroupid);

  // optional int64 result = 3;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::int64 result() const;
  void set_result(::google::protobuf::int64 value);

  // optional int32 chatType = 4;
  bool has_chattype() const;
  void clear_chattype();
  static const int kChatTypeFieldNumber = 4;
  ::google::protobuf::int32 chattype() const;
  void set_chattype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckjoinChatGroup)
 private:
  inline void set_has_selfid();
  inline void clear_has_selfid();
  inline void set_has_xchatgroupid();
  inline void clear_has_xchatgroupid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_chattype();
  inline void clear_has_chattype();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* xchatgroupid_;
  ::google::protobuf::int64 result_;
  ::google::protobuf::int32 chattype_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckjoinChatGroup* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckQuitChatGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckQuitChatGroup) */ {
 public:
  ReqAckQuitChatGroup();
  virtual ~ReqAckQuitChatGroup();

  ReqAckQuitChatGroup(const ReqAckQuitChatGroup& from);

  inline ReqAckQuitChatGroup& operator=(const ReqAckQuitChatGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckQuitChatGroup& default_instance();

  void Swap(ReqAckQuitChatGroup* other);

  // implements Message ----------------------------------------------

  inline ReqAckQuitChatGroup* New() const { return New(NULL); }

  ReqAckQuitChatGroup* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckQuitChatGroup& from);
  void MergeFrom(const ReqAckQuitChatGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqAckQuitChatGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* mutable_selfid();
  ::AFMsg::Ident* release_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // optional .AFMsg.Ident xChatGroupid = 2;
  bool has_xchatgroupid() const;
  void clear_xchatgroupid();
  static const int kXChatGroupidFieldNumber = 2;
  const ::AFMsg::Ident& xchatgroupid() const;
  ::AFMsg::Ident* mutable_xchatgroupid();
  ::AFMsg::Ident* release_xchatgroupid();
  void set_allocated_xchatgroupid(::AFMsg::Ident* xchatgroupid);

  // optional int64 result = 3;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::int64 result() const;
  void set_result(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckQuitChatGroup)
 private:
  inline void set_has_selfid();
  inline void clear_has_selfid();
  inline void set_has_xchatgroupid();
  inline void clear_has_xchatgroupid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* xchatgroupid_;
  ::google::protobuf::int64 result_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckQuitChatGroup* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqSubscriptionChatGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqSubscriptionChatGroup) */ {
 public:
  ReqSubscriptionChatGroup();
  virtual ~ReqSubscriptionChatGroup();

  ReqSubscriptionChatGroup(const ReqSubscriptionChatGroup& from);

  inline ReqSubscriptionChatGroup& operator=(const ReqSubscriptionChatGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSubscriptionChatGroup& default_instance();

  void Swap(ReqSubscriptionChatGroup* other);

  // implements Message ----------------------------------------------

  inline ReqSubscriptionChatGroup* New() const { return New(NULL); }

  ReqSubscriptionChatGroup* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqSubscriptionChatGroup& from);
  void MergeFrom(const ReqSubscriptionChatGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqSubscriptionChatGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* mutable_selfid();
  ::AFMsg::Ident* release_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // repeated .AFMsg.Ident xChatGroupid = 2;
  int xchatgroupid_size() const;
  void clear_xchatgroupid();
  static const int kXChatGroupidFieldNumber = 2;
  const ::AFMsg::Ident& xchatgroupid(int index) const;
  ::AFMsg::Ident* mutable_xchatgroupid(int index);
  ::AFMsg::Ident* add_xchatgroupid();
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
      mutable_xchatgroupid();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
      xchatgroupid() const;

  // @@protoc_insertion_point(class_scope:AFMsg.ReqSubscriptionChatGroup)
 private:
  inline void set_has_selfid();
  inline void clear_has_selfid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* selfid_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident > xchatgroupid_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqSubscriptionChatGroup* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqCancelSubscriptionChatGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqCancelSubscriptionChatGroup) */ {
 public:
  ReqCancelSubscriptionChatGroup();
  virtual ~ReqCancelSubscriptionChatGroup();

  ReqCancelSubscriptionChatGroup(const ReqCancelSubscriptionChatGroup& from);

  inline ReqCancelSubscriptionChatGroup& operator=(const ReqCancelSubscriptionChatGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqCancelSubscriptionChatGroup& default_instance();

  void Swap(ReqCancelSubscriptionChatGroup* other);

  // implements Message ----------------------------------------------

  inline ReqCancelSubscriptionChatGroup* New() const { return New(NULL); }

  ReqCancelSubscriptionChatGroup* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqCancelSubscriptionChatGroup& from);
  void MergeFrom(const ReqCancelSubscriptionChatGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqCancelSubscriptionChatGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* mutable_selfid();
  ::AFMsg::Ident* release_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // repeated .AFMsg.Ident xChatGroupid = 2;
  int xchatgroupid_size() const;
  void clear_xchatgroupid();
  static const int kXChatGroupidFieldNumber = 2;
  const ::AFMsg::Ident& xchatgroupid(int index) const;
  ::AFMsg::Ident* mutable_xchatgroupid(int index);
  ::AFMsg::Ident* add_xchatgroupid();
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
      mutable_xchatgroupid();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
      xchatgroupid() const;

  // @@protoc_insertion_point(class_scope:AFMsg.ReqCancelSubscriptionChatGroup)
 private:
  inline void set_has_selfid();
  inline void clear_has_selfid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* selfid_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident > xchatgroupid_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqCancelSubscriptionChatGroup* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqIntensifylevelToEquip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqIntensifylevelToEquip) */ {
 public:
  ReqIntensifylevelToEquip();
  virtual ~ReqIntensifylevelToEquip();

  ReqIntensifylevelToEquip(const ReqIntensifylevelToEquip& from);

  inline ReqIntensifylevelToEquip& operator=(const ReqIntensifylevelToEquip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqIntensifylevelToEquip& default_instance();

  void Swap(ReqIntensifylevelToEquip* other);

  // implements Message ----------------------------------------------

  inline ReqIntensifylevelToEquip* New() const { return New(NULL); }

  ReqIntensifylevelToEquip* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqIntensifylevelToEquip& from);
  void MergeFrom(const ReqIntensifylevelToEquip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqIntensifylevelToEquip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* mutable_selfid();
  ::AFMsg::Ident* release_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // required .AFMsg.Ident equipid = 2;
  bool has_equipid() const;
  void clear_equipid();
  static const int kEquipidFieldNumber = 2;
  const ::AFMsg::Ident& equipid() const;
  ::AFMsg::Ident* mutable_equipid();
  ::AFMsg::Ident* release_equipid();
  void set_allocated_equipid(::AFMsg::Ident* equipid);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqIntensifylevelToEquip)
 private:
  inline void set_has_selfid();
  inline void clear_has_selfid();
  inline void set_has_equipid();
  inline void clear_has_equipid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* equipid_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqIntensifylevelToEquip* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckIntensifylevelToEquip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckIntensifylevelToEquip) */ {
 public:
  AckIntensifylevelToEquip();
  virtual ~AckIntensifylevelToEquip();

  AckIntensifylevelToEquip(const AckIntensifylevelToEquip& from);

  inline AckIntensifylevelToEquip& operator=(const AckIntensifylevelToEquip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckIntensifylevelToEquip& default_instance();

  void Swap(AckIntensifylevelToEquip* other);

  // implements Message ----------------------------------------------

  inline AckIntensifylevelToEquip* New() const { return New(NULL); }

  AckIntensifylevelToEquip* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckIntensifylevelToEquip& from);
  void MergeFrom(const AckIntensifylevelToEquip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AckIntensifylevelToEquip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* mutable_selfid();
  ::AFMsg::Ident* release_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // required .AFMsg.Ident equipid = 2;
  bool has_equipid() const;
  void clear_equipid();
  static const int kEquipidFieldNumber = 2;
  const ::AFMsg::Ident& equipid() const;
  ::AFMsg::Ident* mutable_equipid();
  ::AFMsg::Ident* release_equipid();
  void set_allocated_equipid(::AFMsg::Ident* equipid);

  // required int32 result = 3;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.AckIntensifylevelToEquip)
 private:
  inline void set_has_selfid();
  inline void clear_has_selfid();
  inline void set_has_equipid();
  inline void clear_has_equipid();
  inline void set_has_result();
  inline void clear_has_result();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* equipid_;
  ::google::protobuf::int32 result_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static AckIntensifylevelToEquip* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqHoleToEquip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqHoleToEquip) */ {
 public:
  ReqHoleToEquip();
  virtual ~ReqHoleToEquip();

  ReqHoleToEquip(const ReqHoleToEquip& from);

  inline ReqHoleToEquip& operator=(const ReqHoleToEquip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqHoleToEquip& default_instance();

  void Swap(ReqHoleToEquip* other);

  // implements Message ----------------------------------------------

  inline ReqHoleToEquip* New() const { return New(NULL); }

  ReqHoleToEquip* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqHoleToEquip& from);
  void MergeFrom(const ReqHoleToEquip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqHoleToEquip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* mutable_selfid();
  ::AFMsg::Ident* release_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // required .AFMsg.Ident equipid = 2;
  bool has_equipid() const;
  void clear_equipid();
  static const int kEquipidFieldNumber = 2;
  const ::AFMsg::Ident& equipid() const;
  ::AFMsg::Ident* mutable_equipid();
  ::AFMsg::Ident* release_equipid();
  void set_allocated_equipid(::AFMsg::Ident* equipid);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqHoleToEquip)
 private:
  inline void set_has_selfid();
  inline void clear_has_selfid();
  inline void set_has_equipid();
  inline void clear_has_equipid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* equipid_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqHoleToEquip* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckHoleToEquip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckHoleToEquip) */ {
 public:
  AckHoleToEquip();
  virtual ~AckHoleToEquip();

  AckHoleToEquip(const AckHoleToEquip& from);

  inline AckHoleToEquip& operator=(const AckHoleToEquip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckHoleToEquip& default_instance();

  void Swap(AckHoleToEquip* other);

  // implements Message ----------------------------------------------

  inline AckHoleToEquip* New() const { return New(NULL); }

  AckHoleToEquip* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckHoleToEquip& from);
  void MergeFrom(const AckHoleToEquip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AckHoleToEquip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* mutable_selfid();
  ::AFMsg::Ident* release_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // required .AFMsg.Ident equipid = 2;
  bool has_equipid() const;
  void clear_equipid();
  static const int kEquipidFieldNumber = 2;
  const ::AFMsg::Ident& equipid() const;
  ::AFMsg::Ident* mutable_equipid();
  ::AFMsg::Ident* release_equipid();
  void set_allocated_equipid(::AFMsg::Ident* equipid);

  // required int32 result = 3;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.AckHoleToEquip)
 private:
  inline void set_has_selfid();
  inline void clear_has_selfid();
  inline void set_has_equipid();
  inline void clear_has_equipid();
  inline void set_has_result();
  inline void clear_has_result();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* equipid_;
  ::google::protobuf::int32 result_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static AckHoleToEquip* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqInlaystoneToEquip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqInlaystoneToEquip) */ {
 public:
  ReqInlaystoneToEquip();
  virtual ~ReqInlaystoneToEquip();

  ReqInlaystoneToEquip(const ReqInlaystoneToEquip& from);

  inline ReqInlaystoneToEquip& operator=(const ReqInlaystoneToEquip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqInlaystoneToEquip& default_instance();

  void Swap(ReqInlaystoneToEquip* other);

  // implements Message ----------------------------------------------

  inline ReqInlaystoneToEquip* New() const { return New(NULL); }

  ReqInlaystoneToEquip* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqInlaystoneToEquip& from);
  void MergeFrom(const ReqInlaystoneToEquip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqInlaystoneToEquip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* mutable_selfid();
  ::AFMsg::Ident* release_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // required .AFMsg.Ident equipid = 2;
  bool has_equipid() const;
  void clear_equipid();
  static const int kEquipidFieldNumber = 2;
  const ::AFMsg::Ident& equipid() const;
  ::AFMsg::Ident* mutable_equipid();
  ::AFMsg::Ident* release_equipid();
  void set_allocated_equipid(::AFMsg::Ident* equipid);

  // required bytes stoneid = 3;
  bool has_stoneid() const;
  void clear_stoneid();
  static const int kStoneidFieldNumber = 3;
  const ::std::string& stoneid() const;
  void set_stoneid(const ::std::string& value);
  void set_stoneid(const char* value);
  void set_stoneid(const void* value, size_t size);
  ::std::string* mutable_stoneid();
  ::std::string* release_stoneid();
  void set_allocated_stoneid(::std::string* stoneid);

  // required int32 hole_index = 4;
  bool has_hole_index() const;
  void clear_hole_index();
  static const int kHoleIndexFieldNumber = 4;
  ::google::protobuf::int32 hole_index() const;
  void set_hole_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqInlaystoneToEquip)
 private:
  inline void set_has_selfid();
  inline void clear_has_selfid();
  inline void set_has_equipid();
  inline void clear_has_equipid();
  inline void set_has_stoneid();
  inline void clear_has_stoneid();
  inline void set_has_hole_index();
  inline void clear_has_hole_index();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* equipid_;
  ::google::protobuf::internal::ArenaStringPtr stoneid_;
  ::google::protobuf::int32 hole_index_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqInlaystoneToEquip* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckInlaystoneToEquip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckInlaystoneToEquip) */ {
 public:
  AckInlaystoneToEquip();
  virtual ~AckInlaystoneToEquip();

  AckInlaystoneToEquip(const AckInlaystoneToEquip& from);

  inline AckInlaystoneToEquip& operator=(const AckInlaystoneToEquip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckInlaystoneToEquip& default_instance();

  void Swap(AckInlaystoneToEquip* other);

  // implements Message ----------------------------------------------

  inline AckInlaystoneToEquip* New() const { return New(NULL); }

  AckInlaystoneToEquip* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckInlaystoneToEquip& from);
  void MergeFrom(const AckInlaystoneToEquip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AckInlaystoneToEquip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* mutable_selfid();
  ::AFMsg::Ident* release_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // required .AFMsg.Ident equipid = 2;
  bool has_equipid() const;
  void clear_equipid();
  static const int kEquipidFieldNumber = 2;
  const ::AFMsg::Ident& equipid() const;
  ::AFMsg::Ident* mutable_equipid();
  ::AFMsg::Ident* release_equipid();
  void set_allocated_equipid(::AFMsg::Ident* equipid);

  // required int32 result = 3;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.AckInlaystoneToEquip)
 private:
  inline void set_has_selfid();
  inline void clear_has_selfid();
  inline void set_has_equipid();
  inline void clear_has_equipid();
  inline void set_has_result();
  inline void clear_has_result();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* equipid_;
  ::google::protobuf::int32 result_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static AckInlaystoneToEquip* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqElementlevelToEquip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqElementlevelToEquip) */ {
 public:
  ReqElementlevelToEquip();
  virtual ~ReqElementlevelToEquip();

  ReqElementlevelToEquip(const ReqElementlevelToEquip& from);

  inline ReqElementlevelToEquip& operator=(const ReqElementlevelToEquip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqElementlevelToEquip& default_instance();

  void Swap(ReqElementlevelToEquip* other);

  // implements Message ----------------------------------------------

  inline ReqElementlevelToEquip* New() const { return New(NULL); }

  ReqElementlevelToEquip* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqElementlevelToEquip& from);
  void MergeFrom(const ReqElementlevelToEquip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqElementlevelToEquip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* mutable_selfid();
  ::AFMsg::Ident* release_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // required .AFMsg.Ident equipid = 2;
  bool has_equipid() const;
  void clear_equipid();
  static const int kEquipidFieldNumber = 2;
  const ::AFMsg::Ident& equipid() const;
  ::AFMsg::Ident* mutable_equipid();
  ::AFMsg::Ident* release_equipid();
  void set_allocated_equipid(::AFMsg::Ident* equipid);

  // required .AFMsg.EGameElementType eElementType = 3;
  bool has_eelementtype() const;
  void clear_eelementtype();
  static const int kEElementTypeFieldNumber = 3;
  ::AFMsg::EGameElementType eelementtype() const;
  void set_eelementtype(::AFMsg::EGameElementType value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqElementlevelToEquip)
 private:
  inline void set_has_selfid();
  inline void clear_has_selfid();
  inline void set_has_equipid();
  inline void clear_has_equipid();
  inline void set_has_eelementtype();
  inline void clear_has_eelementtype();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* equipid_;
  int eelementtype_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqElementlevelToEquip* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckElementlevelToEquip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckElementlevelToEquip) */ {
 public:
  AckElementlevelToEquip();
  virtual ~AckElementlevelToEquip();

  AckElementlevelToEquip(const AckElementlevelToEquip& from);

  inline AckElementlevelToEquip& operator=(const AckElementlevelToEquip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckElementlevelToEquip& default_instance();

  void Swap(AckElementlevelToEquip* other);

  // implements Message ----------------------------------------------

  inline AckElementlevelToEquip* New() const { return New(NULL); }

  AckElementlevelToEquip* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckElementlevelToEquip& from);
  void MergeFrom(const AckElementlevelToEquip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AckElementlevelToEquip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* mutable_selfid();
  ::AFMsg::Ident* release_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // required .AFMsg.Ident equipid = 2;
  bool has_equipid() const;
  void clear_equipid();
  static const int kEquipidFieldNumber = 2;
  const ::AFMsg::Ident& equipid() const;
  ::AFMsg::Ident* mutable_equipid();
  ::AFMsg::Ident* release_equipid();
  void set_allocated_equipid(::AFMsg::Ident* equipid);

  // required int32 result = 3;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 3;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.AckElementlevelToEquip)
 private:
  inline void set_has_selfid();
  inline void clear_has_selfid();
  inline void set_has_equipid();
  inline void clear_has_equipid();
  inline void set_has_result();
  inline void clear_has_result();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* equipid_;
  ::google::protobuf::int32 result_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static AckElementlevelToEquip* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqSetFightHero : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqSetFightHero) */ {
 public:
  ReqSetFightHero();
  virtual ~ReqSetFightHero();

  ReqSetFightHero(const ReqSetFightHero& from);

  inline ReqSetFightHero& operator=(const ReqSetFightHero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSetFightHero& default_instance();

  void Swap(ReqSetFightHero* other);

  // implements Message ----------------------------------------------

  inline ReqSetFightHero* New() const { return New(NULL); }

  ReqSetFightHero* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqSetFightHero& from);
  void MergeFrom(const ReqSetFightHero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqSetFightHero* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* mutable_selfid();
  ::AFMsg::Ident* release_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // required .AFMsg.Ident Heroid = 2;
  bool has_heroid() const;
  void clear_heroid();
  static const int kHeroidFieldNumber = 2;
  const ::AFMsg::Ident& heroid() const;
  ::AFMsg::Ident* mutable_heroid();
  ::AFMsg::Ident* release_heroid();
  void set_allocated_heroid(::AFMsg::Ident* heroid);

  // required int32 FightPos = 3;
  bool has_fightpos() const;
  void clear_fightpos();
  static const int kFightPosFieldNumber = 3;
  ::google::protobuf::int32 fightpos() const;
  void set_fightpos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqSetFightHero)
 private:
  inline void set_has_selfid();
  inline void clear_has_selfid();
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_fightpos();
  inline void clear_has_fightpos();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* heroid_;
  ::google::protobuf::int32 fightpos_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqSetFightHero* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqWearEquip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqWearEquip) */ {
 public:
  ReqWearEquip();
  virtual ~ReqWearEquip();

  ReqWearEquip(const ReqWearEquip& from);

  inline ReqWearEquip& operator=(const ReqWearEquip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqWearEquip& default_instance();

  void Swap(ReqWearEquip* other);

  // implements Message ----------------------------------------------

  inline ReqWearEquip* New() const { return New(NULL); }

  ReqWearEquip* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqWearEquip& from);
  void MergeFrom(const ReqWearEquip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqWearEquip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* mutable_selfid();
  ::AFMsg::Ident* release_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // required .AFMsg.Ident equipid = 2;
  bool has_equipid() const;
  void clear_equipid();
  static const int kEquipidFieldNumber = 2;
  const ::AFMsg::Ident& equipid() const;
  ::AFMsg::Ident* mutable_equipid();
  ::AFMsg::Ident* release_equipid();
  void set_allocated_equipid(::AFMsg::Ident* equipid);

  // required .AFMsg.Ident Targetid = 3;
  bool has_targetid() const;
  void clear_targetid();
  static const int kTargetidFieldNumber = 3;
  const ::AFMsg::Ident& targetid() const;
  ::AFMsg::Ident* mutable_targetid();
  ::AFMsg::Ident* release_targetid();
  void set_allocated_targetid(::AFMsg::Ident* targetid);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqWearEquip)
 private:
  inline void set_has_selfid();
  inline void clear_has_selfid();
  inline void set_has_equipid();
  inline void clear_has_equipid();
  inline void set_has_targetid();
  inline void clear_has_targetid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* equipid_;
  ::AFMsg::Ident* targetid_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqWearEquip* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT TakeOffEquip : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.TakeOffEquip) */ {
 public:
  TakeOffEquip();
  virtual ~TakeOffEquip();

  TakeOffEquip(const TakeOffEquip& from);

  inline TakeOffEquip& operator=(const TakeOffEquip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeOffEquip& default_instance();

  void Swap(TakeOffEquip* other);

  // implements Message ----------------------------------------------

  inline TakeOffEquip* New() const { return New(NULL); }

  TakeOffEquip* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TakeOffEquip& from);
  void MergeFrom(const TakeOffEquip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TakeOffEquip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* mutable_selfid();
  ::AFMsg::Ident* release_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // required .AFMsg.Ident equipid = 2;
  bool has_equipid() const;
  void clear_equipid();
  static const int kEquipidFieldNumber = 2;
  const ::AFMsg::Ident& equipid() const;
  ::AFMsg::Ident* mutable_equipid();
  ::AFMsg::Ident* release_equipid();
  void set_allocated_equipid(::AFMsg::Ident* equipid);

  // required .AFMsg.Ident Targetid = 3;
  bool has_targetid() const;
  void clear_targetid();
  static const int kTargetidFieldNumber = 3;
  const ::AFMsg::Ident& targetid() const;
  ::AFMsg::Ident* mutable_targetid();
  ::AFMsg::Ident* release_targetid();
  void set_allocated_targetid(::AFMsg::Ident* targetid);

  // @@protoc_insertion_point(class_scope:AFMsg.TakeOffEquip)
 private:
  inline void set_has_selfid();
  inline void clear_has_selfid();
  inline void set_has_equipid();
  inline void clear_has_equipid();
  inline void set_has_targetid();
  inline void clear_has_targetid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* equipid_;
  ::AFMsg::Ident* targetid_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static TakeOffEquip* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqMiningTitle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqMiningTitle) */ {
 public:
  ReqMiningTitle();
  virtual ~ReqMiningTitle();

  ReqMiningTitle(const ReqMiningTitle& from);

  inline ReqMiningTitle& operator=(const ReqMiningTitle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqMiningTitle& default_instance();

  void Swap(ReqMiningTitle* other);

  // implements Message ----------------------------------------------

  inline ReqMiningTitle* New() const { return New(NULL); }

  ReqMiningTitle* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqMiningTitle& from);
  void MergeFrom(const ReqMiningTitle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqMiningTitle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* mutable_selfid();
  ::AFMsg::Ident* release_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // required int32 x = 2;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // required int32 y = 3;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqMiningTitle)
 private:
  inline void set_has_selfid();
  inline void clear_has_selfid();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* selfid_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqMiningTitle* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqSendMail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqSendMail) */ {
 public:
  ReqSendMail();
  virtual ~ReqSendMail();

  ReqSendMail(const ReqSendMail& from);

  inline ReqSendMail& operator=(const ReqSendMail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSendMail& default_instance();

  void Swap(ReqSendMail* other);

  // implements Message ----------------------------------------------

  inline ReqSendMail* New() const { return New(NULL); }

  ReqSendMail* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqSendMail& from);
  void MergeFrom(const ReqSendMail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqSendMail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* mutable_selfid();
  ::AFMsg::Ident* release_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // required .AFMsg.Ident reciever = 2;
  bool has_reciever() const;
  void clear_reciever();
  static const int kRecieverFieldNumber = 2;
  const ::AFMsg::Ident& reciever() const;
  ::AFMsg::Ident* mutable_reciever();
  ::AFMsg::Ident* release_reciever();
  void set_allocated_reciever(::AFMsg::Ident* reciever);

  // repeated .AFMsg.ItemStruct item_list = 3;
  int item_list_size() const;
  void clear_item_list();
  static const int kItemListFieldNumber = 3;
  const ::AFMsg::ItemStruct& item_list(int index) const;
  ::AFMsg::ItemStruct* mutable_item_list(int index);
  ::AFMsg::ItemStruct* add_item_list();
  ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >*
      mutable_item_list();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >&
      item_list() const;

  // repeated .AFMsg.CurrencyStruct currency_list = 4;
  int currency_list_size() const;
  void clear_currency_list();
  static const int kCurrencyListFieldNumber = 4;
  const ::AFMsg::CurrencyStruct& currency_list(int index) const;
  ::AFMsg::CurrencyStruct* mutable_currency_list(int index);
  ::AFMsg::CurrencyStruct* add_currency_list();
  ::google::protobuf::RepeatedPtrField< ::AFMsg::CurrencyStruct >*
      mutable_currency_list();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::CurrencyStruct >&
      currency_list() const;

  // @@protoc_insertion_point(class_scope:AFMsg.ReqSendMail)
 private:
  inline void set_has_selfid();
  inline void clear_has_selfid();
  inline void set_has_reciever();
  inline void clear_has_reciever();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* selfid_;
  ::AFMsg::Ident* reciever_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct > item_list_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::CurrencyStruct > currency_list_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqSendMail* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqSwitchServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqSwitchServer) */ {
 public:
  ReqSwitchServer();
  virtual ~ReqSwitchServer();

  ReqSwitchServer(const ReqSwitchServer& from);

  inline ReqSwitchServer& operator=(const ReqSwitchServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSwitchServer& default_instance();

  void Swap(ReqSwitchServer* other);

  // implements Message ----------------------------------------------

  inline ReqSwitchServer* New() const { return New(NULL); }

  ReqSwitchServer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqSwitchServer& from);
  void MergeFrom(const ReqSwitchServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqSwitchServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* mutable_selfid();
  ::AFMsg::Ident* release_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // required int64 self_serverid = 2;
  bool has_self_serverid() const;
  void clear_self_serverid();
  static const int kSelfServeridFieldNumber = 2;
  ::google::protobuf::int64 self_serverid() const;
  void set_self_serverid(::google::protobuf::int64 value);

  // required int64 target_serverid = 3;
  bool has_target_serverid() const;
  void clear_target_serverid();
  static const int kTargetServeridFieldNumber = 3;
  ::google::protobuf::int64 target_serverid() const;
  void set_target_serverid(::google::protobuf::int64 value);

  // required int64 gate_serverid = 4;
  bool has_gate_serverid() const;
  void clear_gate_serverid();
  static const int kGateServeridFieldNumber = 4;
  ::google::protobuf::int64 gate_serverid() const;
  void set_gate_serverid(::google::protobuf::int64 value);

  // required int64 SceneID = 5;
  bool has_sceneid() const;
  void clear_sceneid();
  static const int kSceneIDFieldNumber = 5;
  ::google::protobuf::int64 sceneid() const;
  void set_sceneid(::google::protobuf::int64 value);

  // required .AFMsg.Ident client_id = 6;
  bool has_client_id() const;
  void clear_client_id();
  static const int kClientIdFieldNumber = 6;
  const ::AFMsg::Ident& client_id() const;
  ::AFMsg::Ident* mutable_client_id();
  ::AFMsg::Ident* release_client_id();
  void set_allocated_client_id(::AFMsg::Ident* client_id);

  // required int64 groupID = 7;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupIDFieldNumber = 7;
  ::google::protobuf::int64 groupid() const;
  void set_groupid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqSwitchServer)
 private:
  inline void set_has_selfid();
  inline void clear_has_selfid();
  inline void set_has_self_serverid();
  inline void clear_has_self_serverid();
  inline void set_has_target_serverid();
  inline void clear_has_target_serverid();
  inline void set_has_gate_serverid();
  inline void clear_has_gate_serverid();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_client_id();
  inline void clear_has_client_id();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* selfid_;
  ::google::protobuf::int64 self_serverid_;
  ::google::protobuf::int64 target_serverid_;
  ::google::protobuf::int64 gate_serverid_;
  ::google::protobuf::int64 sceneid_;
  ::AFMsg::Ident* client_id_;
  ::google::protobuf::int64 groupid_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqSwitchServer* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckSwitchServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckSwitchServer) */ {
 public:
  AckSwitchServer();
  virtual ~AckSwitchServer();

  AckSwitchServer(const AckSwitchServer& from);

  inline AckSwitchServer& operator=(const AckSwitchServer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckSwitchServer& default_instance();

  void Swap(AckSwitchServer* other);

  // implements Message ----------------------------------------------

  inline AckSwitchServer* New() const { return New(NULL); }

  AckSwitchServer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckSwitchServer& from);
  void MergeFrom(const AckSwitchServer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AckSwitchServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident selfid = 1;
  bool has_selfid() const;
  void clear_selfid();
  static const int kSelfidFieldNumber = 1;
  const ::AFMsg::Ident& selfid() const;
  ::AFMsg::Ident* mutable_selfid();
  ::AFMsg::Ident* release_selfid();
  void set_allocated_selfid(::AFMsg::Ident* selfid);

  // required int64 self_serverid = 2;
  bool has_self_serverid() const;
  void clear_self_serverid();
  static const int kSelfServeridFieldNumber = 2;
  ::google::protobuf::int64 self_serverid() const;
  void set_self_serverid(::google::protobuf::int64 value);

  // required int64 target_serverid = 3;
  bool has_target_serverid() const;
  void clear_target_serverid();
  static const int kTargetServeridFieldNumber = 3;
  ::google::protobuf::int64 target_serverid() const;
  void set_target_serverid(::google::protobuf::int64 value);

  // required int64 gate_serverid = 4;
  bool has_gate_serverid() const;
  void clear_gate_serverid();
  static const int kGateServeridFieldNumber = 4;
  ::google::protobuf::int64 gate_serverid() const;
  void set_gate_serverid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:AFMsg.AckSwitchServer)
 private:
  inline void set_has_selfid();
  inline void clear_has_selfid();
  inline void set_has_self_serverid();
  inline void clear_has_self_serverid();
  inline void set_has_target_serverid();
  inline void clear_has_target_serverid();
  inline void set_has_gate_serverid();
  inline void clear_has_gate_serverid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* selfid_;
  ::google::protobuf::int64 self_serverid_;
  ::google::protobuf::int64 target_serverid_;
  ::google::protobuf::int64 gate_serverid_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static AckSwitchServer* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT TeamInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.TeamInfo) */ {
 public:
  TeamInfo();
  virtual ~TeamInfo();

  TeamInfo(const TeamInfo& from);

  inline TeamInfo& operator=(const TeamInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamInfo& default_instance();

  void Swap(TeamInfo* other);

  // implements Message ----------------------------------------------

  inline TeamInfo* New() const { return New(NULL); }

  TeamInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamInfo& from);
  void MergeFrom(const TeamInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TeamInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  const ::AFMsg::Ident& team_id() const;
  ::AFMsg::Ident* mutable_team_id();
  ::AFMsg::Ident* release_team_id();
  void set_allocated_team_id(::AFMsg::Ident* team_id);

  // required .AFMsg.Ident captain_id = 2;
  bool has_captain_id() const;
  void clear_captain_id();
  static const int kCaptainIdFieldNumber = 2;
  const ::AFMsg::Ident& captain_id() const;
  ::AFMsg::Ident* mutable_captain_id();
  ::AFMsg::Ident* release_captain_id();
  void set_allocated_captain_id(::AFMsg::Ident* captain_id);

  // repeated .AFMsg.TeammemberInfo teammemberInfo = 3;
  int teammemberinfo_size() const;
  void clear_teammemberinfo();
  static const int kTeammemberInfoFieldNumber = 3;
  const ::AFMsg::TeammemberInfo& teammemberinfo(int index) const;
  ::AFMsg::TeammemberInfo* mutable_teammemberinfo(int index);
  ::AFMsg::TeammemberInfo* add_teammemberinfo();
  ::google::protobuf::RepeatedPtrField< ::AFMsg::TeammemberInfo >*
      mutable_teammemberinfo();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::TeammemberInfo >&
      teammemberinfo() const;

  // @@protoc_insertion_point(class_scope:AFMsg.TeamInfo)
 private:
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_captain_id();
  inline void clear_has_captain_id();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* team_id_;
  ::AFMsg::Ident* captain_id_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::TeammemberInfo > teammemberinfo_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static TeamInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT TeammemberInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.TeammemberInfo) */ {
 public:
  TeammemberInfo();
  virtual ~TeammemberInfo();

  TeammemberInfo(const TeammemberInfo& from);

  inline TeammemberInfo& operator=(const TeammemberInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeammemberInfo& default_instance();

  void Swap(TeammemberInfo* other);

  // implements Message ----------------------------------------------

  inline TeammemberInfo* New() const { return New(NULL); }

  TeammemberInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeammemberInfo& from);
  void MergeFrom(const TeammemberInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TeammemberInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident player_id = 1;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  const ::AFMsg::Ident& player_id() const;
  ::AFMsg::Ident* mutable_player_id();
  ::AFMsg::Ident* release_player_id();
  void set_allocated_player_id(::AFMsg::Ident* player_id);

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required int32 nLevel = 3;
  bool has_nlevel() const;
  void clear_nlevel();
  static const int kNLevelFieldNumber = 3;
  ::google::protobuf::int32 nlevel() const;
  void set_nlevel(::google::protobuf::int32 value);

  // required int32 job = 4;
  bool has_job() const;
  void clear_job();
  static const int kJobFieldNumber = 4;
  ::google::protobuf::int32 job() const;
  void set_job(::google::protobuf::int32 value);

  // required string HeadIcon = 5;
  bool has_headicon() const;
  void clear_headicon();
  static const int kHeadIconFieldNumber = 5;
  const ::std::string& headicon() const;
  void set_headicon(const ::std::string& value);
  void set_headicon(const char* value);
  void set_headicon(const char* value, size_t size);
  ::std::string* mutable_headicon();
  ::std::string* release_headicon();
  void set_allocated_headicon(::std::string* headicon);

  // @@protoc_insertion_point(class_scope:AFMsg.TeammemberInfo)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_nlevel();
  inline void clear_has_nlevel();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_headicon();
  inline void clear_has_headicon();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* player_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 nlevel_;
  ::google::protobuf::int32 job_;
  ::google::protobuf::internal::ArenaStringPtr headicon_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static TeammemberInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckCreateTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckCreateTeam) */ {
 public:
  ReqAckCreateTeam();
  virtual ~ReqAckCreateTeam();

  ReqAckCreateTeam(const ReqAckCreateTeam& from);

  inline ReqAckCreateTeam& operator=(const ReqAckCreateTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckCreateTeam& default_instance();

  void Swap(ReqAckCreateTeam* other);

  // implements Message ----------------------------------------------

  inline ReqAckCreateTeam* New() const { return New(NULL); }

  ReqAckCreateTeam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckCreateTeam& from);
  void MergeFrom(const ReqAckCreateTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqAckCreateTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  const ::AFMsg::Ident& team_id() const;
  ::AFMsg::Ident* mutable_team_id();
  ::AFMsg::Ident* release_team_id();
  void set_allocated_team_id(::AFMsg::Ident* team_id);

  // optional .AFMsg.TeamInfo xTeamInfo = 2;
  bool has_xteaminfo() const;
  void clear_xteaminfo();
  static const int kXTeamInfoFieldNumber = 2;
  const ::AFMsg::TeamInfo& xteaminfo() const;
  ::AFMsg::TeamInfo* mutable_xteaminfo();
  ::AFMsg::TeamInfo* release_xteaminfo();
  void set_allocated_xteaminfo(::AFMsg::TeamInfo* xteaminfo);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckCreateTeam)
 private:
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_xteaminfo();
  inline void clear_has_xteaminfo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* team_id_;
  ::AFMsg::TeamInfo* xteaminfo_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckCreateTeam* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckJoinTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckJoinTeam) */ {
 public:
  ReqAckJoinTeam();
  virtual ~ReqAckJoinTeam();

  ReqAckJoinTeam(const ReqAckJoinTeam& from);

  inline ReqAckJoinTeam& operator=(const ReqAckJoinTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckJoinTeam& default_instance();

  void Swap(ReqAckJoinTeam* other);

  // implements Message ----------------------------------------------

  inline ReqAckJoinTeam* New() const { return New(NULL); }

  ReqAckJoinTeam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckJoinTeam& from);
  void MergeFrom(const ReqAckJoinTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqAckJoinTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  const ::AFMsg::Ident& team_id() const;
  ::AFMsg::Ident* mutable_team_id();
  ::AFMsg::Ident* release_team_id();
  void set_allocated_team_id(::AFMsg::Ident* team_id);

  // optional .AFMsg.TeamInfo xTeamInfo = 2;
  bool has_xteaminfo() const;
  void clear_xteaminfo();
  static const int kXTeamInfoFieldNumber = 2;
  const ::AFMsg::TeamInfo& xteaminfo() const;
  ::AFMsg::TeamInfo* mutable_xteaminfo();
  ::AFMsg::TeamInfo* release_xteaminfo();
  void set_allocated_xteaminfo(::AFMsg::TeamInfo* xteaminfo);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckJoinTeam)
 private:
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_xteaminfo();
  inline void clear_has_xteaminfo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* team_id_;
  ::AFMsg::TeamInfo* xteaminfo_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckJoinTeam* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckLeaveTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckLeaveTeam) */ {
 public:
  ReqAckLeaveTeam();
  virtual ~ReqAckLeaveTeam();

  ReqAckLeaveTeam(const ReqAckLeaveTeam& from);

  inline ReqAckLeaveTeam& operator=(const ReqAckLeaveTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckLeaveTeam& default_instance();

  void Swap(ReqAckLeaveTeam* other);

  // implements Message ----------------------------------------------

  inline ReqAckLeaveTeam* New() const { return New(NULL); }

  ReqAckLeaveTeam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckLeaveTeam& from);
  void MergeFrom(const ReqAckLeaveTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqAckLeaveTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  const ::AFMsg::Ident& team_id() const;
  ::AFMsg::Ident* mutable_team_id();
  ::AFMsg::Ident* release_team_id();
  void set_allocated_team_id(::AFMsg::Ident* team_id);

  // optional .AFMsg.TeamInfo xTeamInfo = 2;
  bool has_xteaminfo() const;
  void clear_xteaminfo();
  static const int kXTeamInfoFieldNumber = 2;
  const ::AFMsg::TeamInfo& xteaminfo() const;
  ::AFMsg::TeamInfo* mutable_xteaminfo();
  ::AFMsg::TeamInfo* release_xteaminfo();
  void set_allocated_xteaminfo(::AFMsg::TeamInfo* xteaminfo);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckLeaveTeam)
 private:
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_xteaminfo();
  inline void clear_has_xteaminfo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* team_id_;
  ::AFMsg::TeamInfo* xteaminfo_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckLeaveTeam* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckOprTeamMember : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckOprTeamMember) */ {
 public:
  ReqAckOprTeamMember();
  virtual ~ReqAckOprTeamMember();

  ReqAckOprTeamMember(const ReqAckOprTeamMember& from);

  inline ReqAckOprTeamMember& operator=(const ReqAckOprTeamMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckOprTeamMember& default_instance();

  void Swap(ReqAckOprTeamMember* other);

  // implements Message ----------------------------------------------

  inline ReqAckOprTeamMember* New() const { return New(NULL); }

  ReqAckOprTeamMember* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckOprTeamMember& from);
  void MergeFrom(const ReqAckOprTeamMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqAckOprTeamMember* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqAckOprTeamMember_EGTeamMemberOprType EGTeamMemberOprType;
  static const EGTeamMemberOprType EGAT_DOWN =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_DOWN;
  static const EGTeamMemberOprType EGAT_UP =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_UP;
  static const EGTeamMemberOprType EGAT_KICK =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_KICK;
  static const EGTeamMemberOprType EGAT_APPOINT =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_APPOINT;
  static const EGTeamMemberOprType EGAT_FIRE =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_FIRE;
  static const EGTeamMemberOprType EGAT_DEMISE =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_DEMISE;
  static const EGTeamMemberOprType EGAT_ACCEPTAPPLY =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_ACCEPTAPPLY;
  static const EGTeamMemberOprType EGAT_DENYAPPLY =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_DENYAPPLY;
  static const EGTeamMemberOprType EGAT_KICKOUT =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGAT_KICKOUT;
  static inline bool EGTeamMemberOprType_IsValid(int value) {
    return ReqAckOprTeamMember_EGTeamMemberOprType_IsValid(value);
  }
  static const EGTeamMemberOprType EGTeamMemberOprType_MIN =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGTeamMemberOprType_MIN;
  static const EGTeamMemberOprType EGTeamMemberOprType_MAX =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGTeamMemberOprType_MAX;
  static const int EGTeamMemberOprType_ARRAYSIZE =
    ReqAckOprTeamMember_EGTeamMemberOprType_EGTeamMemberOprType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EGTeamMemberOprType_descriptor() {
    return ReqAckOprTeamMember_EGTeamMemberOprType_descriptor();
  }
  static inline const ::std::string& EGTeamMemberOprType_Name(EGTeamMemberOprType value) {
    return ReqAckOprTeamMember_EGTeamMemberOprType_Name(value);
  }
  static inline bool EGTeamMemberOprType_Parse(const ::std::string& name,
      EGTeamMemberOprType* value) {
    return ReqAckOprTeamMember_EGTeamMemberOprType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  const ::AFMsg::Ident& team_id() const;
  ::AFMsg::Ident* mutable_team_id();
  ::AFMsg::Ident* release_team_id();
  void set_allocated_team_id(::AFMsg::Ident* team_id);

  // required .AFMsg.Ident member_id = 2;
  bool has_member_id() const;
  void clear_member_id();
  static const int kMemberIdFieldNumber = 2;
  const ::AFMsg::Ident& member_id() const;
  ::AFMsg::Ident* mutable_member_id();
  ::AFMsg::Ident* release_member_id();
  void set_allocated_member_id(::AFMsg::Ident* member_id);

  // required .AFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::AFMsg::ReqAckOprTeamMember_EGTeamMemberOprType type() const;
  void set_type(::AFMsg::ReqAckOprTeamMember_EGTeamMemberOprType value);

  // optional .AFMsg.TeamInfo xTeamInfo = 4;
  bool has_xteaminfo() const;
  void clear_xteaminfo();
  static const int kXTeamInfoFieldNumber = 4;
  const ::AFMsg::TeamInfo& xteaminfo() const;
  ::AFMsg::TeamInfo* mutable_xteaminfo();
  ::AFMsg::TeamInfo* release_xteaminfo();
  void set_allocated_xteaminfo(::AFMsg::TeamInfo* xteaminfo);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckOprTeamMember)
 private:
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_member_id();
  inline void clear_has_member_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_xteaminfo();
  inline void clear_has_xteaminfo();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* team_id_;
  ::AFMsg::Ident* member_id_;
  ::AFMsg::TeamInfo* xteaminfo_;
  int type_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckOprTeamMember* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqAckInviteTeam : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqAckInviteTeam) */ {
 public:
  ReqAckInviteTeam();
  virtual ~ReqAckInviteTeam();

  ReqAckInviteTeam(const ReqAckInviteTeam& from);

  inline ReqAckInviteTeam& operator=(const ReqAckInviteTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqAckInviteTeam& default_instance();

  void Swap(ReqAckInviteTeam* other);

  // implements Message ----------------------------------------------

  inline ReqAckInviteTeam* New() const { return New(NULL); }

  ReqAckInviteTeam* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqAckInviteTeam& from);
  void MergeFrom(const ReqAckInviteTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqAckInviteTeam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  const ::AFMsg::Ident& team_id() const;
  ::AFMsg::Ident* mutable_team_id();
  ::AFMsg::Ident* release_team_id();
  void set_allocated_team_id(::AFMsg::Ident* team_id);

  // required .AFMsg.Ident self_id = 2;
  bool has_self_id() const;
  void clear_self_id();
  static const int kSelfIdFieldNumber = 2;
  const ::AFMsg::Ident& self_id() const;
  ::AFMsg::Ident* mutable_self_id();
  ::AFMsg::Ident* release_self_id();
  void set_allocated_self_id(::AFMsg::Ident* self_id);

  // required .AFMsg.Ident invite_target_id = 3;
  bool has_invite_target_id() const;
  void clear_invite_target_id();
  static const int kInviteTargetIdFieldNumber = 3;
  const ::AFMsg::Ident& invite_target_id() const;
  ::AFMsg::Ident* mutable_invite_target_id();
  ::AFMsg::Ident* release_invite_target_id();
  void set_allocated_invite_target_id(::AFMsg::Ident* invite_target_id);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqAckInviteTeam)
 private:
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_self_id();
  inline void clear_has_self_id();
  inline void set_has_invite_target_id();
  inline void clear_has_invite_target_id();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* team_id_;
  ::AFMsg::Ident* self_id_;
  ::AFMsg::Ident* invite_target_id_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqAckInviteTeam* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqTeamEnterEctype : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqTeamEnterEctype) */ {
 public:
  ReqTeamEnterEctype();
  virtual ~ReqTeamEnterEctype();

  ReqTeamEnterEctype(const ReqTeamEnterEctype& from);

  inline ReqTeamEnterEctype& operator=(const ReqTeamEnterEctype& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqTeamEnterEctype& default_instance();

  void Swap(ReqTeamEnterEctype* other);

  // implements Message ----------------------------------------------

  inline ReqTeamEnterEctype* New() const { return New(NULL); }

  ReqTeamEnterEctype* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqTeamEnterEctype& from);
  void MergeFrom(const ReqTeamEnterEctype& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqTeamEnterEctype* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  const ::AFMsg::Ident& team_id() const;
  ::AFMsg::Ident* mutable_team_id();
  ::AFMsg::Ident* release_team_id();
  void set_allocated_team_id(::AFMsg::Ident* team_id);

  // required .AFMsg.Ident self_id = 2;
  bool has_self_id() const;
  void clear_self_id();
  static const int kSelfIdFieldNumber = 2;
  const ::AFMsg::Ident& self_id() const;
  ::AFMsg::Ident* mutable_self_id();
  ::AFMsg::Ident* release_self_id();
  void set_allocated_self_id(::AFMsg::Ident* self_id);

  // optional int32 nEctypeID = 3;
  bool has_nectypeid() const;
  void clear_nectypeid();
  static const int kNEctypeIDFieldNumber = 3;
  ::google::protobuf::int32 nectypeid() const;
  void set_nectypeid(::google::protobuf::int32 value);

  // optional int32 nGroupID = 4;
  bool has_ngroupid() const;
  void clear_ngroupid();
  static const int kNGroupIDFieldNumber = 4;
  ::google::protobuf::int32 ngroupid() const;
  void set_ngroupid(::google::protobuf::int32 value);

  // optional int32 nResult = 5;
  bool has_nresult() const;
  void clear_nresult();
  static const int kNResultFieldNumber = 5;
  ::google::protobuf::int32 nresult() const;
  void set_nresult(::google::protobuf::int32 value);

  // optional int32 nServerID = 6;
  bool has_nserverid() const;
  void clear_nserverid();
  static const int kNServerIDFieldNumber = 6;
  ::google::protobuf::int32 nserverid() const;
  void set_nserverid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqTeamEnterEctype)
 private:
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_self_id();
  inline void clear_has_self_id();
  inline void set_has_nectypeid();
  inline void clear_has_nectypeid();
  inline void set_has_ngroupid();
  inline void clear_has_ngroupid();
  inline void set_has_nresult();
  inline void clear_has_nresult();
  inline void set_has_nserverid();
  inline void clear_has_nserverid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* team_id_;
  ::AFMsg::Ident* self_id_;
  ::google::protobuf::int32 nectypeid_;
  ::google::protobuf::int32 ngroupid_;
  ::google::protobuf::int32 nresult_;
  ::google::protobuf::int32 nserverid_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqTeamEnterEctype* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckTeamEnterEctype : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckTeamEnterEctype) */ {
 public:
  AckTeamEnterEctype();
  virtual ~AckTeamEnterEctype();

  AckTeamEnterEctype(const AckTeamEnterEctype& from);

  inline AckTeamEnterEctype& operator=(const AckTeamEnterEctype& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckTeamEnterEctype& default_instance();

  void Swap(AckTeamEnterEctype* other);

  // implements Message ----------------------------------------------

  inline AckTeamEnterEctype* New() const { return New(NULL); }

  AckTeamEnterEctype* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckTeamEnterEctype& from);
  void MergeFrom(const AckTeamEnterEctype& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AckTeamEnterEctype* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  const ::AFMsg::Ident& team_id() const;
  ::AFMsg::Ident* mutable_team_id();
  ::AFMsg::Ident* release_team_id();
  void set_allocated_team_id(::AFMsg::Ident* team_id);

  // required .AFMsg.Ident self_id = 2;
  bool has_self_id() const;
  void clear_self_id();
  static const int kSelfIdFieldNumber = 2;
  const ::AFMsg::Ident& self_id() const;
  ::AFMsg::Ident* mutable_self_id();
  ::AFMsg::Ident* release_self_id();
  void set_allocated_self_id(::AFMsg::Ident* self_id);

  // optional int32 nEctypeID = 3;
  bool has_nectypeid() const;
  void clear_nectypeid();
  static const int kNEctypeIDFieldNumber = 3;
  ::google::protobuf::int32 nectypeid() const;
  void set_nectypeid(::google::protobuf::int32 value);

  // optional int32 nGroupID = 4;
  bool has_ngroupid() const;
  void clear_ngroupid();
  static const int kNGroupIDFieldNumber = 4;
  ::google::protobuf::int32 ngroupid() const;
  void set_ngroupid(::google::protobuf::int32 value);

  // optional int32 nResult = 5;
  bool has_nresult() const;
  void clear_nresult();
  static const int kNResultFieldNumber = 5;
  ::google::protobuf::int32 nresult() const;
  void set_nresult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.AckTeamEnterEctype)
 private:
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_self_id();
  inline void clear_has_self_id();
  inline void set_has_nectypeid();
  inline void clear_has_nectypeid();
  inline void set_has_ngroupid();
  inline void clear_has_ngroupid();
  inline void set_has_nresult();
  inline void clear_has_nresult();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* team_id_;
  ::AFMsg::Ident* self_id_;
  ::google::protobuf::int32 nectypeid_;
  ::google::protobuf::int32 ngroupid_;
  ::google::protobuf::int32 nresult_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static AckTeamEnterEctype* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT GridGuildBaseInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.GridGuildBaseInfo) */ {
 public:
  GridGuildBaseInfo();
  virtual ~GridGuildBaseInfo();

  GridGuildBaseInfo(const GridGuildBaseInfo& from);

  inline GridGuildBaseInfo& operator=(const GridGuildBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GridGuildBaseInfo& default_instance();

  void Swap(GridGuildBaseInfo* other);

  // implements Message ----------------------------------------------

  inline GridGuildBaseInfo* New() const { return New(NULL); }

  GridGuildBaseInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GridGuildBaseInfo& from);
  void MergeFrom(const GridGuildBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GridGuildBaseInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::AFMsg::Ident& id() const;
  ::AFMsg::Ident* mutable_id();
  ::AFMsg::Ident* release_id();
  void set_allocated_id(::AFMsg::Ident* id);

  // required int32 level = 2;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::int32 level() const;
  void set_level(::google::protobuf::int32 value);

  // required int32 count = 3;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // required int32 resource = 4;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 4;
  ::google::protobuf::int32 resource() const;
  void set_resource(::google::protobuf::int32 value);

  // required bytes icon = 5;
  bool has_icon() const;
  void clear_icon();
  static const int kIconFieldNumber = 5;
  const ::std::string& icon() const;
  void set_icon(const ::std::string& value);
  void set_icon(const char* value);
  void set_icon(const void* value, size_t size);
  ::std::string* mutable_icon();
  ::std::string* release_icon();
  void set_allocated_icon(::std::string* icon);

  // @@protoc_insertion_point(class_scope:AFMsg.GridGuildBaseInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_resource();
  inline void clear_has_resource();
  inline void set_has_icon();
  inline void clear_has_icon();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::internal::ArenaStringPtr icon_;
  ::google::protobuf::int32 resource_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static GridGuildBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqBigMapGridInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqBigMapGridInfo) */ {
 public:
  ReqBigMapGridInfo();
  virtual ~ReqBigMapGridInfo();

  ReqBigMapGridInfo(const ReqBigMapGridInfo& from);

  inline ReqBigMapGridInfo& operator=(const ReqBigMapGridInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqBigMapGridInfo& default_instance();

  void Swap(ReqBigMapGridInfo* other);

  // implements Message ----------------------------------------------

  inline ReqBigMapGridInfo* New() const { return New(NULL); }

  ReqBigMapGridInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqBigMapGridInfo& from);
  void MergeFrom(const ReqBigMapGridInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqBigMapGridInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes map_title_id = 1;
  int map_title_id_size() const;
  void clear_map_title_id();
  static const int kMapTitleIdFieldNumber = 1;
  const ::std::string& map_title_id(int index) const;
  ::std::string* mutable_map_title_id(int index);
  void set_map_title_id(int index, const ::std::string& value);
  void set_map_title_id(int index, const char* value);
  void set_map_title_id(int index, const void* value, size_t size);
  ::std::string* add_map_title_id();
  void add_map_title_id(const ::std::string& value);
  void add_map_title_id(const char* value);
  void add_map_title_id(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& map_title_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_map_title_id();

  // @@protoc_insertion_point(class_scope:AFMsg.ReqBigMapGridInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> map_title_id_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqBigMapGridInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT BigMapGridBaseInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.BigMapGridBaseInfo) */ {
 public:
  BigMapGridBaseInfo();
  virtual ~BigMapGridBaseInfo();

  BigMapGridBaseInfo(const BigMapGridBaseInfo& from);

  inline BigMapGridBaseInfo& operator=(const BigMapGridBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BigMapGridBaseInfo& default_instance();

  void Swap(BigMapGridBaseInfo* other);

  // implements Message ----------------------------------------------

  inline BigMapGridBaseInfo* New() const { return New(NULL); }

  BigMapGridBaseInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BigMapGridBaseInfo& from);
  void MergeFrom(const BigMapGridBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BigMapGridBaseInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required .AFMsg.GridGuildBaseInfo guild_info = 2;
  bool has_guild_info() const;
  void clear_guild_info();
  static const int kGuildInfoFieldNumber = 2;
  const ::AFMsg::GridGuildBaseInfo& guild_info() const;
  ::AFMsg::GridGuildBaseInfo* mutable_guild_info();
  ::AFMsg::GridGuildBaseInfo* release_guild_info();
  void set_allocated_guild_info(::AFMsg::GridGuildBaseInfo* guild_info);

  // required int32 kingwar_time = 10;
  bool has_kingwar_time() const;
  void clear_kingwar_time();
  static const int kKingwarTimeFieldNumber = 10;
  ::google::protobuf::int32 kingwar_time() const;
  void set_kingwar_time(::google::protobuf::int32 value);

  // required .AFMsg.Ident kingwarrer = 11;
  bool has_kingwarrer() const;
  void clear_kingwarrer();
  static const int kKingwarrerFieldNumber = 11;
  const ::AFMsg::Ident& kingwarrer() const;
  ::AFMsg::Ident* mutable_kingwarrer();
  ::AFMsg::Ident* release_kingwarrer();
  void set_allocated_kingwarrer(::AFMsg::Ident* kingwarrer);

  // required int32 hurting_time = 20;
  bool has_hurting_time() const;
  void clear_hurting_time();
  static const int kHurtingTimeFieldNumber = 20;
  ::google::protobuf::int32 hurting_time() const;
  void set_hurting_time(::google::protobuf::int32 value);

  // required .AFMsg.Ident hurter = 21;
  bool has_hurter() const;
  void clear_hurter();
  static const int kHurterFieldNumber = 21;
  const ::AFMsg::Ident& hurter() const;
  ::AFMsg::Ident* mutable_hurter();
  ::AFMsg::Ident* release_hurter();
  void set_allocated_hurter(::AFMsg::Ident* hurter);

  // @@protoc_insertion_point(class_scope:AFMsg.BigMapGridBaseInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_guild_info();
  inline void clear_has_guild_info();
  inline void set_has_kingwar_time();
  inline void clear_has_kingwar_time();
  inline void set_has_kingwarrer();
  inline void clear_has_kingwarrer();
  inline void set_has_hurting_time();
  inline void clear_has_hurting_time();
  inline void set_has_hurter();
  inline void clear_has_hurter();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::AFMsg::GridGuildBaseInfo* guild_info_;
  ::AFMsg::Ident* kingwarrer_;
  ::google::protobuf::int32 kingwar_time_;
  ::google::protobuf::int32 hurting_time_;
  ::AFMsg::Ident* hurter_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static BigMapGridBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT BigMapLeaveMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.BigMapLeaveMsg) */ {
 public:
  BigMapLeaveMsg();
  virtual ~BigMapLeaveMsg();

  BigMapLeaveMsg(const BigMapLeaveMsg& from);

  inline BigMapLeaveMsg& operator=(const BigMapLeaveMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BigMapLeaveMsg& default_instance();

  void Swap(BigMapLeaveMsg* other);

  // implements Message ----------------------------------------------

  inline BigMapLeaveMsg* New() const { return New(NULL); }

  BigMapLeaveMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BigMapLeaveMsg& from);
  void MergeFrom(const BigMapLeaveMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BigMapLeaveMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident owner = 1;
  bool has_owner() const;
  void clear_owner();
  static const int kOwnerFieldNumber = 1;
  const ::AFMsg::Ident& owner() const;
  ::AFMsg::Ident* mutable_owner();
  ::AFMsg::Ident* release_owner();
  void set_allocated_owner(::AFMsg::Ident* owner);

  // required bytes owner_name = 2;
  bool has_owner_name() const;
  void clear_owner_name();
  static const int kOwnerNameFieldNumber = 2;
  const ::std::string& owner_name() const;
  void set_owner_name(const ::std::string& value);
  void set_owner_name(const char* value);
  void set_owner_name(const void* value, size_t size);
  ::std::string* mutable_owner_name();
  ::std::string* release_owner_name();
  void set_allocated_owner_name(::std::string* owner_name);

  // required bytes msg_data = 3;
  bool has_msg_data() const;
  void clear_msg_data();
  static const int kMsgDataFieldNumber = 3;
  const ::std::string& msg_data() const;
  void set_msg_data(const ::std::string& value);
  void set_msg_data(const char* value);
  void set_msg_data(const void* value, size_t size);
  ::std::string* mutable_msg_data();
  ::std::string* release_msg_data();
  void set_allocated_msg_data(::std::string* msg_data);

  // required int32 msg_time = 4;
  bool has_msg_time() const;
  void clear_msg_time();
  static const int kMsgTimeFieldNumber = 4;
  ::google::protobuf::int32 msg_time() const;
  void set_msg_time(::google::protobuf::int32 value);

  // required int32 owner_level = 5;
  bool has_owner_level() const;
  void clear_owner_level();
  static const int kOwnerLevelFieldNumber = 5;
  ::google::protobuf::int32 owner_level() const;
  void set_owner_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.BigMapLeaveMsg)
 private:
  inline void set_has_owner();
  inline void clear_has_owner();
  inline void set_has_owner_name();
  inline void clear_has_owner_name();
  inline void set_has_msg_data();
  inline void clear_has_msg_data();
  inline void set_has_msg_time();
  inline void clear_has_msg_time();
  inline void set_has_owner_level();
  inline void clear_has_owner_level();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* owner_;
  ::google::protobuf::internal::ArenaStringPtr owner_name_;
  ::google::protobuf::internal::ArenaStringPtr msg_data_;
  ::google::protobuf::int32 msg_time_;
  ::google::protobuf::int32 owner_level_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static BigMapLeaveMsg* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT BigMapWarHistory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.BigMapWarHistory) */ {
 public:
  BigMapWarHistory();
  virtual ~BigMapWarHistory();

  BigMapWarHistory(const BigMapWarHistory& from);

  inline BigMapWarHistory& operator=(const BigMapWarHistory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BigMapWarHistory& default_instance();

  void Swap(BigMapWarHistory* other);

  // implements Message ----------------------------------------------

  inline BigMapWarHistory* New() const { return New(NULL); }

  BigMapWarHistory* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BigMapWarHistory& from);
  void MergeFrom(const BigMapWarHistory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BigMapWarHistory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.GridGuildBaseInfo red_info = 1;
  bool has_red_info() const;
  void clear_red_info();
  static const int kRedInfoFieldNumber = 1;
  const ::AFMsg::GridGuildBaseInfo& red_info() const;
  ::AFMsg::GridGuildBaseInfo* mutable_red_info();
  ::AFMsg::GridGuildBaseInfo* release_red_info();
  void set_allocated_red_info(::AFMsg::GridGuildBaseInfo* red_info);

  // required .AFMsg.GridGuildBaseInfo blue_info = 2;
  bool has_blue_info() const;
  void clear_blue_info();
  static const int kBlueInfoFieldNumber = 2;
  const ::AFMsg::GridGuildBaseInfo& blue_info() const;
  ::AFMsg::GridGuildBaseInfo* mutable_blue_info();
  ::AFMsg::GridGuildBaseInfo* release_blue_info();
  void set_allocated_blue_info(::AFMsg::GridGuildBaseInfo* blue_info);

  // required .AFMsg.Ident winner_id = 10;
  bool has_winner_id() const;
  void clear_winner_id();
  static const int kWinnerIdFieldNumber = 10;
  const ::AFMsg::Ident& winner_id() const;
  ::AFMsg::Ident* mutable_winner_id();
  ::AFMsg::Ident* release_winner_id();
  void set_allocated_winner_id(::AFMsg::Ident* winner_id);

  // required int32 war_time = 11;
  bool has_war_time() const;
  void clear_war_time();
  static const int kWarTimeFieldNumber = 11;
  ::google::protobuf::int32 war_time() const;
  void set_war_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.BigMapWarHistory)
 private:
  inline void set_has_red_info();
  inline void clear_has_red_info();
  inline void set_has_blue_info();
  inline void clear_has_blue_info();
  inline void set_has_winner_id();
  inline void clear_has_winner_id();
  inline void set_has_war_time();
  inline void clear_has_war_time();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::GridGuildBaseInfo* red_info_;
  ::AFMsg::GridGuildBaseInfo* blue_info_;
  ::AFMsg::Ident* winner_id_;
  ::google::protobuf::int32 war_time_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static BigMapWarHistory* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT BigMapGridDetailInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.BigMapGridDetailInfo) */ {
 public:
  BigMapGridDetailInfo();
  virtual ~BigMapGridDetailInfo();

  BigMapGridDetailInfo(const BigMapGridDetailInfo& from);

  inline BigMapGridDetailInfo& operator=(const BigMapGridDetailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BigMapGridDetailInfo& default_instance();

  void Swap(BigMapGridDetailInfo* other);

  // implements Message ----------------------------------------------

  inline BigMapGridDetailInfo* New() const { return New(NULL); }

  BigMapGridDetailInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BigMapGridDetailInfo& from);
  void MergeFrom(const BigMapGridDetailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BigMapGridDetailInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.BigMapGridBaseInfo grid_base_info = 1;
  bool has_grid_base_info() const;
  void clear_grid_base_info();
  static const int kGridBaseInfoFieldNumber = 1;
  const ::AFMsg::BigMapGridBaseInfo& grid_base_info() const;
  ::AFMsg::BigMapGridBaseInfo* mutable_grid_base_info();
  ::AFMsg::BigMapGridBaseInfo* release_grid_base_info();
  void set_allocated_grid_base_info(::AFMsg::BigMapGridBaseInfo* grid_base_info);

  // repeated .AFMsg.GridGuildBaseInfo stay_guid_list = 2;
  int stay_guid_list_size() const;
  void clear_stay_guid_list();
  static const int kStayGuidListFieldNumber = 2;
  const ::AFMsg::GridGuildBaseInfo& stay_guid_list(int index) const;
  ::AFMsg::GridGuildBaseInfo* mutable_stay_guid_list(int index);
  ::AFMsg::GridGuildBaseInfo* add_stay_guid_list();
  ::google::protobuf::RepeatedPtrField< ::AFMsg::GridGuildBaseInfo >*
      mutable_stay_guid_list();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::GridGuildBaseInfo >&
      stay_guid_list() const;

  // repeated .AFMsg.BigMapLeaveMsg leave_msg = 3;
  int leave_msg_size() const;
  void clear_leave_msg();
  static const int kLeaveMsgFieldNumber = 3;
  const ::AFMsg::BigMapLeaveMsg& leave_msg(int index) const;
  ::AFMsg::BigMapLeaveMsg* mutable_leave_msg(int index);
  ::AFMsg::BigMapLeaveMsg* add_leave_msg();
  ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapLeaveMsg >*
      mutable_leave_msg();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapLeaveMsg >&
      leave_msg() const;

  // repeated .AFMsg.BigMapWarHistory war_history = 4;
  int war_history_size() const;
  void clear_war_history();
  static const int kWarHistoryFieldNumber = 4;
  const ::AFMsg::BigMapWarHistory& war_history(int index) const;
  ::AFMsg::BigMapWarHistory* mutable_war_history(int index);
  ::AFMsg::BigMapWarHistory* add_war_history();
  ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapWarHistory >*
      mutable_war_history();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapWarHistory >&
      war_history() const;

  // @@protoc_insertion_point(class_scope:AFMsg.BigMapGridDetailInfo)
 private:
  inline void set_has_grid_base_info();
  inline void clear_has_grid_base_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::BigMapGridBaseInfo* grid_base_info_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::GridGuildBaseInfo > stay_guid_list_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapLeaveMsg > leave_msg_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapWarHistory > war_history_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static BigMapGridDetailInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckBigMapGridInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckBigMapGridInfo) */ {
 public:
  AckBigMapGridInfo();
  virtual ~AckBigMapGridInfo();

  AckBigMapGridInfo(const AckBigMapGridInfo& from);

  inline AckBigMapGridInfo& operator=(const AckBigMapGridInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckBigMapGridInfo& default_instance();

  void Swap(AckBigMapGridInfo* other);

  // implements Message ----------------------------------------------

  inline AckBigMapGridInfo* New() const { return New(NULL); }

  AckBigMapGridInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckBigMapGridInfo& from);
  void MergeFrom(const AckBigMapGridInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AckBigMapGridInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFMsg.BigMapGridDetailInfo map_data = 1;
  int map_data_size() const;
  void clear_map_data();
  static const int kMapDataFieldNumber = 1;
  const ::AFMsg::BigMapGridDetailInfo& map_data(int index) const;
  ::AFMsg::BigMapGridDetailInfo* mutable_map_data(int index);
  ::AFMsg::BigMapGridDetailInfo* add_map_data();
  ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapGridDetailInfo >*
      mutable_map_data();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapGridDetailInfo >&
      map_data() const;

  // @@protoc_insertion_point(class_scope:AFMsg.AckBigMapGridInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapGridDetailInfo > map_data_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static AckBigMapGridInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqBigMapInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqBigMapInfo) */ {
 public:
  ReqBigMapInfo();
  virtual ~ReqBigMapInfo();

  ReqBigMapInfo(const ReqBigMapInfo& from);

  inline ReqBigMapInfo& operator=(const ReqBigMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqBigMapInfo& default_instance();

  void Swap(ReqBigMapInfo* other);

  // implements Message ----------------------------------------------

  inline ReqBigMapInfo* New() const { return New(NULL); }

  ReqBigMapInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqBigMapInfo& from);
  void MergeFrom(const ReqBigMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqBigMapInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AFMsg.ReqBigMapInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqBigMapInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckBigMapInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckBigMapInfo) */ {
 public:
  AckBigMapInfo();
  virtual ~AckBigMapInfo();

  AckBigMapInfo(const AckBigMapInfo& from);

  inline AckBigMapInfo& operator=(const AckBigMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckBigMapInfo& default_instance();

  void Swap(AckBigMapInfo* other);

  // implements Message ----------------------------------------------

  inline AckBigMapInfo* New() const { return New(NULL); }

  AckBigMapInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckBigMapInfo& from);
  void MergeFrom(const AckBigMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AckBigMapInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .AFMsg.BigMapGridBaseInfo grid_base_info = 1;
  int grid_base_info_size() const;
  void clear_grid_base_info();
  static const int kGridBaseInfoFieldNumber = 1;
  const ::AFMsg::BigMapGridBaseInfo& grid_base_info(int index) const;
  ::AFMsg::BigMapGridBaseInfo* mutable_grid_base_info(int index);
  ::AFMsg::BigMapGridBaseInfo* add_grid_base_info();
  ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapGridBaseInfo >*
      mutable_grid_base_info();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapGridBaseInfo >&
      grid_base_info() const;

  // @@protoc_insertion_point(class_scope:AFMsg.AckBigMapInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapGridBaseInfo > grid_base_info_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static AckBigMapInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqHoldMapGrid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqHoldMapGrid) */ {
 public:
  ReqHoldMapGrid();
  virtual ~ReqHoldMapGrid();

  ReqHoldMapGrid(const ReqHoldMapGrid& from);

  inline ReqHoldMapGrid& operator=(const ReqHoldMapGrid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqHoldMapGrid& default_instance();

  void Swap(ReqHoldMapGrid* other);

  // implements Message ----------------------------------------------

  inline ReqHoldMapGrid* New() const { return New(NULL); }

  ReqHoldMapGrid* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqHoldMapGrid& from);
  void MergeFrom(const ReqHoldMapGrid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqHoldMapGrid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes map_title_id = 1;
  bool has_map_title_id() const;
  void clear_map_title_id();
  static const int kMapTitleIdFieldNumber = 1;
  const ::std::string& map_title_id() const;
  void set_map_title_id(const ::std::string& value);
  void set_map_title_id(const char* value);
  void set_map_title_id(const void* value, size_t size);
  ::std::string* mutable_map_title_id();
  ::std::string* release_map_title_id();
  void set_allocated_map_title_id(::std::string* map_title_id);

  // required .AFMsg.Ident guild_id = 2;
  bool has_guild_id() const;
  void clear_guild_id();
  static const int kGuildIdFieldNumber = 2;
  const ::AFMsg::Ident& guild_id() const;
  ::AFMsg::Ident* mutable_guild_id();
  ::AFMsg::Ident* release_guild_id();
  void set_allocated_guild_id(::AFMsg::Ident* guild_id);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqHoldMapGrid)
 private:
  inline void set_has_map_title_id();
  inline void clear_has_map_title_id();
  inline void set_has_guild_id();
  inline void clear_has_guild_id();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr map_title_id_;
  ::AFMsg::Ident* guild_id_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqHoldMapGrid* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckHoldMapGrid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckHoldMapGrid) */ {
 public:
  AckHoldMapGrid();
  virtual ~AckHoldMapGrid();

  AckHoldMapGrid(const AckHoldMapGrid& from);

  inline AckHoldMapGrid& operator=(const AckHoldMapGrid& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckHoldMapGrid& default_instance();

  void Swap(AckHoldMapGrid* other);

  // implements Message ----------------------------------------------

  inline AckHoldMapGrid* New() const { return New(NULL); }

  AckHoldMapGrid* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckHoldMapGrid& from);
  void MergeFrom(const AckHoldMapGrid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AckHoldMapGrid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AFMsg.AckHoldMapGrid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static AckHoldMapGrid* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqLeaveMapMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqLeaveMapMsg) */ {
 public:
  ReqLeaveMapMsg();
  virtual ~ReqLeaveMapMsg();

  ReqLeaveMapMsg(const ReqLeaveMapMsg& from);

  inline ReqLeaveMapMsg& operator=(const ReqLeaveMapMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqLeaveMapMsg& default_instance();

  void Swap(ReqLeaveMapMsg* other);

  // implements Message ----------------------------------------------

  inline ReqLeaveMapMsg* New() const { return New(NULL); }

  ReqLeaveMapMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqLeaveMapMsg& from);
  void MergeFrom(const ReqLeaveMapMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqLeaveMapMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes map_title_id = 1;
  bool has_map_title_id() const;
  void clear_map_title_id();
  static const int kMapTitleIdFieldNumber = 1;
  const ::std::string& map_title_id() const;
  void set_map_title_id(const ::std::string& value);
  void set_map_title_id(const char* value);
  void set_map_title_id(const void* value, size_t size);
  ::std::string* mutable_map_title_id();
  ::std::string* release_map_title_id();
  void set_allocated_map_title_id(::std::string* map_title_id);

  // required .AFMsg.BigMapLeaveMsg leave_msg = 2;
  bool has_leave_msg() const;
  void clear_leave_msg();
  static const int kLeaveMsgFieldNumber = 2;
  const ::AFMsg::BigMapLeaveMsg& leave_msg() const;
  ::AFMsg::BigMapLeaveMsg* mutable_leave_msg();
  ::AFMsg::BigMapLeaveMsg* release_leave_msg();
  void set_allocated_leave_msg(::AFMsg::BigMapLeaveMsg* leave_msg);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqLeaveMapMsg)
 private:
  inline void set_has_map_title_id();
  inline void clear_has_map_title_id();
  inline void set_has_leave_msg();
  inline void clear_has_leave_msg();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr map_title_id_;
  ::AFMsg::BigMapLeaveMsg* leave_msg_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqLeaveMapMsg* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckLeaveMapMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckLeaveMapMsg) */ {
 public:
  AckLeaveMapMsg();
  virtual ~AckLeaveMapMsg();

  AckLeaveMapMsg(const AckLeaveMapMsg& from);

  inline AckLeaveMapMsg& operator=(const AckLeaveMapMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckLeaveMapMsg& default_instance();

  void Swap(AckLeaveMapMsg* other);

  // implements Message ----------------------------------------------

  inline AckLeaveMapMsg* New() const { return New(NULL); }

  AckLeaveMapMsg* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckLeaveMapMsg& from);
  void MergeFrom(const AckLeaveMapMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AckLeaveMapMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AFMsg.AckLeaveMapMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static AckLeaveMapMsg* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqGetMapAward : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqGetMapAward) */ {
 public:
  ReqGetMapAward();
  virtual ~ReqGetMapAward();

  ReqGetMapAward(const ReqGetMapAward& from);

  inline ReqGetMapAward& operator=(const ReqGetMapAward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqGetMapAward& default_instance();

  void Swap(ReqGetMapAward* other);

  // implements Message ----------------------------------------------

  inline ReqGetMapAward* New() const { return New(NULL); }

  ReqGetMapAward* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqGetMapAward& from);
  void MergeFrom(const ReqGetMapAward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqGetMapAward* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes map_title_id = 1;
  bool has_map_title_id() const;
  void clear_map_title_id();
  static const int kMapTitleIdFieldNumber = 1;
  const ::std::string& map_title_id() const;
  void set_map_title_id(const ::std::string& value);
  void set_map_title_id(const char* value);
  void set_map_title_id(const void* value, size_t size);
  ::std::string* mutable_map_title_id();
  ::std::string* release_map_title_id();
  void set_allocated_map_title_id(::std::string* map_title_id);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqGetMapAward)
 private:
  inline void set_has_map_title_id();
  inline void clear_has_map_title_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr map_title_id_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqGetMapAward* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckGetMapAward : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckGetMapAward) */ {
 public:
  AckGetMapAward();
  virtual ~AckGetMapAward();

  AckGetMapAward(const AckGetMapAward& from);

  inline AckGetMapAward& operator=(const AckGetMapAward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckGetMapAward& default_instance();

  void Swap(AckGetMapAward* other);

  // implements Message ----------------------------------------------

  inline AckGetMapAward* New() const { return New(NULL); }

  AckGetMapAward* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckGetMapAward& from);
  void MergeFrom(const AckGetMapAward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AckGetMapAward* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AFMsg.AckGetMapAward)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static AckGetMapAward* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqMapHunting : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqMapHunting) */ {
 public:
  ReqMapHunting();
  virtual ~ReqMapHunting();

  ReqMapHunting(const ReqMapHunting& from);

  inline ReqMapHunting& operator=(const ReqMapHunting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqMapHunting& default_instance();

  void Swap(ReqMapHunting* other);

  // implements Message ----------------------------------------------

  inline ReqMapHunting* New() const { return New(NULL); }

  ReqMapHunting* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqMapHunting& from);
  void MergeFrom(const ReqMapHunting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqMapHunting* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes map_title_id = 1;
  bool has_map_title_id() const;
  void clear_map_title_id();
  static const int kMapTitleIdFieldNumber = 1;
  const ::std::string& map_title_id() const;
  void set_map_title_id(const ::std::string& value);
  void set_map_title_id(const char* value);
  void set_map_title_id(const void* value, size_t size);
  ::std::string* mutable_map_title_id();
  ::std::string* release_map_title_id();
  void set_allocated_map_title_id(::std::string* map_title_id);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqMapHunting)
 private:
  inline void set_has_map_title_id();
  inline void clear_has_map_title_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr map_title_id_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqMapHunting* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckMapHunting : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckMapHunting) */ {
 public:
  AckMapHunting();
  virtual ~AckMapHunting();

  AckMapHunting(const AckMapHunting& from);

  inline AckMapHunting& operator=(const AckMapHunting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckMapHunting& default_instance();

  void Swap(AckMapHunting* other);

  // implements Message ----------------------------------------------

  inline AckMapHunting* New() const { return New(NULL); }

  AckMapHunting* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckMapHunting& from);
  void MergeFrom(const AckMapHunting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AckMapHunting* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AFMsg.AckMapHunting)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static AckMapHunting* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqMapKingWar : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqMapKingWar) */ {
 public:
  ReqMapKingWar();
  virtual ~ReqMapKingWar();

  ReqMapKingWar(const ReqMapKingWar& from);

  inline ReqMapKingWar& operator=(const ReqMapKingWar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqMapKingWar& default_instance();

  void Swap(ReqMapKingWar* other);

  // implements Message ----------------------------------------------

  inline ReqMapKingWar* New() const { return New(NULL); }

  ReqMapKingWar* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqMapKingWar& from);
  void MergeFrom(const ReqMapKingWar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqMapKingWar* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes map_title_id = 1;
  bool has_map_title_id() const;
  void clear_map_title_id();
  static const int kMapTitleIdFieldNumber = 1;
  const ::std::string& map_title_id() const;
  void set_map_title_id(const ::std::string& value);
  void set_map_title_id(const char* value);
  void set_map_title_id(const void* value, size_t size);
  ::std::string* mutable_map_title_id();
  ::std::string* release_map_title_id();
  void set_allocated_map_title_id(::std::string* map_title_id);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqMapKingWar)
 private:
  inline void set_has_map_title_id();
  inline void clear_has_map_title_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr map_title_id_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqMapKingWar* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckMapKingWar : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckMapKingWar) */ {
 public:
  AckMapKingWar();
  virtual ~AckMapKingWar();

  AckMapKingWar(const AckMapKingWar& from);

  inline AckMapKingWar& operator=(const AckMapKingWar& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckMapKingWar& default_instance();

  void Swap(AckMapKingWar* other);

  // implements Message ----------------------------------------------

  inline AckMapKingWar* New() const { return New(NULL); }

  AckMapKingWar* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckMapKingWar& from);
  void MergeFrom(const AckMapKingWar& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AckMapKingWar* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:AFMsg.AckMapKingWar)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static AckMapKingWar* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT PVPRoomInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.PVPRoomInfo) */ {
 public:
  PVPRoomInfo();
  virtual ~PVPRoomInfo();

  PVPRoomInfo(const PVPRoomInfo& from);

  inline PVPRoomInfo& operator=(const PVPRoomInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVPRoomInfo& default_instance();

  void Swap(PVPRoomInfo* other);

  // implements Message ----------------------------------------------

  inline PVPRoomInfo* New() const { return New(NULL); }

  PVPRoomInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVPRoomInfo& from);
  void MergeFrom(const PVPRoomInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PVPRoomInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 nCellStatus = 1;
  bool has_ncellstatus() const;
  void clear_ncellstatus();
  static const int kNCellStatusFieldNumber = 1;
  ::google::protobuf::int32 ncellstatus() const;
  void set_ncellstatus(::google::protobuf::int32 value);

  // required .AFMsg.Ident RoomID = 2;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomIDFieldNumber = 2;
  const ::AFMsg::Ident& roomid() const;
  ::AFMsg::Ident* mutable_roomid();
  ::AFMsg::Ident* release_roomid();
  void set_allocated_roomid(::AFMsg::Ident* roomid);

  // required int32 nPVPMode = 3;
  bool has_npvpmode() const;
  void clear_npvpmode();
  static const int kNPVPModeFieldNumber = 3;
  ::google::protobuf::int32 npvpmode() const;
  void set_npvpmode(::google::protobuf::int32 value);

  // required int32 nPVPGrade = 4;
  bool has_npvpgrade() const;
  void clear_npvpgrade();
  static const int kNPVPGradeFieldNumber = 4;
  ::google::protobuf::int32 npvpgrade() const;
  void set_npvpgrade(::google::protobuf::int32 value);

  // required int32 MaxPalyer = 5;
  bool has_maxpalyer() const;
  void clear_maxpalyer();
  static const int kMaxPalyerFieldNumber = 5;
  ::google::protobuf::int32 maxpalyer() const;
  void set_maxpalyer(::google::protobuf::int32 value);

  // repeated .AFMsg.Ident xRedPlayer = 6;
  int xredplayer_size() const;
  void clear_xredplayer();
  static const int kXRedPlayerFieldNumber = 6;
  const ::AFMsg::Ident& xredplayer(int index) const;
  ::AFMsg::Ident* mutable_xredplayer(int index);
  ::AFMsg::Ident* add_xredplayer();
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
      mutable_xredplayer();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
      xredplayer() const;

  // repeated .AFMsg.Ident xBluePlayer = 7;
  int xblueplayer_size() const;
  void clear_xblueplayer();
  static const int kXBluePlayerFieldNumber = 7;
  const ::AFMsg::Ident& xblueplayer(int index) const;
  ::AFMsg::Ident* mutable_xblueplayer(int index);
  ::AFMsg::Ident* add_xblueplayer();
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
      mutable_xblueplayer();
  const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
      xblueplayer() const;

  // optional int64 serverid = 8;
  bool has_serverid() const;
  void clear_serverid();
  static const int kServeridFieldNumber = 8;
  ::google::protobuf::int64 serverid() const;
  void set_serverid(::google::protobuf::int64 value);

  // optional int64 SceneID = 9;
  bool has_sceneid() const;
  void clear_sceneid();
  static const int kSceneIDFieldNumber = 9;
  ::google::protobuf::int64 sceneid() const;
  void set_sceneid(::google::protobuf::int64 value);

  // optional int64 groupID = 10;
  bool has_groupid() const;
  void clear_groupid();
  static const int kGroupIDFieldNumber = 10;
  ::google::protobuf::int64 groupid() const;
  void set_groupid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:AFMsg.PVPRoomInfo)
 private:
  inline void set_has_ncellstatus();
  inline void clear_has_ncellstatus();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_npvpmode();
  inline void clear_has_npvpmode();
  inline void set_has_npvpgrade();
  inline void clear_has_npvpgrade();
  inline void set_has_maxpalyer();
  inline void clear_has_maxpalyer();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* roomid_;
  ::google::protobuf::int32 ncellstatus_;
  ::google::protobuf::int32 npvpmode_;
  ::google::protobuf::int32 npvpgrade_;
  ::google::protobuf::int32 maxpalyer_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident > xredplayer_;
  ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident > xblueplayer_;
  ::google::protobuf::int64 serverid_;
  ::google::protobuf::int64 sceneid_;
  ::google::protobuf::int64 groupid_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static PVPRoomInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqPVPApplyMatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqPVPApplyMatch) */ {
 public:
  ReqPVPApplyMatch();
  virtual ~ReqPVPApplyMatch();

  ReqPVPApplyMatch(const ReqPVPApplyMatch& from);

  inline ReqPVPApplyMatch& operator=(const ReqPVPApplyMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqPVPApplyMatch& default_instance();

  void Swap(ReqPVPApplyMatch* other);

  // implements Message ----------------------------------------------

  inline ReqPVPApplyMatch* New() const { return New(NULL); }

  ReqPVPApplyMatch* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqPVPApplyMatch& from);
  void MergeFrom(const ReqPVPApplyMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqPVPApplyMatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqPVPApplyMatch_EApplyType EApplyType;
  static const EApplyType EApplyType_Single =
    ReqPVPApplyMatch_EApplyType_EApplyType_Single;
  static const EApplyType EApplyType_Team =
    ReqPVPApplyMatch_EApplyType_EApplyType_Team;
  static inline bool EApplyType_IsValid(int value) {
    return ReqPVPApplyMatch_EApplyType_IsValid(value);
  }
  static const EApplyType EApplyType_MIN =
    ReqPVPApplyMatch_EApplyType_EApplyType_MIN;
  static const EApplyType EApplyType_MAX =
    ReqPVPApplyMatch_EApplyType_EApplyType_MAX;
  static const int EApplyType_ARRAYSIZE =
    ReqPVPApplyMatch_EApplyType_EApplyType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EApplyType_descriptor() {
    return ReqPVPApplyMatch_EApplyType_descriptor();
  }
  static inline const ::std::string& EApplyType_Name(EApplyType value) {
    return ReqPVPApplyMatch_EApplyType_Name(value);
  }
  static inline bool EApplyType_Parse(const ::std::string& name,
      EApplyType* value) {
    return ReqPVPApplyMatch_EApplyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident self_id = 1;
  bool has_self_id() const;
  void clear_self_id();
  static const int kSelfIdFieldNumber = 1;
  const ::AFMsg::Ident& self_id() const;
  ::AFMsg::Ident* mutable_self_id();
  ::AFMsg::Ident* release_self_id();
  void set_allocated_self_id(::AFMsg::Ident* self_id);

  // required int32 nPVPMode = 2;
  bool has_npvpmode() const;
  void clear_npvpmode();
  static const int kNPVPModeFieldNumber = 2;
  ::google::protobuf::int32 npvpmode() const;
  void set_npvpmode(::google::protobuf::int32 value);

  // optional int64 score = 3;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 3;
  ::google::protobuf::int64 score() const;
  void set_score(::google::protobuf::int64 value);

  // required int32 ApplyType = 4;
  bool has_applytype() const;
  void clear_applytype();
  static const int kApplyTypeFieldNumber = 4;
  ::google::protobuf::int32 applytype() const;
  void set_applytype(::google::protobuf::int32 value);

  // optional .AFMsg.Ident team_id = 5;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 5;
  const ::AFMsg::Ident& team_id() const;
  ::AFMsg::Ident* mutable_team_id();
  ::AFMsg::Ident* release_team_id();
  void set_allocated_team_id(::AFMsg::Ident* team_id);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqPVPApplyMatch)
 private:
  inline void set_has_self_id();
  inline void clear_has_self_id();
  inline void set_has_npvpmode();
  inline void clear_has_npvpmode();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_applytype();
  inline void clear_has_applytype();
  inline void set_has_team_id();
  inline void clear_has_team_id();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* self_id_;
  ::google::protobuf::int64 score_;
  ::google::protobuf::int32 npvpmode_;
  ::google::protobuf::int32 applytype_;
  ::AFMsg::Ident* team_id_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqPVPApplyMatch* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckPVPApplyMatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckPVPApplyMatch) */ {
 public:
  AckPVPApplyMatch();
  virtual ~AckPVPApplyMatch();

  AckPVPApplyMatch(const AckPVPApplyMatch& from);

  inline AckPVPApplyMatch& operator=(const AckPVPApplyMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckPVPApplyMatch& default_instance();

  void Swap(AckPVPApplyMatch* other);

  // implements Message ----------------------------------------------

  inline AckPVPApplyMatch* New() const { return New(NULL); }

  AckPVPApplyMatch* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckPVPApplyMatch& from);
  void MergeFrom(const AckPVPApplyMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AckPVPApplyMatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident self_id = 1;
  bool has_self_id() const;
  void clear_self_id();
  static const int kSelfIdFieldNumber = 1;
  const ::AFMsg::Ident& self_id() const;
  ::AFMsg::Ident* mutable_self_id();
  ::AFMsg::Ident* release_self_id();
  void set_allocated_self_id(::AFMsg::Ident* self_id);

  // optional .AFMsg.PVPRoomInfo xRoomInfo = 2;
  bool has_xroominfo() const;
  void clear_xroominfo();
  static const int kXRoomInfoFieldNumber = 2;
  const ::AFMsg::PVPRoomInfo& xroominfo() const;
  ::AFMsg::PVPRoomInfo* mutable_xroominfo();
  ::AFMsg::PVPRoomInfo* release_xroominfo();
  void set_allocated_xroominfo(::AFMsg::PVPRoomInfo* xroominfo);

  // required int32 ApplyType = 3;
  bool has_applytype() const;
  void clear_applytype();
  static const int kApplyTypeFieldNumber = 3;
  ::google::protobuf::int32 applytype() const;
  void set_applytype(::google::protobuf::int32 value);

  // required int32 nResult = 4;
  bool has_nresult() const;
  void clear_nresult();
  static const int kNResultFieldNumber = 4;
  ::google::protobuf::int32 nresult() const;
  void set_nresult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.AckPVPApplyMatch)
 private:
  inline void set_has_self_id();
  inline void clear_has_self_id();
  inline void set_has_xroominfo();
  inline void clear_has_xroominfo();
  inline void set_has_applytype();
  inline void clear_has_applytype();
  inline void set_has_nresult();
  inline void clear_has_nresult();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* self_id_;
  ::AFMsg::PVPRoomInfo* xroominfo_;
  ::google::protobuf::int32 applytype_;
  ::google::protobuf::int32 nresult_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static AckPVPApplyMatch* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT ReqCreatePVPEctype : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.ReqCreatePVPEctype) */ {
 public:
  ReqCreatePVPEctype();
  virtual ~ReqCreatePVPEctype();

  ReqCreatePVPEctype(const ReqCreatePVPEctype& from);

  inline ReqCreatePVPEctype& operator=(const ReqCreatePVPEctype& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqCreatePVPEctype& default_instance();

  void Swap(ReqCreatePVPEctype* other);

  // implements Message ----------------------------------------------

  inline ReqCreatePVPEctype* New() const { return New(NULL); }

  ReqCreatePVPEctype* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqCreatePVPEctype& from);
  void MergeFrom(const ReqCreatePVPEctype& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqCreatePVPEctype* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident self_id = 1;
  bool has_self_id() const;
  void clear_self_id();
  static const int kSelfIdFieldNumber = 1;
  const ::AFMsg::Ident& self_id() const;
  ::AFMsg::Ident* mutable_self_id();
  ::AFMsg::Ident* release_self_id();
  void set_allocated_self_id(::AFMsg::Ident* self_id);

  // required .AFMsg.PVPRoomInfo xRoomInfo = 2;
  bool has_xroominfo() const;
  void clear_xroominfo();
  static const int kXRoomInfoFieldNumber = 2;
  const ::AFMsg::PVPRoomInfo& xroominfo() const;
  ::AFMsg::PVPRoomInfo* mutable_xroominfo();
  ::AFMsg::PVPRoomInfo* release_xroominfo();
  void set_allocated_xroominfo(::AFMsg::PVPRoomInfo* xroominfo);

  // @@protoc_insertion_point(class_scope:AFMsg.ReqCreatePVPEctype)
 private:
  inline void set_has_self_id();
  inline void clear_has_self_id();
  inline void set_has_xroominfo();
  inline void clear_has_xroominfo();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* self_id_;
  ::AFMsg::PVPRoomInfo* xroominfo_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static ReqCreatePVPEctype* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOC_EXPORT AckCreatePVPEctype : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AFMsg.AckCreatePVPEctype) */ {
 public:
  AckCreatePVPEctype();
  virtual ~AckCreatePVPEctype();

  AckCreatePVPEctype(const AckCreatePVPEctype& from);

  inline AckCreatePVPEctype& operator=(const AckCreatePVPEctype& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckCreatePVPEctype& default_instance();

  void Swap(AckCreatePVPEctype* other);

  // implements Message ----------------------------------------------

  inline AckCreatePVPEctype* New() const { return New(NULL); }

  AckCreatePVPEctype* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckCreatePVPEctype& from);
  void MergeFrom(const AckCreatePVPEctype& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AckCreatePVPEctype* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .AFMsg.Ident self_id = 1;
  bool has_self_id() const;
  void clear_self_id();
  static const int kSelfIdFieldNumber = 1;
  const ::AFMsg::Ident& self_id() const;
  ::AFMsg::Ident* mutable_self_id();
  ::AFMsg::Ident* release_self_id();
  void set_allocated_self_id(::AFMsg::Ident* self_id);

  // required .AFMsg.PVPRoomInfo xRoomInfo = 2;
  bool has_xroominfo() const;
  void clear_xroominfo();
  static const int kXRoomInfoFieldNumber = 2;
  const ::AFMsg::PVPRoomInfo& xroominfo() const;
  ::AFMsg::PVPRoomInfo* mutable_xroominfo();
  ::AFMsg::PVPRoomInfo* release_xroominfo();
  void set_allocated_xroominfo(::AFMsg::PVPRoomInfo* xroominfo);

  // required int32 ApplyType = 3;
  bool has_applytype() const;
  void clear_applytype();
  static const int kApplyTypeFieldNumber = 3;
  ::google::protobuf::int32 applytype() const;
  void set_applytype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AFMsg.AckCreatePVPEctype)
 private:
  inline void set_has_self_id();
  inline void clear_has_self_id();
  inline void set_has_xroominfo();
  inline void clear_has_xroominfo();
  inline void set_has_applytype();
  inline void clear_has_applytype();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::AFMsg::Ident* self_id_;
  ::AFMsg::PVPRoomInfo* xroominfo_;
  ::google::protobuf::int32 applytype_;
  friend void LIBPROTOC_EXPORT protobuf_AddDesc_AFMsgShare_2eproto();
  friend void protobuf_AssignDesc_AFMsgShare_2eproto();
  friend void protobuf_ShutdownFile_AFMsgShare_2eproto();

  void InitAsDefaultInstance();
  static AckCreatePVPEctype* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqEnterGameServer

// required .AFMsg.Ident id = 1;
inline bool ReqEnterGameServer::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqEnterGameServer::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqEnterGameServer::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqEnterGameServer::clear_id() {
  if (id_ != NULL) id_->::AFMsg::Ident::Clear();
  clear_has_id();
}
inline const ::AFMsg::Ident& ReqEnterGameServer::id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqEnterGameServer.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::AFMsg::Ident* ReqEnterGameServer::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqEnterGameServer.id)
  return id_;
}
inline ::AFMsg::Ident* ReqEnterGameServer::release_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqEnterGameServer.id)
  clear_has_id();
  ::AFMsg::Ident* temp = id_;
  id_ = NULL;
  return temp;
}
inline void ReqEnterGameServer::set_allocated_id(::AFMsg::Ident* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqEnterGameServer.id)
}

// required bytes account = 2;
inline bool ReqEnterGameServer::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqEnterGameServer::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqEnterGameServer::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqEnterGameServer::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& ReqEnterGameServer::account() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqEnterGameServer.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqEnterGameServer::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqEnterGameServer.account)
}
inline void ReqEnterGameServer::set_account(const char* value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqEnterGameServer.account)
}
inline void ReqEnterGameServer::set_account(const void* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqEnterGameServer.account)
}
inline ::std::string* ReqEnterGameServer::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqEnterGameServer.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqEnterGameServer::release_account() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqEnterGameServer.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqEnterGameServer::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqEnterGameServer.account)
}

// required int32 game_id = 3;
inline bool ReqEnterGameServer::has_game_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqEnterGameServer::set_has_game_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqEnterGameServer::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqEnterGameServer::clear_game_id() {
  game_id_ = 0;
  clear_has_game_id();
}
inline ::google::protobuf::int32 ReqEnterGameServer::game_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqEnterGameServer.game_id)
  return game_id_;
}
inline void ReqEnterGameServer::set_game_id(::google::protobuf::int32 value) {
  set_has_game_id();
  game_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqEnterGameServer.game_id)
}

// required bytes name = 4;
inline bool ReqEnterGameServer::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqEnterGameServer::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqEnterGameServer::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqEnterGameServer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ReqEnterGameServer::name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqEnterGameServer.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqEnterGameServer::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqEnterGameServer.name)
}
inline void ReqEnterGameServer::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqEnterGameServer.name)
}
inline void ReqEnterGameServer::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqEnterGameServer.name)
}
inline ::std::string* ReqEnterGameServer::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqEnterGameServer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqEnterGameServer::release_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqEnterGameServer.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqEnterGameServer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqEnterGameServer.name)
}

// -------------------------------------------------------------------

// ReqHeartBeat

// -------------------------------------------------------------------

// ReqLeaveGameServer

// -------------------------------------------------------------------

// PlayerEntryInfo

// required .AFMsg.Ident object_guid = 1;
inline bool PlayerEntryInfo::has_object_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerEntryInfo::set_has_object_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerEntryInfo::clear_has_object_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerEntryInfo::clear_object_guid() {
  if (object_guid_ != NULL) object_guid_->::AFMsg::Ident::Clear();
  clear_has_object_guid();
}
inline const ::AFMsg::Ident& PlayerEntryInfo::object_guid() const {
  // @@protoc_insertion_point(field_get:AFMsg.PlayerEntryInfo.object_guid)
  return object_guid_ != NULL ? *object_guid_ : *default_instance_->object_guid_;
}
inline ::AFMsg::Ident* PlayerEntryInfo::mutable_object_guid() {
  set_has_object_guid();
  if (object_guid_ == NULL) {
    object_guid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.PlayerEntryInfo.object_guid)
  return object_guid_;
}
inline ::AFMsg::Ident* PlayerEntryInfo::release_object_guid() {
  // @@protoc_insertion_point(field_release:AFMsg.PlayerEntryInfo.object_guid)
  clear_has_object_guid();
  ::AFMsg::Ident* temp = object_guid_;
  object_guid_ = NULL;
  return temp;
}
inline void PlayerEntryInfo::set_allocated_object_guid(::AFMsg::Ident* object_guid) {
  delete object_guid_;
  object_guid_ = object_guid;
  if (object_guid) {
    set_has_object_guid();
  } else {
    clear_has_object_guid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.PlayerEntryInfo.object_guid)
}

// required .AFMsg.Point3D pos = 2;
inline bool PlayerEntryInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerEntryInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerEntryInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerEntryInfo::clear_pos() {
  if (pos_ != NULL) pos_->::AFMsg::Point3D::Clear();
  clear_has_pos();
}
inline const ::AFMsg::Point3D& PlayerEntryInfo::pos() const {
  // @@protoc_insertion_point(field_get:AFMsg.PlayerEntryInfo.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::AFMsg::Point3D* PlayerEntryInfo::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::AFMsg::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.PlayerEntryInfo.pos)
  return pos_;
}
inline ::AFMsg::Point3D* PlayerEntryInfo::release_pos() {
  // @@protoc_insertion_point(field_release:AFMsg.PlayerEntryInfo.pos)
  clear_has_pos();
  ::AFMsg::Point3D* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void PlayerEntryInfo::set_allocated_pos(::AFMsg::Point3D* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.PlayerEntryInfo.pos)
}

// required int32 career_type = 3;
inline bool PlayerEntryInfo::has_career_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerEntryInfo::set_has_career_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerEntryInfo::clear_has_career_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerEntryInfo::clear_career_type() {
  career_type_ = 0;
  clear_has_career_type();
}
inline ::google::protobuf::int32 PlayerEntryInfo::career_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.PlayerEntryInfo.career_type)
  return career_type_;
}
inline void PlayerEntryInfo::set_career_type(::google::protobuf::int32 value) {
  set_has_career_type();
  career_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PlayerEntryInfo.career_type)
}

// required int32 player_state = 4;
inline bool PlayerEntryInfo::has_player_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerEntryInfo::set_has_player_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerEntryInfo::clear_has_player_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerEntryInfo::clear_player_state() {
  player_state_ = 0;
  clear_has_player_state();
}
inline ::google::protobuf::int32 PlayerEntryInfo::player_state() const {
  // @@protoc_insertion_point(field_get:AFMsg.PlayerEntryInfo.player_state)
  return player_state_;
}
inline void PlayerEntryInfo::set_player_state(::google::protobuf::int32 value) {
  set_has_player_state();
  player_state_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PlayerEntryInfo.player_state)
}

// required bytes config_id = 5;
inline bool PlayerEntryInfo::has_config_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerEntryInfo::set_has_config_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerEntryInfo::clear_has_config_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerEntryInfo::clear_config_id() {
  config_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_config_id();
}
inline const ::std::string& PlayerEntryInfo::config_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.PlayerEntryInfo.config_id)
  return config_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerEntryInfo::set_config_id(const ::std::string& value) {
  set_has_config_id();
  config_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.PlayerEntryInfo.config_id)
}
inline void PlayerEntryInfo::set_config_id(const char* value) {
  set_has_config_id();
  config_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.PlayerEntryInfo.config_id)
}
inline void PlayerEntryInfo::set_config_id(const void* value, size_t size) {
  set_has_config_id();
  config_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.PlayerEntryInfo.config_id)
}
inline ::std::string* PlayerEntryInfo::mutable_config_id() {
  set_has_config_id();
  // @@protoc_insertion_point(field_mutable:AFMsg.PlayerEntryInfo.config_id)
  return config_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerEntryInfo::release_config_id() {
  // @@protoc_insertion_point(field_release:AFMsg.PlayerEntryInfo.config_id)
  clear_has_config_id();
  return config_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerEntryInfo::set_allocated_config_id(::std::string* config_id) {
  if (config_id != NULL) {
    set_has_config_id();
  } else {
    clear_has_config_id();
  }
  config_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.PlayerEntryInfo.config_id)
}

// required int32 scene_id = 6;
inline bool PlayerEntryInfo::has_scene_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerEntryInfo::set_has_scene_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerEntryInfo::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerEntryInfo::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 PlayerEntryInfo::scene_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.PlayerEntryInfo.scene_id)
  return scene_id_;
}
inline void PlayerEntryInfo::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PlayerEntryInfo.scene_id)
}

// required bytes class_id = 7;
inline bool PlayerEntryInfo::has_class_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerEntryInfo::set_has_class_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerEntryInfo::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerEntryInfo::clear_class_id() {
  class_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_class_id();
}
inline const ::std::string& PlayerEntryInfo::class_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.PlayerEntryInfo.class_id)
  return class_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerEntryInfo::set_class_id(const ::std::string& value) {
  set_has_class_id();
  class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.PlayerEntryInfo.class_id)
}
inline void PlayerEntryInfo::set_class_id(const char* value) {
  set_has_class_id();
  class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.PlayerEntryInfo.class_id)
}
inline void PlayerEntryInfo::set_class_id(const void* value, size_t size) {
  set_has_class_id();
  class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.PlayerEntryInfo.class_id)
}
inline ::std::string* PlayerEntryInfo::mutable_class_id() {
  set_has_class_id();
  // @@protoc_insertion_point(field_mutable:AFMsg.PlayerEntryInfo.class_id)
  return class_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerEntryInfo::release_class_id() {
  // @@protoc_insertion_point(field_release:AFMsg.PlayerEntryInfo.class_id)
  clear_has_class_id();
  return class_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerEntryInfo::set_allocated_class_id(::std::string* class_id) {
  if (class_id != NULL) {
    set_has_class_id();
  } else {
    clear_has_class_id();
  }
  class_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.PlayerEntryInfo.class_id)
}

// -------------------------------------------------------------------

// AckPlayerEntryList

// repeated .AFMsg.PlayerEntryInfo object_list = 1;
inline int AckPlayerEntryList::object_list_size() const {
  return object_list_.size();
}
inline void AckPlayerEntryList::clear_object_list() {
  object_list_.Clear();
}
inline const ::AFMsg::PlayerEntryInfo& AckPlayerEntryList::object_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.AckPlayerEntryList.object_list)
  return object_list_.Get(index);
}
inline ::AFMsg::PlayerEntryInfo* AckPlayerEntryList::mutable_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.AckPlayerEntryList.object_list)
  return object_list_.Mutable(index);
}
inline ::AFMsg::PlayerEntryInfo* AckPlayerEntryList::add_object_list() {
  // @@protoc_insertion_point(field_add:AFMsg.AckPlayerEntryList.object_list)
  return object_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::PlayerEntryInfo >*
AckPlayerEntryList::mutable_object_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.AckPlayerEntryList.object_list)
  return &object_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::PlayerEntryInfo >&
AckPlayerEntryList::object_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.AckPlayerEntryList.object_list)
  return object_list_;
}

// -------------------------------------------------------------------

// AckPlayerLeaveList

// repeated .AFMsg.Ident object_list = 1;
inline int AckPlayerLeaveList::object_list_size() const {
  return object_list_.size();
}
inline void AckPlayerLeaveList::clear_object_list() {
  object_list_.Clear();
}
inline const ::AFMsg::Ident& AckPlayerLeaveList::object_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.AckPlayerLeaveList.object_list)
  return object_list_.Get(index);
}
inline ::AFMsg::Ident* AckPlayerLeaveList::mutable_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.AckPlayerLeaveList.object_list)
  return object_list_.Mutable(index);
}
inline ::AFMsg::Ident* AckPlayerLeaveList::add_object_list() {
  // @@protoc_insertion_point(field_add:AFMsg.AckPlayerLeaveList.object_list)
  return object_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
AckPlayerLeaveList::mutable_object_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.AckPlayerLeaveList.object_list)
  return &object_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
AckPlayerLeaveList::object_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.AckPlayerLeaveList.object_list)
  return object_list_;
}

// -------------------------------------------------------------------

// ReqAckSynData

// required .AFMsg.Ident syser = 1;
inline bool ReqAckSynData::has_syser() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckSynData::set_has_syser() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckSynData::clear_has_syser() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckSynData::clear_syser() {
  if (syser_ != NULL) syser_->::AFMsg::Ident::Clear();
  clear_has_syser();
}
inline const ::AFMsg::Ident& ReqAckSynData::syser() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSynData.syser)
  return syser_ != NULL ? *syser_ : *default_instance_->syser_;
}
inline ::AFMsg::Ident* ReqAckSynData::mutable_syser() {
  set_has_syser();
  if (syser_ == NULL) {
    syser_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckSynData.syser)
  return syser_;
}
inline ::AFMsg::Ident* ReqAckSynData::release_syser() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckSynData.syser)
  clear_has_syser();
  ::AFMsg::Ident* temp = syser_;
  syser_ = NULL;
  return temp;
}
inline void ReqAckSynData::set_allocated_syser(::AFMsg::Ident* syser) {
  delete syser_;
  syser_ = syser;
  if (syser) {
    set_has_syser();
  } else {
    clear_has_syser();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckSynData.syser)
}

// repeated .AFMsg.Ident object_list = 2;
inline int ReqAckSynData::object_list_size() const {
  return object_list_.size();
}
inline void ReqAckSynData::clear_object_list() {
  object_list_.Clear();
}
inline const ::AFMsg::Ident& ReqAckSynData::object_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSynData.object_list)
  return object_list_.Get(index);
}
inline ::AFMsg::Ident* ReqAckSynData::mutable_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckSynData.object_list)
  return object_list_.Mutable(index);
}
inline ::AFMsg::Ident* ReqAckSynData::add_object_list() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqAckSynData.object_list)
  return object_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
ReqAckSynData::mutable_object_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqAckSynData.object_list)
  return &object_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
ReqAckSynData::object_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqAckSynData.object_list)
  return object_list_;
}

// required bytes data = 3;
inline bool ReqAckSynData::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqAckSynData::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqAckSynData::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqAckSynData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& ReqAckSynData::data() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSynData.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckSynData::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSynData.data)
}
inline void ReqAckSynData::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckSynData.data)
}
inline void ReqAckSynData::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckSynData.data)
}
inline ::std::string* ReqAckSynData::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckSynData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckSynData::release_data() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckSynData.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckSynData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckSynData.data)
}

// required .AFMsg.ReqAckSynData.SynType syn_type = 4;
inline bool ReqAckSynData::has_syn_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqAckSynData::set_has_syn_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqAckSynData::clear_has_syn_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqAckSynData::clear_syn_type() {
  syn_type_ = 1;
  clear_has_syn_type();
}
inline ::AFMsg::ReqAckSynData_SynType ReqAckSynData::syn_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSynData.syn_type)
  return static_cast< ::AFMsg::ReqAckSynData_SynType >(syn_type_);
}
inline void ReqAckSynData::set_syn_type(::AFMsg::ReqAckSynData_SynType value) {
  assert(::AFMsg::ReqAckSynData_SynType_IsValid(value));
  set_has_syn_type();
  syn_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSynData.syn_type)
}

// required .AFMsg.EGameMsgID msg_id = 5;
inline bool ReqAckSynData::has_msg_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqAckSynData::set_has_msg_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqAckSynData::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqAckSynData::clear_msg_id() {
  msg_id_ = 0;
  clear_has_msg_id();
}
inline ::AFMsg::EGameMsgID ReqAckSynData::msg_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSynData.msg_id)
  return static_cast< ::AFMsg::EGameMsgID >(msg_id_);
}
inline void ReqAckSynData::set_msg_id(::AFMsg::EGameMsgID value) {
  assert(::AFMsg::EGameMsgID_IsValid(value));
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSynData.msg_id)
}

// -------------------------------------------------------------------

// ReqAckPlayerMove

// required .AFMsg.Ident mover = 1;
inline bool ReqAckPlayerMove::has_mover() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckPlayerMove::set_has_mover() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckPlayerMove::clear_has_mover() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckPlayerMove::clear_mover() {
  if (mover_ != NULL) mover_->::AFMsg::Ident::Clear();
  clear_has_mover();
}
inline const ::AFMsg::Ident& ReqAckPlayerMove::mover() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerMove.mover)
  return mover_ != NULL ? *mover_ : *default_instance_->mover_;
}
inline ::AFMsg::Ident* ReqAckPlayerMove::mutable_mover() {
  set_has_mover();
  if (mover_ == NULL) {
    mover_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckPlayerMove.mover)
  return mover_;
}
inline ::AFMsg::Ident* ReqAckPlayerMove::release_mover() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckPlayerMove.mover)
  clear_has_mover();
  ::AFMsg::Ident* temp = mover_;
  mover_ = NULL;
  return temp;
}
inline void ReqAckPlayerMove::set_allocated_mover(::AFMsg::Ident* mover) {
  delete mover_;
  mover_ = mover;
  if (mover) {
    set_has_mover();
  } else {
    clear_has_mover();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckPlayerMove.mover)
}

// required int32 moveType = 2;
inline bool ReqAckPlayerMove::has_movetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckPlayerMove::set_has_movetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckPlayerMove::clear_has_movetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckPlayerMove::clear_movetype() {
  movetype_ = 0;
  clear_has_movetype();
}
inline ::google::protobuf::int32 ReqAckPlayerMove::movetype() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerMove.moveType)
  return movetype_;
}
inline void ReqAckPlayerMove::set_movetype(::google::protobuf::int32 value) {
  set_has_movetype();
  movetype_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckPlayerMove.moveType)
}

// repeated .AFMsg.Position target_pos = 3;
inline int ReqAckPlayerMove::target_pos_size() const {
  return target_pos_.size();
}
inline void ReqAckPlayerMove::clear_target_pos() {
  target_pos_.Clear();
}
inline const ::AFMsg::Position& ReqAckPlayerMove::target_pos(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerMove.target_pos)
  return target_pos_.Get(index);
}
inline ::AFMsg::Position* ReqAckPlayerMove::mutable_target_pos(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckPlayerMove.target_pos)
  return target_pos_.Mutable(index);
}
inline ::AFMsg::Position* ReqAckPlayerMove::add_target_pos() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqAckPlayerMove.target_pos)
  return target_pos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::Position >*
ReqAckPlayerMove::mutable_target_pos() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqAckPlayerMove.target_pos)
  return &target_pos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::Position >&
ReqAckPlayerMove::target_pos() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqAckPlayerMove.target_pos)
  return target_pos_;
}

// repeated .AFMsg.Position source_pos = 4;
inline int ReqAckPlayerMove::source_pos_size() const {
  return source_pos_.size();
}
inline void ReqAckPlayerMove::clear_source_pos() {
  source_pos_.Clear();
}
inline const ::AFMsg::Position& ReqAckPlayerMove::source_pos(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerMove.source_pos)
  return source_pos_.Get(index);
}
inline ::AFMsg::Position* ReqAckPlayerMove::mutable_source_pos(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckPlayerMove.source_pos)
  return source_pos_.Mutable(index);
}
inline ::AFMsg::Position* ReqAckPlayerMove::add_source_pos() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqAckPlayerMove.source_pos)
  return source_pos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::Position >*
ReqAckPlayerMove::mutable_source_pos() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqAckPlayerMove.source_pos)
  return &source_pos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::Position >&
ReqAckPlayerMove::source_pos() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqAckPlayerMove.source_pos)
  return source_pos_;
}

// -------------------------------------------------------------------

// ChatContainer

// required int32 ConTainerType = 2;
inline bool ChatContainer::has_containertype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatContainer::set_has_containertype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatContainer::clear_has_containertype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatContainer::clear_containertype() {
  containertype_ = 0;
  clear_has_containertype();
}
inline ::google::protobuf::int32 ChatContainer::containertype() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatContainer.ConTainerType)
  return containertype_;
}
inline void ChatContainer::set_containertype(::google::protobuf::int32 value) {
  set_has_containertype();
  containertype_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ChatContainer.ConTainerType)
}

// required bytes data_info = 3;
inline bool ChatContainer::has_data_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatContainer::set_has_data_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatContainer::clear_has_data_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatContainer::clear_data_info() {
  data_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data_info();
}
inline const ::std::string& ChatContainer::data_info() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatContainer.data_info)
  return data_info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatContainer::set_data_info(const ::std::string& value) {
  set_has_data_info();
  data_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ChatContainer.data_info)
}
inline void ChatContainer::set_data_info(const char* value) {
  set_has_data_info();
  data_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ChatContainer.data_info)
}
inline void ChatContainer::set_data_info(const void* value, size_t size) {
  set_has_data_info();
  data_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ChatContainer.data_info)
}
inline ::std::string* ChatContainer::mutable_data_info() {
  set_has_data_info();
  // @@protoc_insertion_point(field_mutable:AFMsg.ChatContainer.data_info)
  return data_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatContainer::release_data_info() {
  // @@protoc_insertion_point(field_release:AFMsg.ChatContainer.data_info)
  clear_has_data_info();
  return data_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatContainer::set_allocated_data_info(::std::string* data_info) {
  if (data_info != NULL) {
    set_has_data_info();
  } else {
    clear_has_data_info();
  }
  data_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_info);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ChatContainer.data_info)
}

// -------------------------------------------------------------------

// ReqAckPlayerChat

// required .AFMsg.Ident chat_id = 1;
inline bool ReqAckPlayerChat::has_chat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckPlayerChat::set_has_chat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckPlayerChat::clear_has_chat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckPlayerChat::clear_chat_id() {
  if (chat_id_ != NULL) chat_id_->::AFMsg::Ident::Clear();
  clear_has_chat_id();
}
inline const ::AFMsg::Ident& ReqAckPlayerChat::chat_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerChat.chat_id)
  return chat_id_ != NULL ? *chat_id_ : *default_instance_->chat_id_;
}
inline ::AFMsg::Ident* ReqAckPlayerChat::mutable_chat_id() {
  set_has_chat_id();
  if (chat_id_ == NULL) {
    chat_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckPlayerChat.chat_id)
  return chat_id_;
}
inline ::AFMsg::Ident* ReqAckPlayerChat::release_chat_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckPlayerChat.chat_id)
  clear_has_chat_id();
  ::AFMsg::Ident* temp = chat_id_;
  chat_id_ = NULL;
  return temp;
}
inline void ReqAckPlayerChat::set_allocated_chat_id(::AFMsg::Ident* chat_id) {
  delete chat_id_;
  chat_id_ = chat_id;
  if (chat_id) {
    set_has_chat_id();
  } else {
    clear_has_chat_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckPlayerChat.chat_id)
}

// required .AFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
inline bool ReqAckPlayerChat::has_chat_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckPlayerChat::set_has_chat_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckPlayerChat::clear_has_chat_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckPlayerChat::clear_chat_type() {
  chat_type_ = 0;
  clear_has_chat_type();
}
inline ::AFMsg::ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::chat_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerChat.chat_type)
  return static_cast< ::AFMsg::ReqAckPlayerChat_EGameChatType >(chat_type_);
}
inline void ReqAckPlayerChat::set_chat_type(::AFMsg::ReqAckPlayerChat_EGameChatType value) {
  assert(::AFMsg::ReqAckPlayerChat_EGameChatType_IsValid(value));
  set_has_chat_type();
  chat_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckPlayerChat.chat_type)
}

// required bytes chat_info = 3;
inline bool ReqAckPlayerChat::has_chat_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqAckPlayerChat::set_has_chat_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqAckPlayerChat::clear_has_chat_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqAckPlayerChat::clear_chat_info() {
  chat_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chat_info();
}
inline const ::std::string& ReqAckPlayerChat::chat_info() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerChat.chat_info)
  return chat_info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckPlayerChat::set_chat_info(const ::std::string& value) {
  set_has_chat_info();
  chat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckPlayerChat.chat_info)
}
inline void ReqAckPlayerChat::set_chat_info(const char* value) {
  set_has_chat_info();
  chat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckPlayerChat.chat_info)
}
inline void ReqAckPlayerChat::set_chat_info(const void* value, size_t size) {
  set_has_chat_info();
  chat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckPlayerChat.chat_info)
}
inline ::std::string* ReqAckPlayerChat::mutable_chat_info() {
  set_has_chat_info();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckPlayerChat.chat_info)
  return chat_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckPlayerChat::release_chat_info() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckPlayerChat.chat_info)
  clear_has_chat_info();
  return chat_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckPlayerChat::set_allocated_chat_info(::std::string* chat_info) {
  if (chat_info != NULL) {
    set_has_chat_info();
  } else {
    clear_has_chat_info();
  }
  chat_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_info);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckPlayerChat.chat_info)
}

// required bytes chat_name = 4;
inline bool ReqAckPlayerChat::has_chat_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqAckPlayerChat::set_has_chat_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqAckPlayerChat::clear_has_chat_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqAckPlayerChat::clear_chat_name() {
  chat_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chat_name();
}
inline const ::std::string& ReqAckPlayerChat::chat_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerChat.chat_name)
  return chat_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckPlayerChat::set_chat_name(const ::std::string& value) {
  set_has_chat_name();
  chat_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckPlayerChat.chat_name)
}
inline void ReqAckPlayerChat::set_chat_name(const char* value) {
  set_has_chat_name();
  chat_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckPlayerChat.chat_name)
}
inline void ReqAckPlayerChat::set_chat_name(const void* value, size_t size) {
  set_has_chat_name();
  chat_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckPlayerChat.chat_name)
}
inline ::std::string* ReqAckPlayerChat::mutable_chat_name() {
  set_has_chat_name();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckPlayerChat.chat_name)
  return chat_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckPlayerChat::release_chat_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckPlayerChat.chat_name)
  clear_has_chat_name();
  return chat_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckPlayerChat::set_allocated_chat_name(::std::string* chat_name) {
  if (chat_name != NULL) {
    set_has_chat_name();
  } else {
    clear_has_chat_name();
  }
  chat_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckPlayerChat.chat_name)
}

// optional .AFMsg.Ident target_id = 5;
inline bool ReqAckPlayerChat::has_target_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqAckPlayerChat::set_has_target_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqAckPlayerChat::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqAckPlayerChat::clear_target_id() {
  if (target_id_ != NULL) target_id_->::AFMsg::Ident::Clear();
  clear_has_target_id();
}
inline const ::AFMsg::Ident& ReqAckPlayerChat::target_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerChat.target_id)
  return target_id_ != NULL ? *target_id_ : *default_instance_->target_id_;
}
inline ::AFMsg::Ident* ReqAckPlayerChat::mutable_target_id() {
  set_has_target_id();
  if (target_id_ == NULL) {
    target_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckPlayerChat.target_id)
  return target_id_;
}
inline ::AFMsg::Ident* ReqAckPlayerChat::release_target_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckPlayerChat.target_id)
  clear_has_target_id();
  ::AFMsg::Ident* temp = target_id_;
  target_id_ = NULL;
  return temp;
}
inline void ReqAckPlayerChat::set_allocated_target_id(::AFMsg::Ident* target_id) {
  delete target_id_;
  target_id_ = target_id;
  if (target_id) {
    set_has_target_id();
  } else {
    clear_has_target_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckPlayerChat.target_id)
}

// repeated .AFMsg.ChatContainer Container_data = 6;
inline int ReqAckPlayerChat::container_data_size() const {
  return container_data_.size();
}
inline void ReqAckPlayerChat::clear_container_data() {
  container_data_.Clear();
}
inline const ::AFMsg::ChatContainer& ReqAckPlayerChat::container_data(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerChat.Container_data)
  return container_data_.Get(index);
}
inline ::AFMsg::ChatContainer* ReqAckPlayerChat::mutable_container_data(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckPlayerChat.Container_data)
  return container_data_.Mutable(index);
}
inline ::AFMsg::ChatContainer* ReqAckPlayerChat::add_container_data() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqAckPlayerChat.Container_data)
  return container_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::ChatContainer >*
ReqAckPlayerChat::mutable_container_data() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqAckPlayerChat.Container_data)
  return &container_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::ChatContainer >&
ReqAckPlayerChat::container_data() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqAckPlayerChat.Container_data)
  return container_data_;
}

// -------------------------------------------------------------------

// EffectData

// required .AFMsg.Ident effect_ident = 1;
inline bool EffectData::has_effect_ident() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EffectData::set_has_effect_ident() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EffectData::clear_has_effect_ident() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EffectData::clear_effect_ident() {
  if (effect_ident_ != NULL) effect_ident_->::AFMsg::Ident::Clear();
  clear_has_effect_ident();
}
inline const ::AFMsg::Ident& EffectData::effect_ident() const {
  // @@protoc_insertion_point(field_get:AFMsg.EffectData.effect_ident)
  return effect_ident_ != NULL ? *effect_ident_ : *default_instance_->effect_ident_;
}
inline ::AFMsg::Ident* EffectData::mutable_effect_ident() {
  set_has_effect_ident();
  if (effect_ident_ == NULL) {
    effect_ident_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.EffectData.effect_ident)
  return effect_ident_;
}
inline ::AFMsg::Ident* EffectData::release_effect_ident() {
  // @@protoc_insertion_point(field_release:AFMsg.EffectData.effect_ident)
  clear_has_effect_ident();
  ::AFMsg::Ident* temp = effect_ident_;
  effect_ident_ = NULL;
  return temp;
}
inline void EffectData::set_allocated_effect_ident(::AFMsg::Ident* effect_ident) {
  delete effect_ident_;
  effect_ident_ = effect_ident;
  if (effect_ident) {
    set_has_effect_ident();
  } else {
    clear_has_effect_ident();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.EffectData.effect_ident)
}

// required int32 effect_value = 2;
inline bool EffectData::has_effect_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EffectData::set_has_effect_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EffectData::clear_has_effect_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EffectData::clear_effect_value() {
  effect_value_ = 0;
  clear_has_effect_value();
}
inline ::google::protobuf::int32 EffectData::effect_value() const {
  // @@protoc_insertion_point(field_get:AFMsg.EffectData.effect_value)
  return effect_value_;
}
inline void EffectData::set_effect_value(::google::protobuf::int32 value) {
  set_has_effect_value();
  effect_value_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.EffectData.effect_value)
}

// required .AFMsg.EffectData.EResultType effect_rlt = 3;
inline bool EffectData::has_effect_rlt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EffectData::set_has_effect_rlt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EffectData::clear_has_effect_rlt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EffectData::clear_effect_rlt() {
  effect_rlt_ = 0;
  clear_has_effect_rlt();
}
inline ::AFMsg::EffectData_EResultType EffectData::effect_rlt() const {
  // @@protoc_insertion_point(field_get:AFMsg.EffectData.effect_rlt)
  return static_cast< ::AFMsg::EffectData_EResultType >(effect_rlt_);
}
inline void EffectData::set_effect_rlt(::AFMsg::EffectData_EResultType value) {
  assert(::AFMsg::EffectData_EResultType_IsValid(value));
  set_has_effect_rlt();
  effect_rlt_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.EffectData.effect_rlt)
}

// -------------------------------------------------------------------

// ReqAckUseSkill

// required .AFMsg.Ident user = 1;
inline bool ReqAckUseSkill::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckUseSkill::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckUseSkill::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckUseSkill::clear_user() {
  if (user_ != NULL) user_->::AFMsg::Ident::Clear();
  clear_has_user();
}
inline const ::AFMsg::Ident& ReqAckUseSkill::user() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseSkill.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::AFMsg::Ident* ReqAckUseSkill::mutable_user() {
  set_has_user();
  if (user_ == NULL) {
    user_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseSkill.user)
  return user_;
}
inline ::AFMsg::Ident* ReqAckUseSkill::release_user() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckUseSkill.user)
  clear_has_user();
  ::AFMsg::Ident* temp = user_;
  user_ = NULL;
  return temp;
}
inline void ReqAckUseSkill::set_allocated_user(::AFMsg::Ident* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckUseSkill.user)
}

// required bytes skill_id = 2;
inline bool ReqAckUseSkill::has_skill_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckUseSkill::set_has_skill_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckUseSkill::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckUseSkill::clear_skill_id() {
  skill_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_skill_id();
}
inline const ::std::string& ReqAckUseSkill::skill_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseSkill.skill_id)
  return skill_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckUseSkill::set_skill_id(const ::std::string& value) {
  set_has_skill_id();
  skill_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckUseSkill.skill_id)
}
inline void ReqAckUseSkill::set_skill_id(const char* value) {
  set_has_skill_id();
  skill_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckUseSkill.skill_id)
}
inline void ReqAckUseSkill::set_skill_id(const void* value, size_t size) {
  set_has_skill_id();
  skill_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckUseSkill.skill_id)
}
inline ::std::string* ReqAckUseSkill::mutable_skill_id() {
  set_has_skill_id();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseSkill.skill_id)
  return skill_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckUseSkill::release_skill_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckUseSkill.skill_id)
  clear_has_skill_id();
  return skill_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckUseSkill::set_allocated_skill_id(::std::string* skill_id) {
  if (skill_id != NULL) {
    set_has_skill_id();
  } else {
    clear_has_skill_id();
  }
  skill_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skill_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckUseSkill.skill_id)
}

// required .AFMsg.Position now_pos = 3;
inline bool ReqAckUseSkill::has_now_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqAckUseSkill::set_has_now_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqAckUseSkill::clear_has_now_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqAckUseSkill::clear_now_pos() {
  if (now_pos_ != NULL) now_pos_->::AFMsg::Position::Clear();
  clear_has_now_pos();
}
inline const ::AFMsg::Position& ReqAckUseSkill::now_pos() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseSkill.now_pos)
  return now_pos_ != NULL ? *now_pos_ : *default_instance_->now_pos_;
}
inline ::AFMsg::Position* ReqAckUseSkill::mutable_now_pos() {
  set_has_now_pos();
  if (now_pos_ == NULL) {
    now_pos_ = new ::AFMsg::Position;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseSkill.now_pos)
  return now_pos_;
}
inline ::AFMsg::Position* ReqAckUseSkill::release_now_pos() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckUseSkill.now_pos)
  clear_has_now_pos();
  ::AFMsg::Position* temp = now_pos_;
  now_pos_ = NULL;
  return temp;
}
inline void ReqAckUseSkill::set_allocated_now_pos(::AFMsg::Position* now_pos) {
  delete now_pos_;
  now_pos_ = now_pos;
  if (now_pos) {
    set_has_now_pos();
  } else {
    clear_has_now_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckUseSkill.now_pos)
}

// required .AFMsg.Position tar_pos = 4;
inline bool ReqAckUseSkill::has_tar_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqAckUseSkill::set_has_tar_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqAckUseSkill::clear_has_tar_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqAckUseSkill::clear_tar_pos() {
  if (tar_pos_ != NULL) tar_pos_->::AFMsg::Position::Clear();
  clear_has_tar_pos();
}
inline const ::AFMsg::Position& ReqAckUseSkill::tar_pos() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseSkill.tar_pos)
  return tar_pos_ != NULL ? *tar_pos_ : *default_instance_->tar_pos_;
}
inline ::AFMsg::Position* ReqAckUseSkill::mutable_tar_pos() {
  set_has_tar_pos();
  if (tar_pos_ == NULL) {
    tar_pos_ = new ::AFMsg::Position;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseSkill.tar_pos)
  return tar_pos_;
}
inline ::AFMsg::Position* ReqAckUseSkill::release_tar_pos() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckUseSkill.tar_pos)
  clear_has_tar_pos();
  ::AFMsg::Position* temp = tar_pos_;
  tar_pos_ = NULL;
  return temp;
}
inline void ReqAckUseSkill::set_allocated_tar_pos(::AFMsg::Position* tar_pos) {
  delete tar_pos_;
  tar_pos_ = tar_pos;
  if (tar_pos) {
    set_has_tar_pos();
  } else {
    clear_has_tar_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckUseSkill.tar_pos)
}

// required int32 use_index = 5;
inline bool ReqAckUseSkill::has_use_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqAckUseSkill::set_has_use_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqAckUseSkill::clear_has_use_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqAckUseSkill::clear_use_index() {
  use_index_ = 0;
  clear_has_use_index();
}
inline ::google::protobuf::int32 ReqAckUseSkill::use_index() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseSkill.use_index)
  return use_index_;
}
inline void ReqAckUseSkill::set_use_index(::google::protobuf::int32 value) {
  set_has_use_index();
  use_index_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckUseSkill.use_index)
}

// repeated .AFMsg.EffectData effect_data = 6;
inline int ReqAckUseSkill::effect_data_size() const {
  return effect_data_.size();
}
inline void ReqAckUseSkill::clear_effect_data() {
  effect_data_.Clear();
}
inline const ::AFMsg::EffectData& ReqAckUseSkill::effect_data(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseSkill.effect_data)
  return effect_data_.Get(index);
}
inline ::AFMsg::EffectData* ReqAckUseSkill::mutable_effect_data(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseSkill.effect_data)
  return effect_data_.Mutable(index);
}
inline ::AFMsg::EffectData* ReqAckUseSkill::add_effect_data() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqAckUseSkill.effect_data)
  return effect_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::EffectData >*
ReqAckUseSkill::mutable_effect_data() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqAckUseSkill.effect_data)
  return &effect_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::EffectData >&
ReqAckUseSkill::effect_data() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqAckUseSkill.effect_data)
  return effect_data_;
}

// -------------------------------------------------------------------

// ReqAckUseItem

// required .AFMsg.Ident user = 1;
inline bool ReqAckUseItem::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckUseItem::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckUseItem::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckUseItem::clear_user() {
  if (user_ != NULL) user_->::AFMsg::Ident::Clear();
  clear_has_user();
}
inline const ::AFMsg::Ident& ReqAckUseItem::user() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseItem.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::AFMsg::Ident* ReqAckUseItem::mutable_user() {
  set_has_user();
  if (user_ == NULL) {
    user_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseItem.user)
  return user_;
}
inline ::AFMsg::Ident* ReqAckUseItem::release_user() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckUseItem.user)
  clear_has_user();
  ::AFMsg::Ident* temp = user_;
  user_ = NULL;
  return temp;
}
inline void ReqAckUseItem::set_allocated_user(::AFMsg::Ident* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckUseItem.user)
}

// required .AFMsg.Ident item_guid = 2;
inline bool ReqAckUseItem::has_item_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckUseItem::set_has_item_guid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckUseItem::clear_has_item_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckUseItem::clear_item_guid() {
  if (item_guid_ != NULL) item_guid_->::AFMsg::Ident::Clear();
  clear_has_item_guid();
}
inline const ::AFMsg::Ident& ReqAckUseItem::item_guid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseItem.item_guid)
  return item_guid_ != NULL ? *item_guid_ : *default_instance_->item_guid_;
}
inline ::AFMsg::Ident* ReqAckUseItem::mutable_item_guid() {
  set_has_item_guid();
  if (item_guid_ == NULL) {
    item_guid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseItem.item_guid)
  return item_guid_;
}
inline ::AFMsg::Ident* ReqAckUseItem::release_item_guid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckUseItem.item_guid)
  clear_has_item_guid();
  ::AFMsg::Ident* temp = item_guid_;
  item_guid_ = NULL;
  return temp;
}
inline void ReqAckUseItem::set_allocated_item_guid(::AFMsg::Ident* item_guid) {
  delete item_guid_;
  item_guid_ = item_guid;
  if (item_guid) {
    set_has_item_guid();
  } else {
    clear_has_item_guid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckUseItem.item_guid)
}

// repeated .AFMsg.EffectData effect_data = 3;
inline int ReqAckUseItem::effect_data_size() const {
  return effect_data_.size();
}
inline void ReqAckUseItem::clear_effect_data() {
  effect_data_.Clear();
}
inline const ::AFMsg::EffectData& ReqAckUseItem::effect_data(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseItem.effect_data)
  return effect_data_.Get(index);
}
inline ::AFMsg::EffectData* ReqAckUseItem::mutable_effect_data(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseItem.effect_data)
  return effect_data_.Mutable(index);
}
inline ::AFMsg::EffectData* ReqAckUseItem::add_effect_data() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqAckUseItem.effect_data)
  return effect_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::EffectData >*
ReqAckUseItem::mutable_effect_data() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqAckUseItem.effect_data)
  return &effect_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::EffectData >&
ReqAckUseItem::effect_data() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqAckUseItem.effect_data)
  return effect_data_;
}

// required .AFMsg.ItemStruct item = 4;
inline bool ReqAckUseItem::has_item() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqAckUseItem::set_has_item() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqAckUseItem::clear_has_item() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqAckUseItem::clear_item() {
  if (item_ != NULL) item_->::AFMsg::ItemStruct::Clear();
  clear_has_item();
}
inline const ::AFMsg::ItemStruct& ReqAckUseItem::item() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseItem.item)
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::AFMsg::ItemStruct* ReqAckUseItem::mutable_item() {
  set_has_item();
  if (item_ == NULL) {
    item_ = new ::AFMsg::ItemStruct;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseItem.item)
  return item_;
}
inline ::AFMsg::ItemStruct* ReqAckUseItem::release_item() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckUseItem.item)
  clear_has_item();
  ::AFMsg::ItemStruct* temp = item_;
  item_ = NULL;
  return temp;
}
inline void ReqAckUseItem::set_allocated_item(::AFMsg::ItemStruct* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckUseItem.item)
}

// required .AFMsg.Ident targetid = 5;
inline bool ReqAckUseItem::has_targetid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqAckUseItem::set_has_targetid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqAckUseItem::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqAckUseItem::clear_targetid() {
  if (targetid_ != NULL) targetid_->::AFMsg::Ident::Clear();
  clear_has_targetid();
}
inline const ::AFMsg::Ident& ReqAckUseItem::targetid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseItem.targetid)
  return targetid_ != NULL ? *targetid_ : *default_instance_->targetid_;
}
inline ::AFMsg::Ident* ReqAckUseItem::mutable_targetid() {
  set_has_targetid();
  if (targetid_ == NULL) {
    targetid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseItem.targetid)
  return targetid_;
}
inline ::AFMsg::Ident* ReqAckUseItem::release_targetid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckUseItem.targetid)
  clear_has_targetid();
  ::AFMsg::Ident* temp = targetid_;
  targetid_ = NULL;
  return temp;
}
inline void ReqAckUseItem::set_allocated_targetid(::AFMsg::Ident* targetid) {
  delete targetid_;
  targetid_ = targetid;
  if (targetid) {
    set_has_targetid();
  } else {
    clear_has_targetid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckUseItem.targetid)
}

// -------------------------------------------------------------------

// ReqAckSwapScene

// required .AFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
inline bool ReqAckSwapScene::has_transfer_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckSwapScene::set_has_transfer_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckSwapScene::clear_has_transfer_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckSwapScene::clear_transfer_type() {
  transfer_type_ = 0;
  clear_has_transfer_type();
}
inline ::AFMsg::ReqAckSwapScene_EGameSwapType ReqAckSwapScene::transfer_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSwapScene.transfer_type)
  return static_cast< ::AFMsg::ReqAckSwapScene_EGameSwapType >(transfer_type_);
}
inline void ReqAckSwapScene::set_transfer_type(::AFMsg::ReqAckSwapScene_EGameSwapType value) {
  assert(::AFMsg::ReqAckSwapScene_EGameSwapType_IsValid(value));
  set_has_transfer_type();
  transfer_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSwapScene.transfer_type)
}

// required int32 scene_id = 2;
inline bool ReqAckSwapScene::has_scene_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckSwapScene::set_has_scene_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckSwapScene::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckSwapScene::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
inline ::google::protobuf::int32 ReqAckSwapScene::scene_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSwapScene.scene_id)
  return scene_id_;
}
inline void ReqAckSwapScene::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSwapScene.scene_id)
}

// required int32 line_id = 3;
inline bool ReqAckSwapScene::has_line_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqAckSwapScene::set_has_line_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqAckSwapScene::clear_has_line_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqAckSwapScene::clear_line_id() {
  line_id_ = 0;
  clear_has_line_id();
}
inline ::google::protobuf::int32 ReqAckSwapScene::line_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSwapScene.line_id)
  return line_id_;
}
inline void ReqAckSwapScene::set_line_id(::google::protobuf::int32 value) {
  set_has_line_id();
  line_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSwapScene.line_id)
}

// optional float x = 4;
inline bool ReqAckSwapScene::has_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqAckSwapScene::set_has_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqAckSwapScene::clear_has_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqAckSwapScene::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float ReqAckSwapScene::x() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSwapScene.x)
  return x_;
}
inline void ReqAckSwapScene::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSwapScene.x)
}

// optional float y = 5;
inline bool ReqAckSwapScene::has_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqAckSwapScene::set_has_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqAckSwapScene::clear_has_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqAckSwapScene::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float ReqAckSwapScene::y() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSwapScene.y)
  return y_;
}
inline void ReqAckSwapScene::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSwapScene.y)
}

// optional float z = 6;
inline bool ReqAckSwapScene::has_z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqAckSwapScene::set_has_z() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqAckSwapScene::clear_has_z() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqAckSwapScene::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float ReqAckSwapScene::z() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSwapScene.z)
  return z_;
}
inline void ReqAckSwapScene::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSwapScene.z)
}

// -------------------------------------------------------------------

// ItemStruct

// required string item_id = 1;
inline bool ItemStruct::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemStruct::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemStruct::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemStruct::clear_item_id() {
  item_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_item_id();
}
inline const ::std::string& ItemStruct::item_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ItemStruct.item_id)
  return item_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ItemStruct::set_item_id(const ::std::string& value) {
  set_has_item_id();
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ItemStruct.item_id)
}
inline void ItemStruct::set_item_id(const char* value) {
  set_has_item_id();
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ItemStruct.item_id)
}
inline void ItemStruct::set_item_id(const char* value, size_t size) {
  set_has_item_id();
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ItemStruct.item_id)
}
inline ::std::string* ItemStruct::mutable_item_id() {
  set_has_item_id();
  // @@protoc_insertion_point(field_mutable:AFMsg.ItemStruct.item_id)
  return item_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ItemStruct::release_item_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ItemStruct.item_id)
  clear_has_item_id();
  return item_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ItemStruct::set_allocated_item_id(::std::string* item_id) {
  if (item_id != NULL) {
    set_has_item_id();
  } else {
    clear_has_item_id();
  }
  item_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ItemStruct.item_id)
}

// required int32 item_count = 2;
inline bool ItemStruct::has_item_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemStruct::set_has_item_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemStruct::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemStruct::clear_item_count() {
  item_count_ = 0;
  clear_has_item_count();
}
inline ::google::protobuf::int32 ItemStruct::item_count() const {
  // @@protoc_insertion_point(field_get:AFMsg.ItemStruct.item_count)
  return item_count_;
}
inline void ItemStruct::set_item_count(::google::protobuf::int32 value) {
  set_has_item_count();
  item_count_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ItemStruct.item_count)
}

// -------------------------------------------------------------------

// CurrencyStruct

// required int32 currency_type = 1;
inline bool CurrencyStruct::has_currency_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CurrencyStruct::set_has_currency_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CurrencyStruct::clear_has_currency_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CurrencyStruct::clear_currency_type() {
  currency_type_ = 0;
  clear_has_currency_type();
}
inline ::google::protobuf::int32 CurrencyStruct::currency_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.CurrencyStruct.currency_type)
  return currency_type_;
}
inline void CurrencyStruct::set_currency_type(::google::protobuf::int32 value) {
  set_has_currency_type();
  currency_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.CurrencyStruct.currency_type)
}

// required int32 currency_count = 2;
inline bool CurrencyStruct::has_currency_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CurrencyStruct::set_has_currency_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CurrencyStruct::clear_has_currency_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CurrencyStruct::clear_currency_count() {
  currency_count_ = 0;
  clear_has_currency_count();
}
inline ::google::protobuf::int32 CurrencyStruct::currency_count() const {
  // @@protoc_insertion_point(field_get:AFMsg.CurrencyStruct.currency_count)
  return currency_count_;
}
inline void CurrencyStruct::set_currency_count(::google::protobuf::int32 value) {
  set_has_currency_count();
  currency_count_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.CurrencyStruct.currency_count)
}

// -------------------------------------------------------------------

// ReqAckEndBattle

// required int32 money = 1;
inline bool ReqAckEndBattle::has_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckEndBattle::set_has_money() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckEndBattle::clear_has_money() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckEndBattle::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 ReqAckEndBattle::money() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckEndBattle.money)
  return money_;
}
inline void ReqAckEndBattle::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckEndBattle.money)
}

// required int32 exp = 2;
inline bool ReqAckEndBattle::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckEndBattle::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckEndBattle::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckEndBattle::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 ReqAckEndBattle::exp() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckEndBattle.exp)
  return exp_;
}
inline void ReqAckEndBattle::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckEndBattle.exp)
}

// required int32 diamond = 3;
inline bool ReqAckEndBattle::has_diamond() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqAckEndBattle::set_has_diamond() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqAckEndBattle::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqAckEndBattle::clear_diamond() {
  diamond_ = 0;
  clear_has_diamond();
}
inline ::google::protobuf::int32 ReqAckEndBattle::diamond() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckEndBattle.diamond)
  return diamond_;
}
inline void ReqAckEndBattle::set_diamond(::google::protobuf::int32 value) {
  set_has_diamond();
  diamond_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckEndBattle.diamond)
}

// repeated .AFMsg.ItemStruct item_list = 4;
inline int ReqAckEndBattle::item_list_size() const {
  return item_list_.size();
}
inline void ReqAckEndBattle::clear_item_list() {
  item_list_.Clear();
}
inline const ::AFMsg::ItemStruct& ReqAckEndBattle::item_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckEndBattle.item_list)
  return item_list_.Get(index);
}
inline ::AFMsg::ItemStruct* ReqAckEndBattle::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckEndBattle.item_list)
  return item_list_.Mutable(index);
}
inline ::AFMsg::ItemStruct* ReqAckEndBattle::add_item_list() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqAckEndBattle.item_list)
  return item_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >*
ReqAckEndBattle::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqAckEndBattle.item_list)
  return &item_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >&
ReqAckEndBattle::item_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqAckEndBattle.item_list)
  return item_list_;
}

// -------------------------------------------------------------------

// ReqPickDropItem

// required .AFMsg.Ident item_guid = 2;
inline bool ReqPickDropItem::has_item_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqPickDropItem::set_has_item_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqPickDropItem::clear_has_item_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqPickDropItem::clear_item_guid() {
  if (item_guid_ != NULL) item_guid_->::AFMsg::Ident::Clear();
  clear_has_item_guid();
}
inline const ::AFMsg::Ident& ReqPickDropItem::item_guid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqPickDropItem.item_guid)
  return item_guid_ != NULL ? *item_guid_ : *default_instance_->item_guid_;
}
inline ::AFMsg::Ident* ReqPickDropItem::mutable_item_guid() {
  set_has_item_guid();
  if (item_guid_ == NULL) {
    item_guid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqPickDropItem.item_guid)
  return item_guid_;
}
inline ::AFMsg::Ident* ReqPickDropItem::release_item_guid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqPickDropItem.item_guid)
  clear_has_item_guid();
  ::AFMsg::Ident* temp = item_guid_;
  item_guid_ = NULL;
  return temp;
}
inline void ReqPickDropItem::set_allocated_item_guid(::AFMsg::Ident* item_guid) {
  delete item_guid_;
  item_guid_ = item_guid;
  if (item_guid) {
    set_has_item_guid();
  } else {
    clear_has_item_guid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqPickDropItem.item_guid)
}

// -------------------------------------------------------------------

// ReqAcceptTask

// required bytes task_id = 1;
inline bool ReqAcceptTask::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAcceptTask::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAcceptTask::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAcceptTask::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_task_id();
}
inline const ::std::string& ReqAcceptTask::task_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAcceptTask.task_id)
  return task_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAcceptTask::set_task_id(const ::std::string& value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAcceptTask.task_id)
}
inline void ReqAcceptTask::set_task_id(const char* value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAcceptTask.task_id)
}
inline void ReqAcceptTask::set_task_id(const void* value, size_t size) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAcceptTask.task_id)
}
inline ::std::string* ReqAcceptTask::mutable_task_id() {
  set_has_task_id();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAcceptTask.task_id)
  return task_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAcceptTask::release_task_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAcceptTask.task_id)
  clear_has_task_id();
  return task_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAcceptTask::set_allocated_task_id(::std::string* task_id) {
  if (task_id != NULL) {
    set_has_task_id();
  } else {
    clear_has_task_id();
  }
  task_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAcceptTask.task_id)
}

// -------------------------------------------------------------------

// ReqCompeleteTask

// required bytes task_id = 1;
inline bool ReqCompeleteTask::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqCompeleteTask::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqCompeleteTask::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqCompeleteTask::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_task_id();
}
inline const ::std::string& ReqCompeleteTask::task_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqCompeleteTask.task_id)
  return task_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqCompeleteTask::set_task_id(const ::std::string& value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqCompeleteTask.task_id)
}
inline void ReqCompeleteTask::set_task_id(const char* value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqCompeleteTask.task_id)
}
inline void ReqCompeleteTask::set_task_id(const void* value, size_t size) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqCompeleteTask.task_id)
}
inline ::std::string* ReqCompeleteTask::mutable_task_id() {
  set_has_task_id();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqCompeleteTask.task_id)
  return task_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqCompeleteTask::release_task_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqCompeleteTask.task_id)
  clear_has_task_id();
  return task_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqCompeleteTask::set_allocated_task_id(::std::string* task_id) {
  if (task_id != NULL) {
    set_has_task_id();
  } else {
    clear_has_task_id();
  }
  task_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqCompeleteTask.task_id)
}

// -------------------------------------------------------------------

// ReqAckJoinActivity

// required .AFMsg.ReqAckJoinActivity.EGameActivityType activity_type = 1;
inline bool ReqAckJoinActivity::has_activity_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckJoinActivity::set_has_activity_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckJoinActivity::clear_has_activity_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckJoinActivity::clear_activity_type() {
  activity_type_ = 0;
  clear_has_activity_type();
}
inline ::AFMsg::ReqAckJoinActivity_EGameActivityType ReqAckJoinActivity::activity_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckJoinActivity.activity_type)
  return static_cast< ::AFMsg::ReqAckJoinActivity_EGameActivityType >(activity_type_);
}
inline void ReqAckJoinActivity::set_activity_type(::AFMsg::ReqAckJoinActivity_EGameActivityType value) {
  assert(::AFMsg::ReqAckJoinActivity_EGameActivityType_IsValid(value));
  set_has_activity_type();
  activity_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckJoinActivity.activity_type)
}

// required .AFMsg.ReqAckJoinActivity.EGameActivitySubType sub_activity_type = 2;
inline bool ReqAckJoinActivity::has_sub_activity_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckJoinActivity::set_has_sub_activity_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckJoinActivity::clear_has_sub_activity_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckJoinActivity::clear_sub_activity_type() {
  sub_activity_type_ = 0;
  clear_has_sub_activity_type();
}
inline ::AFMsg::ReqAckJoinActivity_EGameActivitySubType ReqAckJoinActivity::sub_activity_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckJoinActivity.sub_activity_type)
  return static_cast< ::AFMsg::ReqAckJoinActivity_EGameActivitySubType >(sub_activity_type_);
}
inline void ReqAckJoinActivity::set_sub_activity_type(::AFMsg::ReqAckJoinActivity_EGameActivitySubType value) {
  assert(::AFMsg::ReqAckJoinActivity_EGameActivitySubType_IsValid(value));
  set_has_sub_activity_type();
  sub_activity_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckJoinActivity.sub_activity_type)
}

// -------------------------------------------------------------------

// ReqAckSearchOppnent

// required .AFMsg.EBattleType search_type = 1;
inline bool ReqAckSearchOppnent::has_search_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckSearchOppnent::set_has_search_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckSearchOppnent::clear_has_search_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckSearchOppnent::clear_search_type() {
  search_type_ = 0;
  clear_has_search_type();
}
inline ::AFMsg::EBattleType ReqAckSearchOppnent::search_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSearchOppnent.search_type)
  return static_cast< ::AFMsg::EBattleType >(search_type_);
}
inline void ReqAckSearchOppnent::set_search_type(::AFMsg::EBattleType value) {
  assert(::AFMsg::EBattleType_IsValid(value));
  set_has_search_type();
  search_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSearchOppnent.search_type)
}

// -------------------------------------------------------------------

// ReqAckBattleOppnent

// required .AFMsg.EBattleType battle_type = 1;
inline bool ReqAckBattleOppnent::has_battle_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckBattleOppnent::set_has_battle_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckBattleOppnent::clear_has_battle_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckBattleOppnent::clear_battle_type() {
  battle_type_ = 0;
  clear_has_battle_type();
}
inline ::AFMsg::EBattleType ReqAckBattleOppnent::battle_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckBattleOppnent.battle_type)
  return static_cast< ::AFMsg::EBattleType >(battle_type_);
}
inline void ReqAckBattleOppnent::set_battle_type(::AFMsg::EBattleType value) {
  assert(::AFMsg::EBattleType_IsValid(value));
  set_has_battle_type();
  battle_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckBattleOppnent.battle_type)
}

// -------------------------------------------------------------------

// ReqAckCreateGuild

// required .AFMsg.Ident guild_id = 1;
inline bool ReqAckCreateGuild::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckCreateGuild::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckCreateGuild::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckCreateGuild::clear_guild_id() {
  if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
  clear_has_guild_id();
}
inline const ::AFMsg::Ident& ReqAckCreateGuild::guild_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckCreateGuild.guild_id)
  return guild_id_ != NULL ? *guild_id_ : *default_instance_->guild_id_;
}
inline ::AFMsg::Ident* ReqAckCreateGuild::mutable_guild_id() {
  set_has_guild_id();
  if (guild_id_ == NULL) {
    guild_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckCreateGuild.guild_id)
  return guild_id_;
}
inline ::AFMsg::Ident* ReqAckCreateGuild::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckCreateGuild.guild_id)
  clear_has_guild_id();
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
inline void ReqAckCreateGuild::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  delete guild_id_;
  guild_id_ = guild_id;
  if (guild_id) {
    set_has_guild_id();
  } else {
    clear_has_guild_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckCreateGuild.guild_id)
}

// required string guild_name = 2;
inline bool ReqAckCreateGuild::has_guild_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckCreateGuild::set_has_guild_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckCreateGuild::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckCreateGuild::clear_guild_name() {
  guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guild_name();
}
inline const ::std::string& ReqAckCreateGuild::guild_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckCreateGuild.guild_name)
  return guild_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckCreateGuild::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckCreateGuild.guild_name)
}
inline void ReqAckCreateGuild::set_guild_name(const char* value) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckCreateGuild.guild_name)
}
inline void ReqAckCreateGuild::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckCreateGuild.guild_name)
}
inline ::std::string* ReqAckCreateGuild::mutable_guild_name() {
  set_has_guild_name();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckCreateGuild.guild_name)
  return guild_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckCreateGuild::release_guild_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckCreateGuild.guild_name)
  clear_has_guild_name();
  return guild_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckCreateGuild::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name != NULL) {
    set_has_guild_name();
  } else {
    clear_has_guild_name();
  }
  guild_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckCreateGuild.guild_name)
}

// -------------------------------------------------------------------

// ReqSearchGuild

// required string guild_name = 1;
inline bool ReqSearchGuild::has_guild_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqSearchGuild::set_has_guild_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqSearchGuild::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqSearchGuild::clear_guild_name() {
  guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guild_name();
}
inline const ::std::string& ReqSearchGuild::guild_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSearchGuild.guild_name)
  return guild_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqSearchGuild::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqSearchGuild.guild_name)
}
inline void ReqSearchGuild::set_guild_name(const char* value) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqSearchGuild.guild_name)
}
inline void ReqSearchGuild::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqSearchGuild.guild_name)
}
inline ::std::string* ReqSearchGuild::mutable_guild_name() {
  set_has_guild_name();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSearchGuild.guild_name)
  return guild_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqSearchGuild::release_guild_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqSearchGuild.guild_name)
  clear_has_guild_name();
  return guild_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqSearchGuild::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name != NULL) {
    set_has_guild_name();
  } else {
    clear_has_guild_name();
  }
  guild_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqSearchGuild.guild_name)
}

// -------------------------------------------------------------------

// AckSearchGuild_SearchGuildObject

// required .AFMsg.Ident guild_ID = 1;
inline bool AckSearchGuild_SearchGuildObject::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckSearchGuild_SearchGuildObject::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckSearchGuild_SearchGuildObject::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckSearchGuild_SearchGuildObject::clear_guild_id() {
  if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
  clear_has_guild_id();
}
inline const ::AFMsg::Ident& AckSearchGuild_SearchGuildObject::guild_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSearchGuild.SearchGuildObject.guild_ID)
  return guild_id_ != NULL ? *guild_id_ : *default_instance_->guild_id_;
}
inline ::AFMsg::Ident* AckSearchGuild_SearchGuildObject::mutable_guild_id() {
  set_has_guild_id();
  if (guild_id_ == NULL) {
    guild_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckSearchGuild.SearchGuildObject.guild_ID)
  return guild_id_;
}
inline ::AFMsg::Ident* AckSearchGuild_SearchGuildObject::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.AckSearchGuild.SearchGuildObject.guild_ID)
  clear_has_guild_id();
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
inline void AckSearchGuild_SearchGuildObject::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  delete guild_id_;
  guild_id_ = guild_id;
  if (guild_id) {
    set_has_guild_id();
  } else {
    clear_has_guild_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckSearchGuild.SearchGuildObject.guild_ID)
}

// required string guild_name = 2;
inline bool AckSearchGuild_SearchGuildObject::has_guild_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckSearchGuild_SearchGuildObject::set_has_guild_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckSearchGuild_SearchGuildObject::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckSearchGuild_SearchGuildObject::clear_guild_name() {
  guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guild_name();
}
inline const ::std::string& AckSearchGuild_SearchGuildObject::guild_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSearchGuild.SearchGuildObject.guild_name)
  return guild_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckSearchGuild_SearchGuildObject::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.AckSearchGuild.SearchGuildObject.guild_name)
}
inline void AckSearchGuild_SearchGuildObject::set_guild_name(const char* value) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.AckSearchGuild.SearchGuildObject.guild_name)
}
inline void AckSearchGuild_SearchGuildObject::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.AckSearchGuild.SearchGuildObject.guild_name)
}
inline ::std::string* AckSearchGuild_SearchGuildObject::mutable_guild_name() {
  set_has_guild_name();
  // @@protoc_insertion_point(field_mutable:AFMsg.AckSearchGuild.SearchGuildObject.guild_name)
  return guild_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AckSearchGuild_SearchGuildObject::release_guild_name() {
  // @@protoc_insertion_point(field_release:AFMsg.AckSearchGuild.SearchGuildObject.guild_name)
  clear_has_guild_name();
  return guild_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckSearchGuild_SearchGuildObject::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name != NULL) {
    set_has_guild_name();
  } else {
    clear_has_guild_name();
  }
  guild_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckSearchGuild.SearchGuildObject.guild_name)
}

// required string guild_icon = 3;
inline bool AckSearchGuild_SearchGuildObject::has_guild_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckSearchGuild_SearchGuildObject::set_has_guild_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckSearchGuild_SearchGuildObject::clear_has_guild_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckSearchGuild_SearchGuildObject::clear_guild_icon() {
  guild_icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guild_icon();
}
inline const ::std::string& AckSearchGuild_SearchGuildObject::guild_icon() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSearchGuild.SearchGuildObject.guild_icon)
  return guild_icon_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckSearchGuild_SearchGuildObject::set_guild_icon(const ::std::string& value) {
  set_has_guild_icon();
  guild_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.AckSearchGuild.SearchGuildObject.guild_icon)
}
inline void AckSearchGuild_SearchGuildObject::set_guild_icon(const char* value) {
  set_has_guild_icon();
  guild_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.AckSearchGuild.SearchGuildObject.guild_icon)
}
inline void AckSearchGuild_SearchGuildObject::set_guild_icon(const char* value, size_t size) {
  set_has_guild_icon();
  guild_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.AckSearchGuild.SearchGuildObject.guild_icon)
}
inline ::std::string* AckSearchGuild_SearchGuildObject::mutable_guild_icon() {
  set_has_guild_icon();
  // @@protoc_insertion_point(field_mutable:AFMsg.AckSearchGuild.SearchGuildObject.guild_icon)
  return guild_icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AckSearchGuild_SearchGuildObject::release_guild_icon() {
  // @@protoc_insertion_point(field_release:AFMsg.AckSearchGuild.SearchGuildObject.guild_icon)
  clear_has_guild_icon();
  return guild_icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckSearchGuild_SearchGuildObject::set_allocated_guild_icon(::std::string* guild_icon) {
  if (guild_icon != NULL) {
    set_has_guild_icon();
  } else {
    clear_has_guild_icon();
  }
  guild_icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_icon);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckSearchGuild.SearchGuildObject.guild_icon)
}

// required int32 guild_member_count = 4;
inline bool AckSearchGuild_SearchGuildObject::has_guild_member_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckSearchGuild_SearchGuildObject::set_has_guild_member_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckSearchGuild_SearchGuildObject::clear_has_guild_member_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckSearchGuild_SearchGuildObject::clear_guild_member_count() {
  guild_member_count_ = 0;
  clear_has_guild_member_count();
}
inline ::google::protobuf::int32 AckSearchGuild_SearchGuildObject::guild_member_count() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSearchGuild.SearchGuildObject.guild_member_count)
  return guild_member_count_;
}
inline void AckSearchGuild_SearchGuildObject::set_guild_member_count(::google::protobuf::int32 value) {
  set_has_guild_member_count();
  guild_member_count_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckSearchGuild.SearchGuildObject.guild_member_count)
}

// required int32 guild_member_max_count = 5;
inline bool AckSearchGuild_SearchGuildObject::has_guild_member_max_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AckSearchGuild_SearchGuildObject::set_has_guild_member_max_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AckSearchGuild_SearchGuildObject::clear_has_guild_member_max_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AckSearchGuild_SearchGuildObject::clear_guild_member_max_count() {
  guild_member_max_count_ = 0;
  clear_has_guild_member_max_count();
}
inline ::google::protobuf::int32 AckSearchGuild_SearchGuildObject::guild_member_max_count() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSearchGuild.SearchGuildObject.guild_member_max_count)
  return guild_member_max_count_;
}
inline void AckSearchGuild_SearchGuildObject::set_guild_member_max_count(::google::protobuf::int32 value) {
  set_has_guild_member_max_count();
  guild_member_max_count_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckSearchGuild.SearchGuildObject.guild_member_max_count)
}

// required int32 guild_honor = 6;
inline bool AckSearchGuild_SearchGuildObject::has_guild_honor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AckSearchGuild_SearchGuildObject::set_has_guild_honor() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AckSearchGuild_SearchGuildObject::clear_has_guild_honor() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AckSearchGuild_SearchGuildObject::clear_guild_honor() {
  guild_honor_ = 0;
  clear_has_guild_honor();
}
inline ::google::protobuf::int32 AckSearchGuild_SearchGuildObject::guild_honor() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSearchGuild.SearchGuildObject.guild_honor)
  return guild_honor_;
}
inline void AckSearchGuild_SearchGuildObject::set_guild_honor(::google::protobuf::int32 value) {
  set_has_guild_honor();
  guild_honor_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckSearchGuild.SearchGuildObject.guild_honor)
}

// required int32 guild_rank = 7;
inline bool AckSearchGuild_SearchGuildObject::has_guild_rank() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AckSearchGuild_SearchGuildObject::set_has_guild_rank() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AckSearchGuild_SearchGuildObject::clear_has_guild_rank() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AckSearchGuild_SearchGuildObject::clear_guild_rank() {
  guild_rank_ = 0;
  clear_has_guild_rank();
}
inline ::google::protobuf::int32 AckSearchGuild_SearchGuildObject::guild_rank() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSearchGuild.SearchGuildObject.guild_rank)
  return guild_rank_;
}
inline void AckSearchGuild_SearchGuildObject::set_guild_rank(::google::protobuf::int32 value) {
  set_has_guild_rank();
  guild_rank_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckSearchGuild.SearchGuildObject.guild_rank)
}

// -------------------------------------------------------------------

// AckSearchGuild

// repeated .AFMsg.AckSearchGuild.SearchGuildObject guild_list = 1;
inline int AckSearchGuild::guild_list_size() const {
  return guild_list_.size();
}
inline void AckSearchGuild::clear_guild_list() {
  guild_list_.Clear();
}
inline const ::AFMsg::AckSearchGuild_SearchGuildObject& AckSearchGuild::guild_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSearchGuild.guild_list)
  return guild_list_.Get(index);
}
inline ::AFMsg::AckSearchGuild_SearchGuildObject* AckSearchGuild::mutable_guild_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.AckSearchGuild.guild_list)
  return guild_list_.Mutable(index);
}
inline ::AFMsg::AckSearchGuild_SearchGuildObject* AckSearchGuild::add_guild_list() {
  // @@protoc_insertion_point(field_add:AFMsg.AckSearchGuild.guild_list)
  return guild_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::AckSearchGuild_SearchGuildObject >*
AckSearchGuild::mutable_guild_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.AckSearchGuild.guild_list)
  return &guild_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::AckSearchGuild_SearchGuildObject >&
AckSearchGuild::guild_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.AckSearchGuild.guild_list)
  return guild_list_;
}

// -------------------------------------------------------------------

// ReqAckJoinGuild

// required .AFMsg.Ident guild_id = 1;
inline bool ReqAckJoinGuild::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckJoinGuild::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckJoinGuild::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckJoinGuild::clear_guild_id() {
  if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
  clear_has_guild_id();
}
inline const ::AFMsg::Ident& ReqAckJoinGuild::guild_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckJoinGuild.guild_id)
  return guild_id_ != NULL ? *guild_id_ : *default_instance_->guild_id_;
}
inline ::AFMsg::Ident* ReqAckJoinGuild::mutable_guild_id() {
  set_has_guild_id();
  if (guild_id_ == NULL) {
    guild_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckJoinGuild.guild_id)
  return guild_id_;
}
inline ::AFMsg::Ident* ReqAckJoinGuild::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckJoinGuild.guild_id)
  clear_has_guild_id();
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
inline void ReqAckJoinGuild::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  delete guild_id_;
  guild_id_ = guild_id;
  if (guild_id) {
    set_has_guild_id();
  } else {
    clear_has_guild_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckJoinGuild.guild_id)
}

// required string guild_name = 2;
inline bool ReqAckJoinGuild::has_guild_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckJoinGuild::set_has_guild_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckJoinGuild::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckJoinGuild::clear_guild_name() {
  guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guild_name();
}
inline const ::std::string& ReqAckJoinGuild::guild_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckJoinGuild.guild_name)
  return guild_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckJoinGuild::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckJoinGuild.guild_name)
}
inline void ReqAckJoinGuild::set_guild_name(const char* value) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckJoinGuild.guild_name)
}
inline void ReqAckJoinGuild::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckJoinGuild.guild_name)
}
inline ::std::string* ReqAckJoinGuild::mutable_guild_name() {
  set_has_guild_name();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckJoinGuild.guild_name)
  return guild_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckJoinGuild::release_guild_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckJoinGuild.guild_name)
  clear_has_guild_name();
  return guild_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckJoinGuild::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name != NULL) {
    set_has_guild_name();
  } else {
    clear_has_guild_name();
  }
  guild_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckJoinGuild.guild_name)
}

// -------------------------------------------------------------------

// ReqAckLeaveGuild

// required .AFMsg.Ident guild_id = 1;
inline bool ReqAckLeaveGuild::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckLeaveGuild::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckLeaveGuild::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckLeaveGuild::clear_guild_id() {
  if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
  clear_has_guild_id();
}
inline const ::AFMsg::Ident& ReqAckLeaveGuild::guild_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckLeaveGuild.guild_id)
  return guild_id_ != NULL ? *guild_id_ : *default_instance_->guild_id_;
}
inline ::AFMsg::Ident* ReqAckLeaveGuild::mutable_guild_id() {
  set_has_guild_id();
  if (guild_id_ == NULL) {
    guild_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckLeaveGuild.guild_id)
  return guild_id_;
}
inline ::AFMsg::Ident* ReqAckLeaveGuild::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckLeaveGuild.guild_id)
  clear_has_guild_id();
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
inline void ReqAckLeaveGuild::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  delete guild_id_;
  guild_id_ = guild_id;
  if (guild_id) {
    set_has_guild_id();
  } else {
    clear_has_guild_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckLeaveGuild.guild_id)
}

// required string guild_name = 2;
inline bool ReqAckLeaveGuild::has_guild_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckLeaveGuild::set_has_guild_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckLeaveGuild::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckLeaveGuild::clear_guild_name() {
  guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guild_name();
}
inline const ::std::string& ReqAckLeaveGuild::guild_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckLeaveGuild.guild_name)
  return guild_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckLeaveGuild::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckLeaveGuild.guild_name)
}
inline void ReqAckLeaveGuild::set_guild_name(const char* value) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckLeaveGuild.guild_name)
}
inline void ReqAckLeaveGuild::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckLeaveGuild.guild_name)
}
inline ::std::string* ReqAckLeaveGuild::mutable_guild_name() {
  set_has_guild_name();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckLeaveGuild.guild_name)
  return guild_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckLeaveGuild::release_guild_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckLeaveGuild.guild_name)
  clear_has_guild_name();
  return guild_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckLeaveGuild::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name != NULL) {
    set_has_guild_name();
  } else {
    clear_has_guild_name();
  }
  guild_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckLeaveGuild.guild_name)
}

// -------------------------------------------------------------------

// ReqAckOprGuildMember

// required .AFMsg.Ident guild_id = 1;
inline bool ReqAckOprGuildMember::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckOprGuildMember::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckOprGuildMember::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckOprGuildMember::clear_guild_id() {
  if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
  clear_has_guild_id();
}
inline const ::AFMsg::Ident& ReqAckOprGuildMember::guild_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprGuildMember.guild_id)
  return guild_id_ != NULL ? *guild_id_ : *default_instance_->guild_id_;
}
inline ::AFMsg::Ident* ReqAckOprGuildMember::mutable_guild_id() {
  set_has_guild_id();
  if (guild_id_ == NULL) {
    guild_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckOprGuildMember.guild_id)
  return guild_id_;
}
inline ::AFMsg::Ident* ReqAckOprGuildMember::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckOprGuildMember.guild_id)
  clear_has_guild_id();
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
inline void ReqAckOprGuildMember::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  delete guild_id_;
  guild_id_ = guild_id;
  if (guild_id) {
    set_has_guild_id();
  } else {
    clear_has_guild_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckOprGuildMember.guild_id)
}

// required .AFMsg.Ident member_id = 2;
inline bool ReqAckOprGuildMember::has_member_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckOprGuildMember::set_has_member_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckOprGuildMember::clear_has_member_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckOprGuildMember::clear_member_id() {
  if (member_id_ != NULL) member_id_->::AFMsg::Ident::Clear();
  clear_has_member_id();
}
inline const ::AFMsg::Ident& ReqAckOprGuildMember::member_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprGuildMember.member_id)
  return member_id_ != NULL ? *member_id_ : *default_instance_->member_id_;
}
inline ::AFMsg::Ident* ReqAckOprGuildMember::mutable_member_id() {
  set_has_member_id();
  if (member_id_ == NULL) {
    member_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckOprGuildMember.member_id)
  return member_id_;
}
inline ::AFMsg::Ident* ReqAckOprGuildMember::release_member_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckOprGuildMember.member_id)
  clear_has_member_id();
  ::AFMsg::Ident* temp = member_id_;
  member_id_ = NULL;
  return temp;
}
inline void ReqAckOprGuildMember::set_allocated_member_id(::AFMsg::Ident* member_id) {
  delete member_id_;
  member_id_ = member_id;
  if (member_id) {
    set_has_member_id();
  } else {
    clear_has_member_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckOprGuildMember.member_id)
}

// required .AFMsg.ReqAckOprGuildMember.EGGuildMemberOprType type = 3;
inline bool ReqAckOprGuildMember::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqAckOprGuildMember::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqAckOprGuildMember::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqAckOprGuildMember::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::AFMsg::ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprGuildMember.type)
  return static_cast< ::AFMsg::ReqAckOprGuildMember_EGGuildMemberOprType >(type_);
}
inline void ReqAckOprGuildMember::set_type(::AFMsg::ReqAckOprGuildMember_EGGuildMemberOprType value) {
  assert(::AFMsg::ReqAckOprGuildMember_EGGuildMemberOprType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckOprGuildMember.type)
}

// -------------------------------------------------------------------

// ReqAckOprGuild

// required .AFMsg.Ident guild_id = 1;
inline bool ReqAckOprGuild::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckOprGuild::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckOprGuild::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckOprGuild::clear_guild_id() {
  if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
  clear_has_guild_id();
}
inline const ::AFMsg::Ident& ReqAckOprGuild::guild_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprGuild.guild_id)
  return guild_id_ != NULL ? *guild_id_ : *default_instance_->guild_id_;
}
inline ::AFMsg::Ident* ReqAckOprGuild::mutable_guild_id() {
  set_has_guild_id();
  if (guild_id_ == NULL) {
    guild_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckOprGuild.guild_id)
  return guild_id_;
}
inline ::AFMsg::Ident* ReqAckOprGuild::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckOprGuild.guild_id)
  clear_has_guild_id();
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
inline void ReqAckOprGuild::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  delete guild_id_;
  guild_id_ = guild_id;
  if (guild_id) {
    set_has_guild_id();
  } else {
    clear_has_guild_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckOprGuild.guild_id)
}

// required .AFMsg.Ident player_id = 2;
inline bool ReqAckOprGuild::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckOprGuild::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckOprGuild::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckOprGuild::clear_player_id() {
  if (player_id_ != NULL) player_id_->::AFMsg::Ident::Clear();
  clear_has_player_id();
}
inline const ::AFMsg::Ident& ReqAckOprGuild::player_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprGuild.player_id)
  return player_id_ != NULL ? *player_id_ : *default_instance_->player_id_;
}
inline ::AFMsg::Ident* ReqAckOprGuild::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == NULL) {
    player_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckOprGuild.player_id)
  return player_id_;
}
inline ::AFMsg::Ident* ReqAckOprGuild::release_player_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckOprGuild.player_id)
  clear_has_player_id();
  ::AFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
inline void ReqAckOprGuild::set_allocated_player_id(::AFMsg::Ident* player_id) {
  delete player_id_;
  player_id_ = player_id;
  if (player_id) {
    set_has_player_id();
  } else {
    clear_has_player_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckOprGuild.player_id)
}

// required .AFMsg.ReqAckOprGuild.EGGuildOprType type = 3;
inline bool ReqAckOprGuild::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqAckOprGuild::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqAckOprGuild::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqAckOprGuild::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::AFMsg::ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprGuild.type)
  return static_cast< ::AFMsg::ReqAckOprGuild_EGGuildOprType >(type_);
}
inline void ReqAckOprGuild::set_type(::AFMsg::ReqAckOprGuild_EGGuildOprType value) {
  assert(::AFMsg::ReqAckOprGuild_EGGuildOprType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckOprGuild.type)
}

// required string Recruit_data = 4;
inline bool ReqAckOprGuild::has_recruit_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqAckOprGuild::set_has_recruit_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqAckOprGuild::clear_has_recruit_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqAckOprGuild::clear_recruit_data() {
  recruit_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_recruit_data();
}
inline const ::std::string& ReqAckOprGuild::recruit_data() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprGuild.Recruit_data)
  return recruit_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckOprGuild::set_recruit_data(const ::std::string& value) {
  set_has_recruit_data();
  recruit_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckOprGuild.Recruit_data)
}
inline void ReqAckOprGuild::set_recruit_data(const char* value) {
  set_has_recruit_data();
  recruit_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckOprGuild.Recruit_data)
}
inline void ReqAckOprGuild::set_recruit_data(const char* value, size_t size) {
  set_has_recruit_data();
  recruit_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckOprGuild.Recruit_data)
}
inline ::std::string* ReqAckOprGuild::mutable_recruit_data() {
  set_has_recruit_data();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckOprGuild.Recruit_data)
  return recruit_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckOprGuild::release_recruit_data() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckOprGuild.Recruit_data)
  clear_has_recruit_data();
  return recruit_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckOprGuild::set_allocated_recruit_data(::std::string* recruit_data) {
  if (recruit_data != NULL) {
    set_has_recruit_data();
  } else {
    clear_has_recruit_data();
  }
  recruit_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recruit_data);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckOprGuild.Recruit_data)
}

// required string Ad_data = 5;
inline bool ReqAckOprGuild::has_ad_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqAckOprGuild::set_has_ad_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqAckOprGuild::clear_has_ad_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqAckOprGuild::clear_ad_data() {
  ad_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ad_data();
}
inline const ::std::string& ReqAckOprGuild::ad_data() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprGuild.Ad_data)
  return ad_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckOprGuild::set_ad_data(const ::std::string& value) {
  set_has_ad_data();
  ad_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckOprGuild.Ad_data)
}
inline void ReqAckOprGuild::set_ad_data(const char* value) {
  set_has_ad_data();
  ad_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckOprGuild.Ad_data)
}
inline void ReqAckOprGuild::set_ad_data(const char* value, size_t size) {
  set_has_ad_data();
  ad_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckOprGuild.Ad_data)
}
inline ::std::string* ReqAckOprGuild::mutable_ad_data() {
  set_has_ad_data();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckOprGuild.Ad_data)
  return ad_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckOprGuild::release_ad_data() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckOprGuild.Ad_data)
  clear_has_ad_data();
  return ad_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckOprGuild::set_allocated_ad_data(::std::string* ad_data) {
  if (ad_data != NULL) {
    set_has_ad_data();
  } else {
    clear_has_ad_data();
  }
  ad_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ad_data);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckOprGuild.Ad_data)
}

// -------------------------------------------------------------------

// ReqAckDonateGuildItem

// required .AFMsg.Ident guild_id = 1;
inline bool ReqAckDonateGuildItem::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckDonateGuildItem::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckDonateGuildItem::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckDonateGuildItem::clear_guild_id() {
  if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
  clear_has_guild_id();
}
inline const ::AFMsg::Ident& ReqAckDonateGuildItem::guild_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckDonateGuildItem.guild_id)
  return guild_id_ != NULL ? *guild_id_ : *default_instance_->guild_id_;
}
inline ::AFMsg::Ident* ReqAckDonateGuildItem::mutable_guild_id() {
  set_has_guild_id();
  if (guild_id_ == NULL) {
    guild_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckDonateGuildItem.guild_id)
  return guild_id_;
}
inline ::AFMsg::Ident* ReqAckDonateGuildItem::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckDonateGuildItem.guild_id)
  clear_has_guild_id();
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
inline void ReqAckDonateGuildItem::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  delete guild_id_;
  guild_id_ = guild_id;
  if (guild_id) {
    set_has_guild_id();
  } else {
    clear_has_guild_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckDonateGuildItem.guild_id)
}

// required .AFMsg.Ident target_id = 2;
inline bool ReqAckDonateGuildItem::has_target_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckDonateGuildItem::set_has_target_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckDonateGuildItem::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckDonateGuildItem::clear_target_id() {
  if (target_id_ != NULL) target_id_->::AFMsg::Ident::Clear();
  clear_has_target_id();
}
inline const ::AFMsg::Ident& ReqAckDonateGuildItem::target_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckDonateGuildItem.target_id)
  return target_id_ != NULL ? *target_id_ : *default_instance_->target_id_;
}
inline ::AFMsg::Ident* ReqAckDonateGuildItem::mutable_target_id() {
  set_has_target_id();
  if (target_id_ == NULL) {
    target_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckDonateGuildItem.target_id)
  return target_id_;
}
inline ::AFMsg::Ident* ReqAckDonateGuildItem::release_target_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckDonateGuildItem.target_id)
  clear_has_target_id();
  ::AFMsg::Ident* temp = target_id_;
  target_id_ = NULL;
  return temp;
}
inline void ReqAckDonateGuildItem::set_allocated_target_id(::AFMsg::Ident* target_id) {
  delete target_id_;
  target_id_ = target_id;
  if (target_id) {
    set_has_target_id();
  } else {
    clear_has_target_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckDonateGuildItem.target_id)
}

// repeated .AFMsg.ItemStruct item_list = 3;
inline int ReqAckDonateGuildItem::item_list_size() const {
  return item_list_.size();
}
inline void ReqAckDonateGuildItem::clear_item_list() {
  item_list_.Clear();
}
inline const ::AFMsg::ItemStruct& ReqAckDonateGuildItem::item_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckDonateGuildItem.item_list)
  return item_list_.Get(index);
}
inline ::AFMsg::ItemStruct* ReqAckDonateGuildItem::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckDonateGuildItem.item_list)
  return item_list_.Mutable(index);
}
inline ::AFMsg::ItemStruct* ReqAckDonateGuildItem::add_item_list() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqAckDonateGuildItem.item_list)
  return item_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >*
ReqAckDonateGuildItem::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqAckDonateGuildItem.item_list)
  return &item_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >&
ReqAckDonateGuildItem::item_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqAckDonateGuildItem.item_list)
  return item_list_;
}

// -------------------------------------------------------------------

// ReqGuildEctypeInfo

// required .AFMsg.Ident selfid = 1;
inline bool ReqGuildEctypeInfo::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqGuildEctypeInfo::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqGuildEctypeInfo::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqGuildEctypeInfo::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
inline const ::AFMsg::Ident& ReqGuildEctypeInfo::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqGuildEctypeInfo.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
inline ::AFMsg::Ident* ReqGuildEctypeInfo::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqGuildEctypeInfo.selfid)
  return selfid_;
}
inline ::AFMsg::Ident* ReqGuildEctypeInfo::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqGuildEctypeInfo.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline void ReqGuildEctypeInfo::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqGuildEctypeInfo.selfid)
}

// required .AFMsg.Ident guild_id = 2;
inline bool ReqGuildEctypeInfo::has_guild_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqGuildEctypeInfo::set_has_guild_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqGuildEctypeInfo::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqGuildEctypeInfo::clear_guild_id() {
  if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
  clear_has_guild_id();
}
inline const ::AFMsg::Ident& ReqGuildEctypeInfo::guild_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqGuildEctypeInfo.guild_id)
  return guild_id_ != NULL ? *guild_id_ : *default_instance_->guild_id_;
}
inline ::AFMsg::Ident* ReqGuildEctypeInfo::mutable_guild_id() {
  set_has_guild_id();
  if (guild_id_ == NULL) {
    guild_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqGuildEctypeInfo.guild_id)
  return guild_id_;
}
inline ::AFMsg::Ident* ReqGuildEctypeInfo::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqGuildEctypeInfo.guild_id)
  clear_has_guild_id();
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
inline void ReqGuildEctypeInfo::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  delete guild_id_;
  guild_id_ = guild_id;
  if (guild_id) {
    set_has_guild_id();
  } else {
    clear_has_guild_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqGuildEctypeInfo.guild_id)
}

// -------------------------------------------------------------------

// GuildEctypeInfo

// required .AFMsg.Ident guild_id = 1;
inline bool GuildEctypeInfo::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildEctypeInfo::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildEctypeInfo::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildEctypeInfo::clear_guild_id() {
  if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
  clear_has_guild_id();
}
inline const ::AFMsg::Ident& GuildEctypeInfo::guild_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.GuildEctypeInfo.guild_id)
  return guild_id_ != NULL ? *guild_id_ : *default_instance_->guild_id_;
}
inline ::AFMsg::Ident* GuildEctypeInfo::mutable_guild_id() {
  set_has_guild_id();
  if (guild_id_ == NULL) {
    guild_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.GuildEctypeInfo.guild_id)
  return guild_id_;
}
inline ::AFMsg::Ident* GuildEctypeInfo::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.GuildEctypeInfo.guild_id)
  clear_has_guild_id();
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
inline void GuildEctypeInfo::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  delete guild_id_;
  guild_id_ = guild_id;
  if (guild_id) {
    set_has_guild_id();
  } else {
    clear_has_guild_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.GuildEctypeInfo.guild_id)
}

// required int64 server_id = 2;
inline bool GuildEctypeInfo::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildEctypeInfo::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildEctypeInfo::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildEctypeInfo::clear_server_id() {
  server_id_ = GOOGLE_LONGLONG(0);
  clear_has_server_id();
}
inline ::google::protobuf::int64 GuildEctypeInfo::server_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.GuildEctypeInfo.server_id)
  return server_id_;
}
inline void GuildEctypeInfo::set_server_id(::google::protobuf::int64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.GuildEctypeInfo.server_id)
}

// required int64 Ectype_id = 3;
inline bool GuildEctypeInfo::has_ectype_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildEctypeInfo::set_has_ectype_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildEctypeInfo::clear_has_ectype_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildEctypeInfo::clear_ectype_id() {
  ectype_id_ = GOOGLE_LONGLONG(0);
  clear_has_ectype_id();
}
inline ::google::protobuf::int64 GuildEctypeInfo::ectype_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.GuildEctypeInfo.Ectype_id)
  return ectype_id_;
}
inline void GuildEctypeInfo::set_ectype_id(::google::protobuf::int64 value) {
  set_has_ectype_id();
  ectype_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.GuildEctypeInfo.Ectype_id)
}

// required int64 Ectype_Group = 4;
inline bool GuildEctypeInfo::has_ectype_group() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildEctypeInfo::set_has_ectype_group() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildEctypeInfo::clear_has_ectype_group() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildEctypeInfo::clear_ectype_group() {
  ectype_group_ = GOOGLE_LONGLONG(0);
  clear_has_ectype_group();
}
inline ::google::protobuf::int64 GuildEctypeInfo::ectype_group() const {
  // @@protoc_insertion_point(field_get:AFMsg.GuildEctypeInfo.Ectype_Group)
  return ectype_group_;
}
inline void GuildEctypeInfo::set_ectype_group(::google::protobuf::int64 value) {
  set_has_ectype_group();
  ectype_group_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.GuildEctypeInfo.Ectype_Group)
}

// -------------------------------------------------------------------

// AckGuildEctypeInfo

// required .AFMsg.Ident selfid = 1;
inline bool AckGuildEctypeInfo::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckGuildEctypeInfo::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckGuildEctypeInfo::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckGuildEctypeInfo::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
inline const ::AFMsg::Ident& AckGuildEctypeInfo::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckGuildEctypeInfo.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
inline ::AFMsg::Ident* AckGuildEctypeInfo::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckGuildEctypeInfo.selfid)
  return selfid_;
}
inline ::AFMsg::Ident* AckGuildEctypeInfo::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckGuildEctypeInfo.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline void AckGuildEctypeInfo::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckGuildEctypeInfo.selfid)
}

// required .AFMsg.GuildEctypeInfo xectypeinfo = 2;
inline bool AckGuildEctypeInfo::has_xectypeinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckGuildEctypeInfo::set_has_xectypeinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckGuildEctypeInfo::clear_has_xectypeinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckGuildEctypeInfo::clear_xectypeinfo() {
  if (xectypeinfo_ != NULL) xectypeinfo_->::AFMsg::GuildEctypeInfo::Clear();
  clear_has_xectypeinfo();
}
inline const ::AFMsg::GuildEctypeInfo& AckGuildEctypeInfo::xectypeinfo() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckGuildEctypeInfo.xectypeinfo)
  return xectypeinfo_ != NULL ? *xectypeinfo_ : *default_instance_->xectypeinfo_;
}
inline ::AFMsg::GuildEctypeInfo* AckGuildEctypeInfo::mutable_xectypeinfo() {
  set_has_xectypeinfo();
  if (xectypeinfo_ == NULL) {
    xectypeinfo_ = new ::AFMsg::GuildEctypeInfo;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckGuildEctypeInfo.xectypeinfo)
  return xectypeinfo_;
}
inline ::AFMsg::GuildEctypeInfo* AckGuildEctypeInfo::release_xectypeinfo() {
  // @@protoc_insertion_point(field_release:AFMsg.AckGuildEctypeInfo.xectypeinfo)
  clear_has_xectypeinfo();
  ::AFMsg::GuildEctypeInfo* temp = xectypeinfo_;
  xectypeinfo_ = NULL;
  return temp;
}
inline void AckGuildEctypeInfo::set_allocated_xectypeinfo(::AFMsg::GuildEctypeInfo* xectypeinfo) {
  delete xectypeinfo_;
  xectypeinfo_ = xectypeinfo;
  if (xectypeinfo) {
    set_has_xectypeinfo();
  } else {
    clear_has_xectypeinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckGuildEctypeInfo.xectypeinfo)
}

// -------------------------------------------------------------------

// SetGuildEctypeInfo

// required .AFMsg.Ident selfid = 1;
inline bool SetGuildEctypeInfo::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetGuildEctypeInfo::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetGuildEctypeInfo::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetGuildEctypeInfo::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
inline const ::AFMsg::Ident& SetGuildEctypeInfo::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.SetGuildEctypeInfo.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
inline ::AFMsg::Ident* SetGuildEctypeInfo::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.SetGuildEctypeInfo.selfid)
  return selfid_;
}
inline ::AFMsg::Ident* SetGuildEctypeInfo::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.SetGuildEctypeInfo.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline void SetGuildEctypeInfo::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.SetGuildEctypeInfo.selfid)
}

// required .AFMsg.GuildEctypeInfo xectypeinfo = 2;
inline bool SetGuildEctypeInfo::has_xectypeinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetGuildEctypeInfo::set_has_xectypeinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetGuildEctypeInfo::clear_has_xectypeinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetGuildEctypeInfo::clear_xectypeinfo() {
  if (xectypeinfo_ != NULL) xectypeinfo_->::AFMsg::GuildEctypeInfo::Clear();
  clear_has_xectypeinfo();
}
inline const ::AFMsg::GuildEctypeInfo& SetGuildEctypeInfo::xectypeinfo() const {
  // @@protoc_insertion_point(field_get:AFMsg.SetGuildEctypeInfo.xectypeinfo)
  return xectypeinfo_ != NULL ? *xectypeinfo_ : *default_instance_->xectypeinfo_;
}
inline ::AFMsg::GuildEctypeInfo* SetGuildEctypeInfo::mutable_xectypeinfo() {
  set_has_xectypeinfo();
  if (xectypeinfo_ == NULL) {
    xectypeinfo_ = new ::AFMsg::GuildEctypeInfo;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.SetGuildEctypeInfo.xectypeinfo)
  return xectypeinfo_;
}
inline ::AFMsg::GuildEctypeInfo* SetGuildEctypeInfo::release_xectypeinfo() {
  // @@protoc_insertion_point(field_release:AFMsg.SetGuildEctypeInfo.xectypeinfo)
  clear_has_xectypeinfo();
  ::AFMsg::GuildEctypeInfo* temp = xectypeinfo_;
  xectypeinfo_ = NULL;
  return temp;
}
inline void SetGuildEctypeInfo::set_allocated_xectypeinfo(::AFMsg::GuildEctypeInfo* xectypeinfo) {
  delete xectypeinfo_;
  xectypeinfo_ = xectypeinfo;
  if (xectypeinfo) {
    set_has_xectypeinfo();
  } else {
    clear_has_xectypeinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.SetGuildEctypeInfo.xectypeinfo)
}

// -------------------------------------------------------------------

// ReqEnterGuildEctype

// required .AFMsg.Ident selfid = 1;
inline bool ReqEnterGuildEctype::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqEnterGuildEctype::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqEnterGuildEctype::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqEnterGuildEctype::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
inline const ::AFMsg::Ident& ReqEnterGuildEctype::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqEnterGuildEctype.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
inline ::AFMsg::Ident* ReqEnterGuildEctype::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqEnterGuildEctype.selfid)
  return selfid_;
}
inline ::AFMsg::Ident* ReqEnterGuildEctype::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqEnterGuildEctype.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline void ReqEnterGuildEctype::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqEnterGuildEctype.selfid)
}

// -------------------------------------------------------------------

// ChatInfo

// required .AFMsg.ChatInfo.EChatType chat_type = 1;
inline bool ChatInfo::has_chat_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatInfo::set_has_chat_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatInfo::clear_has_chat_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatInfo::clear_chat_type() {
  chat_type_ = 0;
  clear_has_chat_type();
}
inline ::AFMsg::ChatInfo_EChatType ChatInfo::chat_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatInfo.chat_type)
  return static_cast< ::AFMsg::ChatInfo_EChatType >(chat_type_);
}
inline void ChatInfo::set_chat_type(::AFMsg::ChatInfo_EChatType value) {
  assert(::AFMsg::ChatInfo_EChatType_IsValid(value));
  set_has_chat_type();
  chat_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ChatInfo.chat_type)
}

// required bytes chat_info = 2;
inline bool ChatInfo::has_chat_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatInfo::set_has_chat_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatInfo::clear_has_chat_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatInfo::clear_chat_info() {
  chat_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chat_info();
}
inline const ::std::string& ChatInfo::chat_info() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatInfo.chat_info)
  return chat_info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatInfo::set_chat_info(const ::std::string& value) {
  set_has_chat_info();
  chat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ChatInfo.chat_info)
}
inline void ChatInfo::set_chat_info(const char* value) {
  set_has_chat_info();
  chat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ChatInfo.chat_info)
}
inline void ChatInfo::set_chat_info(const void* value, size_t size) {
  set_has_chat_info();
  chat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ChatInfo.chat_info)
}
inline ::std::string* ChatInfo::mutable_chat_info() {
  set_has_chat_info();
  // @@protoc_insertion_point(field_mutable:AFMsg.ChatInfo.chat_info)
  return chat_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatInfo::release_chat_info() {
  // @@protoc_insertion_point(field_release:AFMsg.ChatInfo.chat_info)
  clear_has_chat_info();
  return chat_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatInfo::set_allocated_chat_info(::std::string* chat_info) {
  if (chat_info != NULL) {
    set_has_chat_info();
  } else {
    clear_has_chat_info();
  }
  chat_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_info);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ChatInfo.chat_info)
}

// required int64 chat_time = 3;
inline bool ChatInfo::has_chat_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatInfo::set_has_chat_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatInfo::clear_has_chat_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatInfo::clear_chat_time() {
  chat_time_ = GOOGLE_LONGLONG(0);
  clear_has_chat_time();
}
inline ::google::protobuf::int64 ChatInfo::chat_time() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatInfo.chat_time)
  return chat_time_;
}
inline void ChatInfo::set_chat_time(::google::protobuf::int64 value) {
  set_has_chat_time();
  chat_time_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ChatInfo.chat_time)
}

// optional bytes addtional_info = 4;
inline bool ChatInfo::has_addtional_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatInfo::set_has_addtional_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatInfo::clear_has_addtional_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatInfo::clear_addtional_info() {
  addtional_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_addtional_info();
}
inline const ::std::string& ChatInfo::addtional_info() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatInfo.addtional_info)
  return addtional_info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatInfo::set_addtional_info(const ::std::string& value) {
  set_has_addtional_info();
  addtional_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ChatInfo.addtional_info)
}
inline void ChatInfo::set_addtional_info(const char* value) {
  set_has_addtional_info();
  addtional_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ChatInfo.addtional_info)
}
inline void ChatInfo::set_addtional_info(const void* value, size_t size) {
  set_has_addtional_info();
  addtional_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ChatInfo.addtional_info)
}
inline ::std::string* ChatInfo::mutable_addtional_info() {
  set_has_addtional_info();
  // @@protoc_insertion_point(field_mutable:AFMsg.ChatInfo.addtional_info)
  return addtional_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatInfo::release_addtional_info() {
  // @@protoc_insertion_point(field_release:AFMsg.ChatInfo.addtional_info)
  clear_has_addtional_info();
  return addtional_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatInfo::set_allocated_addtional_info(::std::string* addtional_info) {
  if (addtional_info != NULL) {
    set_has_addtional_info();
  } else {
    clear_has_addtional_info();
  }
  addtional_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addtional_info);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ChatInfo.addtional_info)
}

// required .AFMsg.Ident send_id = 5;
inline bool ChatInfo::has_send_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatInfo::set_has_send_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatInfo::clear_has_send_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatInfo::clear_send_id() {
  if (send_id_ != NULL) send_id_->::AFMsg::Ident::Clear();
  clear_has_send_id();
}
inline const ::AFMsg::Ident& ChatInfo::send_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatInfo.send_id)
  return send_id_ != NULL ? *send_id_ : *default_instance_->send_id_;
}
inline ::AFMsg::Ident* ChatInfo::mutable_send_id() {
  set_has_send_id();
  if (send_id_ == NULL) {
    send_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ChatInfo.send_id)
  return send_id_;
}
inline ::AFMsg::Ident* ChatInfo::release_send_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ChatInfo.send_id)
  clear_has_send_id();
  ::AFMsg::Ident* temp = send_id_;
  send_id_ = NULL;
  return temp;
}
inline void ChatInfo::set_allocated_send_id(::AFMsg::Ident* send_id) {
  delete send_id_;
  send_id_ = send_id;
  if (send_id) {
    set_has_send_id();
  } else {
    clear_has_send_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ChatInfo.send_id)
}

// required bytes send_name = 6;
inline bool ChatInfo::has_send_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatInfo::set_has_send_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatInfo::clear_has_send_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatInfo::clear_send_name() {
  send_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_send_name();
}
inline const ::std::string& ChatInfo::send_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatInfo.send_name)
  return send_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatInfo::set_send_name(const ::std::string& value) {
  set_has_send_name();
  send_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ChatInfo.send_name)
}
inline void ChatInfo::set_send_name(const char* value) {
  set_has_send_name();
  send_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ChatInfo.send_name)
}
inline void ChatInfo::set_send_name(const void* value, size_t size) {
  set_has_send_name();
  send_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ChatInfo.send_name)
}
inline ::std::string* ChatInfo::mutable_send_name() {
  set_has_send_name();
  // @@protoc_insertion_point(field_mutable:AFMsg.ChatInfo.send_name)
  return send_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatInfo::release_send_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ChatInfo.send_name)
  clear_has_send_name();
  return send_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatInfo::set_allocated_send_name(::std::string* send_name) {
  if (send_name != NULL) {
    set_has_send_name();
  } else {
    clear_has_send_name();
  }
  send_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), send_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ChatInfo.send_name)
}

// optional int32 send_level = 7;
inline bool ChatInfo::has_send_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChatInfo::set_has_send_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChatInfo::clear_has_send_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChatInfo::clear_send_level() {
  send_level_ = 0;
  clear_has_send_level();
}
inline ::google::protobuf::int32 ChatInfo::send_level() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatInfo.send_level)
  return send_level_;
}
inline void ChatInfo::set_send_level(::google::protobuf::int32 value) {
  set_has_send_level();
  send_level_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ChatInfo.send_level)
}

// repeated .AFMsg.Ident recvier_id = 8;
inline int ChatInfo::recvier_id_size() const {
  return recvier_id_.size();
}
inline void ChatInfo::clear_recvier_id() {
  recvier_id_.Clear();
}
inline const ::AFMsg::Ident& ChatInfo::recvier_id(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatInfo.recvier_id)
  return recvier_id_.Get(index);
}
inline ::AFMsg::Ident* ChatInfo::mutable_recvier_id(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ChatInfo.recvier_id)
  return recvier_id_.Mutable(index);
}
inline ::AFMsg::Ident* ChatInfo::add_recvier_id() {
  // @@protoc_insertion_point(field_add:AFMsg.ChatInfo.recvier_id)
  return recvier_id_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
ChatInfo::mutable_recvier_id() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ChatInfo.recvier_id)
  return &recvier_id_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
ChatInfo::recvier_id() const {
  // @@protoc_insertion_point(field_list:AFMsg.ChatInfo.recvier_id)
  return recvier_id_;
}

// optional bytes guid_name = 9;
inline bool ChatInfo::has_guid_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChatInfo::set_has_guid_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChatInfo::clear_has_guid_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChatInfo::clear_guid_name() {
  guid_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guid_name();
}
inline const ::std::string& ChatInfo::guid_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatInfo.guid_name)
  return guid_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatInfo::set_guid_name(const ::std::string& value) {
  set_has_guid_name();
  guid_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ChatInfo.guid_name)
}
inline void ChatInfo::set_guid_name(const char* value) {
  set_has_guid_name();
  guid_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ChatInfo.guid_name)
}
inline void ChatInfo::set_guid_name(const void* value, size_t size) {
  set_has_guid_name();
  guid_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ChatInfo.guid_name)
}
inline ::std::string* ChatInfo::mutable_guid_name() {
  set_has_guid_name();
  // @@protoc_insertion_point(field_mutable:AFMsg.ChatInfo.guid_name)
  return guid_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatInfo::release_guid_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ChatInfo.guid_name)
  clear_has_guid_name();
  return guid_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatInfo::set_allocated_guid_name(::std::string* guid_name) {
  if (guid_name != NULL) {
    set_has_guid_name();
  } else {
    clear_has_guid_name();
  }
  guid_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guid_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ChatInfo.guid_name)
}

// -------------------------------------------------------------------

// ReqAckCreateChatGroup

// required bytes name = 1;
inline bool ReqAckCreateChatGroup::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckCreateChatGroup::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckCreateChatGroup::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckCreateChatGroup::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ReqAckCreateChatGroup::name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckCreateChatGroup.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckCreateChatGroup::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckCreateChatGroup.name)
}
inline void ReqAckCreateChatGroup::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckCreateChatGroup.name)
}
inline void ReqAckCreateChatGroup::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckCreateChatGroup.name)
}
inline ::std::string* ReqAckCreateChatGroup::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckCreateChatGroup.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqAckCreateChatGroup::release_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckCreateChatGroup.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqAckCreateChatGroup::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckCreateChatGroup.name)
}

// required .AFMsg.Ident selfid = 2;
inline bool ReqAckCreateChatGroup::has_selfid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckCreateChatGroup::set_has_selfid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckCreateChatGroup::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckCreateChatGroup::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
inline const ::AFMsg::Ident& ReqAckCreateChatGroup::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckCreateChatGroup.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
inline ::AFMsg::Ident* ReqAckCreateChatGroup::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckCreateChatGroup.selfid)
  return selfid_;
}
inline ::AFMsg::Ident* ReqAckCreateChatGroup::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckCreateChatGroup.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline void ReqAckCreateChatGroup::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckCreateChatGroup.selfid)
}

// optional .AFMsg.Ident xChatGroupid = 3;
inline bool ReqAckCreateChatGroup::has_xchatgroupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqAckCreateChatGroup::set_has_xchatgroupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqAckCreateChatGroup::clear_has_xchatgroupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqAckCreateChatGroup::clear_xchatgroupid() {
  if (xchatgroupid_ != NULL) xchatgroupid_->::AFMsg::Ident::Clear();
  clear_has_xchatgroupid();
}
inline const ::AFMsg::Ident& ReqAckCreateChatGroup::xchatgroupid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckCreateChatGroup.xChatGroupid)
  return xchatgroupid_ != NULL ? *xchatgroupid_ : *default_instance_->xchatgroupid_;
}
inline ::AFMsg::Ident* ReqAckCreateChatGroup::mutable_xchatgroupid() {
  set_has_xchatgroupid();
  if (xchatgroupid_ == NULL) {
    xchatgroupid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckCreateChatGroup.xChatGroupid)
  return xchatgroupid_;
}
inline ::AFMsg::Ident* ReqAckCreateChatGroup::release_xchatgroupid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckCreateChatGroup.xChatGroupid)
  clear_has_xchatgroupid();
  ::AFMsg::Ident* temp = xchatgroupid_;
  xchatgroupid_ = NULL;
  return temp;
}
inline void ReqAckCreateChatGroup::set_allocated_xchatgroupid(::AFMsg::Ident* xchatgroupid) {
  delete xchatgroupid_;
  xchatgroupid_ = xchatgroupid;
  if (xchatgroupid) {
    set_has_xchatgroupid();
  } else {
    clear_has_xchatgroupid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckCreateChatGroup.xChatGroupid)
}

// optional int32 chatType = 4;
inline bool ReqAckCreateChatGroup::has_chattype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqAckCreateChatGroup::set_has_chattype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqAckCreateChatGroup::clear_has_chattype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqAckCreateChatGroup::clear_chattype() {
  chattype_ = 0;
  clear_has_chattype();
}
inline ::google::protobuf::int32 ReqAckCreateChatGroup::chattype() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckCreateChatGroup.chatType)
  return chattype_;
}
inline void ReqAckCreateChatGroup::set_chattype(::google::protobuf::int32 value) {
  set_has_chattype();
  chattype_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckCreateChatGroup.chatType)
}

// -------------------------------------------------------------------

// ReqAckjoinChatGroup

// required .AFMsg.Ident selfid = 1;
inline bool ReqAckjoinChatGroup::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckjoinChatGroup::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckjoinChatGroup::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckjoinChatGroup::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
inline const ::AFMsg::Ident& ReqAckjoinChatGroup::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckjoinChatGroup.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
inline ::AFMsg::Ident* ReqAckjoinChatGroup::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckjoinChatGroup.selfid)
  return selfid_;
}
inline ::AFMsg::Ident* ReqAckjoinChatGroup::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckjoinChatGroup.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline void ReqAckjoinChatGroup::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckjoinChatGroup.selfid)
}

// optional .AFMsg.Ident xChatGroupid = 2;
inline bool ReqAckjoinChatGroup::has_xchatgroupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckjoinChatGroup::set_has_xchatgroupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckjoinChatGroup::clear_has_xchatgroupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckjoinChatGroup::clear_xchatgroupid() {
  if (xchatgroupid_ != NULL) xchatgroupid_->::AFMsg::Ident::Clear();
  clear_has_xchatgroupid();
}
inline const ::AFMsg::Ident& ReqAckjoinChatGroup::xchatgroupid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckjoinChatGroup.xChatGroupid)
  return xchatgroupid_ != NULL ? *xchatgroupid_ : *default_instance_->xchatgroupid_;
}
inline ::AFMsg::Ident* ReqAckjoinChatGroup::mutable_xchatgroupid() {
  set_has_xchatgroupid();
  if (xchatgroupid_ == NULL) {
    xchatgroupid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckjoinChatGroup.xChatGroupid)
  return xchatgroupid_;
}
inline ::AFMsg::Ident* ReqAckjoinChatGroup::release_xchatgroupid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckjoinChatGroup.xChatGroupid)
  clear_has_xchatgroupid();
  ::AFMsg::Ident* temp = xchatgroupid_;
  xchatgroupid_ = NULL;
  return temp;
}
inline void ReqAckjoinChatGroup::set_allocated_xchatgroupid(::AFMsg::Ident* xchatgroupid) {
  delete xchatgroupid_;
  xchatgroupid_ = xchatgroupid;
  if (xchatgroupid) {
    set_has_xchatgroupid();
  } else {
    clear_has_xchatgroupid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckjoinChatGroup.xChatGroupid)
}

// optional int64 result = 3;
inline bool ReqAckjoinChatGroup::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqAckjoinChatGroup::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqAckjoinChatGroup::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqAckjoinChatGroup::clear_result() {
  result_ = GOOGLE_LONGLONG(0);
  clear_has_result();
}
inline ::google::protobuf::int64 ReqAckjoinChatGroup::result() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckjoinChatGroup.result)
  return result_;
}
inline void ReqAckjoinChatGroup::set_result(::google::protobuf::int64 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckjoinChatGroup.result)
}

// optional int32 chatType = 4;
inline bool ReqAckjoinChatGroup::has_chattype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqAckjoinChatGroup::set_has_chattype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqAckjoinChatGroup::clear_has_chattype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqAckjoinChatGroup::clear_chattype() {
  chattype_ = 0;
  clear_has_chattype();
}
inline ::google::protobuf::int32 ReqAckjoinChatGroup::chattype() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckjoinChatGroup.chatType)
  return chattype_;
}
inline void ReqAckjoinChatGroup::set_chattype(::google::protobuf::int32 value) {
  set_has_chattype();
  chattype_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckjoinChatGroup.chatType)
}

// -------------------------------------------------------------------

// ReqAckQuitChatGroup

// required .AFMsg.Ident selfid = 1;
inline bool ReqAckQuitChatGroup::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckQuitChatGroup::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckQuitChatGroup::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckQuitChatGroup::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
inline const ::AFMsg::Ident& ReqAckQuitChatGroup::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckQuitChatGroup.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
inline ::AFMsg::Ident* ReqAckQuitChatGroup::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckQuitChatGroup.selfid)
  return selfid_;
}
inline ::AFMsg::Ident* ReqAckQuitChatGroup::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckQuitChatGroup.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline void ReqAckQuitChatGroup::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckQuitChatGroup.selfid)
}

// optional .AFMsg.Ident xChatGroupid = 2;
inline bool ReqAckQuitChatGroup::has_xchatgroupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckQuitChatGroup::set_has_xchatgroupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckQuitChatGroup::clear_has_xchatgroupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckQuitChatGroup::clear_xchatgroupid() {
  if (xchatgroupid_ != NULL) xchatgroupid_->::AFMsg::Ident::Clear();
  clear_has_xchatgroupid();
}
inline const ::AFMsg::Ident& ReqAckQuitChatGroup::xchatgroupid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckQuitChatGroup.xChatGroupid)
  return xchatgroupid_ != NULL ? *xchatgroupid_ : *default_instance_->xchatgroupid_;
}
inline ::AFMsg::Ident* ReqAckQuitChatGroup::mutable_xchatgroupid() {
  set_has_xchatgroupid();
  if (xchatgroupid_ == NULL) {
    xchatgroupid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckQuitChatGroup.xChatGroupid)
  return xchatgroupid_;
}
inline ::AFMsg::Ident* ReqAckQuitChatGroup::release_xchatgroupid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckQuitChatGroup.xChatGroupid)
  clear_has_xchatgroupid();
  ::AFMsg::Ident* temp = xchatgroupid_;
  xchatgroupid_ = NULL;
  return temp;
}
inline void ReqAckQuitChatGroup::set_allocated_xchatgroupid(::AFMsg::Ident* xchatgroupid) {
  delete xchatgroupid_;
  xchatgroupid_ = xchatgroupid;
  if (xchatgroupid) {
    set_has_xchatgroupid();
  } else {
    clear_has_xchatgroupid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckQuitChatGroup.xChatGroupid)
}

// optional int64 result = 3;
inline bool ReqAckQuitChatGroup::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqAckQuitChatGroup::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqAckQuitChatGroup::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqAckQuitChatGroup::clear_result() {
  result_ = GOOGLE_LONGLONG(0);
  clear_has_result();
}
inline ::google::protobuf::int64 ReqAckQuitChatGroup::result() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckQuitChatGroup.result)
  return result_;
}
inline void ReqAckQuitChatGroup::set_result(::google::protobuf::int64 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckQuitChatGroup.result)
}

// -------------------------------------------------------------------

// ReqSubscriptionChatGroup

// required .AFMsg.Ident selfid = 1;
inline bool ReqSubscriptionChatGroup::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqSubscriptionChatGroup::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqSubscriptionChatGroup::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqSubscriptionChatGroup::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
inline const ::AFMsg::Ident& ReqSubscriptionChatGroup::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSubscriptionChatGroup.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
inline ::AFMsg::Ident* ReqSubscriptionChatGroup::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSubscriptionChatGroup.selfid)
  return selfid_;
}
inline ::AFMsg::Ident* ReqSubscriptionChatGroup::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqSubscriptionChatGroup.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline void ReqSubscriptionChatGroup::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqSubscriptionChatGroup.selfid)
}

// repeated .AFMsg.Ident xChatGroupid = 2;
inline int ReqSubscriptionChatGroup::xchatgroupid_size() const {
  return xchatgroupid_.size();
}
inline void ReqSubscriptionChatGroup::clear_xchatgroupid() {
  xchatgroupid_.Clear();
}
inline const ::AFMsg::Ident& ReqSubscriptionChatGroup::xchatgroupid(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSubscriptionChatGroup.xChatGroupid)
  return xchatgroupid_.Get(index);
}
inline ::AFMsg::Ident* ReqSubscriptionChatGroup::mutable_xchatgroupid(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSubscriptionChatGroup.xChatGroupid)
  return xchatgroupid_.Mutable(index);
}
inline ::AFMsg::Ident* ReqSubscriptionChatGroup::add_xchatgroupid() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqSubscriptionChatGroup.xChatGroupid)
  return xchatgroupid_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
ReqSubscriptionChatGroup::mutable_xchatgroupid() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqSubscriptionChatGroup.xChatGroupid)
  return &xchatgroupid_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
ReqSubscriptionChatGroup::xchatgroupid() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqSubscriptionChatGroup.xChatGroupid)
  return xchatgroupid_;
}

// -------------------------------------------------------------------

// ReqCancelSubscriptionChatGroup

// required .AFMsg.Ident selfid = 1;
inline bool ReqCancelSubscriptionChatGroup::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqCancelSubscriptionChatGroup::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqCancelSubscriptionChatGroup::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqCancelSubscriptionChatGroup::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
inline const ::AFMsg::Ident& ReqCancelSubscriptionChatGroup::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqCancelSubscriptionChatGroup.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
inline ::AFMsg::Ident* ReqCancelSubscriptionChatGroup::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqCancelSubscriptionChatGroup.selfid)
  return selfid_;
}
inline ::AFMsg::Ident* ReqCancelSubscriptionChatGroup::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqCancelSubscriptionChatGroup.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline void ReqCancelSubscriptionChatGroup::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqCancelSubscriptionChatGroup.selfid)
}

// repeated .AFMsg.Ident xChatGroupid = 2;
inline int ReqCancelSubscriptionChatGroup::xchatgroupid_size() const {
  return xchatgroupid_.size();
}
inline void ReqCancelSubscriptionChatGroup::clear_xchatgroupid() {
  xchatgroupid_.Clear();
}
inline const ::AFMsg::Ident& ReqCancelSubscriptionChatGroup::xchatgroupid(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqCancelSubscriptionChatGroup.xChatGroupid)
  return xchatgroupid_.Get(index);
}
inline ::AFMsg::Ident* ReqCancelSubscriptionChatGroup::mutable_xchatgroupid(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqCancelSubscriptionChatGroup.xChatGroupid)
  return xchatgroupid_.Mutable(index);
}
inline ::AFMsg::Ident* ReqCancelSubscriptionChatGroup::add_xchatgroupid() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqCancelSubscriptionChatGroup.xChatGroupid)
  return xchatgroupid_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
ReqCancelSubscriptionChatGroup::mutable_xchatgroupid() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqCancelSubscriptionChatGroup.xChatGroupid)
  return &xchatgroupid_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
ReqCancelSubscriptionChatGroup::xchatgroupid() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqCancelSubscriptionChatGroup.xChatGroupid)
  return xchatgroupid_;
}

// -------------------------------------------------------------------

// ReqIntensifylevelToEquip

// required .AFMsg.Ident selfid = 1;
inline bool ReqIntensifylevelToEquip::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqIntensifylevelToEquip::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqIntensifylevelToEquip::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqIntensifylevelToEquip::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
inline const ::AFMsg::Ident& ReqIntensifylevelToEquip::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqIntensifylevelToEquip.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
inline ::AFMsg::Ident* ReqIntensifylevelToEquip::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqIntensifylevelToEquip.selfid)
  return selfid_;
}
inline ::AFMsg::Ident* ReqIntensifylevelToEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqIntensifylevelToEquip.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline void ReqIntensifylevelToEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqIntensifylevelToEquip.selfid)
}

// required .AFMsg.Ident equipid = 2;
inline bool ReqIntensifylevelToEquip::has_equipid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqIntensifylevelToEquip::set_has_equipid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqIntensifylevelToEquip::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqIntensifylevelToEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
  clear_has_equipid();
}
inline const ::AFMsg::Ident& ReqIntensifylevelToEquip::equipid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqIntensifylevelToEquip.equipid)
  return equipid_ != NULL ? *equipid_ : *default_instance_->equipid_;
}
inline ::AFMsg::Ident* ReqIntensifylevelToEquip::mutable_equipid() {
  set_has_equipid();
  if (equipid_ == NULL) {
    equipid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqIntensifylevelToEquip.equipid)
  return equipid_;
}
inline ::AFMsg::Ident* ReqIntensifylevelToEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqIntensifylevelToEquip.equipid)
  clear_has_equipid();
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
inline void ReqIntensifylevelToEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  delete equipid_;
  equipid_ = equipid;
  if (equipid) {
    set_has_equipid();
  } else {
    clear_has_equipid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqIntensifylevelToEquip.equipid)
}

// -------------------------------------------------------------------

// AckIntensifylevelToEquip

// required .AFMsg.Ident selfid = 1;
inline bool AckIntensifylevelToEquip::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckIntensifylevelToEquip::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckIntensifylevelToEquip::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckIntensifylevelToEquip::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
inline const ::AFMsg::Ident& AckIntensifylevelToEquip::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckIntensifylevelToEquip.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
inline ::AFMsg::Ident* AckIntensifylevelToEquip::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckIntensifylevelToEquip.selfid)
  return selfid_;
}
inline ::AFMsg::Ident* AckIntensifylevelToEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckIntensifylevelToEquip.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline void AckIntensifylevelToEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckIntensifylevelToEquip.selfid)
}

// required .AFMsg.Ident equipid = 2;
inline bool AckIntensifylevelToEquip::has_equipid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckIntensifylevelToEquip::set_has_equipid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckIntensifylevelToEquip::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckIntensifylevelToEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
  clear_has_equipid();
}
inline const ::AFMsg::Ident& AckIntensifylevelToEquip::equipid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckIntensifylevelToEquip.equipid)
  return equipid_ != NULL ? *equipid_ : *default_instance_->equipid_;
}
inline ::AFMsg::Ident* AckIntensifylevelToEquip::mutable_equipid() {
  set_has_equipid();
  if (equipid_ == NULL) {
    equipid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckIntensifylevelToEquip.equipid)
  return equipid_;
}
inline ::AFMsg::Ident* AckIntensifylevelToEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckIntensifylevelToEquip.equipid)
  clear_has_equipid();
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
inline void AckIntensifylevelToEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  delete equipid_;
  equipid_ = equipid;
  if (equipid) {
    set_has_equipid();
  } else {
    clear_has_equipid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckIntensifylevelToEquip.equipid)
}

// required int32 result = 3;
inline bool AckIntensifylevelToEquip::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckIntensifylevelToEquip::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckIntensifylevelToEquip::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckIntensifylevelToEquip::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 AckIntensifylevelToEquip::result() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckIntensifylevelToEquip.result)
  return result_;
}
inline void AckIntensifylevelToEquip::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckIntensifylevelToEquip.result)
}

// -------------------------------------------------------------------

// ReqHoleToEquip

// required .AFMsg.Ident selfid = 1;
inline bool ReqHoleToEquip::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqHoleToEquip::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqHoleToEquip::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqHoleToEquip::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
inline const ::AFMsg::Ident& ReqHoleToEquip::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqHoleToEquip.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
inline ::AFMsg::Ident* ReqHoleToEquip::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqHoleToEquip.selfid)
  return selfid_;
}
inline ::AFMsg::Ident* ReqHoleToEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqHoleToEquip.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline void ReqHoleToEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqHoleToEquip.selfid)
}

// required .AFMsg.Ident equipid = 2;
inline bool ReqHoleToEquip::has_equipid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqHoleToEquip::set_has_equipid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqHoleToEquip::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqHoleToEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
  clear_has_equipid();
}
inline const ::AFMsg::Ident& ReqHoleToEquip::equipid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqHoleToEquip.equipid)
  return equipid_ != NULL ? *equipid_ : *default_instance_->equipid_;
}
inline ::AFMsg::Ident* ReqHoleToEquip::mutable_equipid() {
  set_has_equipid();
  if (equipid_ == NULL) {
    equipid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqHoleToEquip.equipid)
  return equipid_;
}
inline ::AFMsg::Ident* ReqHoleToEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqHoleToEquip.equipid)
  clear_has_equipid();
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
inline void ReqHoleToEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  delete equipid_;
  equipid_ = equipid;
  if (equipid) {
    set_has_equipid();
  } else {
    clear_has_equipid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqHoleToEquip.equipid)
}

// -------------------------------------------------------------------

// AckHoleToEquip

// required .AFMsg.Ident selfid = 1;
inline bool AckHoleToEquip::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckHoleToEquip::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckHoleToEquip::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckHoleToEquip::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
inline const ::AFMsg::Ident& AckHoleToEquip::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckHoleToEquip.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
inline ::AFMsg::Ident* AckHoleToEquip::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckHoleToEquip.selfid)
  return selfid_;
}
inline ::AFMsg::Ident* AckHoleToEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckHoleToEquip.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline void AckHoleToEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckHoleToEquip.selfid)
}

// required .AFMsg.Ident equipid = 2;
inline bool AckHoleToEquip::has_equipid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckHoleToEquip::set_has_equipid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckHoleToEquip::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckHoleToEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
  clear_has_equipid();
}
inline const ::AFMsg::Ident& AckHoleToEquip::equipid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckHoleToEquip.equipid)
  return equipid_ != NULL ? *equipid_ : *default_instance_->equipid_;
}
inline ::AFMsg::Ident* AckHoleToEquip::mutable_equipid() {
  set_has_equipid();
  if (equipid_ == NULL) {
    equipid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckHoleToEquip.equipid)
  return equipid_;
}
inline ::AFMsg::Ident* AckHoleToEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckHoleToEquip.equipid)
  clear_has_equipid();
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
inline void AckHoleToEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  delete equipid_;
  equipid_ = equipid;
  if (equipid) {
    set_has_equipid();
  } else {
    clear_has_equipid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckHoleToEquip.equipid)
}

// required int32 result = 3;
inline bool AckHoleToEquip::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckHoleToEquip::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckHoleToEquip::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckHoleToEquip::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 AckHoleToEquip::result() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckHoleToEquip.result)
  return result_;
}
inline void AckHoleToEquip::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckHoleToEquip.result)
}

// -------------------------------------------------------------------

// ReqInlaystoneToEquip

// required .AFMsg.Ident selfid = 1;
inline bool ReqInlaystoneToEquip::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqInlaystoneToEquip::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqInlaystoneToEquip::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqInlaystoneToEquip::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
inline const ::AFMsg::Ident& ReqInlaystoneToEquip::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqInlaystoneToEquip.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
inline ::AFMsg::Ident* ReqInlaystoneToEquip::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqInlaystoneToEquip.selfid)
  return selfid_;
}
inline ::AFMsg::Ident* ReqInlaystoneToEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqInlaystoneToEquip.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline void ReqInlaystoneToEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqInlaystoneToEquip.selfid)
}

// required .AFMsg.Ident equipid = 2;
inline bool ReqInlaystoneToEquip::has_equipid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqInlaystoneToEquip::set_has_equipid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqInlaystoneToEquip::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqInlaystoneToEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
  clear_has_equipid();
}
inline const ::AFMsg::Ident& ReqInlaystoneToEquip::equipid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqInlaystoneToEquip.equipid)
  return equipid_ != NULL ? *equipid_ : *default_instance_->equipid_;
}
inline ::AFMsg::Ident* ReqInlaystoneToEquip::mutable_equipid() {
  set_has_equipid();
  if (equipid_ == NULL) {
    equipid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqInlaystoneToEquip.equipid)
  return equipid_;
}
inline ::AFMsg::Ident* ReqInlaystoneToEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqInlaystoneToEquip.equipid)
  clear_has_equipid();
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
inline void ReqInlaystoneToEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  delete equipid_;
  equipid_ = equipid;
  if (equipid) {
    set_has_equipid();
  } else {
    clear_has_equipid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqInlaystoneToEquip.equipid)
}

// required bytes stoneid = 3;
inline bool ReqInlaystoneToEquip::has_stoneid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqInlaystoneToEquip::set_has_stoneid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqInlaystoneToEquip::clear_has_stoneid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqInlaystoneToEquip::clear_stoneid() {
  stoneid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stoneid();
}
inline const ::std::string& ReqInlaystoneToEquip::stoneid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqInlaystoneToEquip.stoneid)
  return stoneid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqInlaystoneToEquip::set_stoneid(const ::std::string& value) {
  set_has_stoneid();
  stoneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqInlaystoneToEquip.stoneid)
}
inline void ReqInlaystoneToEquip::set_stoneid(const char* value) {
  set_has_stoneid();
  stoneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqInlaystoneToEquip.stoneid)
}
inline void ReqInlaystoneToEquip::set_stoneid(const void* value, size_t size) {
  set_has_stoneid();
  stoneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqInlaystoneToEquip.stoneid)
}
inline ::std::string* ReqInlaystoneToEquip::mutable_stoneid() {
  set_has_stoneid();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqInlaystoneToEquip.stoneid)
  return stoneid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqInlaystoneToEquip::release_stoneid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqInlaystoneToEquip.stoneid)
  clear_has_stoneid();
  return stoneid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqInlaystoneToEquip::set_allocated_stoneid(::std::string* stoneid) {
  if (stoneid != NULL) {
    set_has_stoneid();
  } else {
    clear_has_stoneid();
  }
  stoneid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoneid);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqInlaystoneToEquip.stoneid)
}

// required int32 hole_index = 4;
inline bool ReqInlaystoneToEquip::has_hole_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqInlaystoneToEquip::set_has_hole_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqInlaystoneToEquip::clear_has_hole_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqInlaystoneToEquip::clear_hole_index() {
  hole_index_ = 0;
  clear_has_hole_index();
}
inline ::google::protobuf::int32 ReqInlaystoneToEquip::hole_index() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqInlaystoneToEquip.hole_index)
  return hole_index_;
}
inline void ReqInlaystoneToEquip::set_hole_index(::google::protobuf::int32 value) {
  set_has_hole_index();
  hole_index_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqInlaystoneToEquip.hole_index)
}

// -------------------------------------------------------------------

// AckInlaystoneToEquip

// required .AFMsg.Ident selfid = 1;
inline bool AckInlaystoneToEquip::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckInlaystoneToEquip::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckInlaystoneToEquip::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckInlaystoneToEquip::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
inline const ::AFMsg::Ident& AckInlaystoneToEquip::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckInlaystoneToEquip.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
inline ::AFMsg::Ident* AckInlaystoneToEquip::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckInlaystoneToEquip.selfid)
  return selfid_;
}
inline ::AFMsg::Ident* AckInlaystoneToEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckInlaystoneToEquip.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline void AckInlaystoneToEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckInlaystoneToEquip.selfid)
}

// required .AFMsg.Ident equipid = 2;
inline bool AckInlaystoneToEquip::has_equipid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckInlaystoneToEquip::set_has_equipid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckInlaystoneToEquip::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckInlaystoneToEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
  clear_has_equipid();
}
inline const ::AFMsg::Ident& AckInlaystoneToEquip::equipid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckInlaystoneToEquip.equipid)
  return equipid_ != NULL ? *equipid_ : *default_instance_->equipid_;
}
inline ::AFMsg::Ident* AckInlaystoneToEquip::mutable_equipid() {
  set_has_equipid();
  if (equipid_ == NULL) {
    equipid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckInlaystoneToEquip.equipid)
  return equipid_;
}
inline ::AFMsg::Ident* AckInlaystoneToEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckInlaystoneToEquip.equipid)
  clear_has_equipid();
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
inline void AckInlaystoneToEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  delete equipid_;
  equipid_ = equipid;
  if (equipid) {
    set_has_equipid();
  } else {
    clear_has_equipid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckInlaystoneToEquip.equipid)
}

// required int32 result = 3;
inline bool AckInlaystoneToEquip::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckInlaystoneToEquip::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckInlaystoneToEquip::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckInlaystoneToEquip::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 AckInlaystoneToEquip::result() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckInlaystoneToEquip.result)
  return result_;
}
inline void AckInlaystoneToEquip::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckInlaystoneToEquip.result)
}

// -------------------------------------------------------------------

// ReqElementlevelToEquip

// required .AFMsg.Ident selfid = 1;
inline bool ReqElementlevelToEquip::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqElementlevelToEquip::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqElementlevelToEquip::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqElementlevelToEquip::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
inline const ::AFMsg::Ident& ReqElementlevelToEquip::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqElementlevelToEquip.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
inline ::AFMsg::Ident* ReqElementlevelToEquip::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqElementlevelToEquip.selfid)
  return selfid_;
}
inline ::AFMsg::Ident* ReqElementlevelToEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqElementlevelToEquip.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline void ReqElementlevelToEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqElementlevelToEquip.selfid)
}

// required .AFMsg.Ident equipid = 2;
inline bool ReqElementlevelToEquip::has_equipid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqElementlevelToEquip::set_has_equipid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqElementlevelToEquip::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqElementlevelToEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
  clear_has_equipid();
}
inline const ::AFMsg::Ident& ReqElementlevelToEquip::equipid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqElementlevelToEquip.equipid)
  return equipid_ != NULL ? *equipid_ : *default_instance_->equipid_;
}
inline ::AFMsg::Ident* ReqElementlevelToEquip::mutable_equipid() {
  set_has_equipid();
  if (equipid_ == NULL) {
    equipid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqElementlevelToEquip.equipid)
  return equipid_;
}
inline ::AFMsg::Ident* ReqElementlevelToEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqElementlevelToEquip.equipid)
  clear_has_equipid();
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
inline void ReqElementlevelToEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  delete equipid_;
  equipid_ = equipid;
  if (equipid) {
    set_has_equipid();
  } else {
    clear_has_equipid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqElementlevelToEquip.equipid)
}

// required .AFMsg.EGameElementType eElementType = 3;
inline bool ReqElementlevelToEquip::has_eelementtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqElementlevelToEquip::set_has_eelementtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqElementlevelToEquip::clear_has_eelementtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqElementlevelToEquip::clear_eelementtype() {
  eelementtype_ = 0;
  clear_has_eelementtype();
}
inline ::AFMsg::EGameElementType ReqElementlevelToEquip::eelementtype() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqElementlevelToEquip.eElementType)
  return static_cast< ::AFMsg::EGameElementType >(eelementtype_);
}
inline void ReqElementlevelToEquip::set_eelementtype(::AFMsg::EGameElementType value) {
  assert(::AFMsg::EGameElementType_IsValid(value));
  set_has_eelementtype();
  eelementtype_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqElementlevelToEquip.eElementType)
}

// -------------------------------------------------------------------

// AckElementlevelToEquip

// required .AFMsg.Ident selfid = 1;
inline bool AckElementlevelToEquip::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckElementlevelToEquip::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckElementlevelToEquip::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckElementlevelToEquip::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
inline const ::AFMsg::Ident& AckElementlevelToEquip::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckElementlevelToEquip.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
inline ::AFMsg::Ident* AckElementlevelToEquip::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckElementlevelToEquip.selfid)
  return selfid_;
}
inline ::AFMsg::Ident* AckElementlevelToEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckElementlevelToEquip.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline void AckElementlevelToEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckElementlevelToEquip.selfid)
}

// required .AFMsg.Ident equipid = 2;
inline bool AckElementlevelToEquip::has_equipid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckElementlevelToEquip::set_has_equipid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckElementlevelToEquip::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckElementlevelToEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
  clear_has_equipid();
}
inline const ::AFMsg::Ident& AckElementlevelToEquip::equipid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckElementlevelToEquip.equipid)
  return equipid_ != NULL ? *equipid_ : *default_instance_->equipid_;
}
inline ::AFMsg::Ident* AckElementlevelToEquip::mutable_equipid() {
  set_has_equipid();
  if (equipid_ == NULL) {
    equipid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckElementlevelToEquip.equipid)
  return equipid_;
}
inline ::AFMsg::Ident* AckElementlevelToEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckElementlevelToEquip.equipid)
  clear_has_equipid();
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
inline void AckElementlevelToEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  delete equipid_;
  equipid_ = equipid;
  if (equipid) {
    set_has_equipid();
  } else {
    clear_has_equipid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckElementlevelToEquip.equipid)
}

// required int32 result = 3;
inline bool AckElementlevelToEquip::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckElementlevelToEquip::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckElementlevelToEquip::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckElementlevelToEquip::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 AckElementlevelToEquip::result() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckElementlevelToEquip.result)
  return result_;
}
inline void AckElementlevelToEquip::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckElementlevelToEquip.result)
}

// -------------------------------------------------------------------

// ReqSetFightHero

// required .AFMsg.Ident selfid = 1;
inline bool ReqSetFightHero::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqSetFightHero::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqSetFightHero::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqSetFightHero::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
inline const ::AFMsg::Ident& ReqSetFightHero::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSetFightHero.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
inline ::AFMsg::Ident* ReqSetFightHero::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSetFightHero.selfid)
  return selfid_;
}
inline ::AFMsg::Ident* ReqSetFightHero::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqSetFightHero.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline void ReqSetFightHero::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqSetFightHero.selfid)
}

// required .AFMsg.Ident Heroid = 2;
inline bool ReqSetFightHero::has_heroid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqSetFightHero::set_has_heroid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqSetFightHero::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqSetFightHero::clear_heroid() {
  if (heroid_ != NULL) heroid_->::AFMsg::Ident::Clear();
  clear_has_heroid();
}
inline const ::AFMsg::Ident& ReqSetFightHero::heroid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSetFightHero.Heroid)
  return heroid_ != NULL ? *heroid_ : *default_instance_->heroid_;
}
inline ::AFMsg::Ident* ReqSetFightHero::mutable_heroid() {
  set_has_heroid();
  if (heroid_ == NULL) {
    heroid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSetFightHero.Heroid)
  return heroid_;
}
inline ::AFMsg::Ident* ReqSetFightHero::release_heroid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqSetFightHero.Heroid)
  clear_has_heroid();
  ::AFMsg::Ident* temp = heroid_;
  heroid_ = NULL;
  return temp;
}
inline void ReqSetFightHero::set_allocated_heroid(::AFMsg::Ident* heroid) {
  delete heroid_;
  heroid_ = heroid;
  if (heroid) {
    set_has_heroid();
  } else {
    clear_has_heroid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqSetFightHero.Heroid)
}

// required int32 FightPos = 3;
inline bool ReqSetFightHero::has_fightpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqSetFightHero::set_has_fightpos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqSetFightHero::clear_has_fightpos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqSetFightHero::clear_fightpos() {
  fightpos_ = 0;
  clear_has_fightpos();
}
inline ::google::protobuf::int32 ReqSetFightHero::fightpos() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSetFightHero.FightPos)
  return fightpos_;
}
inline void ReqSetFightHero::set_fightpos(::google::protobuf::int32 value) {
  set_has_fightpos();
  fightpos_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqSetFightHero.FightPos)
}

// -------------------------------------------------------------------

// ReqWearEquip

// required .AFMsg.Ident selfid = 1;
inline bool ReqWearEquip::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqWearEquip::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqWearEquip::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqWearEquip::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
inline const ::AFMsg::Ident& ReqWearEquip::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqWearEquip.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
inline ::AFMsg::Ident* ReqWearEquip::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqWearEquip.selfid)
  return selfid_;
}
inline ::AFMsg::Ident* ReqWearEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqWearEquip.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline void ReqWearEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqWearEquip.selfid)
}

// required .AFMsg.Ident equipid = 2;
inline bool ReqWearEquip::has_equipid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqWearEquip::set_has_equipid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqWearEquip::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqWearEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
  clear_has_equipid();
}
inline const ::AFMsg::Ident& ReqWearEquip::equipid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqWearEquip.equipid)
  return equipid_ != NULL ? *equipid_ : *default_instance_->equipid_;
}
inline ::AFMsg::Ident* ReqWearEquip::mutable_equipid() {
  set_has_equipid();
  if (equipid_ == NULL) {
    equipid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqWearEquip.equipid)
  return equipid_;
}
inline ::AFMsg::Ident* ReqWearEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqWearEquip.equipid)
  clear_has_equipid();
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
inline void ReqWearEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  delete equipid_;
  equipid_ = equipid;
  if (equipid) {
    set_has_equipid();
  } else {
    clear_has_equipid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqWearEquip.equipid)
}

// required .AFMsg.Ident Targetid = 3;
inline bool ReqWearEquip::has_targetid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqWearEquip::set_has_targetid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqWearEquip::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqWearEquip::clear_targetid() {
  if (targetid_ != NULL) targetid_->::AFMsg::Ident::Clear();
  clear_has_targetid();
}
inline const ::AFMsg::Ident& ReqWearEquip::targetid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqWearEquip.Targetid)
  return targetid_ != NULL ? *targetid_ : *default_instance_->targetid_;
}
inline ::AFMsg::Ident* ReqWearEquip::mutable_targetid() {
  set_has_targetid();
  if (targetid_ == NULL) {
    targetid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqWearEquip.Targetid)
  return targetid_;
}
inline ::AFMsg::Ident* ReqWearEquip::release_targetid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqWearEquip.Targetid)
  clear_has_targetid();
  ::AFMsg::Ident* temp = targetid_;
  targetid_ = NULL;
  return temp;
}
inline void ReqWearEquip::set_allocated_targetid(::AFMsg::Ident* targetid) {
  delete targetid_;
  targetid_ = targetid;
  if (targetid) {
    set_has_targetid();
  } else {
    clear_has_targetid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqWearEquip.Targetid)
}

// -------------------------------------------------------------------

// TakeOffEquip

// required .AFMsg.Ident selfid = 1;
inline bool TakeOffEquip::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TakeOffEquip::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TakeOffEquip::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TakeOffEquip::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
inline const ::AFMsg::Ident& TakeOffEquip::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.TakeOffEquip.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
inline ::AFMsg::Ident* TakeOffEquip::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.TakeOffEquip.selfid)
  return selfid_;
}
inline ::AFMsg::Ident* TakeOffEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.TakeOffEquip.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline void TakeOffEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.TakeOffEquip.selfid)
}

// required .AFMsg.Ident equipid = 2;
inline bool TakeOffEquip::has_equipid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TakeOffEquip::set_has_equipid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TakeOffEquip::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TakeOffEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
  clear_has_equipid();
}
inline const ::AFMsg::Ident& TakeOffEquip::equipid() const {
  // @@protoc_insertion_point(field_get:AFMsg.TakeOffEquip.equipid)
  return equipid_ != NULL ? *equipid_ : *default_instance_->equipid_;
}
inline ::AFMsg::Ident* TakeOffEquip::mutable_equipid() {
  set_has_equipid();
  if (equipid_ == NULL) {
    equipid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.TakeOffEquip.equipid)
  return equipid_;
}
inline ::AFMsg::Ident* TakeOffEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.TakeOffEquip.equipid)
  clear_has_equipid();
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
inline void TakeOffEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  delete equipid_;
  equipid_ = equipid;
  if (equipid) {
    set_has_equipid();
  } else {
    clear_has_equipid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.TakeOffEquip.equipid)
}

// required .AFMsg.Ident Targetid = 3;
inline bool TakeOffEquip::has_targetid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TakeOffEquip::set_has_targetid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TakeOffEquip::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TakeOffEquip::clear_targetid() {
  if (targetid_ != NULL) targetid_->::AFMsg::Ident::Clear();
  clear_has_targetid();
}
inline const ::AFMsg::Ident& TakeOffEquip::targetid() const {
  // @@protoc_insertion_point(field_get:AFMsg.TakeOffEquip.Targetid)
  return targetid_ != NULL ? *targetid_ : *default_instance_->targetid_;
}
inline ::AFMsg::Ident* TakeOffEquip::mutable_targetid() {
  set_has_targetid();
  if (targetid_ == NULL) {
    targetid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.TakeOffEquip.Targetid)
  return targetid_;
}
inline ::AFMsg::Ident* TakeOffEquip::release_targetid() {
  // @@protoc_insertion_point(field_release:AFMsg.TakeOffEquip.Targetid)
  clear_has_targetid();
  ::AFMsg::Ident* temp = targetid_;
  targetid_ = NULL;
  return temp;
}
inline void TakeOffEquip::set_allocated_targetid(::AFMsg::Ident* targetid) {
  delete targetid_;
  targetid_ = targetid;
  if (targetid) {
    set_has_targetid();
  } else {
    clear_has_targetid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.TakeOffEquip.Targetid)
}

// -------------------------------------------------------------------

// ReqMiningTitle

// required .AFMsg.Ident selfid = 1;
inline bool ReqMiningTitle::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqMiningTitle::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqMiningTitle::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqMiningTitle::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
inline const ::AFMsg::Ident& ReqMiningTitle::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqMiningTitle.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
inline ::AFMsg::Ident* ReqMiningTitle::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqMiningTitle.selfid)
  return selfid_;
}
inline ::AFMsg::Ident* ReqMiningTitle::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqMiningTitle.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline void ReqMiningTitle::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqMiningTitle.selfid)
}

// required int32 x = 2;
inline bool ReqMiningTitle::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqMiningTitle::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqMiningTitle::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqMiningTitle::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 ReqMiningTitle::x() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqMiningTitle.x)
  return x_;
}
inline void ReqMiningTitle::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqMiningTitle.x)
}

// required int32 y = 3;
inline bool ReqMiningTitle::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqMiningTitle::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqMiningTitle::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqMiningTitle::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 ReqMiningTitle::y() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqMiningTitle.y)
  return y_;
}
inline void ReqMiningTitle::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqMiningTitle.y)
}

// -------------------------------------------------------------------

// ReqSendMail

// required .AFMsg.Ident selfid = 1;
inline bool ReqSendMail::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqSendMail::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqSendMail::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqSendMail::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
inline const ::AFMsg::Ident& ReqSendMail::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSendMail.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
inline ::AFMsg::Ident* ReqSendMail::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSendMail.selfid)
  return selfid_;
}
inline ::AFMsg::Ident* ReqSendMail::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqSendMail.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline void ReqSendMail::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqSendMail.selfid)
}

// required .AFMsg.Ident reciever = 2;
inline bool ReqSendMail::has_reciever() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqSendMail::set_has_reciever() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqSendMail::clear_has_reciever() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqSendMail::clear_reciever() {
  if (reciever_ != NULL) reciever_->::AFMsg::Ident::Clear();
  clear_has_reciever();
}
inline const ::AFMsg::Ident& ReqSendMail::reciever() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSendMail.reciever)
  return reciever_ != NULL ? *reciever_ : *default_instance_->reciever_;
}
inline ::AFMsg::Ident* ReqSendMail::mutable_reciever() {
  set_has_reciever();
  if (reciever_ == NULL) {
    reciever_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSendMail.reciever)
  return reciever_;
}
inline ::AFMsg::Ident* ReqSendMail::release_reciever() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqSendMail.reciever)
  clear_has_reciever();
  ::AFMsg::Ident* temp = reciever_;
  reciever_ = NULL;
  return temp;
}
inline void ReqSendMail::set_allocated_reciever(::AFMsg::Ident* reciever) {
  delete reciever_;
  reciever_ = reciever;
  if (reciever) {
    set_has_reciever();
  } else {
    clear_has_reciever();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqSendMail.reciever)
}

// repeated .AFMsg.ItemStruct item_list = 3;
inline int ReqSendMail::item_list_size() const {
  return item_list_.size();
}
inline void ReqSendMail::clear_item_list() {
  item_list_.Clear();
}
inline const ::AFMsg::ItemStruct& ReqSendMail::item_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSendMail.item_list)
  return item_list_.Get(index);
}
inline ::AFMsg::ItemStruct* ReqSendMail::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSendMail.item_list)
  return item_list_.Mutable(index);
}
inline ::AFMsg::ItemStruct* ReqSendMail::add_item_list() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqSendMail.item_list)
  return item_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >*
ReqSendMail::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqSendMail.item_list)
  return &item_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >&
ReqSendMail::item_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqSendMail.item_list)
  return item_list_;
}

// repeated .AFMsg.CurrencyStruct currency_list = 4;
inline int ReqSendMail::currency_list_size() const {
  return currency_list_.size();
}
inline void ReqSendMail::clear_currency_list() {
  currency_list_.Clear();
}
inline const ::AFMsg::CurrencyStruct& ReqSendMail::currency_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSendMail.currency_list)
  return currency_list_.Get(index);
}
inline ::AFMsg::CurrencyStruct* ReqSendMail::mutable_currency_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSendMail.currency_list)
  return currency_list_.Mutable(index);
}
inline ::AFMsg::CurrencyStruct* ReqSendMail::add_currency_list() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqSendMail.currency_list)
  return currency_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::CurrencyStruct >*
ReqSendMail::mutable_currency_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqSendMail.currency_list)
  return &currency_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::CurrencyStruct >&
ReqSendMail::currency_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqSendMail.currency_list)
  return currency_list_;
}

// -------------------------------------------------------------------

// ReqSwitchServer

// required .AFMsg.Ident selfid = 1;
inline bool ReqSwitchServer::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqSwitchServer::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqSwitchServer::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqSwitchServer::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
inline const ::AFMsg::Ident& ReqSwitchServer::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSwitchServer.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
inline ::AFMsg::Ident* ReqSwitchServer::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSwitchServer.selfid)
  return selfid_;
}
inline ::AFMsg::Ident* ReqSwitchServer::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqSwitchServer.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline void ReqSwitchServer::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqSwitchServer.selfid)
}

// required int64 self_serverid = 2;
inline bool ReqSwitchServer::has_self_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqSwitchServer::set_has_self_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqSwitchServer::clear_has_self_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqSwitchServer::clear_self_serverid() {
  self_serverid_ = GOOGLE_LONGLONG(0);
  clear_has_self_serverid();
}
inline ::google::protobuf::int64 ReqSwitchServer::self_serverid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSwitchServer.self_serverid)
  return self_serverid_;
}
inline void ReqSwitchServer::set_self_serverid(::google::protobuf::int64 value) {
  set_has_self_serverid();
  self_serverid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqSwitchServer.self_serverid)
}

// required int64 target_serverid = 3;
inline bool ReqSwitchServer::has_target_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqSwitchServer::set_has_target_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqSwitchServer::clear_has_target_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqSwitchServer::clear_target_serverid() {
  target_serverid_ = GOOGLE_LONGLONG(0);
  clear_has_target_serverid();
}
inline ::google::protobuf::int64 ReqSwitchServer::target_serverid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSwitchServer.target_serverid)
  return target_serverid_;
}
inline void ReqSwitchServer::set_target_serverid(::google::protobuf::int64 value) {
  set_has_target_serverid();
  target_serverid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqSwitchServer.target_serverid)
}

// required int64 gate_serverid = 4;
inline bool ReqSwitchServer::has_gate_serverid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqSwitchServer::set_has_gate_serverid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqSwitchServer::clear_has_gate_serverid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqSwitchServer::clear_gate_serverid() {
  gate_serverid_ = GOOGLE_LONGLONG(0);
  clear_has_gate_serverid();
}
inline ::google::protobuf::int64 ReqSwitchServer::gate_serverid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSwitchServer.gate_serverid)
  return gate_serverid_;
}
inline void ReqSwitchServer::set_gate_serverid(::google::protobuf::int64 value) {
  set_has_gate_serverid();
  gate_serverid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqSwitchServer.gate_serverid)
}

// required int64 SceneID = 5;
inline bool ReqSwitchServer::has_sceneid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqSwitchServer::set_has_sceneid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqSwitchServer::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqSwitchServer::clear_sceneid() {
  sceneid_ = GOOGLE_LONGLONG(0);
  clear_has_sceneid();
}
inline ::google::protobuf::int64 ReqSwitchServer::sceneid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSwitchServer.SceneID)
  return sceneid_;
}
inline void ReqSwitchServer::set_sceneid(::google::protobuf::int64 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqSwitchServer.SceneID)
}

// required .AFMsg.Ident client_id = 6;
inline bool ReqSwitchServer::has_client_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqSwitchServer::set_has_client_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqSwitchServer::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqSwitchServer::clear_client_id() {
  if (client_id_ != NULL) client_id_->::AFMsg::Ident::Clear();
  clear_has_client_id();
}
inline const ::AFMsg::Ident& ReqSwitchServer::client_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSwitchServer.client_id)
  return client_id_ != NULL ? *client_id_ : *default_instance_->client_id_;
}
inline ::AFMsg::Ident* ReqSwitchServer::mutable_client_id() {
  set_has_client_id();
  if (client_id_ == NULL) {
    client_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSwitchServer.client_id)
  return client_id_;
}
inline ::AFMsg::Ident* ReqSwitchServer::release_client_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqSwitchServer.client_id)
  clear_has_client_id();
  ::AFMsg::Ident* temp = client_id_;
  client_id_ = NULL;
  return temp;
}
inline void ReqSwitchServer::set_allocated_client_id(::AFMsg::Ident* client_id) {
  delete client_id_;
  client_id_ = client_id;
  if (client_id) {
    set_has_client_id();
  } else {
    clear_has_client_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqSwitchServer.client_id)
}

// required int64 groupID = 7;
inline bool ReqSwitchServer::has_groupid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReqSwitchServer::set_has_groupid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReqSwitchServer::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReqSwitchServer::clear_groupid() {
  groupid_ = GOOGLE_LONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::int64 ReqSwitchServer::groupid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSwitchServer.groupID)
  return groupid_;
}
inline void ReqSwitchServer::set_groupid(::google::protobuf::int64 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqSwitchServer.groupID)
}

// -------------------------------------------------------------------

// AckSwitchServer

// required .AFMsg.Ident selfid = 1;
inline bool AckSwitchServer::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckSwitchServer::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckSwitchServer::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckSwitchServer::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
inline const ::AFMsg::Ident& AckSwitchServer::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSwitchServer.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
inline ::AFMsg::Ident* AckSwitchServer::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckSwitchServer.selfid)
  return selfid_;
}
inline ::AFMsg::Ident* AckSwitchServer::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckSwitchServer.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
inline void AckSwitchServer::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckSwitchServer.selfid)
}

// required int64 self_serverid = 2;
inline bool AckSwitchServer::has_self_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckSwitchServer::set_has_self_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckSwitchServer::clear_has_self_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckSwitchServer::clear_self_serverid() {
  self_serverid_ = GOOGLE_LONGLONG(0);
  clear_has_self_serverid();
}
inline ::google::protobuf::int64 AckSwitchServer::self_serverid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSwitchServer.self_serverid)
  return self_serverid_;
}
inline void AckSwitchServer::set_self_serverid(::google::protobuf::int64 value) {
  set_has_self_serverid();
  self_serverid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckSwitchServer.self_serverid)
}

// required int64 target_serverid = 3;
inline bool AckSwitchServer::has_target_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckSwitchServer::set_has_target_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckSwitchServer::clear_has_target_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckSwitchServer::clear_target_serverid() {
  target_serverid_ = GOOGLE_LONGLONG(0);
  clear_has_target_serverid();
}
inline ::google::protobuf::int64 AckSwitchServer::target_serverid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSwitchServer.target_serverid)
  return target_serverid_;
}
inline void AckSwitchServer::set_target_serverid(::google::protobuf::int64 value) {
  set_has_target_serverid();
  target_serverid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckSwitchServer.target_serverid)
}

// required int64 gate_serverid = 4;
inline bool AckSwitchServer::has_gate_serverid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckSwitchServer::set_has_gate_serverid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckSwitchServer::clear_has_gate_serverid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckSwitchServer::clear_gate_serverid() {
  gate_serverid_ = GOOGLE_LONGLONG(0);
  clear_has_gate_serverid();
}
inline ::google::protobuf::int64 AckSwitchServer::gate_serverid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSwitchServer.gate_serverid)
  return gate_serverid_;
}
inline void AckSwitchServer::set_gate_serverid(::google::protobuf::int64 value) {
  set_has_gate_serverid();
  gate_serverid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckSwitchServer.gate_serverid)
}

// -------------------------------------------------------------------

// TeamInfo

// required .AFMsg.Ident team_id = 1;
inline bool TeamInfo::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamInfo::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamInfo::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamInfo::clear_team_id() {
  if (team_id_ != NULL) team_id_->::AFMsg::Ident::Clear();
  clear_has_team_id();
}
inline const ::AFMsg::Ident& TeamInfo::team_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.TeamInfo.team_id)
  return team_id_ != NULL ? *team_id_ : *default_instance_->team_id_;
}
inline ::AFMsg::Ident* TeamInfo::mutable_team_id() {
  set_has_team_id();
  if (team_id_ == NULL) {
    team_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.TeamInfo.team_id)
  return team_id_;
}
inline ::AFMsg::Ident* TeamInfo::release_team_id() {
  // @@protoc_insertion_point(field_release:AFMsg.TeamInfo.team_id)
  clear_has_team_id();
  ::AFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline void TeamInfo::set_allocated_team_id(::AFMsg::Ident* team_id) {
  delete team_id_;
  team_id_ = team_id;
  if (team_id) {
    set_has_team_id();
  } else {
    clear_has_team_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.TeamInfo.team_id)
}

// required .AFMsg.Ident captain_id = 2;
inline bool TeamInfo::has_captain_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamInfo::set_has_captain_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamInfo::clear_has_captain_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamInfo::clear_captain_id() {
  if (captain_id_ != NULL) captain_id_->::AFMsg::Ident::Clear();
  clear_has_captain_id();
}
inline const ::AFMsg::Ident& TeamInfo::captain_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.TeamInfo.captain_id)
  return captain_id_ != NULL ? *captain_id_ : *default_instance_->captain_id_;
}
inline ::AFMsg::Ident* TeamInfo::mutable_captain_id() {
  set_has_captain_id();
  if (captain_id_ == NULL) {
    captain_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.TeamInfo.captain_id)
  return captain_id_;
}
inline ::AFMsg::Ident* TeamInfo::release_captain_id() {
  // @@protoc_insertion_point(field_release:AFMsg.TeamInfo.captain_id)
  clear_has_captain_id();
  ::AFMsg::Ident* temp = captain_id_;
  captain_id_ = NULL;
  return temp;
}
inline void TeamInfo::set_allocated_captain_id(::AFMsg::Ident* captain_id) {
  delete captain_id_;
  captain_id_ = captain_id;
  if (captain_id) {
    set_has_captain_id();
  } else {
    clear_has_captain_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.TeamInfo.captain_id)
}

// repeated .AFMsg.TeammemberInfo teammemberInfo = 3;
inline int TeamInfo::teammemberinfo_size() const {
  return teammemberinfo_.size();
}
inline void TeamInfo::clear_teammemberinfo() {
  teammemberinfo_.Clear();
}
inline const ::AFMsg::TeammemberInfo& TeamInfo::teammemberinfo(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.TeamInfo.teammemberInfo)
  return teammemberinfo_.Get(index);
}
inline ::AFMsg::TeammemberInfo* TeamInfo::mutable_teammemberinfo(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.TeamInfo.teammemberInfo)
  return teammemberinfo_.Mutable(index);
}
inline ::AFMsg::TeammemberInfo* TeamInfo::add_teammemberinfo() {
  // @@protoc_insertion_point(field_add:AFMsg.TeamInfo.teammemberInfo)
  return teammemberinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::TeammemberInfo >*
TeamInfo::mutable_teammemberinfo() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.TeamInfo.teammemberInfo)
  return &teammemberinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::TeammemberInfo >&
TeamInfo::teammemberinfo() const {
  // @@protoc_insertion_point(field_list:AFMsg.TeamInfo.teammemberInfo)
  return teammemberinfo_;
}

// -------------------------------------------------------------------

// TeammemberInfo

// required .AFMsg.Ident player_id = 1;
inline bool TeammemberInfo::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeammemberInfo::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeammemberInfo::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeammemberInfo::clear_player_id() {
  if (player_id_ != NULL) player_id_->::AFMsg::Ident::Clear();
  clear_has_player_id();
}
inline const ::AFMsg::Ident& TeammemberInfo::player_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.TeammemberInfo.player_id)
  return player_id_ != NULL ? *player_id_ : *default_instance_->player_id_;
}
inline ::AFMsg::Ident* TeammemberInfo::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == NULL) {
    player_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.TeammemberInfo.player_id)
  return player_id_;
}
inline ::AFMsg::Ident* TeammemberInfo::release_player_id() {
  // @@protoc_insertion_point(field_release:AFMsg.TeammemberInfo.player_id)
  clear_has_player_id();
  ::AFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
inline void TeammemberInfo::set_allocated_player_id(::AFMsg::Ident* player_id) {
  delete player_id_;
  player_id_ = player_id;
  if (player_id) {
    set_has_player_id();
  } else {
    clear_has_player_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.TeammemberInfo.player_id)
}

// required string name = 2;
inline bool TeammemberInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeammemberInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeammemberInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeammemberInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& TeammemberInfo::name() const {
  // @@protoc_insertion_point(field_get:AFMsg.TeammemberInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeammemberInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.TeammemberInfo.name)
}
inline void TeammemberInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.TeammemberInfo.name)
}
inline void TeammemberInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.TeammemberInfo.name)
}
inline ::std::string* TeammemberInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:AFMsg.TeammemberInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeammemberInfo::release_name() {
  // @@protoc_insertion_point(field_release:AFMsg.TeammemberInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeammemberInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.TeammemberInfo.name)
}

// required int32 nLevel = 3;
inline bool TeammemberInfo::has_nlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeammemberInfo::set_has_nlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeammemberInfo::clear_has_nlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeammemberInfo::clear_nlevel() {
  nlevel_ = 0;
  clear_has_nlevel();
}
inline ::google::protobuf::int32 TeammemberInfo::nlevel() const {
  // @@protoc_insertion_point(field_get:AFMsg.TeammemberInfo.nLevel)
  return nlevel_;
}
inline void TeammemberInfo::set_nlevel(::google::protobuf::int32 value) {
  set_has_nlevel();
  nlevel_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.TeammemberInfo.nLevel)
}

// required int32 job = 4;
inline bool TeammemberInfo::has_job() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeammemberInfo::set_has_job() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeammemberInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeammemberInfo::clear_job() {
  job_ = 0;
  clear_has_job();
}
inline ::google::protobuf::int32 TeammemberInfo::job() const {
  // @@protoc_insertion_point(field_get:AFMsg.TeammemberInfo.job)
  return job_;
}
inline void TeammemberInfo::set_job(::google::protobuf::int32 value) {
  set_has_job();
  job_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.TeammemberInfo.job)
}

// required string HeadIcon = 5;
inline bool TeammemberInfo::has_headicon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeammemberInfo::set_has_headicon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeammemberInfo::clear_has_headicon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeammemberInfo::clear_headicon() {
  headicon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headicon();
}
inline const ::std::string& TeammemberInfo::headicon() const {
  // @@protoc_insertion_point(field_get:AFMsg.TeammemberInfo.HeadIcon)
  return headicon_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeammemberInfo::set_headicon(const ::std::string& value) {
  set_has_headicon();
  headicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.TeammemberInfo.HeadIcon)
}
inline void TeammemberInfo::set_headicon(const char* value) {
  set_has_headicon();
  headicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.TeammemberInfo.HeadIcon)
}
inline void TeammemberInfo::set_headicon(const char* value, size_t size) {
  set_has_headicon();
  headicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.TeammemberInfo.HeadIcon)
}
inline ::std::string* TeammemberInfo::mutable_headicon() {
  set_has_headicon();
  // @@protoc_insertion_point(field_mutable:AFMsg.TeammemberInfo.HeadIcon)
  return headicon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TeammemberInfo::release_headicon() {
  // @@protoc_insertion_point(field_release:AFMsg.TeammemberInfo.HeadIcon)
  clear_has_headicon();
  return headicon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TeammemberInfo::set_allocated_headicon(::std::string* headicon) {
  if (headicon != NULL) {
    set_has_headicon();
  } else {
    clear_has_headicon();
  }
  headicon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headicon);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.TeammemberInfo.HeadIcon)
}

// -------------------------------------------------------------------

// ReqAckCreateTeam

// required .AFMsg.Ident team_id = 1;
inline bool ReqAckCreateTeam::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckCreateTeam::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckCreateTeam::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckCreateTeam::clear_team_id() {
  if (team_id_ != NULL) team_id_->::AFMsg::Ident::Clear();
  clear_has_team_id();
}
inline const ::AFMsg::Ident& ReqAckCreateTeam::team_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckCreateTeam.team_id)
  return team_id_ != NULL ? *team_id_ : *default_instance_->team_id_;
}
inline ::AFMsg::Ident* ReqAckCreateTeam::mutable_team_id() {
  set_has_team_id();
  if (team_id_ == NULL) {
    team_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckCreateTeam.team_id)
  return team_id_;
}
inline ::AFMsg::Ident* ReqAckCreateTeam::release_team_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckCreateTeam.team_id)
  clear_has_team_id();
  ::AFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline void ReqAckCreateTeam::set_allocated_team_id(::AFMsg::Ident* team_id) {
  delete team_id_;
  team_id_ = team_id;
  if (team_id) {
    set_has_team_id();
  } else {
    clear_has_team_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckCreateTeam.team_id)
}

// optional .AFMsg.TeamInfo xTeamInfo = 2;
inline bool ReqAckCreateTeam::has_xteaminfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckCreateTeam::set_has_xteaminfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckCreateTeam::clear_has_xteaminfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckCreateTeam::clear_xteaminfo() {
  if (xteaminfo_ != NULL) xteaminfo_->::AFMsg::TeamInfo::Clear();
  clear_has_xteaminfo();
}
inline const ::AFMsg::TeamInfo& ReqAckCreateTeam::xteaminfo() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckCreateTeam.xTeamInfo)
  return xteaminfo_ != NULL ? *xteaminfo_ : *default_instance_->xteaminfo_;
}
inline ::AFMsg::TeamInfo* ReqAckCreateTeam::mutable_xteaminfo() {
  set_has_xteaminfo();
  if (xteaminfo_ == NULL) {
    xteaminfo_ = new ::AFMsg::TeamInfo;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckCreateTeam.xTeamInfo)
  return xteaminfo_;
}
inline ::AFMsg::TeamInfo* ReqAckCreateTeam::release_xteaminfo() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckCreateTeam.xTeamInfo)
  clear_has_xteaminfo();
  ::AFMsg::TeamInfo* temp = xteaminfo_;
  xteaminfo_ = NULL;
  return temp;
}
inline void ReqAckCreateTeam::set_allocated_xteaminfo(::AFMsg::TeamInfo* xteaminfo) {
  delete xteaminfo_;
  xteaminfo_ = xteaminfo;
  if (xteaminfo) {
    set_has_xteaminfo();
  } else {
    clear_has_xteaminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckCreateTeam.xTeamInfo)
}

// -------------------------------------------------------------------

// ReqAckJoinTeam

// required .AFMsg.Ident team_id = 1;
inline bool ReqAckJoinTeam::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckJoinTeam::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckJoinTeam::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckJoinTeam::clear_team_id() {
  if (team_id_ != NULL) team_id_->::AFMsg::Ident::Clear();
  clear_has_team_id();
}
inline const ::AFMsg::Ident& ReqAckJoinTeam::team_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckJoinTeam.team_id)
  return team_id_ != NULL ? *team_id_ : *default_instance_->team_id_;
}
inline ::AFMsg::Ident* ReqAckJoinTeam::mutable_team_id() {
  set_has_team_id();
  if (team_id_ == NULL) {
    team_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckJoinTeam.team_id)
  return team_id_;
}
inline ::AFMsg::Ident* ReqAckJoinTeam::release_team_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckJoinTeam.team_id)
  clear_has_team_id();
  ::AFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline void ReqAckJoinTeam::set_allocated_team_id(::AFMsg::Ident* team_id) {
  delete team_id_;
  team_id_ = team_id;
  if (team_id) {
    set_has_team_id();
  } else {
    clear_has_team_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckJoinTeam.team_id)
}

// optional .AFMsg.TeamInfo xTeamInfo = 2;
inline bool ReqAckJoinTeam::has_xteaminfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckJoinTeam::set_has_xteaminfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckJoinTeam::clear_has_xteaminfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckJoinTeam::clear_xteaminfo() {
  if (xteaminfo_ != NULL) xteaminfo_->::AFMsg::TeamInfo::Clear();
  clear_has_xteaminfo();
}
inline const ::AFMsg::TeamInfo& ReqAckJoinTeam::xteaminfo() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckJoinTeam.xTeamInfo)
  return xteaminfo_ != NULL ? *xteaminfo_ : *default_instance_->xteaminfo_;
}
inline ::AFMsg::TeamInfo* ReqAckJoinTeam::mutable_xteaminfo() {
  set_has_xteaminfo();
  if (xteaminfo_ == NULL) {
    xteaminfo_ = new ::AFMsg::TeamInfo;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckJoinTeam.xTeamInfo)
  return xteaminfo_;
}
inline ::AFMsg::TeamInfo* ReqAckJoinTeam::release_xteaminfo() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckJoinTeam.xTeamInfo)
  clear_has_xteaminfo();
  ::AFMsg::TeamInfo* temp = xteaminfo_;
  xteaminfo_ = NULL;
  return temp;
}
inline void ReqAckJoinTeam::set_allocated_xteaminfo(::AFMsg::TeamInfo* xteaminfo) {
  delete xteaminfo_;
  xteaminfo_ = xteaminfo;
  if (xteaminfo) {
    set_has_xteaminfo();
  } else {
    clear_has_xteaminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckJoinTeam.xTeamInfo)
}

// -------------------------------------------------------------------

// ReqAckLeaveTeam

// required .AFMsg.Ident team_id = 1;
inline bool ReqAckLeaveTeam::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckLeaveTeam::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckLeaveTeam::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckLeaveTeam::clear_team_id() {
  if (team_id_ != NULL) team_id_->::AFMsg::Ident::Clear();
  clear_has_team_id();
}
inline const ::AFMsg::Ident& ReqAckLeaveTeam::team_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckLeaveTeam.team_id)
  return team_id_ != NULL ? *team_id_ : *default_instance_->team_id_;
}
inline ::AFMsg::Ident* ReqAckLeaveTeam::mutable_team_id() {
  set_has_team_id();
  if (team_id_ == NULL) {
    team_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckLeaveTeam.team_id)
  return team_id_;
}
inline ::AFMsg::Ident* ReqAckLeaveTeam::release_team_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckLeaveTeam.team_id)
  clear_has_team_id();
  ::AFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline void ReqAckLeaveTeam::set_allocated_team_id(::AFMsg::Ident* team_id) {
  delete team_id_;
  team_id_ = team_id;
  if (team_id) {
    set_has_team_id();
  } else {
    clear_has_team_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckLeaveTeam.team_id)
}

// optional .AFMsg.TeamInfo xTeamInfo = 2;
inline bool ReqAckLeaveTeam::has_xteaminfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckLeaveTeam::set_has_xteaminfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckLeaveTeam::clear_has_xteaminfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckLeaveTeam::clear_xteaminfo() {
  if (xteaminfo_ != NULL) xteaminfo_->::AFMsg::TeamInfo::Clear();
  clear_has_xteaminfo();
}
inline const ::AFMsg::TeamInfo& ReqAckLeaveTeam::xteaminfo() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckLeaveTeam.xTeamInfo)
  return xteaminfo_ != NULL ? *xteaminfo_ : *default_instance_->xteaminfo_;
}
inline ::AFMsg::TeamInfo* ReqAckLeaveTeam::mutable_xteaminfo() {
  set_has_xteaminfo();
  if (xteaminfo_ == NULL) {
    xteaminfo_ = new ::AFMsg::TeamInfo;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckLeaveTeam.xTeamInfo)
  return xteaminfo_;
}
inline ::AFMsg::TeamInfo* ReqAckLeaveTeam::release_xteaminfo() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckLeaveTeam.xTeamInfo)
  clear_has_xteaminfo();
  ::AFMsg::TeamInfo* temp = xteaminfo_;
  xteaminfo_ = NULL;
  return temp;
}
inline void ReqAckLeaveTeam::set_allocated_xteaminfo(::AFMsg::TeamInfo* xteaminfo) {
  delete xteaminfo_;
  xteaminfo_ = xteaminfo;
  if (xteaminfo) {
    set_has_xteaminfo();
  } else {
    clear_has_xteaminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckLeaveTeam.xTeamInfo)
}

// -------------------------------------------------------------------

// ReqAckOprTeamMember

// required .AFMsg.Ident team_id = 1;
inline bool ReqAckOprTeamMember::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckOprTeamMember::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckOprTeamMember::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckOprTeamMember::clear_team_id() {
  if (team_id_ != NULL) team_id_->::AFMsg::Ident::Clear();
  clear_has_team_id();
}
inline const ::AFMsg::Ident& ReqAckOprTeamMember::team_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprTeamMember.team_id)
  return team_id_ != NULL ? *team_id_ : *default_instance_->team_id_;
}
inline ::AFMsg::Ident* ReqAckOprTeamMember::mutable_team_id() {
  set_has_team_id();
  if (team_id_ == NULL) {
    team_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckOprTeamMember.team_id)
  return team_id_;
}
inline ::AFMsg::Ident* ReqAckOprTeamMember::release_team_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckOprTeamMember.team_id)
  clear_has_team_id();
  ::AFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline void ReqAckOprTeamMember::set_allocated_team_id(::AFMsg::Ident* team_id) {
  delete team_id_;
  team_id_ = team_id;
  if (team_id) {
    set_has_team_id();
  } else {
    clear_has_team_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckOprTeamMember.team_id)
}

// required .AFMsg.Ident member_id = 2;
inline bool ReqAckOprTeamMember::has_member_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckOprTeamMember::set_has_member_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckOprTeamMember::clear_has_member_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckOprTeamMember::clear_member_id() {
  if (member_id_ != NULL) member_id_->::AFMsg::Ident::Clear();
  clear_has_member_id();
}
inline const ::AFMsg::Ident& ReqAckOprTeamMember::member_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprTeamMember.member_id)
  return member_id_ != NULL ? *member_id_ : *default_instance_->member_id_;
}
inline ::AFMsg::Ident* ReqAckOprTeamMember::mutable_member_id() {
  set_has_member_id();
  if (member_id_ == NULL) {
    member_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckOprTeamMember.member_id)
  return member_id_;
}
inline ::AFMsg::Ident* ReqAckOprTeamMember::release_member_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckOprTeamMember.member_id)
  clear_has_member_id();
  ::AFMsg::Ident* temp = member_id_;
  member_id_ = NULL;
  return temp;
}
inline void ReqAckOprTeamMember::set_allocated_member_id(::AFMsg::Ident* member_id) {
  delete member_id_;
  member_id_ = member_id;
  if (member_id) {
    set_has_member_id();
  } else {
    clear_has_member_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckOprTeamMember.member_id)
}

// required .AFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
inline bool ReqAckOprTeamMember::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqAckOprTeamMember::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqAckOprTeamMember::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqAckOprTeamMember::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::AFMsg::ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprTeamMember.type)
  return static_cast< ::AFMsg::ReqAckOprTeamMember_EGTeamMemberOprType >(type_);
}
inline void ReqAckOprTeamMember::set_type(::AFMsg::ReqAckOprTeamMember_EGTeamMemberOprType value) {
  assert(::AFMsg::ReqAckOprTeamMember_EGTeamMemberOprType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckOprTeamMember.type)
}

// optional .AFMsg.TeamInfo xTeamInfo = 4;
inline bool ReqAckOprTeamMember::has_xteaminfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqAckOprTeamMember::set_has_xteaminfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqAckOprTeamMember::clear_has_xteaminfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqAckOprTeamMember::clear_xteaminfo() {
  if (xteaminfo_ != NULL) xteaminfo_->::AFMsg::TeamInfo::Clear();
  clear_has_xteaminfo();
}
inline const ::AFMsg::TeamInfo& ReqAckOprTeamMember::xteaminfo() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprTeamMember.xTeamInfo)
  return xteaminfo_ != NULL ? *xteaminfo_ : *default_instance_->xteaminfo_;
}
inline ::AFMsg::TeamInfo* ReqAckOprTeamMember::mutable_xteaminfo() {
  set_has_xteaminfo();
  if (xteaminfo_ == NULL) {
    xteaminfo_ = new ::AFMsg::TeamInfo;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckOprTeamMember.xTeamInfo)
  return xteaminfo_;
}
inline ::AFMsg::TeamInfo* ReqAckOprTeamMember::release_xteaminfo() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckOprTeamMember.xTeamInfo)
  clear_has_xteaminfo();
  ::AFMsg::TeamInfo* temp = xteaminfo_;
  xteaminfo_ = NULL;
  return temp;
}
inline void ReqAckOprTeamMember::set_allocated_xteaminfo(::AFMsg::TeamInfo* xteaminfo) {
  delete xteaminfo_;
  xteaminfo_ = xteaminfo;
  if (xteaminfo) {
    set_has_xteaminfo();
  } else {
    clear_has_xteaminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckOprTeamMember.xTeamInfo)
}

// -------------------------------------------------------------------

// ReqAckInviteTeam

// required .AFMsg.Ident team_id = 1;
inline bool ReqAckInviteTeam::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqAckInviteTeam::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqAckInviteTeam::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqAckInviteTeam::clear_team_id() {
  if (team_id_ != NULL) team_id_->::AFMsg::Ident::Clear();
  clear_has_team_id();
}
inline const ::AFMsg::Ident& ReqAckInviteTeam::team_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckInviteTeam.team_id)
  return team_id_ != NULL ? *team_id_ : *default_instance_->team_id_;
}
inline ::AFMsg::Ident* ReqAckInviteTeam::mutable_team_id() {
  set_has_team_id();
  if (team_id_ == NULL) {
    team_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckInviteTeam.team_id)
  return team_id_;
}
inline ::AFMsg::Ident* ReqAckInviteTeam::release_team_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckInviteTeam.team_id)
  clear_has_team_id();
  ::AFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline void ReqAckInviteTeam::set_allocated_team_id(::AFMsg::Ident* team_id) {
  delete team_id_;
  team_id_ = team_id;
  if (team_id) {
    set_has_team_id();
  } else {
    clear_has_team_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckInviteTeam.team_id)
}

// required .AFMsg.Ident self_id = 2;
inline bool ReqAckInviteTeam::has_self_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqAckInviteTeam::set_has_self_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqAckInviteTeam::clear_has_self_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqAckInviteTeam::clear_self_id() {
  if (self_id_ != NULL) self_id_->::AFMsg::Ident::Clear();
  clear_has_self_id();
}
inline const ::AFMsg::Ident& ReqAckInviteTeam::self_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckInviteTeam.self_id)
  return self_id_ != NULL ? *self_id_ : *default_instance_->self_id_;
}
inline ::AFMsg::Ident* ReqAckInviteTeam::mutable_self_id() {
  set_has_self_id();
  if (self_id_ == NULL) {
    self_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckInviteTeam.self_id)
  return self_id_;
}
inline ::AFMsg::Ident* ReqAckInviteTeam::release_self_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckInviteTeam.self_id)
  clear_has_self_id();
  ::AFMsg::Ident* temp = self_id_;
  self_id_ = NULL;
  return temp;
}
inline void ReqAckInviteTeam::set_allocated_self_id(::AFMsg::Ident* self_id) {
  delete self_id_;
  self_id_ = self_id;
  if (self_id) {
    set_has_self_id();
  } else {
    clear_has_self_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckInviteTeam.self_id)
}

// required .AFMsg.Ident invite_target_id = 3;
inline bool ReqAckInviteTeam::has_invite_target_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqAckInviteTeam::set_has_invite_target_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqAckInviteTeam::clear_has_invite_target_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqAckInviteTeam::clear_invite_target_id() {
  if (invite_target_id_ != NULL) invite_target_id_->::AFMsg::Ident::Clear();
  clear_has_invite_target_id();
}
inline const ::AFMsg::Ident& ReqAckInviteTeam::invite_target_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckInviteTeam.invite_target_id)
  return invite_target_id_ != NULL ? *invite_target_id_ : *default_instance_->invite_target_id_;
}
inline ::AFMsg::Ident* ReqAckInviteTeam::mutable_invite_target_id() {
  set_has_invite_target_id();
  if (invite_target_id_ == NULL) {
    invite_target_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckInviteTeam.invite_target_id)
  return invite_target_id_;
}
inline ::AFMsg::Ident* ReqAckInviteTeam::release_invite_target_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckInviteTeam.invite_target_id)
  clear_has_invite_target_id();
  ::AFMsg::Ident* temp = invite_target_id_;
  invite_target_id_ = NULL;
  return temp;
}
inline void ReqAckInviteTeam::set_allocated_invite_target_id(::AFMsg::Ident* invite_target_id) {
  delete invite_target_id_;
  invite_target_id_ = invite_target_id;
  if (invite_target_id) {
    set_has_invite_target_id();
  } else {
    clear_has_invite_target_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckInviteTeam.invite_target_id)
}

// -------------------------------------------------------------------

// ReqTeamEnterEctype

// required .AFMsg.Ident team_id = 1;
inline bool ReqTeamEnterEctype::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqTeamEnterEctype::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqTeamEnterEctype::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqTeamEnterEctype::clear_team_id() {
  if (team_id_ != NULL) team_id_->::AFMsg::Ident::Clear();
  clear_has_team_id();
}
inline const ::AFMsg::Ident& ReqTeamEnterEctype::team_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqTeamEnterEctype.team_id)
  return team_id_ != NULL ? *team_id_ : *default_instance_->team_id_;
}
inline ::AFMsg::Ident* ReqTeamEnterEctype::mutable_team_id() {
  set_has_team_id();
  if (team_id_ == NULL) {
    team_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqTeamEnterEctype.team_id)
  return team_id_;
}
inline ::AFMsg::Ident* ReqTeamEnterEctype::release_team_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqTeamEnterEctype.team_id)
  clear_has_team_id();
  ::AFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline void ReqTeamEnterEctype::set_allocated_team_id(::AFMsg::Ident* team_id) {
  delete team_id_;
  team_id_ = team_id;
  if (team_id) {
    set_has_team_id();
  } else {
    clear_has_team_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqTeamEnterEctype.team_id)
}

// required .AFMsg.Ident self_id = 2;
inline bool ReqTeamEnterEctype::has_self_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqTeamEnterEctype::set_has_self_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqTeamEnterEctype::clear_has_self_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqTeamEnterEctype::clear_self_id() {
  if (self_id_ != NULL) self_id_->::AFMsg::Ident::Clear();
  clear_has_self_id();
}
inline const ::AFMsg::Ident& ReqTeamEnterEctype::self_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqTeamEnterEctype.self_id)
  return self_id_ != NULL ? *self_id_ : *default_instance_->self_id_;
}
inline ::AFMsg::Ident* ReqTeamEnterEctype::mutable_self_id() {
  set_has_self_id();
  if (self_id_ == NULL) {
    self_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqTeamEnterEctype.self_id)
  return self_id_;
}
inline ::AFMsg::Ident* ReqTeamEnterEctype::release_self_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqTeamEnterEctype.self_id)
  clear_has_self_id();
  ::AFMsg::Ident* temp = self_id_;
  self_id_ = NULL;
  return temp;
}
inline void ReqTeamEnterEctype::set_allocated_self_id(::AFMsg::Ident* self_id) {
  delete self_id_;
  self_id_ = self_id;
  if (self_id) {
    set_has_self_id();
  } else {
    clear_has_self_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqTeamEnterEctype.self_id)
}

// optional int32 nEctypeID = 3;
inline bool ReqTeamEnterEctype::has_nectypeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqTeamEnterEctype::set_has_nectypeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqTeamEnterEctype::clear_has_nectypeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqTeamEnterEctype::clear_nectypeid() {
  nectypeid_ = 0;
  clear_has_nectypeid();
}
inline ::google::protobuf::int32 ReqTeamEnterEctype::nectypeid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqTeamEnterEctype.nEctypeID)
  return nectypeid_;
}
inline void ReqTeamEnterEctype::set_nectypeid(::google::protobuf::int32 value) {
  set_has_nectypeid();
  nectypeid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqTeamEnterEctype.nEctypeID)
}

// optional int32 nGroupID = 4;
inline bool ReqTeamEnterEctype::has_ngroupid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqTeamEnterEctype::set_has_ngroupid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqTeamEnterEctype::clear_has_ngroupid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqTeamEnterEctype::clear_ngroupid() {
  ngroupid_ = 0;
  clear_has_ngroupid();
}
inline ::google::protobuf::int32 ReqTeamEnterEctype::ngroupid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqTeamEnterEctype.nGroupID)
  return ngroupid_;
}
inline void ReqTeamEnterEctype::set_ngroupid(::google::protobuf::int32 value) {
  set_has_ngroupid();
  ngroupid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqTeamEnterEctype.nGroupID)
}

// optional int32 nResult = 5;
inline bool ReqTeamEnterEctype::has_nresult() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqTeamEnterEctype::set_has_nresult() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqTeamEnterEctype::clear_has_nresult() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqTeamEnterEctype::clear_nresult() {
  nresult_ = 0;
  clear_has_nresult();
}
inline ::google::protobuf::int32 ReqTeamEnterEctype::nresult() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqTeamEnterEctype.nResult)
  return nresult_;
}
inline void ReqTeamEnterEctype::set_nresult(::google::protobuf::int32 value) {
  set_has_nresult();
  nresult_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqTeamEnterEctype.nResult)
}

// optional int32 nServerID = 6;
inline bool ReqTeamEnterEctype::has_nserverid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqTeamEnterEctype::set_has_nserverid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqTeamEnterEctype::clear_has_nserverid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqTeamEnterEctype::clear_nserverid() {
  nserverid_ = 0;
  clear_has_nserverid();
}
inline ::google::protobuf::int32 ReqTeamEnterEctype::nserverid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqTeamEnterEctype.nServerID)
  return nserverid_;
}
inline void ReqTeamEnterEctype::set_nserverid(::google::protobuf::int32 value) {
  set_has_nserverid();
  nserverid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqTeamEnterEctype.nServerID)
}

// -------------------------------------------------------------------

// AckTeamEnterEctype

// required .AFMsg.Ident team_id = 1;
inline bool AckTeamEnterEctype::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckTeamEnterEctype::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckTeamEnterEctype::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckTeamEnterEctype::clear_team_id() {
  if (team_id_ != NULL) team_id_->::AFMsg::Ident::Clear();
  clear_has_team_id();
}
inline const ::AFMsg::Ident& AckTeamEnterEctype::team_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckTeamEnterEctype.team_id)
  return team_id_ != NULL ? *team_id_ : *default_instance_->team_id_;
}
inline ::AFMsg::Ident* AckTeamEnterEctype::mutable_team_id() {
  set_has_team_id();
  if (team_id_ == NULL) {
    team_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckTeamEnterEctype.team_id)
  return team_id_;
}
inline ::AFMsg::Ident* AckTeamEnterEctype::release_team_id() {
  // @@protoc_insertion_point(field_release:AFMsg.AckTeamEnterEctype.team_id)
  clear_has_team_id();
  ::AFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline void AckTeamEnterEctype::set_allocated_team_id(::AFMsg::Ident* team_id) {
  delete team_id_;
  team_id_ = team_id;
  if (team_id) {
    set_has_team_id();
  } else {
    clear_has_team_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckTeamEnterEctype.team_id)
}

// required .AFMsg.Ident self_id = 2;
inline bool AckTeamEnterEctype::has_self_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckTeamEnterEctype::set_has_self_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckTeamEnterEctype::clear_has_self_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckTeamEnterEctype::clear_self_id() {
  if (self_id_ != NULL) self_id_->::AFMsg::Ident::Clear();
  clear_has_self_id();
}
inline const ::AFMsg::Ident& AckTeamEnterEctype::self_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckTeamEnterEctype.self_id)
  return self_id_ != NULL ? *self_id_ : *default_instance_->self_id_;
}
inline ::AFMsg::Ident* AckTeamEnterEctype::mutable_self_id() {
  set_has_self_id();
  if (self_id_ == NULL) {
    self_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckTeamEnterEctype.self_id)
  return self_id_;
}
inline ::AFMsg::Ident* AckTeamEnterEctype::release_self_id() {
  // @@protoc_insertion_point(field_release:AFMsg.AckTeamEnterEctype.self_id)
  clear_has_self_id();
  ::AFMsg::Ident* temp = self_id_;
  self_id_ = NULL;
  return temp;
}
inline void AckTeamEnterEctype::set_allocated_self_id(::AFMsg::Ident* self_id) {
  delete self_id_;
  self_id_ = self_id;
  if (self_id) {
    set_has_self_id();
  } else {
    clear_has_self_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckTeamEnterEctype.self_id)
}

// optional int32 nEctypeID = 3;
inline bool AckTeamEnterEctype::has_nectypeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckTeamEnterEctype::set_has_nectypeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckTeamEnterEctype::clear_has_nectypeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckTeamEnterEctype::clear_nectypeid() {
  nectypeid_ = 0;
  clear_has_nectypeid();
}
inline ::google::protobuf::int32 AckTeamEnterEctype::nectypeid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckTeamEnterEctype.nEctypeID)
  return nectypeid_;
}
inline void AckTeamEnterEctype::set_nectypeid(::google::protobuf::int32 value) {
  set_has_nectypeid();
  nectypeid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckTeamEnterEctype.nEctypeID)
}

// optional int32 nGroupID = 4;
inline bool AckTeamEnterEctype::has_ngroupid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckTeamEnterEctype::set_has_ngroupid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckTeamEnterEctype::clear_has_ngroupid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckTeamEnterEctype::clear_ngroupid() {
  ngroupid_ = 0;
  clear_has_ngroupid();
}
inline ::google::protobuf::int32 AckTeamEnterEctype::ngroupid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckTeamEnterEctype.nGroupID)
  return ngroupid_;
}
inline void AckTeamEnterEctype::set_ngroupid(::google::protobuf::int32 value) {
  set_has_ngroupid();
  ngroupid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckTeamEnterEctype.nGroupID)
}

// optional int32 nResult = 5;
inline bool AckTeamEnterEctype::has_nresult() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AckTeamEnterEctype::set_has_nresult() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AckTeamEnterEctype::clear_has_nresult() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AckTeamEnterEctype::clear_nresult() {
  nresult_ = 0;
  clear_has_nresult();
}
inline ::google::protobuf::int32 AckTeamEnterEctype::nresult() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckTeamEnterEctype.nResult)
  return nresult_;
}
inline void AckTeamEnterEctype::set_nresult(::google::protobuf::int32 value) {
  set_has_nresult();
  nresult_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckTeamEnterEctype.nResult)
}

// -------------------------------------------------------------------

// GridGuildBaseInfo

// required .AFMsg.Ident id = 1;
inline bool GridGuildBaseInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GridGuildBaseInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GridGuildBaseInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GridGuildBaseInfo::clear_id() {
  if (id_ != NULL) id_->::AFMsg::Ident::Clear();
  clear_has_id();
}
inline const ::AFMsg::Ident& GridGuildBaseInfo::id() const {
  // @@protoc_insertion_point(field_get:AFMsg.GridGuildBaseInfo.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
inline ::AFMsg::Ident* GridGuildBaseInfo::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.GridGuildBaseInfo.id)
  return id_;
}
inline ::AFMsg::Ident* GridGuildBaseInfo::release_id() {
  // @@protoc_insertion_point(field_release:AFMsg.GridGuildBaseInfo.id)
  clear_has_id();
  ::AFMsg::Ident* temp = id_;
  id_ = NULL;
  return temp;
}
inline void GridGuildBaseInfo::set_allocated_id(::AFMsg::Ident* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.GridGuildBaseInfo.id)
}

// required int32 level = 2;
inline bool GridGuildBaseInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GridGuildBaseInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GridGuildBaseInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GridGuildBaseInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 GridGuildBaseInfo::level() const {
  // @@protoc_insertion_point(field_get:AFMsg.GridGuildBaseInfo.level)
  return level_;
}
inline void GridGuildBaseInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.GridGuildBaseInfo.level)
}

// required int32 count = 3;
inline bool GridGuildBaseInfo::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GridGuildBaseInfo::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GridGuildBaseInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GridGuildBaseInfo::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GridGuildBaseInfo::count() const {
  // @@protoc_insertion_point(field_get:AFMsg.GridGuildBaseInfo.count)
  return count_;
}
inline void GridGuildBaseInfo::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.GridGuildBaseInfo.count)
}

// required int32 resource = 4;
inline bool GridGuildBaseInfo::has_resource() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GridGuildBaseInfo::set_has_resource() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GridGuildBaseInfo::clear_has_resource() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GridGuildBaseInfo::clear_resource() {
  resource_ = 0;
  clear_has_resource();
}
inline ::google::protobuf::int32 GridGuildBaseInfo::resource() const {
  // @@protoc_insertion_point(field_get:AFMsg.GridGuildBaseInfo.resource)
  return resource_;
}
inline void GridGuildBaseInfo::set_resource(::google::protobuf::int32 value) {
  set_has_resource();
  resource_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.GridGuildBaseInfo.resource)
}

// required bytes icon = 5;
inline bool GridGuildBaseInfo::has_icon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GridGuildBaseInfo::set_has_icon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GridGuildBaseInfo::clear_has_icon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GridGuildBaseInfo::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_icon();
}
inline const ::std::string& GridGuildBaseInfo::icon() const {
  // @@protoc_insertion_point(field_get:AFMsg.GridGuildBaseInfo.icon)
  return icon_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GridGuildBaseInfo::set_icon(const ::std::string& value) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.GridGuildBaseInfo.icon)
}
inline void GridGuildBaseInfo::set_icon(const char* value) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.GridGuildBaseInfo.icon)
}
inline void GridGuildBaseInfo::set_icon(const void* value, size_t size) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.GridGuildBaseInfo.icon)
}
inline ::std::string* GridGuildBaseInfo::mutable_icon() {
  set_has_icon();
  // @@protoc_insertion_point(field_mutable:AFMsg.GridGuildBaseInfo.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GridGuildBaseInfo::release_icon() {
  // @@protoc_insertion_point(field_release:AFMsg.GridGuildBaseInfo.icon)
  clear_has_icon();
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GridGuildBaseInfo::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    set_has_icon();
  } else {
    clear_has_icon();
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.GridGuildBaseInfo.icon)
}

// -------------------------------------------------------------------

// ReqBigMapGridInfo

// repeated bytes map_title_id = 1;
inline int ReqBigMapGridInfo::map_title_id_size() const {
  return map_title_id_.size();
}
inline void ReqBigMapGridInfo::clear_map_title_id() {
  map_title_id_.Clear();
}
inline const ::std::string& ReqBigMapGridInfo::map_title_id(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqBigMapGridInfo.map_title_id)
  return map_title_id_.Get(index);
}
inline ::std::string* ReqBigMapGridInfo::mutable_map_title_id(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqBigMapGridInfo.map_title_id)
  return map_title_id_.Mutable(index);
}
inline void ReqBigMapGridInfo::set_map_title_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AFMsg.ReqBigMapGridInfo.map_title_id)
  map_title_id_.Mutable(index)->assign(value);
}
inline void ReqBigMapGridInfo::set_map_title_id(int index, const char* value) {
  map_title_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqBigMapGridInfo.map_title_id)
}
inline void ReqBigMapGridInfo::set_map_title_id(int index, const void* value, size_t size) {
  map_title_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqBigMapGridInfo.map_title_id)
}
inline ::std::string* ReqBigMapGridInfo::add_map_title_id() {
  // @@protoc_insertion_point(field_add_mutable:AFMsg.ReqBigMapGridInfo.map_title_id)
  return map_title_id_.Add();
}
inline void ReqBigMapGridInfo::add_map_title_id(const ::std::string& value) {
  map_title_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AFMsg.ReqBigMapGridInfo.map_title_id)
}
inline void ReqBigMapGridInfo::add_map_title_id(const char* value) {
  map_title_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AFMsg.ReqBigMapGridInfo.map_title_id)
}
inline void ReqBigMapGridInfo::add_map_title_id(const void* value, size_t size) {
  map_title_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AFMsg.ReqBigMapGridInfo.map_title_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReqBigMapGridInfo::map_title_id() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqBigMapGridInfo.map_title_id)
  return map_title_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReqBigMapGridInfo::mutable_map_title_id() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqBigMapGridInfo.map_title_id)
  return &map_title_id_;
}

// -------------------------------------------------------------------

// BigMapGridBaseInfo

// required bytes id = 1;
inline bool BigMapGridBaseInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BigMapGridBaseInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BigMapGridBaseInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BigMapGridBaseInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& BigMapGridBaseInfo::id() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridBaseInfo.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BigMapGridBaseInfo::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.BigMapGridBaseInfo.id)
}
inline void BigMapGridBaseInfo::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.BigMapGridBaseInfo.id)
}
inline void BigMapGridBaseInfo::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.BigMapGridBaseInfo.id)
}
inline ::std::string* BigMapGridBaseInfo::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapGridBaseInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BigMapGridBaseInfo::release_id() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapGridBaseInfo.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BigMapGridBaseInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapGridBaseInfo.id)
}

// required .AFMsg.GridGuildBaseInfo guild_info = 2;
inline bool BigMapGridBaseInfo::has_guild_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BigMapGridBaseInfo::set_has_guild_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BigMapGridBaseInfo::clear_has_guild_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BigMapGridBaseInfo::clear_guild_info() {
  if (guild_info_ != NULL) guild_info_->::AFMsg::GridGuildBaseInfo::Clear();
  clear_has_guild_info();
}
inline const ::AFMsg::GridGuildBaseInfo& BigMapGridBaseInfo::guild_info() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridBaseInfo.guild_info)
  return guild_info_ != NULL ? *guild_info_ : *default_instance_->guild_info_;
}
inline ::AFMsg::GridGuildBaseInfo* BigMapGridBaseInfo::mutable_guild_info() {
  set_has_guild_info();
  if (guild_info_ == NULL) {
    guild_info_ = new ::AFMsg::GridGuildBaseInfo;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapGridBaseInfo.guild_info)
  return guild_info_;
}
inline ::AFMsg::GridGuildBaseInfo* BigMapGridBaseInfo::release_guild_info() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapGridBaseInfo.guild_info)
  clear_has_guild_info();
  ::AFMsg::GridGuildBaseInfo* temp = guild_info_;
  guild_info_ = NULL;
  return temp;
}
inline void BigMapGridBaseInfo::set_allocated_guild_info(::AFMsg::GridGuildBaseInfo* guild_info) {
  delete guild_info_;
  guild_info_ = guild_info;
  if (guild_info) {
    set_has_guild_info();
  } else {
    clear_has_guild_info();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapGridBaseInfo.guild_info)
}

// required int32 kingwar_time = 10;
inline bool BigMapGridBaseInfo::has_kingwar_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BigMapGridBaseInfo::set_has_kingwar_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BigMapGridBaseInfo::clear_has_kingwar_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BigMapGridBaseInfo::clear_kingwar_time() {
  kingwar_time_ = 0;
  clear_has_kingwar_time();
}
inline ::google::protobuf::int32 BigMapGridBaseInfo::kingwar_time() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridBaseInfo.kingwar_time)
  return kingwar_time_;
}
inline void BigMapGridBaseInfo::set_kingwar_time(::google::protobuf::int32 value) {
  set_has_kingwar_time();
  kingwar_time_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.BigMapGridBaseInfo.kingwar_time)
}

// required .AFMsg.Ident kingwarrer = 11;
inline bool BigMapGridBaseInfo::has_kingwarrer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BigMapGridBaseInfo::set_has_kingwarrer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BigMapGridBaseInfo::clear_has_kingwarrer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BigMapGridBaseInfo::clear_kingwarrer() {
  if (kingwarrer_ != NULL) kingwarrer_->::AFMsg::Ident::Clear();
  clear_has_kingwarrer();
}
inline const ::AFMsg::Ident& BigMapGridBaseInfo::kingwarrer() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridBaseInfo.kingwarrer)
  return kingwarrer_ != NULL ? *kingwarrer_ : *default_instance_->kingwarrer_;
}
inline ::AFMsg::Ident* BigMapGridBaseInfo::mutable_kingwarrer() {
  set_has_kingwarrer();
  if (kingwarrer_ == NULL) {
    kingwarrer_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapGridBaseInfo.kingwarrer)
  return kingwarrer_;
}
inline ::AFMsg::Ident* BigMapGridBaseInfo::release_kingwarrer() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapGridBaseInfo.kingwarrer)
  clear_has_kingwarrer();
  ::AFMsg::Ident* temp = kingwarrer_;
  kingwarrer_ = NULL;
  return temp;
}
inline void BigMapGridBaseInfo::set_allocated_kingwarrer(::AFMsg::Ident* kingwarrer) {
  delete kingwarrer_;
  kingwarrer_ = kingwarrer;
  if (kingwarrer) {
    set_has_kingwarrer();
  } else {
    clear_has_kingwarrer();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapGridBaseInfo.kingwarrer)
}

// required int32 hurting_time = 20;
inline bool BigMapGridBaseInfo::has_hurting_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BigMapGridBaseInfo::set_has_hurting_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BigMapGridBaseInfo::clear_has_hurting_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BigMapGridBaseInfo::clear_hurting_time() {
  hurting_time_ = 0;
  clear_has_hurting_time();
}
inline ::google::protobuf::int32 BigMapGridBaseInfo::hurting_time() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridBaseInfo.hurting_time)
  return hurting_time_;
}
inline void BigMapGridBaseInfo::set_hurting_time(::google::protobuf::int32 value) {
  set_has_hurting_time();
  hurting_time_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.BigMapGridBaseInfo.hurting_time)
}

// required .AFMsg.Ident hurter = 21;
inline bool BigMapGridBaseInfo::has_hurter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BigMapGridBaseInfo::set_has_hurter() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BigMapGridBaseInfo::clear_has_hurter() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BigMapGridBaseInfo::clear_hurter() {
  if (hurter_ != NULL) hurter_->::AFMsg::Ident::Clear();
  clear_has_hurter();
}
inline const ::AFMsg::Ident& BigMapGridBaseInfo::hurter() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridBaseInfo.hurter)
  return hurter_ != NULL ? *hurter_ : *default_instance_->hurter_;
}
inline ::AFMsg::Ident* BigMapGridBaseInfo::mutable_hurter() {
  set_has_hurter();
  if (hurter_ == NULL) {
    hurter_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapGridBaseInfo.hurter)
  return hurter_;
}
inline ::AFMsg::Ident* BigMapGridBaseInfo::release_hurter() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapGridBaseInfo.hurter)
  clear_has_hurter();
  ::AFMsg::Ident* temp = hurter_;
  hurter_ = NULL;
  return temp;
}
inline void BigMapGridBaseInfo::set_allocated_hurter(::AFMsg::Ident* hurter) {
  delete hurter_;
  hurter_ = hurter;
  if (hurter) {
    set_has_hurter();
  } else {
    clear_has_hurter();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapGridBaseInfo.hurter)
}

// -------------------------------------------------------------------

// BigMapLeaveMsg

// required .AFMsg.Ident owner = 1;
inline bool BigMapLeaveMsg::has_owner() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BigMapLeaveMsg::set_has_owner() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BigMapLeaveMsg::clear_has_owner() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BigMapLeaveMsg::clear_owner() {
  if (owner_ != NULL) owner_->::AFMsg::Ident::Clear();
  clear_has_owner();
}
inline const ::AFMsg::Ident& BigMapLeaveMsg::owner() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapLeaveMsg.owner)
  return owner_ != NULL ? *owner_ : *default_instance_->owner_;
}
inline ::AFMsg::Ident* BigMapLeaveMsg::mutable_owner() {
  set_has_owner();
  if (owner_ == NULL) {
    owner_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapLeaveMsg.owner)
  return owner_;
}
inline ::AFMsg::Ident* BigMapLeaveMsg::release_owner() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapLeaveMsg.owner)
  clear_has_owner();
  ::AFMsg::Ident* temp = owner_;
  owner_ = NULL;
  return temp;
}
inline void BigMapLeaveMsg::set_allocated_owner(::AFMsg::Ident* owner) {
  delete owner_;
  owner_ = owner;
  if (owner) {
    set_has_owner();
  } else {
    clear_has_owner();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapLeaveMsg.owner)
}

// required bytes owner_name = 2;
inline bool BigMapLeaveMsg::has_owner_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BigMapLeaveMsg::set_has_owner_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BigMapLeaveMsg::clear_has_owner_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BigMapLeaveMsg::clear_owner_name() {
  owner_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_owner_name();
}
inline const ::std::string& BigMapLeaveMsg::owner_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapLeaveMsg.owner_name)
  return owner_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BigMapLeaveMsg::set_owner_name(const ::std::string& value) {
  set_has_owner_name();
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.BigMapLeaveMsg.owner_name)
}
inline void BigMapLeaveMsg::set_owner_name(const char* value) {
  set_has_owner_name();
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.BigMapLeaveMsg.owner_name)
}
inline void BigMapLeaveMsg::set_owner_name(const void* value, size_t size) {
  set_has_owner_name();
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.BigMapLeaveMsg.owner_name)
}
inline ::std::string* BigMapLeaveMsg::mutable_owner_name() {
  set_has_owner_name();
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapLeaveMsg.owner_name)
  return owner_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BigMapLeaveMsg::release_owner_name() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapLeaveMsg.owner_name)
  clear_has_owner_name();
  return owner_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BigMapLeaveMsg::set_allocated_owner_name(::std::string* owner_name) {
  if (owner_name != NULL) {
    set_has_owner_name();
  } else {
    clear_has_owner_name();
  }
  owner_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapLeaveMsg.owner_name)
}

// required bytes msg_data = 3;
inline bool BigMapLeaveMsg::has_msg_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BigMapLeaveMsg::set_has_msg_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BigMapLeaveMsg::clear_has_msg_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BigMapLeaveMsg::clear_msg_data() {
  msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_data();
}
inline const ::std::string& BigMapLeaveMsg::msg_data() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapLeaveMsg.msg_data)
  return msg_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BigMapLeaveMsg::set_msg_data(const ::std::string& value) {
  set_has_msg_data();
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.BigMapLeaveMsg.msg_data)
}
inline void BigMapLeaveMsg::set_msg_data(const char* value) {
  set_has_msg_data();
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.BigMapLeaveMsg.msg_data)
}
inline void BigMapLeaveMsg::set_msg_data(const void* value, size_t size) {
  set_has_msg_data();
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.BigMapLeaveMsg.msg_data)
}
inline ::std::string* BigMapLeaveMsg::mutable_msg_data() {
  set_has_msg_data();
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapLeaveMsg.msg_data)
  return msg_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BigMapLeaveMsg::release_msg_data() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapLeaveMsg.msg_data)
  clear_has_msg_data();
  return msg_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BigMapLeaveMsg::set_allocated_msg_data(::std::string* msg_data) {
  if (msg_data != NULL) {
    set_has_msg_data();
  } else {
    clear_has_msg_data();
  }
  msg_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_data);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapLeaveMsg.msg_data)
}

// required int32 msg_time = 4;
inline bool BigMapLeaveMsg::has_msg_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BigMapLeaveMsg::set_has_msg_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BigMapLeaveMsg::clear_has_msg_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BigMapLeaveMsg::clear_msg_time() {
  msg_time_ = 0;
  clear_has_msg_time();
}
inline ::google::protobuf::int32 BigMapLeaveMsg::msg_time() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapLeaveMsg.msg_time)
  return msg_time_;
}
inline void BigMapLeaveMsg::set_msg_time(::google::protobuf::int32 value) {
  set_has_msg_time();
  msg_time_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.BigMapLeaveMsg.msg_time)
}

// required int32 owner_level = 5;
inline bool BigMapLeaveMsg::has_owner_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BigMapLeaveMsg::set_has_owner_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BigMapLeaveMsg::clear_has_owner_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BigMapLeaveMsg::clear_owner_level() {
  owner_level_ = 0;
  clear_has_owner_level();
}
inline ::google::protobuf::int32 BigMapLeaveMsg::owner_level() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapLeaveMsg.owner_level)
  return owner_level_;
}
inline void BigMapLeaveMsg::set_owner_level(::google::protobuf::int32 value) {
  set_has_owner_level();
  owner_level_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.BigMapLeaveMsg.owner_level)
}

// -------------------------------------------------------------------

// BigMapWarHistory

// required .AFMsg.GridGuildBaseInfo red_info = 1;
inline bool BigMapWarHistory::has_red_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BigMapWarHistory::set_has_red_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BigMapWarHistory::clear_has_red_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BigMapWarHistory::clear_red_info() {
  if (red_info_ != NULL) red_info_->::AFMsg::GridGuildBaseInfo::Clear();
  clear_has_red_info();
}
inline const ::AFMsg::GridGuildBaseInfo& BigMapWarHistory::red_info() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapWarHistory.red_info)
  return red_info_ != NULL ? *red_info_ : *default_instance_->red_info_;
}
inline ::AFMsg::GridGuildBaseInfo* BigMapWarHistory::mutable_red_info() {
  set_has_red_info();
  if (red_info_ == NULL) {
    red_info_ = new ::AFMsg::GridGuildBaseInfo;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapWarHistory.red_info)
  return red_info_;
}
inline ::AFMsg::GridGuildBaseInfo* BigMapWarHistory::release_red_info() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapWarHistory.red_info)
  clear_has_red_info();
  ::AFMsg::GridGuildBaseInfo* temp = red_info_;
  red_info_ = NULL;
  return temp;
}
inline void BigMapWarHistory::set_allocated_red_info(::AFMsg::GridGuildBaseInfo* red_info) {
  delete red_info_;
  red_info_ = red_info;
  if (red_info) {
    set_has_red_info();
  } else {
    clear_has_red_info();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapWarHistory.red_info)
}

// required .AFMsg.GridGuildBaseInfo blue_info = 2;
inline bool BigMapWarHistory::has_blue_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BigMapWarHistory::set_has_blue_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BigMapWarHistory::clear_has_blue_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BigMapWarHistory::clear_blue_info() {
  if (blue_info_ != NULL) blue_info_->::AFMsg::GridGuildBaseInfo::Clear();
  clear_has_blue_info();
}
inline const ::AFMsg::GridGuildBaseInfo& BigMapWarHistory::blue_info() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapWarHistory.blue_info)
  return blue_info_ != NULL ? *blue_info_ : *default_instance_->blue_info_;
}
inline ::AFMsg::GridGuildBaseInfo* BigMapWarHistory::mutable_blue_info() {
  set_has_blue_info();
  if (blue_info_ == NULL) {
    blue_info_ = new ::AFMsg::GridGuildBaseInfo;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapWarHistory.blue_info)
  return blue_info_;
}
inline ::AFMsg::GridGuildBaseInfo* BigMapWarHistory::release_blue_info() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapWarHistory.blue_info)
  clear_has_blue_info();
  ::AFMsg::GridGuildBaseInfo* temp = blue_info_;
  blue_info_ = NULL;
  return temp;
}
inline void BigMapWarHistory::set_allocated_blue_info(::AFMsg::GridGuildBaseInfo* blue_info) {
  delete blue_info_;
  blue_info_ = blue_info;
  if (blue_info) {
    set_has_blue_info();
  } else {
    clear_has_blue_info();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapWarHistory.blue_info)
}

// required .AFMsg.Ident winner_id = 10;
inline bool BigMapWarHistory::has_winner_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BigMapWarHistory::set_has_winner_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BigMapWarHistory::clear_has_winner_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BigMapWarHistory::clear_winner_id() {
  if (winner_id_ != NULL) winner_id_->::AFMsg::Ident::Clear();
  clear_has_winner_id();
}
inline const ::AFMsg::Ident& BigMapWarHistory::winner_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapWarHistory.winner_id)
  return winner_id_ != NULL ? *winner_id_ : *default_instance_->winner_id_;
}
inline ::AFMsg::Ident* BigMapWarHistory::mutable_winner_id() {
  set_has_winner_id();
  if (winner_id_ == NULL) {
    winner_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapWarHistory.winner_id)
  return winner_id_;
}
inline ::AFMsg::Ident* BigMapWarHistory::release_winner_id() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapWarHistory.winner_id)
  clear_has_winner_id();
  ::AFMsg::Ident* temp = winner_id_;
  winner_id_ = NULL;
  return temp;
}
inline void BigMapWarHistory::set_allocated_winner_id(::AFMsg::Ident* winner_id) {
  delete winner_id_;
  winner_id_ = winner_id;
  if (winner_id) {
    set_has_winner_id();
  } else {
    clear_has_winner_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapWarHistory.winner_id)
}

// required int32 war_time = 11;
inline bool BigMapWarHistory::has_war_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BigMapWarHistory::set_has_war_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BigMapWarHistory::clear_has_war_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BigMapWarHistory::clear_war_time() {
  war_time_ = 0;
  clear_has_war_time();
}
inline ::google::protobuf::int32 BigMapWarHistory::war_time() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapWarHistory.war_time)
  return war_time_;
}
inline void BigMapWarHistory::set_war_time(::google::protobuf::int32 value) {
  set_has_war_time();
  war_time_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.BigMapWarHistory.war_time)
}

// -------------------------------------------------------------------

// BigMapGridDetailInfo

// required .AFMsg.BigMapGridBaseInfo grid_base_info = 1;
inline bool BigMapGridDetailInfo::has_grid_base_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BigMapGridDetailInfo::set_has_grid_base_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BigMapGridDetailInfo::clear_has_grid_base_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BigMapGridDetailInfo::clear_grid_base_info() {
  if (grid_base_info_ != NULL) grid_base_info_->::AFMsg::BigMapGridBaseInfo::Clear();
  clear_has_grid_base_info();
}
inline const ::AFMsg::BigMapGridBaseInfo& BigMapGridDetailInfo::grid_base_info() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridDetailInfo.grid_base_info)
  return grid_base_info_ != NULL ? *grid_base_info_ : *default_instance_->grid_base_info_;
}
inline ::AFMsg::BigMapGridBaseInfo* BigMapGridDetailInfo::mutable_grid_base_info() {
  set_has_grid_base_info();
  if (grid_base_info_ == NULL) {
    grid_base_info_ = new ::AFMsg::BigMapGridBaseInfo;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapGridDetailInfo.grid_base_info)
  return grid_base_info_;
}
inline ::AFMsg::BigMapGridBaseInfo* BigMapGridDetailInfo::release_grid_base_info() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapGridDetailInfo.grid_base_info)
  clear_has_grid_base_info();
  ::AFMsg::BigMapGridBaseInfo* temp = grid_base_info_;
  grid_base_info_ = NULL;
  return temp;
}
inline void BigMapGridDetailInfo::set_allocated_grid_base_info(::AFMsg::BigMapGridBaseInfo* grid_base_info) {
  delete grid_base_info_;
  grid_base_info_ = grid_base_info;
  if (grid_base_info) {
    set_has_grid_base_info();
  } else {
    clear_has_grid_base_info();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapGridDetailInfo.grid_base_info)
}

// repeated .AFMsg.GridGuildBaseInfo stay_guid_list = 2;
inline int BigMapGridDetailInfo::stay_guid_list_size() const {
  return stay_guid_list_.size();
}
inline void BigMapGridDetailInfo::clear_stay_guid_list() {
  stay_guid_list_.Clear();
}
inline const ::AFMsg::GridGuildBaseInfo& BigMapGridDetailInfo::stay_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridDetailInfo.stay_guid_list)
  return stay_guid_list_.Get(index);
}
inline ::AFMsg::GridGuildBaseInfo* BigMapGridDetailInfo::mutable_stay_guid_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapGridDetailInfo.stay_guid_list)
  return stay_guid_list_.Mutable(index);
}
inline ::AFMsg::GridGuildBaseInfo* BigMapGridDetailInfo::add_stay_guid_list() {
  // @@protoc_insertion_point(field_add:AFMsg.BigMapGridDetailInfo.stay_guid_list)
  return stay_guid_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::GridGuildBaseInfo >*
BigMapGridDetailInfo::mutable_stay_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.BigMapGridDetailInfo.stay_guid_list)
  return &stay_guid_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::GridGuildBaseInfo >&
BigMapGridDetailInfo::stay_guid_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.BigMapGridDetailInfo.stay_guid_list)
  return stay_guid_list_;
}

// repeated .AFMsg.BigMapLeaveMsg leave_msg = 3;
inline int BigMapGridDetailInfo::leave_msg_size() const {
  return leave_msg_.size();
}
inline void BigMapGridDetailInfo::clear_leave_msg() {
  leave_msg_.Clear();
}
inline const ::AFMsg::BigMapLeaveMsg& BigMapGridDetailInfo::leave_msg(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridDetailInfo.leave_msg)
  return leave_msg_.Get(index);
}
inline ::AFMsg::BigMapLeaveMsg* BigMapGridDetailInfo::mutable_leave_msg(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapGridDetailInfo.leave_msg)
  return leave_msg_.Mutable(index);
}
inline ::AFMsg::BigMapLeaveMsg* BigMapGridDetailInfo::add_leave_msg() {
  // @@protoc_insertion_point(field_add:AFMsg.BigMapGridDetailInfo.leave_msg)
  return leave_msg_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapLeaveMsg >*
BigMapGridDetailInfo::mutable_leave_msg() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.BigMapGridDetailInfo.leave_msg)
  return &leave_msg_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapLeaveMsg >&
BigMapGridDetailInfo::leave_msg() const {
  // @@protoc_insertion_point(field_list:AFMsg.BigMapGridDetailInfo.leave_msg)
  return leave_msg_;
}

// repeated .AFMsg.BigMapWarHistory war_history = 4;
inline int BigMapGridDetailInfo::war_history_size() const {
  return war_history_.size();
}
inline void BigMapGridDetailInfo::clear_war_history() {
  war_history_.Clear();
}
inline const ::AFMsg::BigMapWarHistory& BigMapGridDetailInfo::war_history(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridDetailInfo.war_history)
  return war_history_.Get(index);
}
inline ::AFMsg::BigMapWarHistory* BigMapGridDetailInfo::mutable_war_history(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapGridDetailInfo.war_history)
  return war_history_.Mutable(index);
}
inline ::AFMsg::BigMapWarHistory* BigMapGridDetailInfo::add_war_history() {
  // @@protoc_insertion_point(field_add:AFMsg.BigMapGridDetailInfo.war_history)
  return war_history_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapWarHistory >*
BigMapGridDetailInfo::mutable_war_history() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.BigMapGridDetailInfo.war_history)
  return &war_history_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapWarHistory >&
BigMapGridDetailInfo::war_history() const {
  // @@protoc_insertion_point(field_list:AFMsg.BigMapGridDetailInfo.war_history)
  return war_history_;
}

// -------------------------------------------------------------------

// AckBigMapGridInfo

// repeated .AFMsg.BigMapGridDetailInfo map_data = 1;
inline int AckBigMapGridInfo::map_data_size() const {
  return map_data_.size();
}
inline void AckBigMapGridInfo::clear_map_data() {
  map_data_.Clear();
}
inline const ::AFMsg::BigMapGridDetailInfo& AckBigMapGridInfo::map_data(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.AckBigMapGridInfo.map_data)
  return map_data_.Get(index);
}
inline ::AFMsg::BigMapGridDetailInfo* AckBigMapGridInfo::mutable_map_data(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.AckBigMapGridInfo.map_data)
  return map_data_.Mutable(index);
}
inline ::AFMsg::BigMapGridDetailInfo* AckBigMapGridInfo::add_map_data() {
  // @@protoc_insertion_point(field_add:AFMsg.AckBigMapGridInfo.map_data)
  return map_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapGridDetailInfo >*
AckBigMapGridInfo::mutable_map_data() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.AckBigMapGridInfo.map_data)
  return &map_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapGridDetailInfo >&
AckBigMapGridInfo::map_data() const {
  // @@protoc_insertion_point(field_list:AFMsg.AckBigMapGridInfo.map_data)
  return map_data_;
}

// -------------------------------------------------------------------

// ReqBigMapInfo

// -------------------------------------------------------------------

// AckBigMapInfo

// repeated .AFMsg.BigMapGridBaseInfo grid_base_info = 1;
inline int AckBigMapInfo::grid_base_info_size() const {
  return grid_base_info_.size();
}
inline void AckBigMapInfo::clear_grid_base_info() {
  grid_base_info_.Clear();
}
inline const ::AFMsg::BigMapGridBaseInfo& AckBigMapInfo::grid_base_info(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.AckBigMapInfo.grid_base_info)
  return grid_base_info_.Get(index);
}
inline ::AFMsg::BigMapGridBaseInfo* AckBigMapInfo::mutable_grid_base_info(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.AckBigMapInfo.grid_base_info)
  return grid_base_info_.Mutable(index);
}
inline ::AFMsg::BigMapGridBaseInfo* AckBigMapInfo::add_grid_base_info() {
  // @@protoc_insertion_point(field_add:AFMsg.AckBigMapInfo.grid_base_info)
  return grid_base_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapGridBaseInfo >*
AckBigMapInfo::mutable_grid_base_info() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.AckBigMapInfo.grid_base_info)
  return &grid_base_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapGridBaseInfo >&
AckBigMapInfo::grid_base_info() const {
  // @@protoc_insertion_point(field_list:AFMsg.AckBigMapInfo.grid_base_info)
  return grid_base_info_;
}

// -------------------------------------------------------------------

// ReqHoldMapGrid

// required bytes map_title_id = 1;
inline bool ReqHoldMapGrid::has_map_title_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqHoldMapGrid::set_has_map_title_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqHoldMapGrid::clear_has_map_title_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqHoldMapGrid::clear_map_title_id() {
  map_title_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_title_id();
}
inline const ::std::string& ReqHoldMapGrid::map_title_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqHoldMapGrid.map_title_id)
  return map_title_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqHoldMapGrid::set_map_title_id(const ::std::string& value) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqHoldMapGrid.map_title_id)
}
inline void ReqHoldMapGrid::set_map_title_id(const char* value) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqHoldMapGrid.map_title_id)
}
inline void ReqHoldMapGrid::set_map_title_id(const void* value, size_t size) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqHoldMapGrid.map_title_id)
}
inline ::std::string* ReqHoldMapGrid::mutable_map_title_id() {
  set_has_map_title_id();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqHoldMapGrid.map_title_id)
  return map_title_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqHoldMapGrid::release_map_title_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqHoldMapGrid.map_title_id)
  clear_has_map_title_id();
  return map_title_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqHoldMapGrid::set_allocated_map_title_id(::std::string* map_title_id) {
  if (map_title_id != NULL) {
    set_has_map_title_id();
  } else {
    clear_has_map_title_id();
  }
  map_title_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_title_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqHoldMapGrid.map_title_id)
}

// required .AFMsg.Ident guild_id = 2;
inline bool ReqHoldMapGrid::has_guild_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqHoldMapGrid::set_has_guild_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqHoldMapGrid::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqHoldMapGrid::clear_guild_id() {
  if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
  clear_has_guild_id();
}
inline const ::AFMsg::Ident& ReqHoldMapGrid::guild_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqHoldMapGrid.guild_id)
  return guild_id_ != NULL ? *guild_id_ : *default_instance_->guild_id_;
}
inline ::AFMsg::Ident* ReqHoldMapGrid::mutable_guild_id() {
  set_has_guild_id();
  if (guild_id_ == NULL) {
    guild_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqHoldMapGrid.guild_id)
  return guild_id_;
}
inline ::AFMsg::Ident* ReqHoldMapGrid::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqHoldMapGrid.guild_id)
  clear_has_guild_id();
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
inline void ReqHoldMapGrid::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  delete guild_id_;
  guild_id_ = guild_id;
  if (guild_id) {
    set_has_guild_id();
  } else {
    clear_has_guild_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqHoldMapGrid.guild_id)
}

// -------------------------------------------------------------------

// AckHoldMapGrid

// -------------------------------------------------------------------

// ReqLeaveMapMsg

// required bytes map_title_id = 1;
inline bool ReqLeaveMapMsg::has_map_title_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqLeaveMapMsg::set_has_map_title_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqLeaveMapMsg::clear_has_map_title_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqLeaveMapMsg::clear_map_title_id() {
  map_title_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_title_id();
}
inline const ::std::string& ReqLeaveMapMsg::map_title_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqLeaveMapMsg.map_title_id)
  return map_title_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqLeaveMapMsg::set_map_title_id(const ::std::string& value) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqLeaveMapMsg.map_title_id)
}
inline void ReqLeaveMapMsg::set_map_title_id(const char* value) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqLeaveMapMsg.map_title_id)
}
inline void ReqLeaveMapMsg::set_map_title_id(const void* value, size_t size) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqLeaveMapMsg.map_title_id)
}
inline ::std::string* ReqLeaveMapMsg::mutable_map_title_id() {
  set_has_map_title_id();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqLeaveMapMsg.map_title_id)
  return map_title_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqLeaveMapMsg::release_map_title_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqLeaveMapMsg.map_title_id)
  clear_has_map_title_id();
  return map_title_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqLeaveMapMsg::set_allocated_map_title_id(::std::string* map_title_id) {
  if (map_title_id != NULL) {
    set_has_map_title_id();
  } else {
    clear_has_map_title_id();
  }
  map_title_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_title_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqLeaveMapMsg.map_title_id)
}

// required .AFMsg.BigMapLeaveMsg leave_msg = 2;
inline bool ReqLeaveMapMsg::has_leave_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqLeaveMapMsg::set_has_leave_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqLeaveMapMsg::clear_has_leave_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqLeaveMapMsg::clear_leave_msg() {
  if (leave_msg_ != NULL) leave_msg_->::AFMsg::BigMapLeaveMsg::Clear();
  clear_has_leave_msg();
}
inline const ::AFMsg::BigMapLeaveMsg& ReqLeaveMapMsg::leave_msg() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqLeaveMapMsg.leave_msg)
  return leave_msg_ != NULL ? *leave_msg_ : *default_instance_->leave_msg_;
}
inline ::AFMsg::BigMapLeaveMsg* ReqLeaveMapMsg::mutable_leave_msg() {
  set_has_leave_msg();
  if (leave_msg_ == NULL) {
    leave_msg_ = new ::AFMsg::BigMapLeaveMsg;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqLeaveMapMsg.leave_msg)
  return leave_msg_;
}
inline ::AFMsg::BigMapLeaveMsg* ReqLeaveMapMsg::release_leave_msg() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqLeaveMapMsg.leave_msg)
  clear_has_leave_msg();
  ::AFMsg::BigMapLeaveMsg* temp = leave_msg_;
  leave_msg_ = NULL;
  return temp;
}
inline void ReqLeaveMapMsg::set_allocated_leave_msg(::AFMsg::BigMapLeaveMsg* leave_msg) {
  delete leave_msg_;
  leave_msg_ = leave_msg;
  if (leave_msg) {
    set_has_leave_msg();
  } else {
    clear_has_leave_msg();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqLeaveMapMsg.leave_msg)
}

// -------------------------------------------------------------------

// AckLeaveMapMsg

// -------------------------------------------------------------------

// ReqGetMapAward

// required bytes map_title_id = 1;
inline bool ReqGetMapAward::has_map_title_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqGetMapAward::set_has_map_title_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqGetMapAward::clear_has_map_title_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqGetMapAward::clear_map_title_id() {
  map_title_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_title_id();
}
inline const ::std::string& ReqGetMapAward::map_title_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqGetMapAward.map_title_id)
  return map_title_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqGetMapAward::set_map_title_id(const ::std::string& value) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqGetMapAward.map_title_id)
}
inline void ReqGetMapAward::set_map_title_id(const char* value) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqGetMapAward.map_title_id)
}
inline void ReqGetMapAward::set_map_title_id(const void* value, size_t size) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqGetMapAward.map_title_id)
}
inline ::std::string* ReqGetMapAward::mutable_map_title_id() {
  set_has_map_title_id();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqGetMapAward.map_title_id)
  return map_title_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqGetMapAward::release_map_title_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqGetMapAward.map_title_id)
  clear_has_map_title_id();
  return map_title_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqGetMapAward::set_allocated_map_title_id(::std::string* map_title_id) {
  if (map_title_id != NULL) {
    set_has_map_title_id();
  } else {
    clear_has_map_title_id();
  }
  map_title_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_title_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqGetMapAward.map_title_id)
}

// -------------------------------------------------------------------

// AckGetMapAward

// -------------------------------------------------------------------

// ReqMapHunting

// required bytes map_title_id = 1;
inline bool ReqMapHunting::has_map_title_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqMapHunting::set_has_map_title_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqMapHunting::clear_has_map_title_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqMapHunting::clear_map_title_id() {
  map_title_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_title_id();
}
inline const ::std::string& ReqMapHunting::map_title_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqMapHunting.map_title_id)
  return map_title_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqMapHunting::set_map_title_id(const ::std::string& value) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqMapHunting.map_title_id)
}
inline void ReqMapHunting::set_map_title_id(const char* value) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqMapHunting.map_title_id)
}
inline void ReqMapHunting::set_map_title_id(const void* value, size_t size) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqMapHunting.map_title_id)
}
inline ::std::string* ReqMapHunting::mutable_map_title_id() {
  set_has_map_title_id();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqMapHunting.map_title_id)
  return map_title_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqMapHunting::release_map_title_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqMapHunting.map_title_id)
  clear_has_map_title_id();
  return map_title_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqMapHunting::set_allocated_map_title_id(::std::string* map_title_id) {
  if (map_title_id != NULL) {
    set_has_map_title_id();
  } else {
    clear_has_map_title_id();
  }
  map_title_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_title_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqMapHunting.map_title_id)
}

// -------------------------------------------------------------------

// AckMapHunting

// -------------------------------------------------------------------

// ReqMapKingWar

// required bytes map_title_id = 1;
inline bool ReqMapKingWar::has_map_title_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqMapKingWar::set_has_map_title_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqMapKingWar::clear_has_map_title_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqMapKingWar::clear_map_title_id() {
  map_title_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_title_id();
}
inline const ::std::string& ReqMapKingWar::map_title_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqMapKingWar.map_title_id)
  return map_title_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqMapKingWar::set_map_title_id(const ::std::string& value) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqMapKingWar.map_title_id)
}
inline void ReqMapKingWar::set_map_title_id(const char* value) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqMapKingWar.map_title_id)
}
inline void ReqMapKingWar::set_map_title_id(const void* value, size_t size) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqMapKingWar.map_title_id)
}
inline ::std::string* ReqMapKingWar::mutable_map_title_id() {
  set_has_map_title_id();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqMapKingWar.map_title_id)
  return map_title_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqMapKingWar::release_map_title_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqMapKingWar.map_title_id)
  clear_has_map_title_id();
  return map_title_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqMapKingWar::set_allocated_map_title_id(::std::string* map_title_id) {
  if (map_title_id != NULL) {
    set_has_map_title_id();
  } else {
    clear_has_map_title_id();
  }
  map_title_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_title_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqMapKingWar.map_title_id)
}

// -------------------------------------------------------------------

// AckMapKingWar

// -------------------------------------------------------------------

// PVPRoomInfo

// required int32 nCellStatus = 1;
inline bool PVPRoomInfo::has_ncellstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVPRoomInfo::set_has_ncellstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVPRoomInfo::clear_has_ncellstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVPRoomInfo::clear_ncellstatus() {
  ncellstatus_ = 0;
  clear_has_ncellstatus();
}
inline ::google::protobuf::int32 PVPRoomInfo::ncellstatus() const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.nCellStatus)
  return ncellstatus_;
}
inline void PVPRoomInfo::set_ncellstatus(::google::protobuf::int32 value) {
  set_has_ncellstatus();
  ncellstatus_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PVPRoomInfo.nCellStatus)
}

// required .AFMsg.Ident RoomID = 2;
inline bool PVPRoomInfo::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PVPRoomInfo::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PVPRoomInfo::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PVPRoomInfo::clear_roomid() {
  if (roomid_ != NULL) roomid_->::AFMsg::Ident::Clear();
  clear_has_roomid();
}
inline const ::AFMsg::Ident& PVPRoomInfo::roomid() const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.RoomID)
  return roomid_ != NULL ? *roomid_ : *default_instance_->roomid_;
}
inline ::AFMsg::Ident* PVPRoomInfo::mutable_roomid() {
  set_has_roomid();
  if (roomid_ == NULL) {
    roomid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.PVPRoomInfo.RoomID)
  return roomid_;
}
inline ::AFMsg::Ident* PVPRoomInfo::release_roomid() {
  // @@protoc_insertion_point(field_release:AFMsg.PVPRoomInfo.RoomID)
  clear_has_roomid();
  ::AFMsg::Ident* temp = roomid_;
  roomid_ = NULL;
  return temp;
}
inline void PVPRoomInfo::set_allocated_roomid(::AFMsg::Ident* roomid) {
  delete roomid_;
  roomid_ = roomid;
  if (roomid) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.PVPRoomInfo.RoomID)
}

// required int32 nPVPMode = 3;
inline bool PVPRoomInfo::has_npvpmode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PVPRoomInfo::set_has_npvpmode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PVPRoomInfo::clear_has_npvpmode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PVPRoomInfo::clear_npvpmode() {
  npvpmode_ = 0;
  clear_has_npvpmode();
}
inline ::google::protobuf::int32 PVPRoomInfo::npvpmode() const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.nPVPMode)
  return npvpmode_;
}
inline void PVPRoomInfo::set_npvpmode(::google::protobuf::int32 value) {
  set_has_npvpmode();
  npvpmode_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PVPRoomInfo.nPVPMode)
}

// required int32 nPVPGrade = 4;
inline bool PVPRoomInfo::has_npvpgrade() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PVPRoomInfo::set_has_npvpgrade() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PVPRoomInfo::clear_has_npvpgrade() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PVPRoomInfo::clear_npvpgrade() {
  npvpgrade_ = 0;
  clear_has_npvpgrade();
}
inline ::google::protobuf::int32 PVPRoomInfo::npvpgrade() const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.nPVPGrade)
  return npvpgrade_;
}
inline void PVPRoomInfo::set_npvpgrade(::google::protobuf::int32 value) {
  set_has_npvpgrade();
  npvpgrade_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PVPRoomInfo.nPVPGrade)
}

// required int32 MaxPalyer = 5;
inline bool PVPRoomInfo::has_maxpalyer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PVPRoomInfo::set_has_maxpalyer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PVPRoomInfo::clear_has_maxpalyer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PVPRoomInfo::clear_maxpalyer() {
  maxpalyer_ = 0;
  clear_has_maxpalyer();
}
inline ::google::protobuf::int32 PVPRoomInfo::maxpalyer() const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.MaxPalyer)
  return maxpalyer_;
}
inline void PVPRoomInfo::set_maxpalyer(::google::protobuf::int32 value) {
  set_has_maxpalyer();
  maxpalyer_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PVPRoomInfo.MaxPalyer)
}

// repeated .AFMsg.Ident xRedPlayer = 6;
inline int PVPRoomInfo::xredplayer_size() const {
  return xredplayer_.size();
}
inline void PVPRoomInfo::clear_xredplayer() {
  xredplayer_.Clear();
}
inline const ::AFMsg::Ident& PVPRoomInfo::xredplayer(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.xRedPlayer)
  return xredplayer_.Get(index);
}
inline ::AFMsg::Ident* PVPRoomInfo::mutable_xredplayer(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.PVPRoomInfo.xRedPlayer)
  return xredplayer_.Mutable(index);
}
inline ::AFMsg::Ident* PVPRoomInfo::add_xredplayer() {
  // @@protoc_insertion_point(field_add:AFMsg.PVPRoomInfo.xRedPlayer)
  return xredplayer_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
PVPRoomInfo::mutable_xredplayer() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.PVPRoomInfo.xRedPlayer)
  return &xredplayer_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
PVPRoomInfo::xredplayer() const {
  // @@protoc_insertion_point(field_list:AFMsg.PVPRoomInfo.xRedPlayer)
  return xredplayer_;
}

// repeated .AFMsg.Ident xBluePlayer = 7;
inline int PVPRoomInfo::xblueplayer_size() const {
  return xblueplayer_.size();
}
inline void PVPRoomInfo::clear_xblueplayer() {
  xblueplayer_.Clear();
}
inline const ::AFMsg::Ident& PVPRoomInfo::xblueplayer(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.xBluePlayer)
  return xblueplayer_.Get(index);
}
inline ::AFMsg::Ident* PVPRoomInfo::mutable_xblueplayer(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.PVPRoomInfo.xBluePlayer)
  return xblueplayer_.Mutable(index);
}
inline ::AFMsg::Ident* PVPRoomInfo::add_xblueplayer() {
  // @@protoc_insertion_point(field_add:AFMsg.PVPRoomInfo.xBluePlayer)
  return xblueplayer_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
PVPRoomInfo::mutable_xblueplayer() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.PVPRoomInfo.xBluePlayer)
  return &xblueplayer_;
}
inline const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
PVPRoomInfo::xblueplayer() const {
  // @@protoc_insertion_point(field_list:AFMsg.PVPRoomInfo.xBluePlayer)
  return xblueplayer_;
}

// optional int64 serverid = 8;
inline bool PVPRoomInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PVPRoomInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PVPRoomInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PVPRoomInfo::clear_serverid() {
  serverid_ = GOOGLE_LONGLONG(0);
  clear_has_serverid();
}
inline ::google::protobuf::int64 PVPRoomInfo::serverid() const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.serverid)
  return serverid_;
}
inline void PVPRoomInfo::set_serverid(::google::protobuf::int64 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PVPRoomInfo.serverid)
}

// optional int64 SceneID = 9;
inline bool PVPRoomInfo::has_sceneid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PVPRoomInfo::set_has_sceneid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PVPRoomInfo::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PVPRoomInfo::clear_sceneid() {
  sceneid_ = GOOGLE_LONGLONG(0);
  clear_has_sceneid();
}
inline ::google::protobuf::int64 PVPRoomInfo::sceneid() const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.SceneID)
  return sceneid_;
}
inline void PVPRoomInfo::set_sceneid(::google::protobuf::int64 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PVPRoomInfo.SceneID)
}

// optional int64 groupID = 10;
inline bool PVPRoomInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PVPRoomInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PVPRoomInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PVPRoomInfo::clear_groupid() {
  groupid_ = GOOGLE_LONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::int64 PVPRoomInfo::groupid() const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.groupID)
  return groupid_;
}
inline void PVPRoomInfo::set_groupid(::google::protobuf::int64 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PVPRoomInfo.groupID)
}

// -------------------------------------------------------------------

// ReqPVPApplyMatch

// required .AFMsg.Ident self_id = 1;
inline bool ReqPVPApplyMatch::has_self_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqPVPApplyMatch::set_has_self_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqPVPApplyMatch::clear_has_self_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqPVPApplyMatch::clear_self_id() {
  if (self_id_ != NULL) self_id_->::AFMsg::Ident::Clear();
  clear_has_self_id();
}
inline const ::AFMsg::Ident& ReqPVPApplyMatch::self_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqPVPApplyMatch.self_id)
  return self_id_ != NULL ? *self_id_ : *default_instance_->self_id_;
}
inline ::AFMsg::Ident* ReqPVPApplyMatch::mutable_self_id() {
  set_has_self_id();
  if (self_id_ == NULL) {
    self_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqPVPApplyMatch.self_id)
  return self_id_;
}
inline ::AFMsg::Ident* ReqPVPApplyMatch::release_self_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqPVPApplyMatch.self_id)
  clear_has_self_id();
  ::AFMsg::Ident* temp = self_id_;
  self_id_ = NULL;
  return temp;
}
inline void ReqPVPApplyMatch::set_allocated_self_id(::AFMsg::Ident* self_id) {
  delete self_id_;
  self_id_ = self_id;
  if (self_id) {
    set_has_self_id();
  } else {
    clear_has_self_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqPVPApplyMatch.self_id)
}

// required int32 nPVPMode = 2;
inline bool ReqPVPApplyMatch::has_npvpmode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqPVPApplyMatch::set_has_npvpmode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqPVPApplyMatch::clear_has_npvpmode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqPVPApplyMatch::clear_npvpmode() {
  npvpmode_ = 0;
  clear_has_npvpmode();
}
inline ::google::protobuf::int32 ReqPVPApplyMatch::npvpmode() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqPVPApplyMatch.nPVPMode)
  return npvpmode_;
}
inline void ReqPVPApplyMatch::set_npvpmode(::google::protobuf::int32 value) {
  set_has_npvpmode();
  npvpmode_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqPVPApplyMatch.nPVPMode)
}

// optional int64 score = 3;
inline bool ReqPVPApplyMatch::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqPVPApplyMatch::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqPVPApplyMatch::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqPVPApplyMatch::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::int64 ReqPVPApplyMatch::score() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqPVPApplyMatch.score)
  return score_;
}
inline void ReqPVPApplyMatch::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqPVPApplyMatch.score)
}

// required int32 ApplyType = 4;
inline bool ReqPVPApplyMatch::has_applytype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqPVPApplyMatch::set_has_applytype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqPVPApplyMatch::clear_has_applytype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqPVPApplyMatch::clear_applytype() {
  applytype_ = 0;
  clear_has_applytype();
}
inline ::google::protobuf::int32 ReqPVPApplyMatch::applytype() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqPVPApplyMatch.ApplyType)
  return applytype_;
}
inline void ReqPVPApplyMatch::set_applytype(::google::protobuf::int32 value) {
  set_has_applytype();
  applytype_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqPVPApplyMatch.ApplyType)
}

// optional .AFMsg.Ident team_id = 5;
inline bool ReqPVPApplyMatch::has_team_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqPVPApplyMatch::set_has_team_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqPVPApplyMatch::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqPVPApplyMatch::clear_team_id() {
  if (team_id_ != NULL) team_id_->::AFMsg::Ident::Clear();
  clear_has_team_id();
}
inline const ::AFMsg::Ident& ReqPVPApplyMatch::team_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqPVPApplyMatch.team_id)
  return team_id_ != NULL ? *team_id_ : *default_instance_->team_id_;
}
inline ::AFMsg::Ident* ReqPVPApplyMatch::mutable_team_id() {
  set_has_team_id();
  if (team_id_ == NULL) {
    team_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqPVPApplyMatch.team_id)
  return team_id_;
}
inline ::AFMsg::Ident* ReqPVPApplyMatch::release_team_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqPVPApplyMatch.team_id)
  clear_has_team_id();
  ::AFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
inline void ReqPVPApplyMatch::set_allocated_team_id(::AFMsg::Ident* team_id) {
  delete team_id_;
  team_id_ = team_id;
  if (team_id) {
    set_has_team_id();
  } else {
    clear_has_team_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqPVPApplyMatch.team_id)
}

// -------------------------------------------------------------------

// AckPVPApplyMatch

// required .AFMsg.Ident self_id = 1;
inline bool AckPVPApplyMatch::has_self_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckPVPApplyMatch::set_has_self_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckPVPApplyMatch::clear_has_self_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckPVPApplyMatch::clear_self_id() {
  if (self_id_ != NULL) self_id_->::AFMsg::Ident::Clear();
  clear_has_self_id();
}
inline const ::AFMsg::Ident& AckPVPApplyMatch::self_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckPVPApplyMatch.self_id)
  return self_id_ != NULL ? *self_id_ : *default_instance_->self_id_;
}
inline ::AFMsg::Ident* AckPVPApplyMatch::mutable_self_id() {
  set_has_self_id();
  if (self_id_ == NULL) {
    self_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckPVPApplyMatch.self_id)
  return self_id_;
}
inline ::AFMsg::Ident* AckPVPApplyMatch::release_self_id() {
  // @@protoc_insertion_point(field_release:AFMsg.AckPVPApplyMatch.self_id)
  clear_has_self_id();
  ::AFMsg::Ident* temp = self_id_;
  self_id_ = NULL;
  return temp;
}
inline void AckPVPApplyMatch::set_allocated_self_id(::AFMsg::Ident* self_id) {
  delete self_id_;
  self_id_ = self_id;
  if (self_id) {
    set_has_self_id();
  } else {
    clear_has_self_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckPVPApplyMatch.self_id)
}

// optional .AFMsg.PVPRoomInfo xRoomInfo = 2;
inline bool AckPVPApplyMatch::has_xroominfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckPVPApplyMatch::set_has_xroominfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckPVPApplyMatch::clear_has_xroominfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckPVPApplyMatch::clear_xroominfo() {
  if (xroominfo_ != NULL) xroominfo_->::AFMsg::PVPRoomInfo::Clear();
  clear_has_xroominfo();
}
inline const ::AFMsg::PVPRoomInfo& AckPVPApplyMatch::xroominfo() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckPVPApplyMatch.xRoomInfo)
  return xroominfo_ != NULL ? *xroominfo_ : *default_instance_->xroominfo_;
}
inline ::AFMsg::PVPRoomInfo* AckPVPApplyMatch::mutable_xroominfo() {
  set_has_xroominfo();
  if (xroominfo_ == NULL) {
    xroominfo_ = new ::AFMsg::PVPRoomInfo;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckPVPApplyMatch.xRoomInfo)
  return xroominfo_;
}
inline ::AFMsg::PVPRoomInfo* AckPVPApplyMatch::release_xroominfo() {
  // @@protoc_insertion_point(field_release:AFMsg.AckPVPApplyMatch.xRoomInfo)
  clear_has_xroominfo();
  ::AFMsg::PVPRoomInfo* temp = xroominfo_;
  xroominfo_ = NULL;
  return temp;
}
inline void AckPVPApplyMatch::set_allocated_xroominfo(::AFMsg::PVPRoomInfo* xroominfo) {
  delete xroominfo_;
  xroominfo_ = xroominfo;
  if (xroominfo) {
    set_has_xroominfo();
  } else {
    clear_has_xroominfo();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckPVPApplyMatch.xRoomInfo)
}

// required int32 ApplyType = 3;
inline bool AckPVPApplyMatch::has_applytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckPVPApplyMatch::set_has_applytype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckPVPApplyMatch::clear_has_applytype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckPVPApplyMatch::clear_applytype() {
  applytype_ = 0;
  clear_has_applytype();
}
inline ::google::protobuf::int32 AckPVPApplyMatch::applytype() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckPVPApplyMatch.ApplyType)
  return applytype_;
}
inline void AckPVPApplyMatch::set_applytype(::google::protobuf::int32 value) {
  set_has_applytype();
  applytype_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckPVPApplyMatch.ApplyType)
}

// required int32 nResult = 4;
inline bool AckPVPApplyMatch::has_nresult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckPVPApplyMatch::set_has_nresult() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckPVPApplyMatch::clear_has_nresult() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckPVPApplyMatch::clear_nresult() {
  nresult_ = 0;
  clear_has_nresult();
}
inline ::google::protobuf::int32 AckPVPApplyMatch::nresult() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckPVPApplyMatch.nResult)
  return nresult_;
}
inline void AckPVPApplyMatch::set_nresult(::google::protobuf::int32 value) {
  set_has_nresult();
  nresult_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckPVPApplyMatch.nResult)
}

// -------------------------------------------------------------------

// ReqCreatePVPEctype

// required .AFMsg.Ident self_id = 1;
inline bool ReqCreatePVPEctype::has_self_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqCreatePVPEctype::set_has_self_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqCreatePVPEctype::clear_has_self_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqCreatePVPEctype::clear_self_id() {
  if (self_id_ != NULL) self_id_->::AFMsg::Ident::Clear();
  clear_has_self_id();
}
inline const ::AFMsg::Ident& ReqCreatePVPEctype::self_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqCreatePVPEctype.self_id)
  return self_id_ != NULL ? *self_id_ : *default_instance_->self_id_;
}
inline ::AFMsg::Ident* ReqCreatePVPEctype::mutable_self_id() {
  set_has_self_id();
  if (self_id_ == NULL) {
    self_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqCreatePVPEctype.self_id)
  return self_id_;
}
inline ::AFMsg::Ident* ReqCreatePVPEctype::release_self_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqCreatePVPEctype.self_id)
  clear_has_self_id();
  ::AFMsg::Ident* temp = self_id_;
  self_id_ = NULL;
  return temp;
}
inline void ReqCreatePVPEctype::set_allocated_self_id(::AFMsg::Ident* self_id) {
  delete self_id_;
  self_id_ = self_id;
  if (self_id) {
    set_has_self_id();
  } else {
    clear_has_self_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqCreatePVPEctype.self_id)
}

// required .AFMsg.PVPRoomInfo xRoomInfo = 2;
inline bool ReqCreatePVPEctype::has_xroominfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqCreatePVPEctype::set_has_xroominfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqCreatePVPEctype::clear_has_xroominfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqCreatePVPEctype::clear_xroominfo() {
  if (xroominfo_ != NULL) xroominfo_->::AFMsg::PVPRoomInfo::Clear();
  clear_has_xroominfo();
}
inline const ::AFMsg::PVPRoomInfo& ReqCreatePVPEctype::xroominfo() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqCreatePVPEctype.xRoomInfo)
  return xroominfo_ != NULL ? *xroominfo_ : *default_instance_->xroominfo_;
}
inline ::AFMsg::PVPRoomInfo* ReqCreatePVPEctype::mutable_xroominfo() {
  set_has_xroominfo();
  if (xroominfo_ == NULL) {
    xroominfo_ = new ::AFMsg::PVPRoomInfo;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqCreatePVPEctype.xRoomInfo)
  return xroominfo_;
}
inline ::AFMsg::PVPRoomInfo* ReqCreatePVPEctype::release_xroominfo() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqCreatePVPEctype.xRoomInfo)
  clear_has_xroominfo();
  ::AFMsg::PVPRoomInfo* temp = xroominfo_;
  xroominfo_ = NULL;
  return temp;
}
inline void ReqCreatePVPEctype::set_allocated_xroominfo(::AFMsg::PVPRoomInfo* xroominfo) {
  delete xroominfo_;
  xroominfo_ = xroominfo;
  if (xroominfo) {
    set_has_xroominfo();
  } else {
    clear_has_xroominfo();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqCreatePVPEctype.xRoomInfo)
}

// -------------------------------------------------------------------

// AckCreatePVPEctype

// required .AFMsg.Ident self_id = 1;
inline bool AckCreatePVPEctype::has_self_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckCreatePVPEctype::set_has_self_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckCreatePVPEctype::clear_has_self_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckCreatePVPEctype::clear_self_id() {
  if (self_id_ != NULL) self_id_->::AFMsg::Ident::Clear();
  clear_has_self_id();
}
inline const ::AFMsg::Ident& AckCreatePVPEctype::self_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckCreatePVPEctype.self_id)
  return self_id_ != NULL ? *self_id_ : *default_instance_->self_id_;
}
inline ::AFMsg::Ident* AckCreatePVPEctype::mutable_self_id() {
  set_has_self_id();
  if (self_id_ == NULL) {
    self_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckCreatePVPEctype.self_id)
  return self_id_;
}
inline ::AFMsg::Ident* AckCreatePVPEctype::release_self_id() {
  // @@protoc_insertion_point(field_release:AFMsg.AckCreatePVPEctype.self_id)
  clear_has_self_id();
  ::AFMsg::Ident* temp = self_id_;
  self_id_ = NULL;
  return temp;
}
inline void AckCreatePVPEctype::set_allocated_self_id(::AFMsg::Ident* self_id) {
  delete self_id_;
  self_id_ = self_id;
  if (self_id) {
    set_has_self_id();
  } else {
    clear_has_self_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckCreatePVPEctype.self_id)
}

// required .AFMsg.PVPRoomInfo xRoomInfo = 2;
inline bool AckCreatePVPEctype::has_xroominfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckCreatePVPEctype::set_has_xroominfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckCreatePVPEctype::clear_has_xroominfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckCreatePVPEctype::clear_xroominfo() {
  if (xroominfo_ != NULL) xroominfo_->::AFMsg::PVPRoomInfo::Clear();
  clear_has_xroominfo();
}
inline const ::AFMsg::PVPRoomInfo& AckCreatePVPEctype::xroominfo() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckCreatePVPEctype.xRoomInfo)
  return xroominfo_ != NULL ? *xroominfo_ : *default_instance_->xroominfo_;
}
inline ::AFMsg::PVPRoomInfo* AckCreatePVPEctype::mutable_xroominfo() {
  set_has_xroominfo();
  if (xroominfo_ == NULL) {
    xroominfo_ = new ::AFMsg::PVPRoomInfo;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckCreatePVPEctype.xRoomInfo)
  return xroominfo_;
}
inline ::AFMsg::PVPRoomInfo* AckCreatePVPEctype::release_xroominfo() {
  // @@protoc_insertion_point(field_release:AFMsg.AckCreatePVPEctype.xRoomInfo)
  clear_has_xroominfo();
  ::AFMsg::PVPRoomInfo* temp = xroominfo_;
  xroominfo_ = NULL;
  return temp;
}
inline void AckCreatePVPEctype::set_allocated_xroominfo(::AFMsg::PVPRoomInfo* xroominfo) {
  delete xroominfo_;
  xroominfo_ = xroominfo;
  if (xroominfo) {
    set_has_xroominfo();
  } else {
    clear_has_xroominfo();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckCreatePVPEctype.xRoomInfo)
}

// required int32 ApplyType = 3;
inline bool AckCreatePVPEctype::has_applytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckCreatePVPEctype::set_has_applytype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckCreatePVPEctype::clear_has_applytype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckCreatePVPEctype::clear_applytype() {
  applytype_ = 0;
  clear_has_applytype();
}
inline ::google::protobuf::int32 AckCreatePVPEctype::applytype() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckCreatePVPEctype.ApplyType)
  return applytype_;
}
inline void AckCreatePVPEctype::set_applytype(::google::protobuf::int32 value) {
  set_has_applytype();
  applytype_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckCreatePVPEctype.ApplyType)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace AFMsg

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::AFMsg::ReqAckSynData_SynType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFMsg::ReqAckSynData_SynType>() {
  return ::AFMsg::ReqAckSynData_SynType_descriptor();
}
template <> struct is_proto_enum< ::AFMsg::ChatContainer_ContainerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFMsg::ChatContainer_ContainerType>() {
  return ::AFMsg::ChatContainer_ContainerType_descriptor();
}
template <> struct is_proto_enum< ::AFMsg::ReqAckPlayerChat_EGameChatType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFMsg::ReqAckPlayerChat_EGameChatType>() {
  return ::AFMsg::ReqAckPlayerChat_EGameChatType_descriptor();
}
template <> struct is_proto_enum< ::AFMsg::EffectData_EResultType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFMsg::EffectData_EResultType>() {
  return ::AFMsg::EffectData_EResultType_descriptor();
}
template <> struct is_proto_enum< ::AFMsg::ReqAckSwapScene_EGameSwapType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFMsg::ReqAckSwapScene_EGameSwapType>() {
  return ::AFMsg::ReqAckSwapScene_EGameSwapType_descriptor();
}
template <> struct is_proto_enum< ::AFMsg::ReqAckJoinActivity_EGameActivityType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFMsg::ReqAckJoinActivity_EGameActivityType>() {
  return ::AFMsg::ReqAckJoinActivity_EGameActivityType_descriptor();
}
template <> struct is_proto_enum< ::AFMsg::ReqAckJoinActivity_EGameActivitySubType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFMsg::ReqAckJoinActivity_EGameActivitySubType>() {
  return ::AFMsg::ReqAckJoinActivity_EGameActivitySubType_descriptor();
}
template <> struct is_proto_enum< ::AFMsg::ReqAckOprGuildMember_EGGuildMemberOprType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFMsg::ReqAckOprGuildMember_EGGuildMemberOprType>() {
  return ::AFMsg::ReqAckOprGuildMember_EGGuildMemberOprType_descriptor();
}
template <> struct is_proto_enum< ::AFMsg::ReqAckOprGuild_EGGuildOprType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFMsg::ReqAckOprGuild_EGGuildOprType>() {
  return ::AFMsg::ReqAckOprGuild_EGGuildOprType_descriptor();
}
template <> struct is_proto_enum< ::AFMsg::ChatInfo_EChatType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFMsg::ChatInfo_EChatType>() {
  return ::AFMsg::ChatInfo_EChatType_descriptor();
}
template <> struct is_proto_enum< ::AFMsg::ReqAckOprTeamMember_EGTeamMemberOprType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFMsg::ReqAckOprTeamMember_EGTeamMemberOprType>() {
  return ::AFMsg::ReqAckOprTeamMember_EGTeamMemberOprType_descriptor();
}
template <> struct is_proto_enum< ::AFMsg::ReqPVPApplyMatch_EApplyType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AFMsg::ReqPVPApplyMatch_EApplyType>() {
  return ::AFMsg::ReqPVPApplyMatch_EApplyType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AFMsgShare_2eproto__INCLUDED
