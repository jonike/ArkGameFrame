// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AFMsgShare.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AFMsgShare.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace AFMsg {

namespace {

const ::google::protobuf::Descriptor* ReqEnterGameServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqEnterGameServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqHeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqHeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLeaveGameServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLeaveGameServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerEntryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerEntryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPlayerEntryList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPlayerEntryList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPlayerLeaveList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPlayerLeaveList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckSynData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckSynData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqAckSynData_SynType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqAckPlayerMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckPlayerMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatContainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatContainer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChatContainer_ContainerType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqAckPlayerChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckPlayerChat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqAckPlayerChat_EGameChatType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EffectData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EffectData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EffectData_EResultType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqAckUseSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckUseSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckUseItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckUseItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckSwapScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckSwapScene_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqAckSwapScene_EGameSwapType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ItemStruct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemStruct_reflection_ = NULL;
const ::google::protobuf::Descriptor* CurrencyStruct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CurrencyStruct_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckEndBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckEndBattle_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqPickDropItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqPickDropItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAcceptTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAcceptTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCompeleteTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCompeleteTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckJoinActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckJoinActivity_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqAckJoinActivity_EGameActivityType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqAckJoinActivity_EGameActivitySubType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqAckSearchOppnent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckSearchOppnent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckBattleOppnent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckBattleOppnent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckCreateGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckCreateGuild_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSearchGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSearchGuild_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckSearchGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckSearchGuild_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckSearchGuild_SearchGuildObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckSearchGuild_SearchGuildObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckJoinGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckJoinGuild_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckLeaveGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckLeaveGuild_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckOprGuildMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckOprGuildMember_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqAckOprGuildMember_EGGuildMemberOprType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqAckOprGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckOprGuild_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqAckOprGuild_EGGuildOprType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqAckDonateGuildItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckDonateGuildItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGuildEctypeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGuildEctypeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildEctypeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildEctypeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGuildEctypeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGuildEctypeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGuildEctypeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGuildEctypeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqEnterGuildEctype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqEnterGuildEctype_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChatInfo_EChatType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqAckCreateChatGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckCreateChatGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckjoinChatGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckjoinChatGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckQuitChatGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckQuitChatGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSubscriptionChatGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSubscriptionChatGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCancelSubscriptionChatGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCancelSubscriptionChatGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqIntensifylevelToEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqIntensifylevelToEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckIntensifylevelToEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckIntensifylevelToEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqHoleToEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqHoleToEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckHoleToEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckHoleToEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqInlaystoneToEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqInlaystoneToEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckInlaystoneToEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckInlaystoneToEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqElementlevelToEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqElementlevelToEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckElementlevelToEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckElementlevelToEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSetFightHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSetFightHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqWearEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqWearEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* TakeOffEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TakeOffEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqMiningTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMiningTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSendMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSendMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSwitchServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSwitchServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckSwitchServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckSwitchServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeammemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeammemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckCreateTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckCreateTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckJoinTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckJoinTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckLeaveTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckLeaveTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqAckOprTeamMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckOprTeamMember_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqAckOprTeamMember_EGTeamMemberOprType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqAckInviteTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqAckInviteTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqTeamEnterEctype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqTeamEnterEctype_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckTeamEnterEctype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckTeamEnterEctype_reflection_ = NULL;
const ::google::protobuf::Descriptor* GridGuildBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GridGuildBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBigMapGridInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBigMapGridInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BigMapGridBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BigMapGridBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BigMapLeaveMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BigMapLeaveMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* BigMapWarHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BigMapWarHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* BigMapGridDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BigMapGridDetailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBigMapGridInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBigMapGridInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBigMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBigMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBigMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBigMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqHoldMapGrid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqHoldMapGrid_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckHoldMapGrid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckHoldMapGrid_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLeaveMapMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLeaveMapMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckLeaveMapMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckLeaveMapMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGetMapAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGetMapAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGetMapAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGetMapAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqMapHunting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMapHunting_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckMapHunting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckMapHunting_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqMapKingWar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMapKingWar_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckMapKingWar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckMapKingWar_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVPRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVPRoomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqPVPApplyMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqPVPApplyMatch_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqPVPApplyMatch_EApplyType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AckPVPApplyMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPVPApplyMatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCreatePVPEctype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCreatePVPEctype_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckCreatePVPEctype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckCreatePVPEctype_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AFMsgShare_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_AFMsgShare_2eproto() {
  protobuf_AddDesc_AFMsgShare_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AFMsgShare.proto");
  GOOGLE_CHECK(file != NULL);
  ReqEnterGameServer_descriptor_ = file->message_type(0);
  static const int ReqEnterGameServer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGameServer, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGameServer, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGameServer, game_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGameServer, name_),
  };
  ReqEnterGameServer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqEnterGameServer_descriptor_,
      ReqEnterGameServer::default_instance_,
      ReqEnterGameServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGameServer, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqEnterGameServer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGameServer, _internal_metadata_),
      -1);
  ReqHeartBeat_descriptor_ = file->message_type(1);
  static const int ReqHeartBeat_offsets_[1] = {
  };
  ReqHeartBeat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqHeartBeat_descriptor_,
      ReqHeartBeat::default_instance_,
      ReqHeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeartBeat, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqHeartBeat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHeartBeat, _internal_metadata_),
      -1);
  ReqLeaveGameServer_descriptor_ = file->message_type(2);
  static const int ReqLeaveGameServer_offsets_[1] = {
  };
  ReqLeaveGameServer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqLeaveGameServer_descriptor_,
      ReqLeaveGameServer::default_instance_,
      ReqLeaveGameServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaveGameServer, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqLeaveGameServer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaveGameServer, _internal_metadata_),
      -1);
  PlayerEntryInfo_descriptor_ = file->message_type(3);
  static const int PlayerEntryInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, object_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, career_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, player_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, config_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, class_id_),
  };
  PlayerEntryInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerEntryInfo_descriptor_,
      PlayerEntryInfo::default_instance_,
      PlayerEntryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlayerEntryInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEntryInfo, _internal_metadata_),
      -1);
  AckPlayerEntryList_descriptor_ = file->message_type(4);
  static const int AckPlayerEntryList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerEntryList, object_list_),
  };
  AckPlayerEntryList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AckPlayerEntryList_descriptor_,
      AckPlayerEntryList::default_instance_,
      AckPlayerEntryList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerEntryList, _has_bits_[0]),
      -1,
      -1,
      sizeof(AckPlayerEntryList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerEntryList, _internal_metadata_),
      -1);
  AckPlayerLeaveList_descriptor_ = file->message_type(5);
  static const int AckPlayerLeaveList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerLeaveList, object_list_),
  };
  AckPlayerLeaveList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AckPlayerLeaveList_descriptor_,
      AckPlayerLeaveList::default_instance_,
      AckPlayerLeaveList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerLeaveList, _has_bits_[0]),
      -1,
      -1,
      sizeof(AckPlayerLeaveList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerLeaveList, _internal_metadata_),
      -1);
  ReqAckSynData_descriptor_ = file->message_type(6);
  static const int ReqAckSynData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSynData, syser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSynData, object_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSynData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSynData, syn_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSynData, msg_id_),
  };
  ReqAckSynData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAckSynData_descriptor_,
      ReqAckSynData::default_instance_,
      ReqAckSynData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSynData, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqAckSynData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSynData, _internal_metadata_),
      -1);
  ReqAckSynData_SynType_descriptor_ = ReqAckSynData_descriptor_->enum_type(0);
  ReqAckPlayerMove_descriptor_ = file->message_type(7);
  static const int ReqAckPlayerMove_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerMove, mover_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerMove, movetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerMove, target_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerMove, source_pos_),
  };
  ReqAckPlayerMove_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAckPlayerMove_descriptor_,
      ReqAckPlayerMove::default_instance_,
      ReqAckPlayerMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerMove, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqAckPlayerMove),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerMove, _internal_metadata_),
      -1);
  ChatContainer_descriptor_ = file->message_type(8);
  static const int ChatContainer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatContainer, containertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatContainer, data_info_),
  };
  ChatContainer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChatContainer_descriptor_,
      ChatContainer::default_instance_,
      ChatContainer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatContainer, _has_bits_[0]),
      -1,
      -1,
      sizeof(ChatContainer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatContainer, _internal_metadata_),
      -1);
  ChatContainer_ContainerType_descriptor_ = ChatContainer_descriptor_->enum_type(0);
  ReqAckPlayerChat_descriptor_ = file->message_type(9);
  static const int ReqAckPlayerChat_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerChat, chat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerChat, chat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerChat, chat_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerChat, chat_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerChat, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerChat, container_data_),
  };
  ReqAckPlayerChat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAckPlayerChat_descriptor_,
      ReqAckPlayerChat::default_instance_,
      ReqAckPlayerChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerChat, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqAckPlayerChat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckPlayerChat, _internal_metadata_),
      -1);
  ReqAckPlayerChat_EGameChatType_descriptor_ = ReqAckPlayerChat_descriptor_->enum_type(0);
  EffectData_descriptor_ = file->message_type(10);
  static const int EffectData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectData, effect_ident_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectData, effect_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectData, effect_rlt_),
  };
  EffectData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EffectData_descriptor_,
      EffectData::default_instance_,
      EffectData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectData, _has_bits_[0]),
      -1,
      -1,
      sizeof(EffectData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectData, _internal_metadata_),
      -1);
  EffectData_EResultType_descriptor_ = EffectData_descriptor_->enum_type(0);
  ReqAckUseSkill_descriptor_ = file->message_type(11);
  static const int ReqAckUseSkill_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseSkill, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseSkill, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseSkill, now_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseSkill, tar_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseSkill, use_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseSkill, effect_data_),
  };
  ReqAckUseSkill_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAckUseSkill_descriptor_,
      ReqAckUseSkill::default_instance_,
      ReqAckUseSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseSkill, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqAckUseSkill),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseSkill, _internal_metadata_),
      -1);
  ReqAckUseItem_descriptor_ = file->message_type(12);
  static const int ReqAckUseItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseItem, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseItem, item_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseItem, effect_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseItem, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseItem, targetid_),
  };
  ReqAckUseItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAckUseItem_descriptor_,
      ReqAckUseItem::default_instance_,
      ReqAckUseItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseItem, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqAckUseItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckUseItem, _internal_metadata_),
      -1);
  ReqAckSwapScene_descriptor_ = file->message_type(13);
  static const int ReqAckSwapScene_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSwapScene, transfer_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSwapScene, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSwapScene, line_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSwapScene, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSwapScene, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSwapScene, z_),
  };
  ReqAckSwapScene_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAckSwapScene_descriptor_,
      ReqAckSwapScene::default_instance_,
      ReqAckSwapScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSwapScene, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqAckSwapScene),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSwapScene, _internal_metadata_),
      -1);
  ReqAckSwapScene_EGameSwapType_descriptor_ = ReqAckSwapScene_descriptor_->enum_type(0);
  ItemStruct_descriptor_ = file->message_type(14);
  static const int ItemStruct_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemStruct, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemStruct, item_count_),
  };
  ItemStruct_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ItemStruct_descriptor_,
      ItemStruct::default_instance_,
      ItemStruct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemStruct, _has_bits_[0]),
      -1,
      -1,
      sizeof(ItemStruct),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemStruct, _internal_metadata_),
      -1);
  CurrencyStruct_descriptor_ = file->message_type(15);
  static const int CurrencyStruct_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyStruct, currency_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyStruct, currency_count_),
  };
  CurrencyStruct_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CurrencyStruct_descriptor_,
      CurrencyStruct::default_instance_,
      CurrencyStruct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyStruct, _has_bits_[0]),
      -1,
      -1,
      sizeof(CurrencyStruct),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CurrencyStruct, _internal_metadata_),
      -1);
  ReqAckEndBattle_descriptor_ = file->message_type(16);
  static const int ReqAckEndBattle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckEndBattle, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckEndBattle, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckEndBattle, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckEndBattle, item_list_),
  };
  ReqAckEndBattle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAckEndBattle_descriptor_,
      ReqAckEndBattle::default_instance_,
      ReqAckEndBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckEndBattle, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqAckEndBattle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckEndBattle, _internal_metadata_),
      -1);
  ReqPickDropItem_descriptor_ = file->message_type(17);
  static const int ReqPickDropItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPickDropItem, item_guid_),
  };
  ReqPickDropItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqPickDropItem_descriptor_,
      ReqPickDropItem::default_instance_,
      ReqPickDropItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPickDropItem, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqPickDropItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPickDropItem, _internal_metadata_),
      -1);
  ReqAcceptTask_descriptor_ = file->message_type(18);
  static const int ReqAcceptTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAcceptTask, task_id_),
  };
  ReqAcceptTask_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAcceptTask_descriptor_,
      ReqAcceptTask::default_instance_,
      ReqAcceptTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAcceptTask, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqAcceptTask),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAcceptTask, _internal_metadata_),
      -1);
  ReqCompeleteTask_descriptor_ = file->message_type(19);
  static const int ReqCompeleteTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCompeleteTask, task_id_),
  };
  ReqCompeleteTask_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqCompeleteTask_descriptor_,
      ReqCompeleteTask::default_instance_,
      ReqCompeleteTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCompeleteTask, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqCompeleteTask),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCompeleteTask, _internal_metadata_),
      -1);
  ReqAckJoinActivity_descriptor_ = file->message_type(20);
  static const int ReqAckJoinActivity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinActivity, activity_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinActivity, sub_activity_type_),
  };
  ReqAckJoinActivity_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAckJoinActivity_descriptor_,
      ReqAckJoinActivity::default_instance_,
      ReqAckJoinActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinActivity, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqAckJoinActivity),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinActivity, _internal_metadata_),
      -1);
  ReqAckJoinActivity_EGameActivityType_descriptor_ = ReqAckJoinActivity_descriptor_->enum_type(0);
  ReqAckJoinActivity_EGameActivitySubType_descriptor_ = ReqAckJoinActivity_descriptor_->enum_type(1);
  ReqAckSearchOppnent_descriptor_ = file->message_type(21);
  static const int ReqAckSearchOppnent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSearchOppnent, search_type_),
  };
  ReqAckSearchOppnent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAckSearchOppnent_descriptor_,
      ReqAckSearchOppnent::default_instance_,
      ReqAckSearchOppnent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSearchOppnent, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqAckSearchOppnent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckSearchOppnent, _internal_metadata_),
      -1);
  ReqAckBattleOppnent_descriptor_ = file->message_type(22);
  static const int ReqAckBattleOppnent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckBattleOppnent, battle_type_),
  };
  ReqAckBattleOppnent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAckBattleOppnent_descriptor_,
      ReqAckBattleOppnent::default_instance_,
      ReqAckBattleOppnent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckBattleOppnent, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqAckBattleOppnent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckBattleOppnent, _internal_metadata_),
      -1);
  ReqAckCreateGuild_descriptor_ = file->message_type(23);
  static const int ReqAckCreateGuild_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateGuild, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateGuild, guild_name_),
  };
  ReqAckCreateGuild_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAckCreateGuild_descriptor_,
      ReqAckCreateGuild::default_instance_,
      ReqAckCreateGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateGuild, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqAckCreateGuild),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateGuild, _internal_metadata_),
      -1);
  ReqSearchGuild_descriptor_ = file->message_type(24);
  static const int ReqSearchGuild_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSearchGuild, guild_name_),
  };
  ReqSearchGuild_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqSearchGuild_descriptor_,
      ReqSearchGuild::default_instance_,
      ReqSearchGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSearchGuild, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqSearchGuild),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSearchGuild, _internal_metadata_),
      -1);
  AckSearchGuild_descriptor_ = file->message_type(25);
  static const int AckSearchGuild_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSearchGuild, guild_list_),
  };
  AckSearchGuild_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AckSearchGuild_descriptor_,
      AckSearchGuild::default_instance_,
      AckSearchGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSearchGuild, _has_bits_[0]),
      -1,
      -1,
      sizeof(AckSearchGuild),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSearchGuild, _internal_metadata_),
      -1);
  AckSearchGuild_SearchGuildObject_descriptor_ = AckSearchGuild_descriptor_->nested_type(0);
  static const int AckSearchGuild_SearchGuildObject_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSearchGuild_SearchGuildObject, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSearchGuild_SearchGuildObject, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSearchGuild_SearchGuildObject, guild_icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSearchGuild_SearchGuildObject, guild_member_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSearchGuild_SearchGuildObject, guild_member_max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSearchGuild_SearchGuildObject, guild_honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSearchGuild_SearchGuildObject, guild_rank_),
  };
  AckSearchGuild_SearchGuildObject_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AckSearchGuild_SearchGuildObject_descriptor_,
      AckSearchGuild_SearchGuildObject::default_instance_,
      AckSearchGuild_SearchGuildObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSearchGuild_SearchGuildObject, _has_bits_[0]),
      -1,
      -1,
      sizeof(AckSearchGuild_SearchGuildObject),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSearchGuild_SearchGuildObject, _internal_metadata_),
      -1);
  ReqAckJoinGuild_descriptor_ = file->message_type(26);
  static const int ReqAckJoinGuild_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinGuild, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinGuild, guild_name_),
  };
  ReqAckJoinGuild_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAckJoinGuild_descriptor_,
      ReqAckJoinGuild::default_instance_,
      ReqAckJoinGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinGuild, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqAckJoinGuild),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinGuild, _internal_metadata_),
      -1);
  ReqAckLeaveGuild_descriptor_ = file->message_type(27);
  static const int ReqAckLeaveGuild_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckLeaveGuild, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckLeaveGuild, guild_name_),
  };
  ReqAckLeaveGuild_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAckLeaveGuild_descriptor_,
      ReqAckLeaveGuild::default_instance_,
      ReqAckLeaveGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckLeaveGuild, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqAckLeaveGuild),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckLeaveGuild, _internal_metadata_),
      -1);
  ReqAckOprGuildMember_descriptor_ = file->message_type(28);
  static const int ReqAckOprGuildMember_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprGuildMember, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprGuildMember, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprGuildMember, type_),
  };
  ReqAckOprGuildMember_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAckOprGuildMember_descriptor_,
      ReqAckOprGuildMember::default_instance_,
      ReqAckOprGuildMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprGuildMember, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqAckOprGuildMember),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprGuildMember, _internal_metadata_),
      -1);
  ReqAckOprGuildMember_EGGuildMemberOprType_descriptor_ = ReqAckOprGuildMember_descriptor_->enum_type(0);
  ReqAckOprGuild_descriptor_ = file->message_type(29);
  static const int ReqAckOprGuild_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprGuild, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprGuild, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprGuild, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprGuild, recruit_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprGuild, ad_data_),
  };
  ReqAckOprGuild_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAckOprGuild_descriptor_,
      ReqAckOprGuild::default_instance_,
      ReqAckOprGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprGuild, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqAckOprGuild),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprGuild, _internal_metadata_),
      -1);
  ReqAckOprGuild_EGGuildOprType_descriptor_ = ReqAckOprGuild_descriptor_->enum_type(0);
  ReqAckDonateGuildItem_descriptor_ = file->message_type(30);
  static const int ReqAckDonateGuildItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckDonateGuildItem, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckDonateGuildItem, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckDonateGuildItem, item_list_),
  };
  ReqAckDonateGuildItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAckDonateGuildItem_descriptor_,
      ReqAckDonateGuildItem::default_instance_,
      ReqAckDonateGuildItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckDonateGuildItem, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqAckDonateGuildItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckDonateGuildItem, _internal_metadata_),
      -1);
  ReqGuildEctypeInfo_descriptor_ = file->message_type(31);
  static const int ReqGuildEctypeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGuildEctypeInfo, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGuildEctypeInfo, guild_id_),
  };
  ReqGuildEctypeInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqGuildEctypeInfo_descriptor_,
      ReqGuildEctypeInfo::default_instance_,
      ReqGuildEctypeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGuildEctypeInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqGuildEctypeInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGuildEctypeInfo, _internal_metadata_),
      -1);
  GuildEctypeInfo_descriptor_ = file->message_type(32);
  static const int GuildEctypeInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEctypeInfo, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEctypeInfo, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEctypeInfo, ectype_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEctypeInfo, ectype_group_),
  };
  GuildEctypeInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GuildEctypeInfo_descriptor_,
      GuildEctypeInfo::default_instance_,
      GuildEctypeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEctypeInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(GuildEctypeInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEctypeInfo, _internal_metadata_),
      -1);
  AckGuildEctypeInfo_descriptor_ = file->message_type(33);
  static const int AckGuildEctypeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGuildEctypeInfo, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGuildEctypeInfo, xectypeinfo_),
  };
  AckGuildEctypeInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AckGuildEctypeInfo_descriptor_,
      AckGuildEctypeInfo::default_instance_,
      AckGuildEctypeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGuildEctypeInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(AckGuildEctypeInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGuildEctypeInfo, _internal_metadata_),
      -1);
  SetGuildEctypeInfo_descriptor_ = file->message_type(34);
  static const int SetGuildEctypeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildEctypeInfo, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildEctypeInfo, xectypeinfo_),
  };
  SetGuildEctypeInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetGuildEctypeInfo_descriptor_,
      SetGuildEctypeInfo::default_instance_,
      SetGuildEctypeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildEctypeInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(SetGuildEctypeInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildEctypeInfo, _internal_metadata_),
      -1);
  ReqEnterGuildEctype_descriptor_ = file->message_type(35);
  static const int ReqEnterGuildEctype_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGuildEctype, selfid_),
  };
  ReqEnterGuildEctype_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqEnterGuildEctype_descriptor_,
      ReqEnterGuildEctype::default_instance_,
      ReqEnterGuildEctype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGuildEctype, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqEnterGuildEctype),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterGuildEctype, _internal_metadata_),
      -1);
  ChatInfo_descriptor_ = file->message_type(36);
  static const int ChatInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, chat_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, chat_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, chat_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, addtional_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, send_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, send_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, send_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, recvier_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, guid_name_),
  };
  ChatInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChatInfo_descriptor_,
      ChatInfo::default_instance_,
      ChatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(ChatInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatInfo, _internal_metadata_),
      -1);
  ChatInfo_EChatType_descriptor_ = ChatInfo_descriptor_->enum_type(0);
  ReqAckCreateChatGroup_descriptor_ = file->message_type(37);
  static const int ReqAckCreateChatGroup_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateChatGroup, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateChatGroup, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateChatGroup, xchatgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateChatGroup, chattype_),
  };
  ReqAckCreateChatGroup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAckCreateChatGroup_descriptor_,
      ReqAckCreateChatGroup::default_instance_,
      ReqAckCreateChatGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateChatGroup, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqAckCreateChatGroup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateChatGroup, _internal_metadata_),
      -1);
  ReqAckjoinChatGroup_descriptor_ = file->message_type(38);
  static const int ReqAckjoinChatGroup_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckjoinChatGroup, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckjoinChatGroup, xchatgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckjoinChatGroup, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckjoinChatGroup, chattype_),
  };
  ReqAckjoinChatGroup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAckjoinChatGroup_descriptor_,
      ReqAckjoinChatGroup::default_instance_,
      ReqAckjoinChatGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckjoinChatGroup, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqAckjoinChatGroup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckjoinChatGroup, _internal_metadata_),
      -1);
  ReqAckQuitChatGroup_descriptor_ = file->message_type(39);
  static const int ReqAckQuitChatGroup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckQuitChatGroup, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckQuitChatGroup, xchatgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckQuitChatGroup, result_),
  };
  ReqAckQuitChatGroup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAckQuitChatGroup_descriptor_,
      ReqAckQuitChatGroup::default_instance_,
      ReqAckQuitChatGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckQuitChatGroup, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqAckQuitChatGroup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckQuitChatGroup, _internal_metadata_),
      -1);
  ReqSubscriptionChatGroup_descriptor_ = file->message_type(40);
  static const int ReqSubscriptionChatGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubscriptionChatGroup, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubscriptionChatGroup, xchatgroupid_),
  };
  ReqSubscriptionChatGroup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqSubscriptionChatGroup_descriptor_,
      ReqSubscriptionChatGroup::default_instance_,
      ReqSubscriptionChatGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubscriptionChatGroup, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqSubscriptionChatGroup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSubscriptionChatGroup, _internal_metadata_),
      -1);
  ReqCancelSubscriptionChatGroup_descriptor_ = file->message_type(41);
  static const int ReqCancelSubscriptionChatGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCancelSubscriptionChatGroup, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCancelSubscriptionChatGroup, xchatgroupid_),
  };
  ReqCancelSubscriptionChatGroup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqCancelSubscriptionChatGroup_descriptor_,
      ReqCancelSubscriptionChatGroup::default_instance_,
      ReqCancelSubscriptionChatGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCancelSubscriptionChatGroup, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqCancelSubscriptionChatGroup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCancelSubscriptionChatGroup, _internal_metadata_),
      -1);
  ReqIntensifylevelToEquip_descriptor_ = file->message_type(42);
  static const int ReqIntensifylevelToEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqIntensifylevelToEquip, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqIntensifylevelToEquip, equipid_),
  };
  ReqIntensifylevelToEquip_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqIntensifylevelToEquip_descriptor_,
      ReqIntensifylevelToEquip::default_instance_,
      ReqIntensifylevelToEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqIntensifylevelToEquip, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqIntensifylevelToEquip),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqIntensifylevelToEquip, _internal_metadata_),
      -1);
  AckIntensifylevelToEquip_descriptor_ = file->message_type(43);
  static const int AckIntensifylevelToEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIntensifylevelToEquip, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIntensifylevelToEquip, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIntensifylevelToEquip, result_),
  };
  AckIntensifylevelToEquip_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AckIntensifylevelToEquip_descriptor_,
      AckIntensifylevelToEquip::default_instance_,
      AckIntensifylevelToEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIntensifylevelToEquip, _has_bits_[0]),
      -1,
      -1,
      sizeof(AckIntensifylevelToEquip),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckIntensifylevelToEquip, _internal_metadata_),
      -1);
  ReqHoleToEquip_descriptor_ = file->message_type(44);
  static const int ReqHoleToEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHoleToEquip, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHoleToEquip, equipid_),
  };
  ReqHoleToEquip_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqHoleToEquip_descriptor_,
      ReqHoleToEquip::default_instance_,
      ReqHoleToEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHoleToEquip, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqHoleToEquip),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHoleToEquip, _internal_metadata_),
      -1);
  AckHoleToEquip_descriptor_ = file->message_type(45);
  static const int AckHoleToEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHoleToEquip, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHoleToEquip, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHoleToEquip, result_),
  };
  AckHoleToEquip_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AckHoleToEquip_descriptor_,
      AckHoleToEquip::default_instance_,
      AckHoleToEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHoleToEquip, _has_bits_[0]),
      -1,
      -1,
      sizeof(AckHoleToEquip),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHoleToEquip, _internal_metadata_),
      -1);
  ReqInlaystoneToEquip_descriptor_ = file->message_type(46);
  static const int ReqInlaystoneToEquip_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInlaystoneToEquip, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInlaystoneToEquip, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInlaystoneToEquip, stoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInlaystoneToEquip, hole_index_),
  };
  ReqInlaystoneToEquip_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqInlaystoneToEquip_descriptor_,
      ReqInlaystoneToEquip::default_instance_,
      ReqInlaystoneToEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInlaystoneToEquip, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqInlaystoneToEquip),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInlaystoneToEquip, _internal_metadata_),
      -1);
  AckInlaystoneToEquip_descriptor_ = file->message_type(47);
  static const int AckInlaystoneToEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckInlaystoneToEquip, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckInlaystoneToEquip, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckInlaystoneToEquip, result_),
  };
  AckInlaystoneToEquip_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AckInlaystoneToEquip_descriptor_,
      AckInlaystoneToEquip::default_instance_,
      AckInlaystoneToEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckInlaystoneToEquip, _has_bits_[0]),
      -1,
      -1,
      sizeof(AckInlaystoneToEquip),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckInlaystoneToEquip, _internal_metadata_),
      -1);
  ReqElementlevelToEquip_descriptor_ = file->message_type(48);
  static const int ReqElementlevelToEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqElementlevelToEquip, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqElementlevelToEquip, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqElementlevelToEquip, eelementtype_),
  };
  ReqElementlevelToEquip_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqElementlevelToEquip_descriptor_,
      ReqElementlevelToEquip::default_instance_,
      ReqElementlevelToEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqElementlevelToEquip, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqElementlevelToEquip),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqElementlevelToEquip, _internal_metadata_),
      -1);
  AckElementlevelToEquip_descriptor_ = file->message_type(49);
  static const int AckElementlevelToEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckElementlevelToEquip, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckElementlevelToEquip, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckElementlevelToEquip, result_),
  };
  AckElementlevelToEquip_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AckElementlevelToEquip_descriptor_,
      AckElementlevelToEquip::default_instance_,
      AckElementlevelToEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckElementlevelToEquip, _has_bits_[0]),
      -1,
      -1,
      sizeof(AckElementlevelToEquip),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckElementlevelToEquip, _internal_metadata_),
      -1);
  ReqSetFightHero_descriptor_ = file->message_type(50);
  static const int ReqSetFightHero_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSetFightHero, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSetFightHero, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSetFightHero, fightpos_),
  };
  ReqSetFightHero_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqSetFightHero_descriptor_,
      ReqSetFightHero::default_instance_,
      ReqSetFightHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSetFightHero, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqSetFightHero),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSetFightHero, _internal_metadata_),
      -1);
  ReqWearEquip_descriptor_ = file->message_type(51);
  static const int ReqWearEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWearEquip, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWearEquip, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWearEquip, targetid_),
  };
  ReqWearEquip_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqWearEquip_descriptor_,
      ReqWearEquip::default_instance_,
      ReqWearEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWearEquip, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqWearEquip),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWearEquip, _internal_metadata_),
      -1);
  TakeOffEquip_descriptor_ = file->message_type(52);
  static const int TakeOffEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeOffEquip, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeOffEquip, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeOffEquip, targetid_),
  };
  TakeOffEquip_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TakeOffEquip_descriptor_,
      TakeOffEquip::default_instance_,
      TakeOffEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeOffEquip, _has_bits_[0]),
      -1,
      -1,
      sizeof(TakeOffEquip),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeOffEquip, _internal_metadata_),
      -1);
  ReqMiningTitle_descriptor_ = file->message_type(53);
  static const int ReqMiningTitle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMiningTitle, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMiningTitle, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMiningTitle, y_),
  };
  ReqMiningTitle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqMiningTitle_descriptor_,
      ReqMiningTitle::default_instance_,
      ReqMiningTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMiningTitle, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqMiningTitle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMiningTitle, _internal_metadata_),
      -1);
  ReqSendMail_descriptor_ = file->message_type(54);
  static const int ReqSendMail_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSendMail, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSendMail, reciever_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSendMail, item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSendMail, currency_list_),
  };
  ReqSendMail_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqSendMail_descriptor_,
      ReqSendMail::default_instance_,
      ReqSendMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSendMail, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqSendMail),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSendMail, _internal_metadata_),
      -1);
  ReqSwitchServer_descriptor_ = file->message_type(55);
  static const int ReqSwitchServer_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSwitchServer, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSwitchServer, self_serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSwitchServer, target_serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSwitchServer, gate_serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSwitchServer, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSwitchServer, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSwitchServer, groupid_),
  };
  ReqSwitchServer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqSwitchServer_descriptor_,
      ReqSwitchServer::default_instance_,
      ReqSwitchServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSwitchServer, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqSwitchServer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSwitchServer, _internal_metadata_),
      -1);
  AckSwitchServer_descriptor_ = file->message_type(56);
  static const int AckSwitchServer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSwitchServer, selfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSwitchServer, self_serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSwitchServer, target_serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSwitchServer, gate_serverid_),
  };
  AckSwitchServer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AckSwitchServer_descriptor_,
      AckSwitchServer::default_instance_,
      AckSwitchServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSwitchServer, _has_bits_[0]),
      -1,
      -1,
      sizeof(AckSwitchServer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSwitchServer, _internal_metadata_),
      -1);
  TeamInfo_descriptor_ = file->message_type(57);
  static const int TeamInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, captain_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, teammemberinfo_),
  };
  TeamInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TeamInfo_descriptor_,
      TeamInfo::default_instance_,
      TeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(TeamInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, _internal_metadata_),
      -1);
  TeammemberInfo_descriptor_ = file->message_type(58);
  static const int TeammemberInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, nlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, headicon_),
  };
  TeammemberInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TeammemberInfo_descriptor_,
      TeammemberInfo::default_instance_,
      TeammemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(TeammemberInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, _internal_metadata_),
      -1);
  ReqAckCreateTeam_descriptor_ = file->message_type(59);
  static const int ReqAckCreateTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateTeam, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateTeam, xteaminfo_),
  };
  ReqAckCreateTeam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAckCreateTeam_descriptor_,
      ReqAckCreateTeam::default_instance_,
      ReqAckCreateTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateTeam, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqAckCreateTeam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckCreateTeam, _internal_metadata_),
      -1);
  ReqAckJoinTeam_descriptor_ = file->message_type(60);
  static const int ReqAckJoinTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinTeam, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinTeam, xteaminfo_),
  };
  ReqAckJoinTeam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAckJoinTeam_descriptor_,
      ReqAckJoinTeam::default_instance_,
      ReqAckJoinTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinTeam, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqAckJoinTeam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckJoinTeam, _internal_metadata_),
      -1);
  ReqAckLeaveTeam_descriptor_ = file->message_type(61);
  static const int ReqAckLeaveTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckLeaveTeam, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckLeaveTeam, xteaminfo_),
  };
  ReqAckLeaveTeam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAckLeaveTeam_descriptor_,
      ReqAckLeaveTeam::default_instance_,
      ReqAckLeaveTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckLeaveTeam, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqAckLeaveTeam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckLeaveTeam, _internal_metadata_),
      -1);
  ReqAckOprTeamMember_descriptor_ = file->message_type(62);
  static const int ReqAckOprTeamMember_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprTeamMember, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprTeamMember, member_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprTeamMember, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprTeamMember, xteaminfo_),
  };
  ReqAckOprTeamMember_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAckOprTeamMember_descriptor_,
      ReqAckOprTeamMember::default_instance_,
      ReqAckOprTeamMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprTeamMember, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqAckOprTeamMember),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckOprTeamMember, _internal_metadata_),
      -1);
  ReqAckOprTeamMember_EGTeamMemberOprType_descriptor_ = ReqAckOprTeamMember_descriptor_->enum_type(0);
  ReqAckInviteTeam_descriptor_ = file->message_type(63);
  static const int ReqAckInviteTeam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckInviteTeam, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckInviteTeam, self_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckInviteTeam, invite_target_id_),
  };
  ReqAckInviteTeam_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqAckInviteTeam_descriptor_,
      ReqAckInviteTeam::default_instance_,
      ReqAckInviteTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckInviteTeam, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqAckInviteTeam),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqAckInviteTeam, _internal_metadata_),
      -1);
  ReqTeamEnterEctype_descriptor_ = file->message_type(64);
  static const int ReqTeamEnterEctype_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamEnterEctype, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamEnterEctype, self_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamEnterEctype, nectypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamEnterEctype, ngroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamEnterEctype, nresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamEnterEctype, nserverid_),
  };
  ReqTeamEnterEctype_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqTeamEnterEctype_descriptor_,
      ReqTeamEnterEctype::default_instance_,
      ReqTeamEnterEctype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamEnterEctype, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqTeamEnterEctype),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqTeamEnterEctype, _internal_metadata_),
      -1);
  AckTeamEnterEctype_descriptor_ = file->message_type(65);
  static const int AckTeamEnterEctype_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTeamEnterEctype, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTeamEnterEctype, self_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTeamEnterEctype, nectypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTeamEnterEctype, ngroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTeamEnterEctype, nresult_),
  };
  AckTeamEnterEctype_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AckTeamEnterEctype_descriptor_,
      AckTeamEnterEctype::default_instance_,
      AckTeamEnterEctype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTeamEnterEctype, _has_bits_[0]),
      -1,
      -1,
      sizeof(AckTeamEnterEctype),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckTeamEnterEctype, _internal_metadata_),
      -1);
  GridGuildBaseInfo_descriptor_ = file->message_type(66);
  static const int GridGuildBaseInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridGuildBaseInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridGuildBaseInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridGuildBaseInfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridGuildBaseInfo, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridGuildBaseInfo, icon_),
  };
  GridGuildBaseInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GridGuildBaseInfo_descriptor_,
      GridGuildBaseInfo::default_instance_,
      GridGuildBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridGuildBaseInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(GridGuildBaseInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridGuildBaseInfo, _internal_metadata_),
      -1);
  ReqBigMapGridInfo_descriptor_ = file->message_type(67);
  static const int ReqBigMapGridInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBigMapGridInfo, map_title_id_),
  };
  ReqBigMapGridInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqBigMapGridInfo_descriptor_,
      ReqBigMapGridInfo::default_instance_,
      ReqBigMapGridInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBigMapGridInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqBigMapGridInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBigMapGridInfo, _internal_metadata_),
      -1);
  BigMapGridBaseInfo_descriptor_ = file->message_type(68);
  static const int BigMapGridBaseInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridBaseInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridBaseInfo, guild_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridBaseInfo, kingwar_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridBaseInfo, kingwarrer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridBaseInfo, hurting_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridBaseInfo, hurter_),
  };
  BigMapGridBaseInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BigMapGridBaseInfo_descriptor_,
      BigMapGridBaseInfo::default_instance_,
      BigMapGridBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridBaseInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(BigMapGridBaseInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridBaseInfo, _internal_metadata_),
      -1);
  BigMapLeaveMsg_descriptor_ = file->message_type(69);
  static const int BigMapLeaveMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapLeaveMsg, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapLeaveMsg, owner_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapLeaveMsg, msg_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapLeaveMsg, msg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapLeaveMsg, owner_level_),
  };
  BigMapLeaveMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BigMapLeaveMsg_descriptor_,
      BigMapLeaveMsg::default_instance_,
      BigMapLeaveMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapLeaveMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(BigMapLeaveMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapLeaveMsg, _internal_metadata_),
      -1);
  BigMapWarHistory_descriptor_ = file->message_type(70);
  static const int BigMapWarHistory_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapWarHistory, red_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapWarHistory, blue_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapWarHistory, winner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapWarHistory, war_time_),
  };
  BigMapWarHistory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BigMapWarHistory_descriptor_,
      BigMapWarHistory::default_instance_,
      BigMapWarHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapWarHistory, _has_bits_[0]),
      -1,
      -1,
      sizeof(BigMapWarHistory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapWarHistory, _internal_metadata_),
      -1);
  BigMapGridDetailInfo_descriptor_ = file->message_type(71);
  static const int BigMapGridDetailInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridDetailInfo, grid_base_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridDetailInfo, stay_guid_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridDetailInfo, leave_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridDetailInfo, war_history_),
  };
  BigMapGridDetailInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BigMapGridDetailInfo_descriptor_,
      BigMapGridDetailInfo::default_instance_,
      BigMapGridDetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridDetailInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(BigMapGridDetailInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigMapGridDetailInfo, _internal_metadata_),
      -1);
  AckBigMapGridInfo_descriptor_ = file->message_type(72);
  static const int AckBigMapGridInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBigMapGridInfo, map_data_),
  };
  AckBigMapGridInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AckBigMapGridInfo_descriptor_,
      AckBigMapGridInfo::default_instance_,
      AckBigMapGridInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBigMapGridInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(AckBigMapGridInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBigMapGridInfo, _internal_metadata_),
      -1);
  ReqBigMapInfo_descriptor_ = file->message_type(73);
  static const int ReqBigMapInfo_offsets_[1] = {
  };
  ReqBigMapInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqBigMapInfo_descriptor_,
      ReqBigMapInfo::default_instance_,
      ReqBigMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBigMapInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqBigMapInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBigMapInfo, _internal_metadata_),
      -1);
  AckBigMapInfo_descriptor_ = file->message_type(74);
  static const int AckBigMapInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBigMapInfo, grid_base_info_),
  };
  AckBigMapInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AckBigMapInfo_descriptor_,
      AckBigMapInfo::default_instance_,
      AckBigMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBigMapInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(AckBigMapInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBigMapInfo, _internal_metadata_),
      -1);
  ReqHoldMapGrid_descriptor_ = file->message_type(75);
  static const int ReqHoldMapGrid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHoldMapGrid, map_title_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHoldMapGrid, guild_id_),
  };
  ReqHoldMapGrid_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqHoldMapGrid_descriptor_,
      ReqHoldMapGrid::default_instance_,
      ReqHoldMapGrid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHoldMapGrid, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqHoldMapGrid),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqHoldMapGrid, _internal_metadata_),
      -1);
  AckHoldMapGrid_descriptor_ = file->message_type(76);
  static const int AckHoldMapGrid_offsets_[1] = {
  };
  AckHoldMapGrid_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AckHoldMapGrid_descriptor_,
      AckHoldMapGrid::default_instance_,
      AckHoldMapGrid_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHoldMapGrid, _has_bits_[0]),
      -1,
      -1,
      sizeof(AckHoldMapGrid),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckHoldMapGrid, _internal_metadata_),
      -1);
  ReqLeaveMapMsg_descriptor_ = file->message_type(77);
  static const int ReqLeaveMapMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaveMapMsg, map_title_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaveMapMsg, leave_msg_),
  };
  ReqLeaveMapMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqLeaveMapMsg_descriptor_,
      ReqLeaveMapMsg::default_instance_,
      ReqLeaveMapMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaveMapMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqLeaveMapMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLeaveMapMsg, _internal_metadata_),
      -1);
  AckLeaveMapMsg_descriptor_ = file->message_type(78);
  static const int AckLeaveMapMsg_offsets_[1] = {
  };
  AckLeaveMapMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AckLeaveMapMsg_descriptor_,
      AckLeaveMapMsg::default_instance_,
      AckLeaveMapMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLeaveMapMsg, _has_bits_[0]),
      -1,
      -1,
      sizeof(AckLeaveMapMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLeaveMapMsg, _internal_metadata_),
      -1);
  ReqGetMapAward_descriptor_ = file->message_type(79);
  static const int ReqGetMapAward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetMapAward, map_title_id_),
  };
  ReqGetMapAward_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqGetMapAward_descriptor_,
      ReqGetMapAward::default_instance_,
      ReqGetMapAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetMapAward, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqGetMapAward),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetMapAward, _internal_metadata_),
      -1);
  AckGetMapAward_descriptor_ = file->message_type(80);
  static const int AckGetMapAward_offsets_[1] = {
  };
  AckGetMapAward_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AckGetMapAward_descriptor_,
      AckGetMapAward::default_instance_,
      AckGetMapAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGetMapAward, _has_bits_[0]),
      -1,
      -1,
      sizeof(AckGetMapAward),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGetMapAward, _internal_metadata_),
      -1);
  ReqMapHunting_descriptor_ = file->message_type(81);
  static const int ReqMapHunting_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMapHunting, map_title_id_),
  };
  ReqMapHunting_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqMapHunting_descriptor_,
      ReqMapHunting::default_instance_,
      ReqMapHunting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMapHunting, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqMapHunting),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMapHunting, _internal_metadata_),
      -1);
  AckMapHunting_descriptor_ = file->message_type(82);
  static const int AckMapHunting_offsets_[1] = {
  };
  AckMapHunting_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AckMapHunting_descriptor_,
      AckMapHunting::default_instance_,
      AckMapHunting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMapHunting, _has_bits_[0]),
      -1,
      -1,
      sizeof(AckMapHunting),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMapHunting, _internal_metadata_),
      -1);
  ReqMapKingWar_descriptor_ = file->message_type(83);
  static const int ReqMapKingWar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMapKingWar, map_title_id_),
  };
  ReqMapKingWar_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqMapKingWar_descriptor_,
      ReqMapKingWar::default_instance_,
      ReqMapKingWar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMapKingWar, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqMapKingWar),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMapKingWar, _internal_metadata_),
      -1);
  AckMapKingWar_descriptor_ = file->message_type(84);
  static const int AckMapKingWar_offsets_[1] = {
  };
  AckMapKingWar_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AckMapKingWar_descriptor_,
      AckMapKingWar::default_instance_,
      AckMapKingWar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMapKingWar, _has_bits_[0]),
      -1,
      -1,
      sizeof(AckMapKingWar),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckMapKingWar, _internal_metadata_),
      -1);
  PVPRoomInfo_descriptor_ = file->message_type(85);
  static const int PVPRoomInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomInfo, ncellstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomInfo, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomInfo, npvpmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomInfo, npvpgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomInfo, maxpalyer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomInfo, xredplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomInfo, xblueplayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomInfo, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomInfo, groupid_),
  };
  PVPRoomInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PVPRoomInfo_descriptor_,
      PVPRoomInfo::default_instance_,
      PVPRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(PVPRoomInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPRoomInfo, _internal_metadata_),
      -1);
  ReqPVPApplyMatch_descriptor_ = file->message_type(86);
  static const int ReqPVPApplyMatch_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPVPApplyMatch, self_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPVPApplyMatch, npvpmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPVPApplyMatch, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPVPApplyMatch, applytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPVPApplyMatch, team_id_),
  };
  ReqPVPApplyMatch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqPVPApplyMatch_descriptor_,
      ReqPVPApplyMatch::default_instance_,
      ReqPVPApplyMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPVPApplyMatch, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqPVPApplyMatch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPVPApplyMatch, _internal_metadata_),
      -1);
  ReqPVPApplyMatch_EApplyType_descriptor_ = ReqPVPApplyMatch_descriptor_->enum_type(0);
  AckPVPApplyMatch_descriptor_ = file->message_type(87);
  static const int AckPVPApplyMatch_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPVPApplyMatch, self_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPVPApplyMatch, xroominfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPVPApplyMatch, applytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPVPApplyMatch, nresult_),
  };
  AckPVPApplyMatch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AckPVPApplyMatch_descriptor_,
      AckPVPApplyMatch::default_instance_,
      AckPVPApplyMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPVPApplyMatch, _has_bits_[0]),
      -1,
      -1,
      sizeof(AckPVPApplyMatch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPVPApplyMatch, _internal_metadata_),
      -1);
  ReqCreatePVPEctype_descriptor_ = file->message_type(88);
  static const int ReqCreatePVPEctype_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreatePVPEctype, self_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreatePVPEctype, xroominfo_),
  };
  ReqCreatePVPEctype_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqCreatePVPEctype_descriptor_,
      ReqCreatePVPEctype::default_instance_,
      ReqCreatePVPEctype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreatePVPEctype, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqCreatePVPEctype),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreatePVPEctype, _internal_metadata_),
      -1);
  AckCreatePVPEctype_descriptor_ = file->message_type(89);
  static const int AckCreatePVPEctype_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCreatePVPEctype, self_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCreatePVPEctype, xroominfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCreatePVPEctype, applytype_),
  };
  AckCreatePVPEctype_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AckCreatePVPEctype_descriptor_,
      AckCreatePVPEctype::default_instance_,
      AckCreatePVPEctype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCreatePVPEctype, _has_bits_[0]),
      -1,
      -1,
      sizeof(AckCreatePVPEctype),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCreatePVPEctype, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AFMsgShare_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqEnterGameServer_descriptor_, &ReqEnterGameServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqHeartBeat_descriptor_, &ReqHeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqLeaveGameServer_descriptor_, &ReqLeaveGameServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerEntryInfo_descriptor_, &PlayerEntryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AckPlayerEntryList_descriptor_, &AckPlayerEntryList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AckPlayerLeaveList_descriptor_, &AckPlayerLeaveList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAckSynData_descriptor_, &ReqAckSynData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAckPlayerMove_descriptor_, &ReqAckPlayerMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChatContainer_descriptor_, &ChatContainer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAckPlayerChat_descriptor_, &ReqAckPlayerChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EffectData_descriptor_, &EffectData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAckUseSkill_descriptor_, &ReqAckUseSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAckUseItem_descriptor_, &ReqAckUseItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAckSwapScene_descriptor_, &ReqAckSwapScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ItemStruct_descriptor_, &ItemStruct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CurrencyStruct_descriptor_, &CurrencyStruct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAckEndBattle_descriptor_, &ReqAckEndBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqPickDropItem_descriptor_, &ReqPickDropItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAcceptTask_descriptor_, &ReqAcceptTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqCompeleteTask_descriptor_, &ReqCompeleteTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAckJoinActivity_descriptor_, &ReqAckJoinActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAckSearchOppnent_descriptor_, &ReqAckSearchOppnent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAckBattleOppnent_descriptor_, &ReqAckBattleOppnent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAckCreateGuild_descriptor_, &ReqAckCreateGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqSearchGuild_descriptor_, &ReqSearchGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AckSearchGuild_descriptor_, &AckSearchGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AckSearchGuild_SearchGuildObject_descriptor_, &AckSearchGuild_SearchGuildObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAckJoinGuild_descriptor_, &ReqAckJoinGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAckLeaveGuild_descriptor_, &ReqAckLeaveGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAckOprGuildMember_descriptor_, &ReqAckOprGuildMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAckOprGuild_descriptor_, &ReqAckOprGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAckDonateGuildItem_descriptor_, &ReqAckDonateGuildItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqGuildEctypeInfo_descriptor_, &ReqGuildEctypeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GuildEctypeInfo_descriptor_, &GuildEctypeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AckGuildEctypeInfo_descriptor_, &AckGuildEctypeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetGuildEctypeInfo_descriptor_, &SetGuildEctypeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqEnterGuildEctype_descriptor_, &ReqEnterGuildEctype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChatInfo_descriptor_, &ChatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAckCreateChatGroup_descriptor_, &ReqAckCreateChatGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAckjoinChatGroup_descriptor_, &ReqAckjoinChatGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAckQuitChatGroup_descriptor_, &ReqAckQuitChatGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqSubscriptionChatGroup_descriptor_, &ReqSubscriptionChatGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqCancelSubscriptionChatGroup_descriptor_, &ReqCancelSubscriptionChatGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqIntensifylevelToEquip_descriptor_, &ReqIntensifylevelToEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AckIntensifylevelToEquip_descriptor_, &AckIntensifylevelToEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqHoleToEquip_descriptor_, &ReqHoleToEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AckHoleToEquip_descriptor_, &AckHoleToEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqInlaystoneToEquip_descriptor_, &ReqInlaystoneToEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AckInlaystoneToEquip_descriptor_, &AckInlaystoneToEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqElementlevelToEquip_descriptor_, &ReqElementlevelToEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AckElementlevelToEquip_descriptor_, &AckElementlevelToEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqSetFightHero_descriptor_, &ReqSetFightHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqWearEquip_descriptor_, &ReqWearEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TakeOffEquip_descriptor_, &TakeOffEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqMiningTitle_descriptor_, &ReqMiningTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqSendMail_descriptor_, &ReqSendMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqSwitchServer_descriptor_, &ReqSwitchServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AckSwitchServer_descriptor_, &AckSwitchServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TeamInfo_descriptor_, &TeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TeammemberInfo_descriptor_, &TeammemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAckCreateTeam_descriptor_, &ReqAckCreateTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAckJoinTeam_descriptor_, &ReqAckJoinTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAckLeaveTeam_descriptor_, &ReqAckLeaveTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAckOprTeamMember_descriptor_, &ReqAckOprTeamMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqAckInviteTeam_descriptor_, &ReqAckInviteTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqTeamEnterEctype_descriptor_, &ReqTeamEnterEctype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AckTeamEnterEctype_descriptor_, &AckTeamEnterEctype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GridGuildBaseInfo_descriptor_, &GridGuildBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqBigMapGridInfo_descriptor_, &ReqBigMapGridInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BigMapGridBaseInfo_descriptor_, &BigMapGridBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BigMapLeaveMsg_descriptor_, &BigMapLeaveMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BigMapWarHistory_descriptor_, &BigMapWarHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BigMapGridDetailInfo_descriptor_, &BigMapGridDetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AckBigMapGridInfo_descriptor_, &AckBigMapGridInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqBigMapInfo_descriptor_, &ReqBigMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AckBigMapInfo_descriptor_, &AckBigMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqHoldMapGrid_descriptor_, &ReqHoldMapGrid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AckHoldMapGrid_descriptor_, &AckHoldMapGrid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqLeaveMapMsg_descriptor_, &ReqLeaveMapMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AckLeaveMapMsg_descriptor_, &AckLeaveMapMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqGetMapAward_descriptor_, &ReqGetMapAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AckGetMapAward_descriptor_, &AckGetMapAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqMapHunting_descriptor_, &ReqMapHunting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AckMapHunting_descriptor_, &AckMapHunting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqMapKingWar_descriptor_, &ReqMapKingWar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AckMapKingWar_descriptor_, &AckMapKingWar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PVPRoomInfo_descriptor_, &PVPRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqPVPApplyMatch_descriptor_, &ReqPVPApplyMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AckPVPApplyMatch_descriptor_, &AckPVPApplyMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqCreatePVPEctype_descriptor_, &ReqCreatePVPEctype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AckCreatePVPEctype_descriptor_, &AckCreatePVPEctype::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AFMsgShare_2eproto() {
  delete ReqEnterGameServer::default_instance_;
  delete ReqEnterGameServer_reflection_;
  delete ReqHeartBeat::default_instance_;
  delete ReqHeartBeat_reflection_;
  delete ReqLeaveGameServer::default_instance_;
  delete ReqLeaveGameServer_reflection_;
  delete PlayerEntryInfo::default_instance_;
  delete PlayerEntryInfo_reflection_;
  delete AckPlayerEntryList::default_instance_;
  delete AckPlayerEntryList_reflection_;
  delete AckPlayerLeaveList::default_instance_;
  delete AckPlayerLeaveList_reflection_;
  delete ReqAckSynData::default_instance_;
  delete ReqAckSynData_reflection_;
  delete ReqAckPlayerMove::default_instance_;
  delete ReqAckPlayerMove_reflection_;
  delete ChatContainer::default_instance_;
  delete ChatContainer_reflection_;
  delete ReqAckPlayerChat::default_instance_;
  delete ReqAckPlayerChat_reflection_;
  delete EffectData::default_instance_;
  delete EffectData_reflection_;
  delete ReqAckUseSkill::default_instance_;
  delete ReqAckUseSkill_reflection_;
  delete ReqAckUseItem::default_instance_;
  delete ReqAckUseItem_reflection_;
  delete ReqAckSwapScene::default_instance_;
  delete ReqAckSwapScene_reflection_;
  delete ItemStruct::default_instance_;
  delete ItemStruct_reflection_;
  delete CurrencyStruct::default_instance_;
  delete CurrencyStruct_reflection_;
  delete ReqAckEndBattle::default_instance_;
  delete ReqAckEndBattle_reflection_;
  delete ReqPickDropItem::default_instance_;
  delete ReqPickDropItem_reflection_;
  delete ReqAcceptTask::default_instance_;
  delete ReqAcceptTask_reflection_;
  delete ReqCompeleteTask::default_instance_;
  delete ReqCompeleteTask_reflection_;
  delete ReqAckJoinActivity::default_instance_;
  delete ReqAckJoinActivity_reflection_;
  delete ReqAckSearchOppnent::default_instance_;
  delete ReqAckSearchOppnent_reflection_;
  delete ReqAckBattleOppnent::default_instance_;
  delete ReqAckBattleOppnent_reflection_;
  delete ReqAckCreateGuild::default_instance_;
  delete ReqAckCreateGuild_reflection_;
  delete ReqSearchGuild::default_instance_;
  delete ReqSearchGuild_reflection_;
  delete AckSearchGuild::default_instance_;
  delete AckSearchGuild_reflection_;
  delete AckSearchGuild_SearchGuildObject::default_instance_;
  delete AckSearchGuild_SearchGuildObject_reflection_;
  delete ReqAckJoinGuild::default_instance_;
  delete ReqAckJoinGuild_reflection_;
  delete ReqAckLeaveGuild::default_instance_;
  delete ReqAckLeaveGuild_reflection_;
  delete ReqAckOprGuildMember::default_instance_;
  delete ReqAckOprGuildMember_reflection_;
  delete ReqAckOprGuild::default_instance_;
  delete ReqAckOprGuild_reflection_;
  delete ReqAckDonateGuildItem::default_instance_;
  delete ReqAckDonateGuildItem_reflection_;
  delete ReqGuildEctypeInfo::default_instance_;
  delete ReqGuildEctypeInfo_reflection_;
  delete GuildEctypeInfo::default_instance_;
  delete GuildEctypeInfo_reflection_;
  delete AckGuildEctypeInfo::default_instance_;
  delete AckGuildEctypeInfo_reflection_;
  delete SetGuildEctypeInfo::default_instance_;
  delete SetGuildEctypeInfo_reflection_;
  delete ReqEnterGuildEctype::default_instance_;
  delete ReqEnterGuildEctype_reflection_;
  delete ChatInfo::default_instance_;
  delete ChatInfo_reflection_;
  delete ReqAckCreateChatGroup::default_instance_;
  delete ReqAckCreateChatGroup_reflection_;
  delete ReqAckjoinChatGroup::default_instance_;
  delete ReqAckjoinChatGroup_reflection_;
  delete ReqAckQuitChatGroup::default_instance_;
  delete ReqAckQuitChatGroup_reflection_;
  delete ReqSubscriptionChatGroup::default_instance_;
  delete ReqSubscriptionChatGroup_reflection_;
  delete ReqCancelSubscriptionChatGroup::default_instance_;
  delete ReqCancelSubscriptionChatGroup_reflection_;
  delete ReqIntensifylevelToEquip::default_instance_;
  delete ReqIntensifylevelToEquip_reflection_;
  delete AckIntensifylevelToEquip::default_instance_;
  delete AckIntensifylevelToEquip_reflection_;
  delete ReqHoleToEquip::default_instance_;
  delete ReqHoleToEquip_reflection_;
  delete AckHoleToEquip::default_instance_;
  delete AckHoleToEquip_reflection_;
  delete ReqInlaystoneToEquip::default_instance_;
  delete ReqInlaystoneToEquip_reflection_;
  delete AckInlaystoneToEquip::default_instance_;
  delete AckInlaystoneToEquip_reflection_;
  delete ReqElementlevelToEquip::default_instance_;
  delete ReqElementlevelToEquip_reflection_;
  delete AckElementlevelToEquip::default_instance_;
  delete AckElementlevelToEquip_reflection_;
  delete ReqSetFightHero::default_instance_;
  delete ReqSetFightHero_reflection_;
  delete ReqWearEquip::default_instance_;
  delete ReqWearEquip_reflection_;
  delete TakeOffEquip::default_instance_;
  delete TakeOffEquip_reflection_;
  delete ReqMiningTitle::default_instance_;
  delete ReqMiningTitle_reflection_;
  delete ReqSendMail::default_instance_;
  delete ReqSendMail_reflection_;
  delete ReqSwitchServer::default_instance_;
  delete ReqSwitchServer_reflection_;
  delete AckSwitchServer::default_instance_;
  delete AckSwitchServer_reflection_;
  delete TeamInfo::default_instance_;
  delete TeamInfo_reflection_;
  delete TeammemberInfo::default_instance_;
  delete TeammemberInfo_reflection_;
  delete ReqAckCreateTeam::default_instance_;
  delete ReqAckCreateTeam_reflection_;
  delete ReqAckJoinTeam::default_instance_;
  delete ReqAckJoinTeam_reflection_;
  delete ReqAckLeaveTeam::default_instance_;
  delete ReqAckLeaveTeam_reflection_;
  delete ReqAckOprTeamMember::default_instance_;
  delete ReqAckOprTeamMember_reflection_;
  delete ReqAckInviteTeam::default_instance_;
  delete ReqAckInviteTeam_reflection_;
  delete ReqTeamEnterEctype::default_instance_;
  delete ReqTeamEnterEctype_reflection_;
  delete AckTeamEnterEctype::default_instance_;
  delete AckTeamEnterEctype_reflection_;
  delete GridGuildBaseInfo::default_instance_;
  delete GridGuildBaseInfo_reflection_;
  delete ReqBigMapGridInfo::default_instance_;
  delete ReqBigMapGridInfo_reflection_;
  delete BigMapGridBaseInfo::default_instance_;
  delete BigMapGridBaseInfo_reflection_;
  delete BigMapLeaveMsg::default_instance_;
  delete BigMapLeaveMsg_reflection_;
  delete BigMapWarHistory::default_instance_;
  delete BigMapWarHistory_reflection_;
  delete BigMapGridDetailInfo::default_instance_;
  delete BigMapGridDetailInfo_reflection_;
  delete AckBigMapGridInfo::default_instance_;
  delete AckBigMapGridInfo_reflection_;
  delete ReqBigMapInfo::default_instance_;
  delete ReqBigMapInfo_reflection_;
  delete AckBigMapInfo::default_instance_;
  delete AckBigMapInfo_reflection_;
  delete ReqHoldMapGrid::default_instance_;
  delete ReqHoldMapGrid_reflection_;
  delete AckHoldMapGrid::default_instance_;
  delete AckHoldMapGrid_reflection_;
  delete ReqLeaveMapMsg::default_instance_;
  delete ReqLeaveMapMsg_reflection_;
  delete AckLeaveMapMsg::default_instance_;
  delete AckLeaveMapMsg_reflection_;
  delete ReqGetMapAward::default_instance_;
  delete ReqGetMapAward_reflection_;
  delete AckGetMapAward::default_instance_;
  delete AckGetMapAward_reflection_;
  delete ReqMapHunting::default_instance_;
  delete ReqMapHunting_reflection_;
  delete AckMapHunting::default_instance_;
  delete AckMapHunting_reflection_;
  delete ReqMapKingWar::default_instance_;
  delete ReqMapKingWar_reflection_;
  delete AckMapKingWar::default_instance_;
  delete AckMapKingWar_reflection_;
  delete PVPRoomInfo::default_instance_;
  delete PVPRoomInfo_reflection_;
  delete ReqPVPApplyMatch::default_instance_;
  delete ReqPVPApplyMatch_reflection_;
  delete AckPVPApplyMatch::default_instance_;
  delete AckPVPApplyMatch_reflection_;
  delete ReqCreatePVPEctype::default_instance_;
  delete ReqCreatePVPEctype_reflection_;
  delete AckCreatePVPEctype::default_instance_;
  delete AckCreatePVPEctype_reflection_;
}

void protobuf_AddDesc_AFMsgShare_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_AFMsgShare_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::AFMsg::protobuf_AddDesc_AFDefine_2eproto();
  ::AFMsg::protobuf_AddDesc_AFMsgBase_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020AFMsgShare.proto\022\005AFMsg\032\016AFDefine.prot"
    "o\032\017AFMsgBase.proto\"^\n\022ReqEnterGameServer"
    "\022\030\n\002id\030\001 \002(\0132\014.AFMsg.Ident\022\017\n\007account\030\002 "
    "\002(\014\022\017\n\007game_id\030\003 \002(\005\022\014\n\004name\030\004 \002(\014\"\016\n\014Re"
    "qHeartBeat\"\024\n\022ReqLeaveGameServer\"\263\001\n\017Pla"
    "yerEntryInfo\022!\n\013object_guid\030\001 \002(\0132\014.AFMs"
    "g.Ident\022\033\n\003pos\030\002 \002(\0132\016.AFMsg.Point3D\022\023\n\013"
    "career_type\030\003 \002(\005\022\024\n\014player_state\030\004 \002(\005\022"
    "\021\n\tconfig_id\030\005 \002(\014\022\020\n\010scene_id\030\006 \002(\005\022\020\n\010"
    "class_id\030\007 \002(\014\"A\n\022AckPlayerEntryList\022+\n\013"
    "object_list\030\001 \003(\0132\026.AFMsg.PlayerEntryInf"
    "o\"7\n\022AckPlayerLeaveList\022!\n\013object_list\030\001"
    " \003(\0132\014.AFMsg.Ident\"\370\001\n\rReqAckSynData\022\033\n\005"
    "syser\030\001 \002(\0132\014.AFMsg.Ident\022!\n\013object_list"
    "\030\002 \003(\0132\014.AFMsg.Ident\022\014\n\004data\030\003 \002(\014\022.\n\010sy"
    "n_type\030\004 \002(\0162\034.AFMsg.ReqAckSynData.SynTy"
    "pe\022!\n\006msg_id\030\005 \002(\0162\021.AFMsg.EGameMsgID\"F\n"
    "\007SynType\022\r\n\tEST_SCENE\020\001\022\r\n\tEST_GROUP\020\002\022\r"
    "\n\tEST_GUILD\020\003\022\016\n\nEST_FRIEND\020\004\"\213\001\n\020ReqAck"
    "PlayerMove\022\033\n\005mover\030\001 \002(\0132\014.AFMsg.Ident\022"
    "\020\n\010moveType\030\002 \002(\005\022#\n\ntarget_pos\030\003 \003(\0132\017."
    "AFMsg.Position\022#\n\nsource_pos\030\004 \003(\0132\017.AFM"
    "sg.Position\"Y\n\rChatContainer\022\025\n\rConTaine"
    "rType\030\002 \002(\005\022\021\n\tdata_info\030\003 \002(\014\"\036\n\rContai"
    "nerType\022\r\n\tEGCT_ITEM\020\001\"\262\002\n\020ReqAckPlayerC"
    "hat\022\035\n\007chat_id\030\001 \002(\0132\014.AFMsg.Ident\0228\n\tch"
    "at_type\030\002 \002(\0162%.AFMsg.ReqAckPlayerChat.E"
    "GameChatType\022\021\n\tchat_info\030\003 \002(\014\022\021\n\tchat_"
    "name\030\004 \002(\014\022\037\n\ttarget_id\030\005 \001(\0132\014.AFMsg.Id"
    "ent\022,\n\016Container_data\030\006 \003(\0132\024.AFMsg.Chat"
    "Container\"P\n\rEGameChatType\022\016\n\nEGCT_GUILD"
    "\020\000\022\020\n\014EGCT_PRIVATE\020\001\022\r\n\tEGCT_TEAM\020\002\022\016\n\nE"
    "GCT_WORLD\020\003\"\267\001\n\nEffectData\022\"\n\014effect_ide"
    "nt\030\001 \002(\0132\014.AFMsg.Ident\022\024\n\014effect_value\030\002"
    " \002(\005\0221\n\neffect_rlt\030\003 \002(\0162\035.AFMsg.EffectD"
    "ata.EResultType\"<\n\013EResultType\022\017\n\013EET_SU"
    "CCESS\020\000\022\014\n\010EET_FAIL\020\001\022\016\n\nEET_REFUSE\020\002\"\275\001"
    "\n\016ReqAckUseSkill\022\032\n\004user\030\001 \002(\0132\014.AFMsg.I"
    "dent\022\020\n\010skill_id\030\002 \002(\014\022 \n\007now_pos\030\003 \002(\0132"
    "\017.AFMsg.Position\022 \n\007tar_pos\030\004 \002(\0132\017.AFMs"
    "g.Position\022\021\n\tuse_index\030\005 \002(\005\022&\n\013effect_"
    "data\030\006 \003(\0132\021.AFMsg.EffectData\"\265\001\n\rReqAck"
    "UseItem\022\032\n\004user\030\001 \002(\0132\014.AFMsg.Ident\022\037\n\ti"
    "tem_guid\030\002 \002(\0132\014.AFMsg.Ident\022&\n\013effect_d"
    "ata\030\003 \003(\0132\021.AFMsg.EffectData\022\037\n\004item\030\004 \002"
    "(\0132\021.AFMsg.ItemStruct\022\036\n\010targetid\030\005 \002(\0132"
    "\014.AFMsg.Ident\"\345\001\n\017ReqAckSwapScene\022;\n\rtra"
    "nsfer_type\030\001 \002(\0162$.AFMsg.ReqAckSwapScene"
    ".EGameSwapType\022\020\n\010scene_id\030\002 \002(\005\022\017\n\007line"
    "_id\030\003 \002(\005\022\t\n\001x\030\004 \001(\002\022\t\n\001y\030\005 \001(\002\022\t\n\001z\030\006 \001"
    "(\002\"Q\n\rEGameSwapType\022\017\n\013EGST_NARMAL\020\000\022\016\n\n"
    "EGST_CLONE\020\001\022\016\n\nEGST_ARENA\020\002\022\017\n\013EGST_MIR"
    "ROR\020\003\"1\n\nItemStruct\022\017\n\007item_id\030\001 \002(\t\022\022\n\n"
    "item_count\030\002 \002(\005\"\?\n\016CurrencyStruct\022\025\n\rcu"
    "rrency_type\030\001 \002(\005\022\026\n\016currency_count\030\002 \002("
    "\005\"d\n\017ReqAckEndBattle\022\r\n\005money\030\001 \002(\005\022\013\n\003e"
    "xp\030\002 \002(\005\022\017\n\007diamond\030\003 \002(\005\022$\n\titem_list\030\004"
    " \003(\0132\021.AFMsg.ItemStruct\"2\n\017ReqPickDropIt"
    "em\022\037\n\titem_guid\030\002 \002(\0132\014.AFMsg.Ident\" \n\rR"
    "eqAcceptTask\022\017\n\007task_id\030\001 \002(\014\"#\n\020ReqComp"
    "eleteTask\022\017\n\007task_id\030\001 \002(\014\"\357\001\n\022ReqAckJoi"
    "nActivity\022B\n\ractivity_type\030\001 \002(\0162+.AFMsg"
    ".ReqAckJoinActivity.EGameActivityType\022I\n"
    "\021sub_activity_type\030\002 \002(\0162..AFMsg.ReqAckJ"
    "oinActivity.EGameActivitySubType\"!\n\021EGam"
    "eActivityType\022\014\n\010EGAT_PVP\020\000\"\'\n\024EGameActi"
    "vitySubType\022\017\n\013EGAT_NORMAL\020\000\">\n\023ReqAckSe"
    "archOppnent\022\'\n\013search_type\030\001 \002(\0162\022.AFMsg"
    ".EBattleType\">\n\023ReqAckBattleOppnent\022\'\n\013b"
    "attle_type\030\001 \002(\0162\022.AFMsg.EBattleType\"G\n\021"
    "ReqAckCreateGuild\022\036\n\010guild_id\030\001 \002(\0132\014.AF"
    "Msg.Ident\022\022\n\nguild_name\030\002 \002(\t\"$\n\016ReqSear"
    "chGuild\022\022\n\nguild_name\030\001 \002(\t\"\220\002\n\016AckSearc"
    "hGuild\022;\n\nguild_list\030\001 \003(\0132\'.AFMsg.AckSe"
    "archGuild.SearchGuildObject\032\300\001\n\021SearchGu"
    "ildObject\022\036\n\010guild_ID\030\001 \002(\0132\014.AFMsg.Iden"
    "t\022\022\n\nguild_name\030\002 \002(\t\022\022\n\nguild_icon\030\003 \002("
    "\t\022\032\n\022guild_member_count\030\004 \002(\005\022\036\n\026guild_m"
    "ember_max_count\030\005 \002(\005\022\023\n\013guild_honor\030\006 \002"
    "(\005\022\022\n\nguild_rank\030\007 \002(\005\"E\n\017ReqAckJoinGuil"
    "d\022\036\n\010guild_id\030\001 \002(\0132\014.AFMsg.Ident\022\022\n\ngui"
    "ld_name\030\002 \002(\t\"F\n\020ReqAckLeaveGuild\022\036\n\010gui"
    "ld_id\030\001 \002(\0132\014.AFMsg.Ident\022\022\n\nguild_name\030"
    "\002 \002(\t\"\311\002\n\024ReqAckOprGuildMember\022\036\n\010guild_"
    "id\030\001 \002(\0132\014.AFMsg.Ident\022\037\n\tmember_id\030\002 \002("
    "\0132\014.AFMsg.Ident\022>\n\004type\030\003 \002(\01620.AFMsg.Re"
    "qAckOprGuildMember.EGGuildMemberOprType\""
    "\257\001\n\024EGGuildMemberOprType\022\r\n\tEGAT_DOWN\020\000\022"
    "\013\n\007EGAT_UP\020\001\022\r\n\tEGAT_KICK\020\002\022\020\n\014EGAT_APPO"
    "INT\020\003\022\r\n\tEGAT_FIRE\020\004\022\017\n\013EGAT_DEMISE\020\005\022\024\n"
    "\020EGAT_ACCEPTAPPLY\020\006\022\022\n\016EGAT_DENYAPPLY\020\007\022"
    "\020\n\014EGAT_KICKOUT\020\010\"\275\002\n\016ReqAckOprGuild\022\036\n\010"
    "guild_id\030\001 \002(\0132\014.AFMsg.Ident\022\037\n\tplayer_i"
    "d\030\002 \002(\0132\014.AFMsg.Ident\0222\n\004type\030\003 \002(\0162$.AF"
    "Msg.ReqAckOprGuild.EGGuildOprType\022\024\n\014Rec"
    "ruit_data\030\004 \002(\t\022\017\n\007Ad_data\030\005 \002(\t\"\216\001\n\016EGG"
    "uildOprType\022\025\n\021EGAT_APPLYDISMISS\020\001\022\024\n\020EG"
    "AT_STOPDISMISS\020\002\022\023\n\017EGAT_SETRECRUIT\020\003\022\027\n"
    "\023EGAT_PUBLISHRECRUIT\020\004\022\017\n\013EGAT_EDITAD\020\005\022"
    "\020\n\014EGAT_LEVELUP\020\006\"~\n\025ReqAckDonateGuildIt"
    "em\022\036\n\010guild_id\030\001 \002(\0132\014.AFMsg.Ident\022\037\n\tta"
    "rget_id\030\002 \002(\0132\014.AFMsg.Ident\022$\n\titem_list"
    "\030\003 \003(\0132\021.AFMsg.ItemStruct\"R\n\022ReqGuildEct"
    "ypeInfo\022\034\n\006selfid\030\001 \002(\0132\014.AFMsg.Ident\022\036\n"
    "\010guild_id\030\002 \002(\0132\014.AFMsg.Ident\"m\n\017GuildEc"
    "typeInfo\022\036\n\010guild_id\030\001 \002(\0132\014.AFMsg.Ident"
    "\022\021\n\tserver_id\030\002 \002(\003\022\021\n\tEctype_id\030\003 \002(\003\022\024"
    "\n\014Ectype_Group\030\004 \002(\003\"_\n\022AckGuildEctypeIn"
    "fo\022\034\n\006selfid\030\001 \002(\0132\014.AFMsg.Ident\022+\n\013xect"
    "ypeinfo\030\002 \002(\0132\026.AFMsg.GuildEctypeInfo\"_\n"
    "\022SetGuildEctypeInfo\022\034\n\006selfid\030\001 \002(\0132\014.AF"
    "Msg.Ident\022+\n\013xectypeinfo\030\002 \002(\0132\026.AFMsg.G"
    "uildEctypeInfo\"3\n\023ReqEnterGuildEctype\022\034\n"
    "\006selfid\030\001 \002(\0132\014.AFMsg.Ident\"\325\002\n\010ChatInfo"
    "\022,\n\tchat_type\030\001 \002(\0162\031.AFMsg.ChatInfo.ECh"
    "atType\022\021\n\tchat_info\030\002 \002(\014\022\021\n\tchat_time\030\003"
    " \002(\003\022\026\n\016addtional_info\030\004 \001(\014\022\035\n\007send_id\030"
    "\005 \002(\0132\014.AFMsg.Ident\022\021\n\tsend_name\030\006 \002(\014\022\022"
    "\n\nsend_level\030\007 \001(\005\022 \n\nrecvier_id\030\010 \003(\0132\014"
    ".AFMsg.Ident\022\021\n\tguid_name\030\t \001(\014\"b\n\tEChat"
    "Type\022\024\n\020ECHATTYPE_NORMAL\020\000\022\025\n\021ECHATTYPE_"
    "PRIVATE\020\001\022\023\n\017ECHATTYPE_GUILD\020\002\022\023\n\017ECHATT"
    "YPE_WORLD\020\003\"y\n\025ReqAckCreateChatGroup\022\014\n\004"
    "name\030\001 \002(\014\022\034\n\006selfid\030\002 \002(\0132\014.AFMsg.Ident"
    "\022\"\n\014xChatGroupid\030\003 \001(\0132\014.AFMsg.Ident\022\020\n\010"
    "chatType\030\004 \001(\005\"y\n\023ReqAckjoinChatGroup\022\034\n"
    "\006selfid\030\001 \002(\0132\014.AFMsg.Ident\022\"\n\014xChatGrou"
    "pid\030\002 \001(\0132\014.AFMsg.Ident\022\016\n\006result\030\003 \001(\003\022"
    "\020\n\010chatType\030\004 \001(\005\"g\n\023ReqAckQuitChatGroup"
    "\022\034\n\006selfid\030\001 \002(\0132\014.AFMsg.Ident\022\"\n\014xChatG"
    "roupid\030\002 \001(\0132\014.AFMsg.Ident\022\016\n\006result\030\003 \001"
    "(\003\"\\\n\030ReqSubscriptionChatGroup\022\034\n\006selfid"
    "\030\001 \002(\0132\014.AFMsg.Ident\022\"\n\014xChatGroupid\030\002 \003"
    "(\0132\014.AFMsg.Ident\"b\n\036ReqCancelSubscriptio"
    "nChatGroup\022\034\n\006selfid\030\001 \002(\0132\014.AFMsg.Ident"
    "\022\"\n\014xChatGroupid\030\002 \003(\0132\014.AFMsg.Ident\"W\n\030"
    "ReqIntensifylevelToEquip\022\034\n\006selfid\030\001 \002(\013"
    "2\014.AFMsg.Ident\022\035\n\007equipid\030\002 \002(\0132\014.AFMsg."
    "Ident\"g\n\030AckIntensifylevelToEquip\022\034\n\006sel"
    "fid\030\001 \002(\0132\014.AFMsg.Ident\022\035\n\007equipid\030\002 \002(\013"
    "2\014.AFMsg.Ident\022\016\n\006result\030\003 \002(\005\"M\n\016ReqHol"
    "eToEquip\022\034\n\006selfid\030\001 \002(\0132\014.AFMsg.Ident\022\035"
    "\n\007equipid\030\002 \002(\0132\014.AFMsg.Ident\"]\n\016AckHole"
    "ToEquip\022\034\n\006selfid\030\001 \002(\0132\014.AFMsg.Ident\022\035\n"
    "\007equipid\030\002 \002(\0132\014.AFMsg.Ident\022\016\n\006result\030\003"
    " \002(\005\"x\n\024ReqInlaystoneToEquip\022\034\n\006selfid\030\001"
    " \002(\0132\014.AFMsg.Ident\022\035\n\007equipid\030\002 \002(\0132\014.AF"
    "Msg.Ident\022\017\n\007stoneid\030\003 \002(\014\022\022\n\nhole_index"
    "\030\004 \002(\005\"c\n\024AckInlaystoneToEquip\022\034\n\006selfid"
    "\030\001 \002(\0132\014.AFMsg.Ident\022\035\n\007equipid\030\002 \002(\0132\014."
    "AFMsg.Ident\022\016\n\006result\030\003 \002(\005\"\204\001\n\026ReqEleme"
    "ntlevelToEquip\022\034\n\006selfid\030\001 \002(\0132\014.AFMsg.I"
    "dent\022\035\n\007equipid\030\002 \002(\0132\014.AFMsg.Ident\022-\n\014e"
    "ElementType\030\003 \002(\0162\027.AFMsg.EGameElementTy"
    "pe\"e\n\026AckElementlevelToEquip\022\034\n\006selfid\030\001"
    " \002(\0132\014.AFMsg.Ident\022\035\n\007equipid\030\002 \002(\0132\014.AF"
    "Msg.Ident\022\016\n\006result\030\003 \002(\005\"_\n\017ReqSetFight"
    "Hero\022\034\n\006selfid\030\001 \002(\0132\014.AFMsg.Ident\022\034\n\006He"
    "roid\030\002 \002(\0132\014.AFMsg.Ident\022\020\n\010FightPos\030\003 \002"
    "(\005\"k\n\014ReqWearEquip\022\034\n\006selfid\030\001 \002(\0132\014.AFM"
    "sg.Ident\022\035\n\007equipid\030\002 \002(\0132\014.AFMsg.Ident\022"
    "\036\n\010Targetid\030\003 \002(\0132\014.AFMsg.Ident\"k\n\014TakeO"
    "ffEquip\022\034\n\006selfid\030\001 \002(\0132\014.AFMsg.Ident\022\035\n"
    "\007equipid\030\002 \002(\0132\014.AFMsg.Ident\022\036\n\010Targetid"
    "\030\003 \002(\0132\014.AFMsg.Ident\"D\n\016ReqMiningTitle\022\034"
    "\n\006selfid\030\001 \002(\0132\014.AFMsg.Ident\022\t\n\001x\030\002 \002(\005\022"
    "\t\n\001y\030\003 \002(\005\"\237\001\n\013ReqSendMail\022\034\n\006selfid\030\001 \002"
    "(\0132\014.AFMsg.Ident\022\036\n\010reciever\030\002 \002(\0132\014.AFM"
    "sg.Ident\022$\n\titem_list\030\003 \003(\0132\021.AFMsg.Item"
    "Struct\022,\n\rcurrency_list\030\004 \003(\0132\025.AFMsg.Cu"
    "rrencyStruct\"\271\001\n\017ReqSwitchServer\022\034\n\006self"
    "id\030\001 \002(\0132\014.AFMsg.Ident\022\025\n\rself_serverid\030"
    "\002 \002(\003\022\027\n\017target_serverid\030\003 \002(\003\022\025\n\rgate_s"
    "erverid\030\004 \002(\003\022\017\n\007SceneID\030\005 \002(\003\022\037\n\tclient"
    "_id\030\006 \002(\0132\014.AFMsg.Ident\022\017\n\007groupID\030\007 \002(\003"
    "\"v\n\017AckSwitchServer\022\034\n\006selfid\030\001 \002(\0132\014.AF"
    "Msg.Ident\022\025\n\rself_serverid\030\002 \002(\003\022\027\n\017targ"
    "et_serverid\030\003 \002(\003\022\025\n\rgate_serverid\030\004 \002(\003"
    "\"z\n\010TeamInfo\022\035\n\007team_id\030\001 \002(\0132\014.AFMsg.Id"
    "ent\022 \n\ncaptain_id\030\002 \002(\0132\014.AFMsg.Ident\022-\n"
    "\016teammemberInfo\030\003 \003(\0132\025.AFMsg.Teammember"
    "Info\"n\n\016TeammemberInfo\022\037\n\tplayer_id\030\001 \002("
    "\0132\014.AFMsg.Ident\022\014\n\004name\030\002 \002(\t\022\016\n\006nLevel\030"
    "\003 \002(\005\022\013\n\003job\030\004 \002(\005\022\020\n\010HeadIcon\030\005 \002(\t\"U\n\020"
    "ReqAckCreateTeam\022\035\n\007team_id\030\001 \002(\0132\014.AFMs"
    "g.Ident\022\"\n\txTeamInfo\030\002 \001(\0132\017.AFMsg.TeamI"
    "nfo\"S\n\016ReqAckJoinTeam\022\035\n\007team_id\030\001 \002(\0132\014"
    ".AFMsg.Ident\022\"\n\txTeamInfo\030\002 \001(\0132\017.AFMsg."
    "TeamInfo\"T\n\017ReqAckLeaveTeam\022\035\n\007team_id\030\001"
    " \002(\0132\014.AFMsg.Ident\022\"\n\txTeamInfo\030\002 \001(\0132\017."
    "AFMsg.TeamInfo\"\350\002\n\023ReqAckOprTeamMember\022\035"
    "\n\007team_id\030\001 \002(\0132\014.AFMsg.Ident\022\037\n\tmember_"
    "id\030\002 \002(\0132\014.AFMsg.Ident\022<\n\004type\030\003 \002(\0162..A"
    "FMsg.ReqAckOprTeamMember.EGTeamMemberOpr"
    "Type\022\"\n\txTeamInfo\030\004 \001(\0132\017.AFMsg.TeamInfo"
    "\"\256\001\n\023EGTeamMemberOprType\022\r\n\tEGAT_DOWN\020\000\022"
    "\013\n\007EGAT_UP\020\001\022\r\n\tEGAT_KICK\020\002\022\020\n\014EGAT_APPO"
    "INT\020\003\022\r\n\tEGAT_FIRE\020\004\022\017\n\013EGAT_DEMISE\020\005\022\024\n"
    "\020EGAT_ACCEPTAPPLY\020\006\022\022\n\016EGAT_DENYAPPLY\020\007\022"
    "\020\n\014EGAT_KICKOUT\020\010\"x\n\020ReqAckInviteTeam\022\035\n"
    "\007team_id\030\001 \002(\0132\014.AFMsg.Ident\022\035\n\007self_id\030"
    "\002 \002(\0132\014.AFMsg.Ident\022&\n\020invite_target_id\030"
    "\003 \002(\0132\014.AFMsg.Ident\"\233\001\n\022ReqTeamEnterEcty"
    "pe\022\035\n\007team_id\030\001 \002(\0132\014.AFMsg.Ident\022\035\n\007sel"
    "f_id\030\002 \002(\0132\014.AFMsg.Ident\022\021\n\tnEctypeID\030\003 "
    "\001(\005\022\020\n\010nGroupID\030\004 \001(\005\022\017\n\007nResult\030\005 \001(\005\022\021"
    "\n\tnServerID\030\006 \001(\005\"\210\001\n\022AckTeamEnterEctype"
    "\022\035\n\007team_id\030\001 \002(\0132\014.AFMsg.Ident\022\035\n\007self_"
    "id\030\002 \002(\0132\014.AFMsg.Ident\022\021\n\tnEctypeID\030\003 \001("
    "\005\022\020\n\010nGroupID\030\004 \001(\005\022\017\n\007nResult\030\005 \001(\005\"k\n\021"
    "GridGuildBaseInfo\022\030\n\002id\030\001 \002(\0132\014.AFMsg.Id"
    "ent\022\r\n\005level\030\002 \002(\005\022\r\n\005count\030\003 \002(\005\022\020\n\010res"
    "ource\030\004 \002(\005\022\014\n\004icon\030\005 \002(\014\")\n\021ReqBigMapGr"
    "idInfo\022\024\n\014map_title_id\030\001 \003(\014\"\272\001\n\022BigMapG"
    "ridBaseInfo\022\n\n\002id\030\001 \002(\014\022,\n\nguild_info\030\002 "
    "\002(\0132\030.AFMsg.GridGuildBaseInfo\022\024\n\014kingwar"
    "_time\030\n \002(\005\022 \n\nkingwarrer\030\013 \002(\0132\014.AFMsg."
    "Ident\022\024\n\014hurting_time\030\024 \002(\005\022\034\n\006hurter\030\025 "
    "\002(\0132\014.AFMsg.Ident\"z\n\016BigMapLeaveMsg\022\033\n\005o"
    "wner\030\001 \002(\0132\014.AFMsg.Ident\022\022\n\nowner_name\030\002"
    " \002(\014\022\020\n\010msg_data\030\003 \002(\014\022\020\n\010msg_time\030\004 \002(\005"
    "\022\023\n\013owner_level\030\005 \002(\005\"\236\001\n\020BigMapWarHisto"
    "ry\022*\n\010red_info\030\001 \002(\0132\030.AFMsg.GridGuildBa"
    "seInfo\022+\n\tblue_info\030\002 \002(\0132\030.AFMsg.GridGu"
    "ildBaseInfo\022\037\n\twinner_id\030\n \002(\0132\014.AFMsg.I"
    "dent\022\020\n\010war_time\030\013 \002(\005\"\323\001\n\024BigMapGridDet"
    "ailInfo\0221\n\016grid_base_info\030\001 \002(\0132\031.AFMsg."
    "BigMapGridBaseInfo\0220\n\016stay_guid_list\030\002 \003"
    "(\0132\030.AFMsg.GridGuildBaseInfo\022(\n\tleave_ms"
    "g\030\003 \003(\0132\025.AFMsg.BigMapLeaveMsg\022,\n\013war_hi"
    "story\030\004 \003(\0132\027.AFMsg.BigMapWarHistory\"B\n\021"
    "AckBigMapGridInfo\022-\n\010map_data\030\001 \003(\0132\033.AF"
    "Msg.BigMapGridDetailInfo\"\017\n\rReqBigMapInf"
    "o\"B\n\rAckBigMapInfo\0221\n\016grid_base_info\030\001 \003"
    "(\0132\031.AFMsg.BigMapGridBaseInfo\"F\n\016ReqHold"
    "MapGrid\022\024\n\014map_title_id\030\001 \002(\014\022\036\n\010guild_i"
    "d\030\002 \002(\0132\014.AFMsg.Ident\"\020\n\016AckHoldMapGrid\""
    "P\n\016ReqLeaveMapMsg\022\024\n\014map_title_id\030\001 \002(\014\022"
    "(\n\tleave_msg\030\002 \002(\0132\025.AFMsg.BigMapLeaveMs"
    "g\"\020\n\016AckLeaveMapMsg\"&\n\016ReqGetMapAward\022\024\n"
    "\014map_title_id\030\001 \002(\014\"\020\n\016AckGetMapAward\"%\n"
    "\rReqMapHunting\022\024\n\014map_title_id\030\001 \002(\014\"\017\n\r"
    "AckMapHunting\"%\n\rReqMapKingWar\022\024\n\014map_ti"
    "tle_id\030\001 \002(\014\"\017\n\rAckMapKingWar\"\361\001\n\013PVPRoo"
    "mInfo\022\023\n\013nCellStatus\030\001 \002(\005\022\034\n\006RoomID\030\002 \002"
    "(\0132\014.AFMsg.Ident\022\020\n\010nPVPMode\030\003 \002(\005\022\021\n\tnP"
    "VPGrade\030\004 \002(\005\022\021\n\tMaxPalyer\030\005 \002(\005\022 \n\nxRed"
    "Player\030\006 \003(\0132\014.AFMsg.Ident\022!\n\013xBluePlaye"
    "r\030\007 \003(\0132\014.AFMsg.Ident\022\020\n\010serverid\030\010 \001(\003\022"
    "\017\n\007SceneID\030\t \001(\003\022\017\n\007groupID\030\n \001(\003\"\276\001\n\020Re"
    "qPVPApplyMatch\022\035\n\007self_id\030\001 \002(\0132\014.AFMsg."
    "Ident\022\020\n\010nPVPMode\030\002 \002(\005\022\r\n\005score\030\003 \001(\003\022\021"
    "\n\tApplyType\030\004 \002(\005\022\035\n\007team_id\030\005 \001(\0132\014.AFM"
    "sg.Ident\"8\n\nEApplyType\022\025\n\021EApplyType_Sin"
    "gle\020\000\022\023\n\017EApplyType_Team\020\001\"|\n\020AckPVPAppl"
    "yMatch\022\035\n\007self_id\030\001 \002(\0132\014.AFMsg.Ident\022%\n"
    "\txRoomInfo\030\002 \001(\0132\022.AFMsg.PVPRoomInfo\022\021\n\t"
    "ApplyType\030\003 \002(\005\022\017\n\007nResult\030\004 \002(\005\"Z\n\022ReqC"
    "reatePVPEctype\022\035\n\007self_id\030\001 \002(\0132\014.AFMsg."
    "Ident\022%\n\txRoomInfo\030\002 \002(\0132\022.AFMsg.PVPRoom"
    "Info\"m\n\022AckCreatePVPEctype\022\035\n\007self_id\030\001 "
    "\002(\0132\014.AFMsg.Ident\022%\n\txRoomInfo\030\002 \002(\0132\022.A"
    "FMsg.PVPRoomInfo\022\021\n\tApplyType\030\003 \002(\005", 10515);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AFMsgShare.proto", &protobuf_RegisterTypes);
  ReqEnterGameServer::default_instance_ = new ReqEnterGameServer();
  ReqHeartBeat::default_instance_ = new ReqHeartBeat();
  ReqLeaveGameServer::default_instance_ = new ReqLeaveGameServer();
  PlayerEntryInfo::default_instance_ = new PlayerEntryInfo();
  AckPlayerEntryList::default_instance_ = new AckPlayerEntryList();
  AckPlayerLeaveList::default_instance_ = new AckPlayerLeaveList();
  ReqAckSynData::default_instance_ = new ReqAckSynData();
  ReqAckPlayerMove::default_instance_ = new ReqAckPlayerMove();
  ChatContainer::default_instance_ = new ChatContainer();
  ReqAckPlayerChat::default_instance_ = new ReqAckPlayerChat();
  EffectData::default_instance_ = new EffectData();
  ReqAckUseSkill::default_instance_ = new ReqAckUseSkill();
  ReqAckUseItem::default_instance_ = new ReqAckUseItem();
  ReqAckSwapScene::default_instance_ = new ReqAckSwapScene();
  ItemStruct::default_instance_ = new ItemStruct();
  CurrencyStruct::default_instance_ = new CurrencyStruct();
  ReqAckEndBattle::default_instance_ = new ReqAckEndBattle();
  ReqPickDropItem::default_instance_ = new ReqPickDropItem();
  ReqAcceptTask::default_instance_ = new ReqAcceptTask();
  ReqCompeleteTask::default_instance_ = new ReqCompeleteTask();
  ReqAckJoinActivity::default_instance_ = new ReqAckJoinActivity();
  ReqAckSearchOppnent::default_instance_ = new ReqAckSearchOppnent();
  ReqAckBattleOppnent::default_instance_ = new ReqAckBattleOppnent();
  ReqAckCreateGuild::default_instance_ = new ReqAckCreateGuild();
  ReqSearchGuild::default_instance_ = new ReqSearchGuild();
  AckSearchGuild::default_instance_ = new AckSearchGuild();
  AckSearchGuild_SearchGuildObject::default_instance_ = new AckSearchGuild_SearchGuildObject();
  ReqAckJoinGuild::default_instance_ = new ReqAckJoinGuild();
  ReqAckLeaveGuild::default_instance_ = new ReqAckLeaveGuild();
  ReqAckOprGuildMember::default_instance_ = new ReqAckOprGuildMember();
  ReqAckOprGuild::default_instance_ = new ReqAckOprGuild();
  ReqAckDonateGuildItem::default_instance_ = new ReqAckDonateGuildItem();
  ReqGuildEctypeInfo::default_instance_ = new ReqGuildEctypeInfo();
  GuildEctypeInfo::default_instance_ = new GuildEctypeInfo();
  AckGuildEctypeInfo::default_instance_ = new AckGuildEctypeInfo();
  SetGuildEctypeInfo::default_instance_ = new SetGuildEctypeInfo();
  ReqEnterGuildEctype::default_instance_ = new ReqEnterGuildEctype();
  ChatInfo::default_instance_ = new ChatInfo();
  ReqAckCreateChatGroup::default_instance_ = new ReqAckCreateChatGroup();
  ReqAckjoinChatGroup::default_instance_ = new ReqAckjoinChatGroup();
  ReqAckQuitChatGroup::default_instance_ = new ReqAckQuitChatGroup();
  ReqSubscriptionChatGroup::default_instance_ = new ReqSubscriptionChatGroup();
  ReqCancelSubscriptionChatGroup::default_instance_ = new ReqCancelSubscriptionChatGroup();
  ReqIntensifylevelToEquip::default_instance_ = new ReqIntensifylevelToEquip();
  AckIntensifylevelToEquip::default_instance_ = new AckIntensifylevelToEquip();
  ReqHoleToEquip::default_instance_ = new ReqHoleToEquip();
  AckHoleToEquip::default_instance_ = new AckHoleToEquip();
  ReqInlaystoneToEquip::default_instance_ = new ReqInlaystoneToEquip();
  AckInlaystoneToEquip::default_instance_ = new AckInlaystoneToEquip();
  ReqElementlevelToEquip::default_instance_ = new ReqElementlevelToEquip();
  AckElementlevelToEquip::default_instance_ = new AckElementlevelToEquip();
  ReqSetFightHero::default_instance_ = new ReqSetFightHero();
  ReqWearEquip::default_instance_ = new ReqWearEquip();
  TakeOffEquip::default_instance_ = new TakeOffEquip();
  ReqMiningTitle::default_instance_ = new ReqMiningTitle();
  ReqSendMail::default_instance_ = new ReqSendMail();
  ReqSwitchServer::default_instance_ = new ReqSwitchServer();
  AckSwitchServer::default_instance_ = new AckSwitchServer();
  TeamInfo::default_instance_ = new TeamInfo();
  TeammemberInfo::default_instance_ = new TeammemberInfo();
  ReqAckCreateTeam::default_instance_ = new ReqAckCreateTeam();
  ReqAckJoinTeam::default_instance_ = new ReqAckJoinTeam();
  ReqAckLeaveTeam::default_instance_ = new ReqAckLeaveTeam();
  ReqAckOprTeamMember::default_instance_ = new ReqAckOprTeamMember();
  ReqAckInviteTeam::default_instance_ = new ReqAckInviteTeam();
  ReqTeamEnterEctype::default_instance_ = new ReqTeamEnterEctype();
  AckTeamEnterEctype::default_instance_ = new AckTeamEnterEctype();
  GridGuildBaseInfo::default_instance_ = new GridGuildBaseInfo();
  ReqBigMapGridInfo::default_instance_ = new ReqBigMapGridInfo();
  BigMapGridBaseInfo::default_instance_ = new BigMapGridBaseInfo();
  BigMapLeaveMsg::default_instance_ = new BigMapLeaveMsg();
  BigMapWarHistory::default_instance_ = new BigMapWarHistory();
  BigMapGridDetailInfo::default_instance_ = new BigMapGridDetailInfo();
  AckBigMapGridInfo::default_instance_ = new AckBigMapGridInfo();
  ReqBigMapInfo::default_instance_ = new ReqBigMapInfo();
  AckBigMapInfo::default_instance_ = new AckBigMapInfo();
  ReqHoldMapGrid::default_instance_ = new ReqHoldMapGrid();
  AckHoldMapGrid::default_instance_ = new AckHoldMapGrid();
  ReqLeaveMapMsg::default_instance_ = new ReqLeaveMapMsg();
  AckLeaveMapMsg::default_instance_ = new AckLeaveMapMsg();
  ReqGetMapAward::default_instance_ = new ReqGetMapAward();
  AckGetMapAward::default_instance_ = new AckGetMapAward();
  ReqMapHunting::default_instance_ = new ReqMapHunting();
  AckMapHunting::default_instance_ = new AckMapHunting();
  ReqMapKingWar::default_instance_ = new ReqMapKingWar();
  AckMapKingWar::default_instance_ = new AckMapKingWar();
  PVPRoomInfo::default_instance_ = new PVPRoomInfo();
  ReqPVPApplyMatch::default_instance_ = new ReqPVPApplyMatch();
  AckPVPApplyMatch::default_instance_ = new AckPVPApplyMatch();
  ReqCreatePVPEctype::default_instance_ = new ReqCreatePVPEctype();
  AckCreatePVPEctype::default_instance_ = new AckCreatePVPEctype();
  ReqEnterGameServer::default_instance_->InitAsDefaultInstance();
  ReqHeartBeat::default_instance_->InitAsDefaultInstance();
  ReqLeaveGameServer::default_instance_->InitAsDefaultInstance();
  PlayerEntryInfo::default_instance_->InitAsDefaultInstance();
  AckPlayerEntryList::default_instance_->InitAsDefaultInstance();
  AckPlayerLeaveList::default_instance_->InitAsDefaultInstance();
  ReqAckSynData::default_instance_->InitAsDefaultInstance();
  ReqAckPlayerMove::default_instance_->InitAsDefaultInstance();
  ChatContainer::default_instance_->InitAsDefaultInstance();
  ReqAckPlayerChat::default_instance_->InitAsDefaultInstance();
  EffectData::default_instance_->InitAsDefaultInstance();
  ReqAckUseSkill::default_instance_->InitAsDefaultInstance();
  ReqAckUseItem::default_instance_->InitAsDefaultInstance();
  ReqAckSwapScene::default_instance_->InitAsDefaultInstance();
  ItemStruct::default_instance_->InitAsDefaultInstance();
  CurrencyStruct::default_instance_->InitAsDefaultInstance();
  ReqAckEndBattle::default_instance_->InitAsDefaultInstance();
  ReqPickDropItem::default_instance_->InitAsDefaultInstance();
  ReqAcceptTask::default_instance_->InitAsDefaultInstance();
  ReqCompeleteTask::default_instance_->InitAsDefaultInstance();
  ReqAckJoinActivity::default_instance_->InitAsDefaultInstance();
  ReqAckSearchOppnent::default_instance_->InitAsDefaultInstance();
  ReqAckBattleOppnent::default_instance_->InitAsDefaultInstance();
  ReqAckCreateGuild::default_instance_->InitAsDefaultInstance();
  ReqSearchGuild::default_instance_->InitAsDefaultInstance();
  AckSearchGuild::default_instance_->InitAsDefaultInstance();
  AckSearchGuild_SearchGuildObject::default_instance_->InitAsDefaultInstance();
  ReqAckJoinGuild::default_instance_->InitAsDefaultInstance();
  ReqAckLeaveGuild::default_instance_->InitAsDefaultInstance();
  ReqAckOprGuildMember::default_instance_->InitAsDefaultInstance();
  ReqAckOprGuild::default_instance_->InitAsDefaultInstance();
  ReqAckDonateGuildItem::default_instance_->InitAsDefaultInstance();
  ReqGuildEctypeInfo::default_instance_->InitAsDefaultInstance();
  GuildEctypeInfo::default_instance_->InitAsDefaultInstance();
  AckGuildEctypeInfo::default_instance_->InitAsDefaultInstance();
  SetGuildEctypeInfo::default_instance_->InitAsDefaultInstance();
  ReqEnterGuildEctype::default_instance_->InitAsDefaultInstance();
  ChatInfo::default_instance_->InitAsDefaultInstance();
  ReqAckCreateChatGroup::default_instance_->InitAsDefaultInstance();
  ReqAckjoinChatGroup::default_instance_->InitAsDefaultInstance();
  ReqAckQuitChatGroup::default_instance_->InitAsDefaultInstance();
  ReqSubscriptionChatGroup::default_instance_->InitAsDefaultInstance();
  ReqCancelSubscriptionChatGroup::default_instance_->InitAsDefaultInstance();
  ReqIntensifylevelToEquip::default_instance_->InitAsDefaultInstance();
  AckIntensifylevelToEquip::default_instance_->InitAsDefaultInstance();
  ReqHoleToEquip::default_instance_->InitAsDefaultInstance();
  AckHoleToEquip::default_instance_->InitAsDefaultInstance();
  ReqInlaystoneToEquip::default_instance_->InitAsDefaultInstance();
  AckInlaystoneToEquip::default_instance_->InitAsDefaultInstance();
  ReqElementlevelToEquip::default_instance_->InitAsDefaultInstance();
  AckElementlevelToEquip::default_instance_->InitAsDefaultInstance();
  ReqSetFightHero::default_instance_->InitAsDefaultInstance();
  ReqWearEquip::default_instance_->InitAsDefaultInstance();
  TakeOffEquip::default_instance_->InitAsDefaultInstance();
  ReqMiningTitle::default_instance_->InitAsDefaultInstance();
  ReqSendMail::default_instance_->InitAsDefaultInstance();
  ReqSwitchServer::default_instance_->InitAsDefaultInstance();
  AckSwitchServer::default_instance_->InitAsDefaultInstance();
  TeamInfo::default_instance_->InitAsDefaultInstance();
  TeammemberInfo::default_instance_->InitAsDefaultInstance();
  ReqAckCreateTeam::default_instance_->InitAsDefaultInstance();
  ReqAckJoinTeam::default_instance_->InitAsDefaultInstance();
  ReqAckLeaveTeam::default_instance_->InitAsDefaultInstance();
  ReqAckOprTeamMember::default_instance_->InitAsDefaultInstance();
  ReqAckInviteTeam::default_instance_->InitAsDefaultInstance();
  ReqTeamEnterEctype::default_instance_->InitAsDefaultInstance();
  AckTeamEnterEctype::default_instance_->InitAsDefaultInstance();
  GridGuildBaseInfo::default_instance_->InitAsDefaultInstance();
  ReqBigMapGridInfo::default_instance_->InitAsDefaultInstance();
  BigMapGridBaseInfo::default_instance_->InitAsDefaultInstance();
  BigMapLeaveMsg::default_instance_->InitAsDefaultInstance();
  BigMapWarHistory::default_instance_->InitAsDefaultInstance();
  BigMapGridDetailInfo::default_instance_->InitAsDefaultInstance();
  AckBigMapGridInfo::default_instance_->InitAsDefaultInstance();
  ReqBigMapInfo::default_instance_->InitAsDefaultInstance();
  AckBigMapInfo::default_instance_->InitAsDefaultInstance();
  ReqHoldMapGrid::default_instance_->InitAsDefaultInstance();
  AckHoldMapGrid::default_instance_->InitAsDefaultInstance();
  ReqLeaveMapMsg::default_instance_->InitAsDefaultInstance();
  AckLeaveMapMsg::default_instance_->InitAsDefaultInstance();
  ReqGetMapAward::default_instance_->InitAsDefaultInstance();
  AckGetMapAward::default_instance_->InitAsDefaultInstance();
  ReqMapHunting::default_instance_->InitAsDefaultInstance();
  AckMapHunting::default_instance_->InitAsDefaultInstance();
  ReqMapKingWar::default_instance_->InitAsDefaultInstance();
  AckMapKingWar::default_instance_->InitAsDefaultInstance();
  PVPRoomInfo::default_instance_->InitAsDefaultInstance();
  ReqPVPApplyMatch::default_instance_->InitAsDefaultInstance();
  AckPVPApplyMatch::default_instance_->InitAsDefaultInstance();
  ReqCreatePVPEctype::default_instance_->InitAsDefaultInstance();
  AckCreatePVPEctype::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AFMsgShare_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AFMsgShare_2eproto {
  StaticDescriptorInitializer_AFMsgShare_2eproto() {
    protobuf_AddDesc_AFMsgShare_2eproto();
  }
} static_descriptor_initializer_AFMsgShare_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqEnterGameServer::kIdFieldNumber;
const int ReqEnterGameServer::kAccountFieldNumber;
const int ReqEnterGameServer::kGameIdFieldNumber;
const int ReqEnterGameServer::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqEnterGameServer::ReqEnterGameServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqEnterGameServer)
}

void ReqEnterGameServer::InitAsDefaultInstance() {
  id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqEnterGameServer::ReqEnterGameServer(const ReqEnterGameServer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqEnterGameServer)
}

void ReqEnterGameServer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = NULL;
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_id_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqEnterGameServer::~ReqEnterGameServer() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqEnterGameServer)
  SharedDtor();
}

void ReqEnterGameServer::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete id_;
  }
}

void ReqEnterGameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqEnterGameServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqEnterGameServer_descriptor_;
}

const ReqEnterGameServer& ReqEnterGameServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqEnterGameServer* ReqEnterGameServer::default_instance_ = NULL;

ReqEnterGameServer* ReqEnterGameServer::New(::google::protobuf::Arena* arena) const {
  ReqEnterGameServer* n = new ReqEnterGameServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqEnterGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqEnterGameServer)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_id()) {
      if (id_ != NULL) id_->::AFMsg::Ident::Clear();
    }
    if (has_account()) {
      account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    game_id_ = 0;
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqEnterGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqEnterGameServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // required bytes account = 2;
      case 2: {
        if (tag == 18) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_game_id;
        break;
      }

      // required int32 game_id = 3;
      case 3: {
        if (tag == 24) {
         parse_game_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_id_)));
          set_has_game_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required bytes name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqEnterGameServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqEnterGameServer)
  return false;
#undef DO_
}

void ReqEnterGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqEnterGameServer)
  // required .AFMsg.Ident id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // required bytes account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->account(), output);
  }

  // required int32 game_id = 3;
  if (has_game_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->game_id(), output);
  }

  // required bytes name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqEnterGameServer)
}

::google::protobuf::uint8* ReqEnterGameServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqEnterGameServer)
  // required .AFMsg.Ident id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, false, target);
  }

  // required bytes account = 2;
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->account(), target);
  }

  // required int32 game_id = 3;
  if (has_game_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->game_id(), target);
  }

  // required bytes name = 4;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqEnterGameServer)
  return target;
}

int ReqEnterGameServer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqEnterGameServer)
  int total_size = 0;

  if (has_id()) {
    // required .AFMsg.Ident id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }

  if (has_account()) {
    // required bytes account = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->account());
  }

  if (has_game_id()) {
    // required int32 game_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->game_id());
  }

  if (has_name()) {
    // required bytes name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  return total_size;
}
int ReqEnterGameServer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqEnterGameServer)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .AFMsg.Ident id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);

    // required bytes account = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->account());

    // required int32 game_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->game_id());

    // required bytes name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqEnterGameServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqEnterGameServer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqEnterGameServer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqEnterGameServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqEnterGameServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqEnterGameServer)
    MergeFrom(*source);
  }
}

void ReqEnterGameServer::MergeFrom(const ReqEnterGameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqEnterGameServer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::AFMsg::Ident::MergeFrom(from.id());
    }
    if (from.has_account()) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (from.has_game_id()) {
      set_game_id(from.game_id());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqEnterGameServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqEnterGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnterGameServer::CopyFrom(const ReqEnterGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqEnterGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEnterGameServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_id()) {
    if (!this->id_->IsInitialized()) return false;
  }
  return true;
}

void ReqEnterGameServer::Swap(ReqEnterGameServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqEnterGameServer::InternalSwap(ReqEnterGameServer* other) {
  std::swap(id_, other->id_);
  account_.Swap(&other->account_);
  std::swap(game_id_, other->game_id_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqEnterGameServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqEnterGameServer_descriptor_;
  metadata.reflection = ReqEnterGameServer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqEnterGameServer

// required .AFMsg.Ident id = 1;
bool ReqEnterGameServer::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqEnterGameServer::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqEnterGameServer::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqEnterGameServer::clear_id() {
  if (id_ != NULL) id_->::AFMsg::Ident::Clear();
  clear_has_id();
}
const ::AFMsg::Ident& ReqEnterGameServer::id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqEnterGameServer.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
::AFMsg::Ident* ReqEnterGameServer::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqEnterGameServer.id)
  return id_;
}
::AFMsg::Ident* ReqEnterGameServer::release_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqEnterGameServer.id)
  clear_has_id();
  ::AFMsg::Ident* temp = id_;
  id_ = NULL;
  return temp;
}
void ReqEnterGameServer::set_allocated_id(::AFMsg::Ident* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqEnterGameServer.id)
}

// required bytes account = 2;
bool ReqEnterGameServer::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqEnterGameServer::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqEnterGameServer::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqEnterGameServer::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
 const ::std::string& ReqEnterGameServer::account() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqEnterGameServer.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqEnterGameServer::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqEnterGameServer.account)
}
 void ReqEnterGameServer::set_account(const char* value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqEnterGameServer.account)
}
 void ReqEnterGameServer::set_account(const void* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqEnterGameServer.account)
}
 ::std::string* ReqEnterGameServer::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqEnterGameServer.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReqEnterGameServer::release_account() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqEnterGameServer.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqEnterGameServer::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqEnterGameServer.account)
}

// required int32 game_id = 3;
bool ReqEnterGameServer::has_game_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqEnterGameServer::set_has_game_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqEnterGameServer::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqEnterGameServer::clear_game_id() {
  game_id_ = 0;
  clear_has_game_id();
}
 ::google::protobuf::int32 ReqEnterGameServer::game_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqEnterGameServer.game_id)
  return game_id_;
}
 void ReqEnterGameServer::set_game_id(::google::protobuf::int32 value) {
  set_has_game_id();
  game_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqEnterGameServer.game_id)
}

// required bytes name = 4;
bool ReqEnterGameServer::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReqEnterGameServer::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
void ReqEnterGameServer::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReqEnterGameServer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& ReqEnterGameServer::name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqEnterGameServer.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqEnterGameServer::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqEnterGameServer.name)
}
 void ReqEnterGameServer::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqEnterGameServer.name)
}
 void ReqEnterGameServer::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqEnterGameServer.name)
}
 ::std::string* ReqEnterGameServer::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqEnterGameServer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReqEnterGameServer::release_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqEnterGameServer.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqEnterGameServer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqEnterGameServer.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqHeartBeat::ReqHeartBeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqHeartBeat)
}

void ReqHeartBeat::InitAsDefaultInstance() {
}

ReqHeartBeat::ReqHeartBeat(const ReqHeartBeat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqHeartBeat)
}

void ReqHeartBeat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqHeartBeat::~ReqHeartBeat() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqHeartBeat)
  SharedDtor();
}

void ReqHeartBeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqHeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqHeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqHeartBeat_descriptor_;
}

const ReqHeartBeat& ReqHeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqHeartBeat* ReqHeartBeat::default_instance_ = NULL;

ReqHeartBeat* ReqHeartBeat::New(::google::protobuf::Arena* arena) const {
  ReqHeartBeat* n = new ReqHeartBeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqHeartBeat)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqHeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqHeartBeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqHeartBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqHeartBeat)
  return false;
#undef DO_
}

void ReqHeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqHeartBeat)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqHeartBeat)
}

::google::protobuf::uint8* ReqHeartBeat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqHeartBeat)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqHeartBeat)
  return target;
}

int ReqHeartBeat::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqHeartBeat)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqHeartBeat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqHeartBeat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqHeartBeat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqHeartBeat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqHeartBeat)
    MergeFrom(*source);
  }
}

void ReqHeartBeat::MergeFrom(const ReqHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqHeartBeat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqHeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHeartBeat::CopyFrom(const ReqHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHeartBeat::IsInitialized() const {

  return true;
}

void ReqHeartBeat::Swap(ReqHeartBeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqHeartBeat::InternalSwap(ReqHeartBeat* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqHeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqHeartBeat_descriptor_;
  metadata.reflection = ReqHeartBeat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqHeartBeat

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqLeaveGameServer::ReqLeaveGameServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqLeaveGameServer)
}

void ReqLeaveGameServer::InitAsDefaultInstance() {
}

ReqLeaveGameServer::ReqLeaveGameServer(const ReqLeaveGameServer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqLeaveGameServer)
}

void ReqLeaveGameServer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLeaveGameServer::~ReqLeaveGameServer() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqLeaveGameServer)
  SharedDtor();
}

void ReqLeaveGameServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqLeaveGameServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLeaveGameServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLeaveGameServer_descriptor_;
}

const ReqLeaveGameServer& ReqLeaveGameServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqLeaveGameServer* ReqLeaveGameServer::default_instance_ = NULL;

ReqLeaveGameServer* ReqLeaveGameServer::New(::google::protobuf::Arena* arena) const {
  ReqLeaveGameServer* n = new ReqLeaveGameServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqLeaveGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqLeaveGameServer)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqLeaveGameServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqLeaveGameServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqLeaveGameServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqLeaveGameServer)
  return false;
#undef DO_
}

void ReqLeaveGameServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqLeaveGameServer)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqLeaveGameServer)
}

::google::protobuf::uint8* ReqLeaveGameServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqLeaveGameServer)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqLeaveGameServer)
  return target;
}

int ReqLeaveGameServer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqLeaveGameServer)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLeaveGameServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqLeaveGameServer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqLeaveGameServer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqLeaveGameServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqLeaveGameServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqLeaveGameServer)
    MergeFrom(*source);
  }
}

void ReqLeaveGameServer::MergeFrom(const ReqLeaveGameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqLeaveGameServer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqLeaveGameServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqLeaveGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLeaveGameServer::CopyFrom(const ReqLeaveGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqLeaveGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLeaveGameServer::IsInitialized() const {

  return true;
}

void ReqLeaveGameServer::Swap(ReqLeaveGameServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqLeaveGameServer::InternalSwap(ReqLeaveGameServer* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqLeaveGameServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLeaveGameServer_descriptor_;
  metadata.reflection = ReqLeaveGameServer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqLeaveGameServer

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerEntryInfo::kObjectGuidFieldNumber;
const int PlayerEntryInfo::kPosFieldNumber;
const int PlayerEntryInfo::kCareerTypeFieldNumber;
const int PlayerEntryInfo::kPlayerStateFieldNumber;
const int PlayerEntryInfo::kConfigIdFieldNumber;
const int PlayerEntryInfo::kSceneIdFieldNumber;
const int PlayerEntryInfo::kClassIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerEntryInfo::PlayerEntryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.PlayerEntryInfo)
}

void PlayerEntryInfo::InitAsDefaultInstance() {
  object_guid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  pos_ = const_cast< ::AFMsg::Point3D*>(&::AFMsg::Point3D::default_instance());
}

PlayerEntryInfo::PlayerEntryInfo(const PlayerEntryInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.PlayerEntryInfo)
}

void PlayerEntryInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  object_guid_ = NULL;
  pos_ = NULL;
  career_type_ = 0;
  player_state_ = 0;
  config_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scene_id_ = 0;
  class_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerEntryInfo::~PlayerEntryInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.PlayerEntryInfo)
  SharedDtor();
}

void PlayerEntryInfo::SharedDtor() {
  config_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete object_guid_;
    delete pos_;
  }
}

void PlayerEntryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEntryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerEntryInfo_descriptor_;
}

const PlayerEntryInfo& PlayerEntryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

PlayerEntryInfo* PlayerEntryInfo::default_instance_ = NULL;

PlayerEntryInfo* PlayerEntryInfo::New(::google::protobuf::Arena* arena) const {
  PlayerEntryInfo* n = new PlayerEntryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerEntryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.PlayerEntryInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayerEntryInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerEntryInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(career_type_, player_state_);
    if (has_object_guid()) {
      if (object_guid_ != NULL) object_guid_->::AFMsg::Ident::Clear();
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::AFMsg::Point3D::Clear();
    }
    if (has_config_id()) {
      config_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    scene_id_ = 0;
    if (has_class_id()) {
      class_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlayerEntryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.PlayerEntryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident object_guid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object_guid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // required .AFMsg.Point3D pos = 2;
      case 2: {
        if (tag == 18) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_career_type;
        break;
      }

      // required int32 career_type = 3;
      case 3: {
        if (tag == 24) {
         parse_career_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &career_type_)));
          set_has_career_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_player_state;
        break;
      }

      // required int32 player_state = 4;
      case 4: {
        if (tag == 32) {
         parse_player_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_state_)));
          set_has_player_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_config_id;
        break;
      }

      // required bytes config_id = 5;
      case 5: {
        if (tag == 42) {
         parse_config_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_config_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_scene_id;
        break;
      }

      // required int32 scene_id = 6;
      case 6: {
        if (tag == 48) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_class_id;
        break;
      }

      // required bytes class_id = 7;
      case 7: {
        if (tag == 58) {
         parse_class_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_class_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.PlayerEntryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.PlayerEntryInfo)
  return false;
#undef DO_
}

void PlayerEntryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.PlayerEntryInfo)
  // required .AFMsg.Ident object_guid = 1;
  if (has_object_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->object_guid_, output);
  }

  // required .AFMsg.Point3D pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pos_, output);
  }

  // required int32 career_type = 3;
  if (has_career_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->career_type(), output);
  }

  // required int32 player_state = 4;
  if (has_player_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->player_state(), output);
  }

  // required bytes config_id = 5;
  if (has_config_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->config_id(), output);
  }

  // required int32 scene_id = 6;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->scene_id(), output);
  }

  // required bytes class_id = 7;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->class_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.PlayerEntryInfo)
}

::google::protobuf::uint8* PlayerEntryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.PlayerEntryInfo)
  // required .AFMsg.Ident object_guid = 1;
  if (has_object_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->object_guid_, false, target);
  }

  // required .AFMsg.Point3D pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pos_, false, target);
  }

  // required int32 career_type = 3;
  if (has_career_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->career_type(), target);
  }

  // required int32 player_state = 4;
  if (has_player_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->player_state(), target);
  }

  // required bytes config_id = 5;
  if (has_config_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->config_id(), target);
  }

  // required int32 scene_id = 6;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->scene_id(), target);
  }

  // required bytes class_id = 7;
  if (has_class_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->class_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.PlayerEntryInfo)
  return target;
}

int PlayerEntryInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.PlayerEntryInfo)
  int total_size = 0;

  if (has_object_guid()) {
    // required .AFMsg.Ident object_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->object_guid_);
  }

  if (has_pos()) {
    // required .AFMsg.Point3D pos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);
  }

  if (has_career_type()) {
    // required int32 career_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->career_type());
  }

  if (has_player_state()) {
    // required int32 player_state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_state());
  }

  if (has_config_id()) {
    // required bytes config_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->config_id());
  }

  if (has_scene_id()) {
    // required int32 scene_id = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scene_id());
  }

  if (has_class_id()) {
    // required bytes class_id = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->class_id());
  }

  return total_size;
}
int PlayerEntryInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.PlayerEntryInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .AFMsg.Ident object_guid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->object_guid_);

    // required .AFMsg.Point3D pos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pos_);

    // required int32 career_type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->career_type());

    // required int32 player_state = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->player_state());

    // required bytes config_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->config_id());

    // required int32 scene_id = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scene_id());

    // required bytes class_id = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->class_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEntryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.PlayerEntryInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayerEntryInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerEntryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.PlayerEntryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.PlayerEntryInfo)
    MergeFrom(*source);
  }
}

void PlayerEntryInfo::MergeFrom(const PlayerEntryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.PlayerEntryInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_guid()) {
      mutable_object_guid()->::AFMsg::Ident::MergeFrom(from.object_guid());
    }
    if (from.has_pos()) {
      mutable_pos()->::AFMsg::Point3D::MergeFrom(from.pos());
    }
    if (from.has_career_type()) {
      set_career_type(from.career_type());
    }
    if (from.has_player_state()) {
      set_player_state(from.player_state());
    }
    if (from.has_config_id()) {
      set_has_config_id();
      config_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.config_id_);
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_class_id()) {
      set_has_class_id();
      class_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlayerEntryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.PlayerEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEntryInfo::CopyFrom(const PlayerEntryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.PlayerEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEntryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_object_guid()) {
    if (!this->object_guid_->IsInitialized()) return false;
  }
  if (has_pos()) {
    if (!this->pos_->IsInitialized()) return false;
  }
  return true;
}

void PlayerEntryInfo::Swap(PlayerEntryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerEntryInfo::InternalSwap(PlayerEntryInfo* other) {
  std::swap(object_guid_, other->object_guid_);
  std::swap(pos_, other->pos_);
  std::swap(career_type_, other->career_type_);
  std::swap(player_state_, other->player_state_);
  config_id_.Swap(&other->config_id_);
  std::swap(scene_id_, other->scene_id_);
  class_id_.Swap(&other->class_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerEntryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerEntryInfo_descriptor_;
  metadata.reflection = PlayerEntryInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerEntryInfo

// required .AFMsg.Ident object_guid = 1;
bool PlayerEntryInfo::has_object_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerEntryInfo::set_has_object_guid() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerEntryInfo::clear_has_object_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerEntryInfo::clear_object_guid() {
  if (object_guid_ != NULL) object_guid_->::AFMsg::Ident::Clear();
  clear_has_object_guid();
}
const ::AFMsg::Ident& PlayerEntryInfo::object_guid() const {
  // @@protoc_insertion_point(field_get:AFMsg.PlayerEntryInfo.object_guid)
  return object_guid_ != NULL ? *object_guid_ : *default_instance_->object_guid_;
}
::AFMsg::Ident* PlayerEntryInfo::mutable_object_guid() {
  set_has_object_guid();
  if (object_guid_ == NULL) {
    object_guid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.PlayerEntryInfo.object_guid)
  return object_guid_;
}
::AFMsg::Ident* PlayerEntryInfo::release_object_guid() {
  // @@protoc_insertion_point(field_release:AFMsg.PlayerEntryInfo.object_guid)
  clear_has_object_guid();
  ::AFMsg::Ident* temp = object_guid_;
  object_guid_ = NULL;
  return temp;
}
void PlayerEntryInfo::set_allocated_object_guid(::AFMsg::Ident* object_guid) {
  delete object_guid_;
  object_guid_ = object_guid;
  if (object_guid) {
    set_has_object_guid();
  } else {
    clear_has_object_guid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.PlayerEntryInfo.object_guid)
}

// required .AFMsg.Point3D pos = 2;
bool PlayerEntryInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerEntryInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerEntryInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerEntryInfo::clear_pos() {
  if (pos_ != NULL) pos_->::AFMsg::Point3D::Clear();
  clear_has_pos();
}
const ::AFMsg::Point3D& PlayerEntryInfo::pos() const {
  // @@protoc_insertion_point(field_get:AFMsg.PlayerEntryInfo.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
::AFMsg::Point3D* PlayerEntryInfo::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::AFMsg::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.PlayerEntryInfo.pos)
  return pos_;
}
::AFMsg::Point3D* PlayerEntryInfo::release_pos() {
  // @@protoc_insertion_point(field_release:AFMsg.PlayerEntryInfo.pos)
  clear_has_pos();
  ::AFMsg::Point3D* temp = pos_;
  pos_ = NULL;
  return temp;
}
void PlayerEntryInfo::set_allocated_pos(::AFMsg::Point3D* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.PlayerEntryInfo.pos)
}

// required int32 career_type = 3;
bool PlayerEntryInfo::has_career_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayerEntryInfo::set_has_career_type() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayerEntryInfo::clear_has_career_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayerEntryInfo::clear_career_type() {
  career_type_ = 0;
  clear_has_career_type();
}
 ::google::protobuf::int32 PlayerEntryInfo::career_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.PlayerEntryInfo.career_type)
  return career_type_;
}
 void PlayerEntryInfo::set_career_type(::google::protobuf::int32 value) {
  set_has_career_type();
  career_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PlayerEntryInfo.career_type)
}

// required int32 player_state = 4;
bool PlayerEntryInfo::has_player_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlayerEntryInfo::set_has_player_state() {
  _has_bits_[0] |= 0x00000008u;
}
void PlayerEntryInfo::clear_has_player_state() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlayerEntryInfo::clear_player_state() {
  player_state_ = 0;
  clear_has_player_state();
}
 ::google::protobuf::int32 PlayerEntryInfo::player_state() const {
  // @@protoc_insertion_point(field_get:AFMsg.PlayerEntryInfo.player_state)
  return player_state_;
}
 void PlayerEntryInfo::set_player_state(::google::protobuf::int32 value) {
  set_has_player_state();
  player_state_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PlayerEntryInfo.player_state)
}

// required bytes config_id = 5;
bool PlayerEntryInfo::has_config_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PlayerEntryInfo::set_has_config_id() {
  _has_bits_[0] |= 0x00000010u;
}
void PlayerEntryInfo::clear_has_config_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void PlayerEntryInfo::clear_config_id() {
  config_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_config_id();
}
 const ::std::string& PlayerEntryInfo::config_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.PlayerEntryInfo.config_id)
  return config_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerEntryInfo::set_config_id(const ::std::string& value) {
  set_has_config_id();
  config_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.PlayerEntryInfo.config_id)
}
 void PlayerEntryInfo::set_config_id(const char* value) {
  set_has_config_id();
  config_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.PlayerEntryInfo.config_id)
}
 void PlayerEntryInfo::set_config_id(const void* value, size_t size) {
  set_has_config_id();
  config_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.PlayerEntryInfo.config_id)
}
 ::std::string* PlayerEntryInfo::mutable_config_id() {
  set_has_config_id();
  // @@protoc_insertion_point(field_mutable:AFMsg.PlayerEntryInfo.config_id)
  return config_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerEntryInfo::release_config_id() {
  // @@protoc_insertion_point(field_release:AFMsg.PlayerEntryInfo.config_id)
  clear_has_config_id();
  return config_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerEntryInfo::set_allocated_config_id(::std::string* config_id) {
  if (config_id != NULL) {
    set_has_config_id();
  } else {
    clear_has_config_id();
  }
  config_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.PlayerEntryInfo.config_id)
}

// required int32 scene_id = 6;
bool PlayerEntryInfo::has_scene_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PlayerEntryInfo::set_has_scene_id() {
  _has_bits_[0] |= 0x00000020u;
}
void PlayerEntryInfo::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void PlayerEntryInfo::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
 ::google::protobuf::int32 PlayerEntryInfo::scene_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.PlayerEntryInfo.scene_id)
  return scene_id_;
}
 void PlayerEntryInfo::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PlayerEntryInfo.scene_id)
}

// required bytes class_id = 7;
bool PlayerEntryInfo::has_class_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PlayerEntryInfo::set_has_class_id() {
  _has_bits_[0] |= 0x00000040u;
}
void PlayerEntryInfo::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void PlayerEntryInfo::clear_class_id() {
  class_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_class_id();
}
 const ::std::string& PlayerEntryInfo::class_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.PlayerEntryInfo.class_id)
  return class_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerEntryInfo::set_class_id(const ::std::string& value) {
  set_has_class_id();
  class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.PlayerEntryInfo.class_id)
}
 void PlayerEntryInfo::set_class_id(const char* value) {
  set_has_class_id();
  class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.PlayerEntryInfo.class_id)
}
 void PlayerEntryInfo::set_class_id(const void* value, size_t size) {
  set_has_class_id();
  class_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.PlayerEntryInfo.class_id)
}
 ::std::string* PlayerEntryInfo::mutable_class_id() {
  set_has_class_id();
  // @@protoc_insertion_point(field_mutable:AFMsg.PlayerEntryInfo.class_id)
  return class_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PlayerEntryInfo::release_class_id() {
  // @@protoc_insertion_point(field_release:AFMsg.PlayerEntryInfo.class_id)
  clear_has_class_id();
  return class_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PlayerEntryInfo::set_allocated_class_id(::std::string* class_id) {
  if (class_id != NULL) {
    set_has_class_id();
  } else {
    clear_has_class_id();
  }
  class_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.PlayerEntryInfo.class_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckPlayerEntryList::kObjectListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckPlayerEntryList::AckPlayerEntryList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckPlayerEntryList)
}

void AckPlayerEntryList::InitAsDefaultInstance() {
}

AckPlayerEntryList::AckPlayerEntryList(const AckPlayerEntryList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckPlayerEntryList)
}

void AckPlayerEntryList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPlayerEntryList::~AckPlayerEntryList() {
  // @@protoc_insertion_point(destructor:AFMsg.AckPlayerEntryList)
  SharedDtor();
}

void AckPlayerEntryList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckPlayerEntryList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPlayerEntryList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPlayerEntryList_descriptor_;
}

const AckPlayerEntryList& AckPlayerEntryList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

AckPlayerEntryList* AckPlayerEntryList::default_instance_ = NULL;

AckPlayerEntryList* AckPlayerEntryList::New(::google::protobuf::Arena* arena) const {
  AckPlayerEntryList* n = new AckPlayerEntryList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckPlayerEntryList::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckPlayerEntryList)
  object_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AckPlayerEntryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckPlayerEntryList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFMsg.PlayerEntryInfo object_list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_object_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_object_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_object_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckPlayerEntryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckPlayerEntryList)
  return false;
#undef DO_
}

void AckPlayerEntryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckPlayerEntryList)
  // repeated .AFMsg.PlayerEntryInfo object_list = 1;
  for (unsigned int i = 0, n = this->object_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->object_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckPlayerEntryList)
}

::google::protobuf::uint8* AckPlayerEntryList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckPlayerEntryList)
  // repeated .AFMsg.PlayerEntryInfo object_list = 1;
  for (unsigned int i = 0, n = this->object_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->object_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckPlayerEntryList)
  return target;
}

int AckPlayerEntryList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckPlayerEntryList)
  int total_size = 0;

  // repeated .AFMsg.PlayerEntryInfo object_list = 1;
  total_size += 1 * this->object_list_size();
  for (int i = 0; i < this->object_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->object_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPlayerEntryList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckPlayerEntryList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AckPlayerEntryList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AckPlayerEntryList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckPlayerEntryList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckPlayerEntryList)
    MergeFrom(*source);
  }
}

void AckPlayerEntryList::MergeFrom(const AckPlayerEntryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckPlayerEntryList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  object_list_.MergeFrom(from.object_list_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AckPlayerEntryList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckPlayerEntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPlayerEntryList::CopyFrom(const AckPlayerEntryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckPlayerEntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPlayerEntryList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->object_list())) return false;
  return true;
}

void AckPlayerEntryList::Swap(AckPlayerEntryList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckPlayerEntryList::InternalSwap(AckPlayerEntryList* other) {
  object_list_.UnsafeArenaSwap(&other->object_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckPlayerEntryList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPlayerEntryList_descriptor_;
  metadata.reflection = AckPlayerEntryList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckPlayerEntryList

// repeated .AFMsg.PlayerEntryInfo object_list = 1;
int AckPlayerEntryList::object_list_size() const {
  return object_list_.size();
}
void AckPlayerEntryList::clear_object_list() {
  object_list_.Clear();
}
const ::AFMsg::PlayerEntryInfo& AckPlayerEntryList::object_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.AckPlayerEntryList.object_list)
  return object_list_.Get(index);
}
::AFMsg::PlayerEntryInfo* AckPlayerEntryList::mutable_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.AckPlayerEntryList.object_list)
  return object_list_.Mutable(index);
}
::AFMsg::PlayerEntryInfo* AckPlayerEntryList::add_object_list() {
  // @@protoc_insertion_point(field_add:AFMsg.AckPlayerEntryList.object_list)
  return object_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::AFMsg::PlayerEntryInfo >*
AckPlayerEntryList::mutable_object_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.AckPlayerEntryList.object_list)
  return &object_list_;
}
const ::google::protobuf::RepeatedPtrField< ::AFMsg::PlayerEntryInfo >&
AckPlayerEntryList::object_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.AckPlayerEntryList.object_list)
  return object_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckPlayerLeaveList::kObjectListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckPlayerLeaveList::AckPlayerLeaveList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckPlayerLeaveList)
}

void AckPlayerLeaveList::InitAsDefaultInstance() {
}

AckPlayerLeaveList::AckPlayerLeaveList(const AckPlayerLeaveList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckPlayerLeaveList)
}

void AckPlayerLeaveList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPlayerLeaveList::~AckPlayerLeaveList() {
  // @@protoc_insertion_point(destructor:AFMsg.AckPlayerLeaveList)
  SharedDtor();
}

void AckPlayerLeaveList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckPlayerLeaveList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPlayerLeaveList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPlayerLeaveList_descriptor_;
}

const AckPlayerLeaveList& AckPlayerLeaveList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

AckPlayerLeaveList* AckPlayerLeaveList::default_instance_ = NULL;

AckPlayerLeaveList* AckPlayerLeaveList::New(::google::protobuf::Arena* arena) const {
  AckPlayerLeaveList* n = new AckPlayerLeaveList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckPlayerLeaveList::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckPlayerLeaveList)
  object_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AckPlayerLeaveList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckPlayerLeaveList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFMsg.Ident object_list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_object_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_object_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_object_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckPlayerLeaveList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckPlayerLeaveList)
  return false;
#undef DO_
}

void AckPlayerLeaveList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckPlayerLeaveList)
  // repeated .AFMsg.Ident object_list = 1;
  for (unsigned int i = 0, n = this->object_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->object_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckPlayerLeaveList)
}

::google::protobuf::uint8* AckPlayerLeaveList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckPlayerLeaveList)
  // repeated .AFMsg.Ident object_list = 1;
  for (unsigned int i = 0, n = this->object_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->object_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckPlayerLeaveList)
  return target;
}

int AckPlayerLeaveList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckPlayerLeaveList)
  int total_size = 0;

  // repeated .AFMsg.Ident object_list = 1;
  total_size += 1 * this->object_list_size();
  for (int i = 0; i < this->object_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->object_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPlayerLeaveList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckPlayerLeaveList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AckPlayerLeaveList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AckPlayerLeaveList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckPlayerLeaveList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckPlayerLeaveList)
    MergeFrom(*source);
  }
}

void AckPlayerLeaveList::MergeFrom(const AckPlayerLeaveList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckPlayerLeaveList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  object_list_.MergeFrom(from.object_list_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AckPlayerLeaveList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckPlayerLeaveList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPlayerLeaveList::CopyFrom(const AckPlayerLeaveList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckPlayerLeaveList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPlayerLeaveList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->object_list())) return false;
  return true;
}

void AckPlayerLeaveList::Swap(AckPlayerLeaveList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckPlayerLeaveList::InternalSwap(AckPlayerLeaveList* other) {
  object_list_.UnsafeArenaSwap(&other->object_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckPlayerLeaveList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPlayerLeaveList_descriptor_;
  metadata.reflection = AckPlayerLeaveList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckPlayerLeaveList

// repeated .AFMsg.Ident object_list = 1;
int AckPlayerLeaveList::object_list_size() const {
  return object_list_.size();
}
void AckPlayerLeaveList::clear_object_list() {
  object_list_.Clear();
}
const ::AFMsg::Ident& AckPlayerLeaveList::object_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.AckPlayerLeaveList.object_list)
  return object_list_.Get(index);
}
::AFMsg::Ident* AckPlayerLeaveList::mutable_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.AckPlayerLeaveList.object_list)
  return object_list_.Mutable(index);
}
::AFMsg::Ident* AckPlayerLeaveList::add_object_list() {
  // @@protoc_insertion_point(field_add:AFMsg.AckPlayerLeaveList.object_list)
  return object_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
AckPlayerLeaveList::mutable_object_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.AckPlayerLeaveList.object_list)
  return &object_list_;
}
const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
AckPlayerLeaveList::object_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.AckPlayerLeaveList.object_list)
  return object_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqAckSynData_SynType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckSynData_SynType_descriptor_;
}
bool ReqAckSynData_SynType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckSynData_SynType ReqAckSynData::EST_SCENE;
const ReqAckSynData_SynType ReqAckSynData::EST_GROUP;
const ReqAckSynData_SynType ReqAckSynData::EST_GUILD;
const ReqAckSynData_SynType ReqAckSynData::EST_FRIEND;
const ReqAckSynData_SynType ReqAckSynData::SynType_MIN;
const ReqAckSynData_SynType ReqAckSynData::SynType_MAX;
const int ReqAckSynData::SynType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckSynData::kSyserFieldNumber;
const int ReqAckSynData::kObjectListFieldNumber;
const int ReqAckSynData::kDataFieldNumber;
const int ReqAckSynData::kSynTypeFieldNumber;
const int ReqAckSynData::kMsgIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckSynData::ReqAckSynData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckSynData)
}

void ReqAckSynData::InitAsDefaultInstance() {
  syser_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqAckSynData::ReqAckSynData(const ReqAckSynData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckSynData)
}

void ReqAckSynData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  syser_ = NULL;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  syn_type_ = 1;
  msg_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckSynData::~ReqAckSynData() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckSynData)
  SharedDtor();
}

void ReqAckSynData::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete syser_;
  }
}

void ReqAckSynData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckSynData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckSynData_descriptor_;
}

const ReqAckSynData& ReqAckSynData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckSynData* ReqAckSynData::default_instance_ = NULL;

ReqAckSynData* ReqAckSynData::New(::google::protobuf::Arena* arena) const {
  ReqAckSynData* n = new ReqAckSynData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckSynData::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckSynData)
  if (_has_bits_[0 / 32] & 29u) {
    if (has_syser()) {
      if (syser_ != NULL) syser_->::AFMsg::Ident::Clear();
    }
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    syn_type_ = 1;
    msg_id_ = 0;
  }
  object_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqAckSynData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckSynData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident syser = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syser()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_object_list;
        break;
      }

      // repeated .AFMsg.Ident object_list = 2;
      case 2: {
        if (tag == 18) {
         parse_object_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_object_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_object_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_object_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_syn_type;
        break;
      }

      // required .AFMsg.ReqAckSynData.SynType syn_type = 4;
      case 4: {
        if (tag == 32) {
         parse_syn_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AFMsg::ReqAckSynData_SynType_IsValid(value)) {
            set_syn_type(static_cast< ::AFMsg::ReqAckSynData_SynType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_msg_id;
        break;
      }

      // required .AFMsg.EGameMsgID msg_id = 5;
      case 5: {
        if (tag == 40) {
         parse_msg_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AFMsg::EGameMsgID_IsValid(value)) {
            set_msg_id(static_cast< ::AFMsg::EGameMsgID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckSynData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckSynData)
  return false;
#undef DO_
}

void ReqAckSynData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckSynData)
  // required .AFMsg.Ident syser = 1;
  if (has_syser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->syser_, output);
  }

  // repeated .AFMsg.Ident object_list = 2;
  for (unsigned int i = 0, n = this->object_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->object_list(i), output);
  }

  // required bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // required .AFMsg.ReqAckSynData.SynType syn_type = 4;
  if (has_syn_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->syn_type(), output);
  }

  // required .AFMsg.EGameMsgID msg_id = 5;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->msg_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckSynData)
}

::google::protobuf::uint8* ReqAckSynData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckSynData)
  // required .AFMsg.Ident syser = 1;
  if (has_syser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->syser_, false, target);
  }

  // repeated .AFMsg.Ident object_list = 2;
  for (unsigned int i = 0, n = this->object_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->object_list(i), false, target);
  }

  // required bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // required .AFMsg.ReqAckSynData.SynType syn_type = 4;
  if (has_syn_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->syn_type(), target);
  }

  // required .AFMsg.EGameMsgID msg_id = 5;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->msg_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckSynData)
  return target;
}

int ReqAckSynData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqAckSynData)
  int total_size = 0;

  if (has_syser()) {
    // required .AFMsg.Ident syser = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->syser_);
  }

  if (has_data()) {
    // required bytes data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_syn_type()) {
    // required .AFMsg.ReqAckSynData.SynType syn_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->syn_type());
  }

  if (has_msg_id()) {
    // required .AFMsg.EGameMsgID msg_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());
  }

  return total_size;
}
int ReqAckSynData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckSynData)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001d) ^ 0x0000001d) == 0) {  // All required fields are present.
    // required .AFMsg.Ident syser = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->syser_);

    // required bytes data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required .AFMsg.ReqAckSynData.SynType syn_type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->syn_type());

    // required .AFMsg.EGameMsgID msg_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .AFMsg.Ident object_list = 2;
  total_size += 1 * this->object_list_size();
  for (int i = 0; i < this->object_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->object_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckSynData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckSynData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqAckSynData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckSynData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckSynData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckSynData)
    MergeFrom(*source);
  }
}

void ReqAckSynData::MergeFrom(const ReqAckSynData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckSynData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  object_list_.MergeFrom(from.object_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_syser()) {
      mutable_syser()->::AFMsg::Ident::MergeFrom(from.syser());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_syn_type()) {
      set_syn_type(from.syn_type());
    }
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqAckSynData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckSynData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckSynData::CopyFrom(const ReqAckSynData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckSynData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckSynData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  if (has_syser()) {
    if (!this->syser_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->object_list())) return false;
  return true;
}

void ReqAckSynData::Swap(ReqAckSynData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckSynData::InternalSwap(ReqAckSynData* other) {
  std::swap(syser_, other->syser_);
  object_list_.UnsafeArenaSwap(&other->object_list_);
  data_.Swap(&other->data_);
  std::swap(syn_type_, other->syn_type_);
  std::swap(msg_id_, other->msg_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckSynData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckSynData_descriptor_;
  metadata.reflection = ReqAckSynData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAckSynData

// required .AFMsg.Ident syser = 1;
bool ReqAckSynData::has_syser() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqAckSynData::set_has_syser() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqAckSynData::clear_has_syser() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqAckSynData::clear_syser() {
  if (syser_ != NULL) syser_->::AFMsg::Ident::Clear();
  clear_has_syser();
}
const ::AFMsg::Ident& ReqAckSynData::syser() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSynData.syser)
  return syser_ != NULL ? *syser_ : *default_instance_->syser_;
}
::AFMsg::Ident* ReqAckSynData::mutable_syser() {
  set_has_syser();
  if (syser_ == NULL) {
    syser_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckSynData.syser)
  return syser_;
}
::AFMsg::Ident* ReqAckSynData::release_syser() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckSynData.syser)
  clear_has_syser();
  ::AFMsg::Ident* temp = syser_;
  syser_ = NULL;
  return temp;
}
void ReqAckSynData::set_allocated_syser(::AFMsg::Ident* syser) {
  delete syser_;
  syser_ = syser;
  if (syser) {
    set_has_syser();
  } else {
    clear_has_syser();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckSynData.syser)
}

// repeated .AFMsg.Ident object_list = 2;
int ReqAckSynData::object_list_size() const {
  return object_list_.size();
}
void ReqAckSynData::clear_object_list() {
  object_list_.Clear();
}
const ::AFMsg::Ident& ReqAckSynData::object_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSynData.object_list)
  return object_list_.Get(index);
}
::AFMsg::Ident* ReqAckSynData::mutable_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckSynData.object_list)
  return object_list_.Mutable(index);
}
::AFMsg::Ident* ReqAckSynData::add_object_list() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqAckSynData.object_list)
  return object_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
ReqAckSynData::mutable_object_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqAckSynData.object_list)
  return &object_list_;
}
const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
ReqAckSynData::object_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqAckSynData.object_list)
  return object_list_;
}

// required bytes data = 3;
bool ReqAckSynData::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqAckSynData::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqAckSynData::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqAckSynData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& ReqAckSynData::data() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSynData.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqAckSynData::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSynData.data)
}
 void ReqAckSynData::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckSynData.data)
}
 void ReqAckSynData::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckSynData.data)
}
 ::std::string* ReqAckSynData::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckSynData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReqAckSynData::release_data() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckSynData.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqAckSynData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckSynData.data)
}

// required .AFMsg.ReqAckSynData.SynType syn_type = 4;
bool ReqAckSynData::has_syn_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReqAckSynData::set_has_syn_type() {
  _has_bits_[0] |= 0x00000008u;
}
void ReqAckSynData::clear_has_syn_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReqAckSynData::clear_syn_type() {
  syn_type_ = 1;
  clear_has_syn_type();
}
 ::AFMsg::ReqAckSynData_SynType ReqAckSynData::syn_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSynData.syn_type)
  return static_cast< ::AFMsg::ReqAckSynData_SynType >(syn_type_);
}
 void ReqAckSynData::set_syn_type(::AFMsg::ReqAckSynData_SynType value) {
  assert(::AFMsg::ReqAckSynData_SynType_IsValid(value));
  set_has_syn_type();
  syn_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSynData.syn_type)
}

// required .AFMsg.EGameMsgID msg_id = 5;
bool ReqAckSynData::has_msg_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ReqAckSynData::set_has_msg_id() {
  _has_bits_[0] |= 0x00000010u;
}
void ReqAckSynData::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void ReqAckSynData::clear_msg_id() {
  msg_id_ = 0;
  clear_has_msg_id();
}
 ::AFMsg::EGameMsgID ReqAckSynData::msg_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSynData.msg_id)
  return static_cast< ::AFMsg::EGameMsgID >(msg_id_);
}
 void ReqAckSynData::set_msg_id(::AFMsg::EGameMsgID value) {
  assert(::AFMsg::EGameMsgID_IsValid(value));
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSynData.msg_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckPlayerMove::kMoverFieldNumber;
const int ReqAckPlayerMove::kMoveTypeFieldNumber;
const int ReqAckPlayerMove::kTargetPosFieldNumber;
const int ReqAckPlayerMove::kSourcePosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckPlayerMove::ReqAckPlayerMove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckPlayerMove)
}

void ReqAckPlayerMove::InitAsDefaultInstance() {
  mover_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqAckPlayerMove::ReqAckPlayerMove(const ReqAckPlayerMove& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckPlayerMove)
}

void ReqAckPlayerMove::SharedCtor() {
  _cached_size_ = 0;
  mover_ = NULL;
  movetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckPlayerMove::~ReqAckPlayerMove() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckPlayerMove)
  SharedDtor();
}

void ReqAckPlayerMove::SharedDtor() {
  if (this != default_instance_) {
    delete mover_;
  }
}

void ReqAckPlayerMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckPlayerMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckPlayerMove_descriptor_;
}

const ReqAckPlayerMove& ReqAckPlayerMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckPlayerMove* ReqAckPlayerMove::default_instance_ = NULL;

ReqAckPlayerMove* ReqAckPlayerMove::New(::google::protobuf::Arena* arena) const {
  ReqAckPlayerMove* n = new ReqAckPlayerMove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckPlayerMove::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckPlayerMove)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_mover()) {
      if (mover_ != NULL) mover_->::AFMsg::Ident::Clear();
    }
    movetype_ = 0;
  }
  target_pos_.Clear();
  source_pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqAckPlayerMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckPlayerMove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident mover = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mover()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_moveType;
        break;
      }

      // required int32 moveType = 2;
      case 2: {
        if (tag == 16) {
         parse_moveType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movetype_)));
          set_has_movetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_target_pos;
        break;
      }

      // repeated .AFMsg.Position target_pos = 3;
      case 3: {
        if (tag == 26) {
         parse_target_pos:
          DO_(input->IncrementRecursionDepth());
         parse_loop_target_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_target_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_target_pos;
        if (input->ExpectTag(34)) goto parse_loop_source_pos;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .AFMsg.Position source_pos = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_source_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_source_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_source_pos;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckPlayerMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckPlayerMove)
  return false;
#undef DO_
}

void ReqAckPlayerMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckPlayerMove)
  // required .AFMsg.Ident mover = 1;
  if (has_mover()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->mover_, output);
  }

  // required int32 moveType = 2;
  if (has_movetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->movetype(), output);
  }

  // repeated .AFMsg.Position target_pos = 3;
  for (unsigned int i = 0, n = this->target_pos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->target_pos(i), output);
  }

  // repeated .AFMsg.Position source_pos = 4;
  for (unsigned int i = 0, n = this->source_pos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->source_pos(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckPlayerMove)
}

::google::protobuf::uint8* ReqAckPlayerMove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckPlayerMove)
  // required .AFMsg.Ident mover = 1;
  if (has_mover()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->mover_, false, target);
  }

  // required int32 moveType = 2;
  if (has_movetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->movetype(), target);
  }

  // repeated .AFMsg.Position target_pos = 3;
  for (unsigned int i = 0, n = this->target_pos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->target_pos(i), false, target);
  }

  // repeated .AFMsg.Position source_pos = 4;
  for (unsigned int i = 0, n = this->source_pos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->source_pos(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckPlayerMove)
  return target;
}

int ReqAckPlayerMove::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqAckPlayerMove)
  int total_size = 0;

  if (has_mover()) {
    // required .AFMsg.Ident mover = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mover_);
  }

  if (has_movetype()) {
    // required int32 moveType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->movetype());
  }

  return total_size;
}
int ReqAckPlayerMove::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckPlayerMove)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .AFMsg.Ident mover = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mover_);

    // required int32 moveType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->movetype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .AFMsg.Position target_pos = 3;
  total_size += 1 * this->target_pos_size();
  for (int i = 0; i < this->target_pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->target_pos(i));
  }

  // repeated .AFMsg.Position source_pos = 4;
  total_size += 1 * this->source_pos_size();
  for (int i = 0; i < this->source_pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->source_pos(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckPlayerMove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckPlayerMove)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqAckPlayerMove* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckPlayerMove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckPlayerMove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckPlayerMove)
    MergeFrom(*source);
  }
}

void ReqAckPlayerMove::MergeFrom(const ReqAckPlayerMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckPlayerMove)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  target_pos_.MergeFrom(from.target_pos_);
  source_pos_.MergeFrom(from.source_pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mover()) {
      mutable_mover()->::AFMsg::Ident::MergeFrom(from.mover());
    }
    if (from.has_movetype()) {
      set_movetype(from.movetype());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqAckPlayerMove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckPlayerMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckPlayerMove::CopyFrom(const ReqAckPlayerMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckPlayerMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckPlayerMove::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_mover()) {
    if (!this->mover_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->target_pos())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->source_pos())) return false;
  return true;
}

void ReqAckPlayerMove::Swap(ReqAckPlayerMove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckPlayerMove::InternalSwap(ReqAckPlayerMove* other) {
  std::swap(mover_, other->mover_);
  std::swap(movetype_, other->movetype_);
  target_pos_.UnsafeArenaSwap(&other->target_pos_);
  source_pos_.UnsafeArenaSwap(&other->source_pos_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckPlayerMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckPlayerMove_descriptor_;
  metadata.reflection = ReqAckPlayerMove_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAckPlayerMove

// required .AFMsg.Ident mover = 1;
bool ReqAckPlayerMove::has_mover() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqAckPlayerMove::set_has_mover() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqAckPlayerMove::clear_has_mover() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqAckPlayerMove::clear_mover() {
  if (mover_ != NULL) mover_->::AFMsg::Ident::Clear();
  clear_has_mover();
}
const ::AFMsg::Ident& ReqAckPlayerMove::mover() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerMove.mover)
  return mover_ != NULL ? *mover_ : *default_instance_->mover_;
}
::AFMsg::Ident* ReqAckPlayerMove::mutable_mover() {
  set_has_mover();
  if (mover_ == NULL) {
    mover_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckPlayerMove.mover)
  return mover_;
}
::AFMsg::Ident* ReqAckPlayerMove::release_mover() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckPlayerMove.mover)
  clear_has_mover();
  ::AFMsg::Ident* temp = mover_;
  mover_ = NULL;
  return temp;
}
void ReqAckPlayerMove::set_allocated_mover(::AFMsg::Ident* mover) {
  delete mover_;
  mover_ = mover;
  if (mover) {
    set_has_mover();
  } else {
    clear_has_mover();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckPlayerMove.mover)
}

// required int32 moveType = 2;
bool ReqAckPlayerMove::has_movetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqAckPlayerMove::set_has_movetype() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqAckPlayerMove::clear_has_movetype() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqAckPlayerMove::clear_movetype() {
  movetype_ = 0;
  clear_has_movetype();
}
 ::google::protobuf::int32 ReqAckPlayerMove::movetype() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerMove.moveType)
  return movetype_;
}
 void ReqAckPlayerMove::set_movetype(::google::protobuf::int32 value) {
  set_has_movetype();
  movetype_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckPlayerMove.moveType)
}

// repeated .AFMsg.Position target_pos = 3;
int ReqAckPlayerMove::target_pos_size() const {
  return target_pos_.size();
}
void ReqAckPlayerMove::clear_target_pos() {
  target_pos_.Clear();
}
const ::AFMsg::Position& ReqAckPlayerMove::target_pos(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerMove.target_pos)
  return target_pos_.Get(index);
}
::AFMsg::Position* ReqAckPlayerMove::mutable_target_pos(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckPlayerMove.target_pos)
  return target_pos_.Mutable(index);
}
::AFMsg::Position* ReqAckPlayerMove::add_target_pos() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqAckPlayerMove.target_pos)
  return target_pos_.Add();
}
::google::protobuf::RepeatedPtrField< ::AFMsg::Position >*
ReqAckPlayerMove::mutable_target_pos() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqAckPlayerMove.target_pos)
  return &target_pos_;
}
const ::google::protobuf::RepeatedPtrField< ::AFMsg::Position >&
ReqAckPlayerMove::target_pos() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqAckPlayerMove.target_pos)
  return target_pos_;
}

// repeated .AFMsg.Position source_pos = 4;
int ReqAckPlayerMove::source_pos_size() const {
  return source_pos_.size();
}
void ReqAckPlayerMove::clear_source_pos() {
  source_pos_.Clear();
}
const ::AFMsg::Position& ReqAckPlayerMove::source_pos(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerMove.source_pos)
  return source_pos_.Get(index);
}
::AFMsg::Position* ReqAckPlayerMove::mutable_source_pos(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckPlayerMove.source_pos)
  return source_pos_.Mutable(index);
}
::AFMsg::Position* ReqAckPlayerMove::add_source_pos() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqAckPlayerMove.source_pos)
  return source_pos_.Add();
}
::google::protobuf::RepeatedPtrField< ::AFMsg::Position >*
ReqAckPlayerMove::mutable_source_pos() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqAckPlayerMove.source_pos)
  return &source_pos_;
}
const ::google::protobuf::RepeatedPtrField< ::AFMsg::Position >&
ReqAckPlayerMove::source_pos() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqAckPlayerMove.source_pos)
  return source_pos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ChatContainer_ContainerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatContainer_ContainerType_descriptor_;
}
bool ChatContainer_ContainerType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChatContainer_ContainerType ChatContainer::EGCT_ITEM;
const ChatContainer_ContainerType ChatContainer::ContainerType_MIN;
const ChatContainer_ContainerType ChatContainer::ContainerType_MAX;
const int ChatContainer::ContainerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatContainer::kConTainerTypeFieldNumber;
const int ChatContainer::kDataInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatContainer::ChatContainer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ChatContainer)
}

void ChatContainer::InitAsDefaultInstance() {
}

ChatContainer::ChatContainer(const ChatContainer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ChatContainer)
}

void ChatContainer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  containertype_ = 0;
  data_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatContainer::~ChatContainer() {
  // @@protoc_insertion_point(destructor:AFMsg.ChatContainer)
  SharedDtor();
}

void ChatContainer::SharedDtor() {
  data_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ChatContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatContainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatContainer_descriptor_;
}

const ChatContainer& ChatContainer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ChatContainer* ChatContainer::default_instance_ = NULL;

ChatContainer* ChatContainer::New(::google::protobuf::Arena* arena) const {
  ChatContainer* n = new ChatContainer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ChatContainer)
  if (_has_bits_[0 / 32] & 3u) {
    containertype_ = 0;
    if (has_data_info()) {
      data_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ChatContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ChatContainer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ConTainerType = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &containertype_)));
          set_has_containertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data_info;
        break;
      }

      // required bytes data_info = 3;
      case 3: {
        if (tag == 26) {
         parse_data_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ChatContainer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ChatContainer)
  return false;
#undef DO_
}

void ChatContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ChatContainer)
  // required int32 ConTainerType = 2;
  if (has_containertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->containertype(), output);
  }

  // required bytes data_info = 3;
  if (has_data_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data_info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ChatContainer)
}

::google::protobuf::uint8* ChatContainer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ChatContainer)
  // required int32 ConTainerType = 2;
  if (has_containertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->containertype(), target);
  }

  // required bytes data_info = 3;
  if (has_data_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data_info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ChatContainer)
  return target;
}

int ChatContainer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ChatContainer)
  int total_size = 0;

  if (has_containertype()) {
    // required int32 ConTainerType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->containertype());
  }

  if (has_data_info()) {
    // required bytes data_info = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data_info());
  }

  return total_size;
}
int ChatContainer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ChatContainer)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 ConTainerType = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->containertype());

    // required bytes data_info = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data_info());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatContainer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ChatContainer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChatContainer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatContainer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ChatContainer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ChatContainer)
    MergeFrom(*source);
  }
}

void ChatContainer::MergeFrom(const ChatContainer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ChatContainer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_containertype()) {
      set_containertype(from.containertype());
    }
    if (from.has_data_info()) {
      set_has_data_info();
      data_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_info_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ChatContainer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ChatContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatContainer::CopyFrom(const ChatContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ChatContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatContainer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChatContainer::Swap(ChatContainer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatContainer::InternalSwap(ChatContainer* other) {
  std::swap(containertype_, other->containertype_);
  data_info_.Swap(&other->data_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatContainer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatContainer_descriptor_;
  metadata.reflection = ChatContainer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatContainer

// required int32 ConTainerType = 2;
bool ChatContainer::has_containertype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatContainer::set_has_containertype() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatContainer::clear_has_containertype() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatContainer::clear_containertype() {
  containertype_ = 0;
  clear_has_containertype();
}
 ::google::protobuf::int32 ChatContainer::containertype() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatContainer.ConTainerType)
  return containertype_;
}
 void ChatContainer::set_containertype(::google::protobuf::int32 value) {
  set_has_containertype();
  containertype_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ChatContainer.ConTainerType)
}

// required bytes data_info = 3;
bool ChatContainer::has_data_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChatContainer::set_has_data_info() {
  _has_bits_[0] |= 0x00000002u;
}
void ChatContainer::clear_has_data_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChatContainer::clear_data_info() {
  data_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data_info();
}
 const ::std::string& ChatContainer::data_info() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatContainer.data_info)
  return data_info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatContainer::set_data_info(const ::std::string& value) {
  set_has_data_info();
  data_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ChatContainer.data_info)
}
 void ChatContainer::set_data_info(const char* value) {
  set_has_data_info();
  data_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ChatContainer.data_info)
}
 void ChatContainer::set_data_info(const void* value, size_t size) {
  set_has_data_info();
  data_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ChatContainer.data_info)
}
 ::std::string* ChatContainer::mutable_data_info() {
  set_has_data_info();
  // @@protoc_insertion_point(field_mutable:AFMsg.ChatContainer.data_info)
  return data_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatContainer::release_data_info() {
  // @@protoc_insertion_point(field_release:AFMsg.ChatContainer.data_info)
  clear_has_data_info();
  return data_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatContainer::set_allocated_data_info(::std::string* data_info) {
  if (data_info != NULL) {
    set_has_data_info();
  } else {
    clear_has_data_info();
  }
  data_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_info);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ChatContainer.data_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqAckPlayerChat_EGameChatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckPlayerChat_EGameChatType_descriptor_;
}
bool ReqAckPlayerChat_EGameChatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_GUILD;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_PRIVATE;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_TEAM;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_WORLD;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGameChatType_MIN;
const ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGameChatType_MAX;
const int ReqAckPlayerChat::EGameChatType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckPlayerChat::kChatIdFieldNumber;
const int ReqAckPlayerChat::kChatTypeFieldNumber;
const int ReqAckPlayerChat::kChatInfoFieldNumber;
const int ReqAckPlayerChat::kChatNameFieldNumber;
const int ReqAckPlayerChat::kTargetIdFieldNumber;
const int ReqAckPlayerChat::kContainerDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckPlayerChat::ReqAckPlayerChat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckPlayerChat)
}

void ReqAckPlayerChat::InitAsDefaultInstance() {
  chat_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  target_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqAckPlayerChat::ReqAckPlayerChat(const ReqAckPlayerChat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckPlayerChat)
}

void ReqAckPlayerChat::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  chat_id_ = NULL;
  chat_type_ = 0;
  chat_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckPlayerChat::~ReqAckPlayerChat() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckPlayerChat)
  SharedDtor();
}

void ReqAckPlayerChat::SharedDtor() {
  chat_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete chat_id_;
    delete target_id_;
  }
}

void ReqAckPlayerChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckPlayerChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckPlayerChat_descriptor_;
}

const ReqAckPlayerChat& ReqAckPlayerChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckPlayerChat* ReqAckPlayerChat::default_instance_ = NULL;

ReqAckPlayerChat* ReqAckPlayerChat::New(::google::protobuf::Arena* arena) const {
  ReqAckPlayerChat* n = new ReqAckPlayerChat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckPlayerChat::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckPlayerChat)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_chat_id()) {
      if (chat_id_ != NULL) chat_id_->::AFMsg::Ident::Clear();
    }
    chat_type_ = 0;
    if (has_chat_info()) {
      chat_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_chat_name()) {
      chat_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_target_id()) {
      if (target_id_ != NULL) target_id_->::AFMsg::Ident::Clear();
    }
  }
  container_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqAckPlayerChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckPlayerChat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident chat_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_chat_type;
        break;
      }

      // required .AFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
      case 2: {
        if (tag == 16) {
         parse_chat_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AFMsg::ReqAckPlayerChat_EGameChatType_IsValid(value)) {
            set_chat_type(static_cast< ::AFMsg::ReqAckPlayerChat_EGameChatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_chat_info;
        break;
      }

      // required bytes chat_info = 3;
      case 3: {
        if (tag == 26) {
         parse_chat_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chat_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_chat_name;
        break;
      }

      // required bytes chat_name = 4;
      case 4: {
        if (tag == 34) {
         parse_chat_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chat_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_target_id;
        break;
      }

      // optional .AFMsg.Ident target_id = 5;
      case 5: {
        if (tag == 42) {
         parse_target_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Container_data;
        break;
      }

      // repeated .AFMsg.ChatContainer Container_data = 6;
      case 6: {
        if (tag == 50) {
         parse_Container_data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Container_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_container_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_Container_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckPlayerChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckPlayerChat)
  return false;
#undef DO_
}

void ReqAckPlayerChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckPlayerChat)
  // required .AFMsg.Ident chat_id = 1;
  if (has_chat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->chat_id_, output);
  }

  // required .AFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
  if (has_chat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->chat_type(), output);
  }

  // required bytes chat_info = 3;
  if (has_chat_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->chat_info(), output);
  }

  // required bytes chat_name = 4;
  if (has_chat_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->chat_name(), output);
  }

  // optional .AFMsg.Ident target_id = 5;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->target_id_, output);
  }

  // repeated .AFMsg.ChatContainer Container_data = 6;
  for (unsigned int i = 0, n = this->container_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->container_data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckPlayerChat)
}

::google::protobuf::uint8* ReqAckPlayerChat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckPlayerChat)
  // required .AFMsg.Ident chat_id = 1;
  if (has_chat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->chat_id_, false, target);
  }

  // required .AFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
  if (has_chat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->chat_type(), target);
  }

  // required bytes chat_info = 3;
  if (has_chat_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->chat_info(), target);
  }

  // required bytes chat_name = 4;
  if (has_chat_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->chat_name(), target);
  }

  // optional .AFMsg.Ident target_id = 5;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->target_id_, false, target);
  }

  // repeated .AFMsg.ChatContainer Container_data = 6;
  for (unsigned int i = 0, n = this->container_data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->container_data(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckPlayerChat)
  return target;
}

int ReqAckPlayerChat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqAckPlayerChat)
  int total_size = 0;

  if (has_chat_id()) {
    // required .AFMsg.Ident chat_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chat_id_);
  }

  if (has_chat_type()) {
    // required .AFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->chat_type());
  }

  if (has_chat_info()) {
    // required bytes chat_info = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->chat_info());
  }

  if (has_chat_name()) {
    // required bytes chat_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->chat_name());
  }

  return total_size;
}
int ReqAckPlayerChat::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckPlayerChat)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .AFMsg.Ident chat_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chat_id_);

    // required .AFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->chat_type());

    // required bytes chat_info = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->chat_info());

    // required bytes chat_name = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->chat_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .AFMsg.Ident target_id = 5;
  if (has_target_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_id_);
  }

  // repeated .AFMsg.ChatContainer Container_data = 6;
  total_size += 1 * this->container_data_size();
  for (int i = 0; i < this->container_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->container_data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckPlayerChat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckPlayerChat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqAckPlayerChat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckPlayerChat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckPlayerChat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckPlayerChat)
    MergeFrom(*source);
  }
}

void ReqAckPlayerChat::MergeFrom(const ReqAckPlayerChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckPlayerChat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  container_data_.MergeFrom(from.container_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat_id()) {
      mutable_chat_id()->::AFMsg::Ident::MergeFrom(from.chat_id());
    }
    if (from.has_chat_type()) {
      set_chat_type(from.chat_type());
    }
    if (from.has_chat_info()) {
      set_has_chat_info();
      chat_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_info_);
    }
    if (from.has_chat_name()) {
      set_has_chat_name();
      chat_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_name_);
    }
    if (from.has_target_id()) {
      mutable_target_id()->::AFMsg::Ident::MergeFrom(from.target_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqAckPlayerChat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckPlayerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckPlayerChat::CopyFrom(const ReqAckPlayerChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckPlayerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckPlayerChat::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_chat_id()) {
    if (!this->chat_id_->IsInitialized()) return false;
  }
  if (has_target_id()) {
    if (!this->target_id_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->container_data())) return false;
  return true;
}

void ReqAckPlayerChat::Swap(ReqAckPlayerChat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckPlayerChat::InternalSwap(ReqAckPlayerChat* other) {
  std::swap(chat_id_, other->chat_id_);
  std::swap(chat_type_, other->chat_type_);
  chat_info_.Swap(&other->chat_info_);
  chat_name_.Swap(&other->chat_name_);
  std::swap(target_id_, other->target_id_);
  container_data_.UnsafeArenaSwap(&other->container_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckPlayerChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckPlayerChat_descriptor_;
  metadata.reflection = ReqAckPlayerChat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAckPlayerChat

// required .AFMsg.Ident chat_id = 1;
bool ReqAckPlayerChat::has_chat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqAckPlayerChat::set_has_chat_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqAckPlayerChat::clear_has_chat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqAckPlayerChat::clear_chat_id() {
  if (chat_id_ != NULL) chat_id_->::AFMsg::Ident::Clear();
  clear_has_chat_id();
}
const ::AFMsg::Ident& ReqAckPlayerChat::chat_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerChat.chat_id)
  return chat_id_ != NULL ? *chat_id_ : *default_instance_->chat_id_;
}
::AFMsg::Ident* ReqAckPlayerChat::mutable_chat_id() {
  set_has_chat_id();
  if (chat_id_ == NULL) {
    chat_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckPlayerChat.chat_id)
  return chat_id_;
}
::AFMsg::Ident* ReqAckPlayerChat::release_chat_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckPlayerChat.chat_id)
  clear_has_chat_id();
  ::AFMsg::Ident* temp = chat_id_;
  chat_id_ = NULL;
  return temp;
}
void ReqAckPlayerChat::set_allocated_chat_id(::AFMsg::Ident* chat_id) {
  delete chat_id_;
  chat_id_ = chat_id;
  if (chat_id) {
    set_has_chat_id();
  } else {
    clear_has_chat_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckPlayerChat.chat_id)
}

// required .AFMsg.ReqAckPlayerChat.EGameChatType chat_type = 2;
bool ReqAckPlayerChat::has_chat_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqAckPlayerChat::set_has_chat_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqAckPlayerChat::clear_has_chat_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqAckPlayerChat::clear_chat_type() {
  chat_type_ = 0;
  clear_has_chat_type();
}
 ::AFMsg::ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::chat_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerChat.chat_type)
  return static_cast< ::AFMsg::ReqAckPlayerChat_EGameChatType >(chat_type_);
}
 void ReqAckPlayerChat::set_chat_type(::AFMsg::ReqAckPlayerChat_EGameChatType value) {
  assert(::AFMsg::ReqAckPlayerChat_EGameChatType_IsValid(value));
  set_has_chat_type();
  chat_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckPlayerChat.chat_type)
}

// required bytes chat_info = 3;
bool ReqAckPlayerChat::has_chat_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqAckPlayerChat::set_has_chat_info() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqAckPlayerChat::clear_has_chat_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqAckPlayerChat::clear_chat_info() {
  chat_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chat_info();
}
 const ::std::string& ReqAckPlayerChat::chat_info() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerChat.chat_info)
  return chat_info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqAckPlayerChat::set_chat_info(const ::std::string& value) {
  set_has_chat_info();
  chat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckPlayerChat.chat_info)
}
 void ReqAckPlayerChat::set_chat_info(const char* value) {
  set_has_chat_info();
  chat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckPlayerChat.chat_info)
}
 void ReqAckPlayerChat::set_chat_info(const void* value, size_t size) {
  set_has_chat_info();
  chat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckPlayerChat.chat_info)
}
 ::std::string* ReqAckPlayerChat::mutable_chat_info() {
  set_has_chat_info();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckPlayerChat.chat_info)
  return chat_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReqAckPlayerChat::release_chat_info() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckPlayerChat.chat_info)
  clear_has_chat_info();
  return chat_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqAckPlayerChat::set_allocated_chat_info(::std::string* chat_info) {
  if (chat_info != NULL) {
    set_has_chat_info();
  } else {
    clear_has_chat_info();
  }
  chat_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_info);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckPlayerChat.chat_info)
}

// required bytes chat_name = 4;
bool ReqAckPlayerChat::has_chat_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReqAckPlayerChat::set_has_chat_name() {
  _has_bits_[0] |= 0x00000008u;
}
void ReqAckPlayerChat::clear_has_chat_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReqAckPlayerChat::clear_chat_name() {
  chat_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chat_name();
}
 const ::std::string& ReqAckPlayerChat::chat_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerChat.chat_name)
  return chat_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqAckPlayerChat::set_chat_name(const ::std::string& value) {
  set_has_chat_name();
  chat_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckPlayerChat.chat_name)
}
 void ReqAckPlayerChat::set_chat_name(const char* value) {
  set_has_chat_name();
  chat_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckPlayerChat.chat_name)
}
 void ReqAckPlayerChat::set_chat_name(const void* value, size_t size) {
  set_has_chat_name();
  chat_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckPlayerChat.chat_name)
}
 ::std::string* ReqAckPlayerChat::mutable_chat_name() {
  set_has_chat_name();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckPlayerChat.chat_name)
  return chat_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReqAckPlayerChat::release_chat_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckPlayerChat.chat_name)
  clear_has_chat_name();
  return chat_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqAckPlayerChat::set_allocated_chat_name(::std::string* chat_name) {
  if (chat_name != NULL) {
    set_has_chat_name();
  } else {
    clear_has_chat_name();
  }
  chat_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckPlayerChat.chat_name)
}

// optional .AFMsg.Ident target_id = 5;
bool ReqAckPlayerChat::has_target_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ReqAckPlayerChat::set_has_target_id() {
  _has_bits_[0] |= 0x00000010u;
}
void ReqAckPlayerChat::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void ReqAckPlayerChat::clear_target_id() {
  if (target_id_ != NULL) target_id_->::AFMsg::Ident::Clear();
  clear_has_target_id();
}
const ::AFMsg::Ident& ReqAckPlayerChat::target_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerChat.target_id)
  return target_id_ != NULL ? *target_id_ : *default_instance_->target_id_;
}
::AFMsg::Ident* ReqAckPlayerChat::mutable_target_id() {
  set_has_target_id();
  if (target_id_ == NULL) {
    target_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckPlayerChat.target_id)
  return target_id_;
}
::AFMsg::Ident* ReqAckPlayerChat::release_target_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckPlayerChat.target_id)
  clear_has_target_id();
  ::AFMsg::Ident* temp = target_id_;
  target_id_ = NULL;
  return temp;
}
void ReqAckPlayerChat::set_allocated_target_id(::AFMsg::Ident* target_id) {
  delete target_id_;
  target_id_ = target_id;
  if (target_id) {
    set_has_target_id();
  } else {
    clear_has_target_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckPlayerChat.target_id)
}

// repeated .AFMsg.ChatContainer Container_data = 6;
int ReqAckPlayerChat::container_data_size() const {
  return container_data_.size();
}
void ReqAckPlayerChat::clear_container_data() {
  container_data_.Clear();
}
const ::AFMsg::ChatContainer& ReqAckPlayerChat::container_data(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckPlayerChat.Container_data)
  return container_data_.Get(index);
}
::AFMsg::ChatContainer* ReqAckPlayerChat::mutable_container_data(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckPlayerChat.Container_data)
  return container_data_.Mutable(index);
}
::AFMsg::ChatContainer* ReqAckPlayerChat::add_container_data() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqAckPlayerChat.Container_data)
  return container_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::AFMsg::ChatContainer >*
ReqAckPlayerChat::mutable_container_data() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqAckPlayerChat.Container_data)
  return &container_data_;
}
const ::google::protobuf::RepeatedPtrField< ::AFMsg::ChatContainer >&
ReqAckPlayerChat::container_data() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqAckPlayerChat.Container_data)
  return container_data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* EffectData_EResultType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EffectData_EResultType_descriptor_;
}
bool EffectData_EResultType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EffectData_EResultType EffectData::EET_SUCCESS;
const EffectData_EResultType EffectData::EET_FAIL;
const EffectData_EResultType EffectData::EET_REFUSE;
const EffectData_EResultType EffectData::EResultType_MIN;
const EffectData_EResultType EffectData::EResultType_MAX;
const int EffectData::EResultType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EffectData::kEffectIdentFieldNumber;
const int EffectData::kEffectValueFieldNumber;
const int EffectData::kEffectRltFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EffectData::EffectData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.EffectData)
}

void EffectData::InitAsDefaultInstance() {
  effect_ident_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

EffectData::EffectData(const EffectData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.EffectData)
}

void EffectData::SharedCtor() {
  _cached_size_ = 0;
  effect_ident_ = NULL;
  effect_value_ = 0;
  effect_rlt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EffectData::~EffectData() {
  // @@protoc_insertion_point(destructor:AFMsg.EffectData)
  SharedDtor();
}

void EffectData::SharedDtor() {
  if (this != default_instance_) {
    delete effect_ident_;
  }
}

void EffectData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EffectData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EffectData_descriptor_;
}

const EffectData& EffectData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

EffectData* EffectData::default_instance_ = NULL;

EffectData* EffectData::New(::google::protobuf::Arena* arena) const {
  EffectData* n = new EffectData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EffectData::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.EffectData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EffectData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EffectData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(effect_value_, effect_rlt_);
    if (has_effect_ident()) {
      if (effect_ident_ != NULL) effect_ident_->::AFMsg::Ident::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EffectData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.EffectData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident effect_ident = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effect_ident()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_effect_value;
        break;
      }

      // required int32 effect_value = 2;
      case 2: {
        if (tag == 16) {
         parse_effect_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_value_)));
          set_has_effect_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_effect_rlt;
        break;
      }

      // required .AFMsg.EffectData.EResultType effect_rlt = 3;
      case 3: {
        if (tag == 24) {
         parse_effect_rlt:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AFMsg::EffectData_EResultType_IsValid(value)) {
            set_effect_rlt(static_cast< ::AFMsg::EffectData_EResultType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.EffectData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.EffectData)
  return false;
#undef DO_
}

void EffectData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.EffectData)
  // required .AFMsg.Ident effect_ident = 1;
  if (has_effect_ident()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->effect_ident_, output);
  }

  // required int32 effect_value = 2;
  if (has_effect_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->effect_value(), output);
  }

  // required .AFMsg.EffectData.EResultType effect_rlt = 3;
  if (has_effect_rlt()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->effect_rlt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.EffectData)
}

::google::protobuf::uint8* EffectData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.EffectData)
  // required .AFMsg.Ident effect_ident = 1;
  if (has_effect_ident()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->effect_ident_, false, target);
  }

  // required int32 effect_value = 2;
  if (has_effect_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->effect_value(), target);
  }

  // required .AFMsg.EffectData.EResultType effect_rlt = 3;
  if (has_effect_rlt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->effect_rlt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.EffectData)
  return target;
}

int EffectData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.EffectData)
  int total_size = 0;

  if (has_effect_ident()) {
    // required .AFMsg.Ident effect_ident = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->effect_ident_);
  }

  if (has_effect_value()) {
    // required int32 effect_value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->effect_value());
  }

  if (has_effect_rlt()) {
    // required .AFMsg.EffectData.EResultType effect_rlt = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->effect_rlt());
  }

  return total_size;
}
int EffectData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.EffectData)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .AFMsg.Ident effect_ident = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->effect_ident_);

    // required int32 effect_value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->effect_value());

    // required .AFMsg.EffectData.EResultType effect_rlt = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->effect_rlt());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EffectData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.EffectData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EffectData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EffectData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.EffectData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.EffectData)
    MergeFrom(*source);
  }
}

void EffectData::MergeFrom(const EffectData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.EffectData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_effect_ident()) {
      mutable_effect_ident()->::AFMsg::Ident::MergeFrom(from.effect_ident());
    }
    if (from.has_effect_value()) {
      set_effect_value(from.effect_value());
    }
    if (from.has_effect_rlt()) {
      set_effect_rlt(from.effect_rlt());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EffectData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.EffectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffectData::CopyFrom(const EffectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.EffectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_effect_ident()) {
    if (!this->effect_ident_->IsInitialized()) return false;
  }
  return true;
}

void EffectData::Swap(EffectData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EffectData::InternalSwap(EffectData* other) {
  std::swap(effect_ident_, other->effect_ident_);
  std::swap(effect_value_, other->effect_value_);
  std::swap(effect_rlt_, other->effect_rlt_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EffectData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EffectData_descriptor_;
  metadata.reflection = EffectData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EffectData

// required .AFMsg.Ident effect_ident = 1;
bool EffectData::has_effect_ident() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EffectData::set_has_effect_ident() {
  _has_bits_[0] |= 0x00000001u;
}
void EffectData::clear_has_effect_ident() {
  _has_bits_[0] &= ~0x00000001u;
}
void EffectData::clear_effect_ident() {
  if (effect_ident_ != NULL) effect_ident_->::AFMsg::Ident::Clear();
  clear_has_effect_ident();
}
const ::AFMsg::Ident& EffectData::effect_ident() const {
  // @@protoc_insertion_point(field_get:AFMsg.EffectData.effect_ident)
  return effect_ident_ != NULL ? *effect_ident_ : *default_instance_->effect_ident_;
}
::AFMsg::Ident* EffectData::mutable_effect_ident() {
  set_has_effect_ident();
  if (effect_ident_ == NULL) {
    effect_ident_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.EffectData.effect_ident)
  return effect_ident_;
}
::AFMsg::Ident* EffectData::release_effect_ident() {
  // @@protoc_insertion_point(field_release:AFMsg.EffectData.effect_ident)
  clear_has_effect_ident();
  ::AFMsg::Ident* temp = effect_ident_;
  effect_ident_ = NULL;
  return temp;
}
void EffectData::set_allocated_effect_ident(::AFMsg::Ident* effect_ident) {
  delete effect_ident_;
  effect_ident_ = effect_ident;
  if (effect_ident) {
    set_has_effect_ident();
  } else {
    clear_has_effect_ident();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.EffectData.effect_ident)
}

// required int32 effect_value = 2;
bool EffectData::has_effect_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EffectData::set_has_effect_value() {
  _has_bits_[0] |= 0x00000002u;
}
void EffectData::clear_has_effect_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void EffectData::clear_effect_value() {
  effect_value_ = 0;
  clear_has_effect_value();
}
 ::google::protobuf::int32 EffectData::effect_value() const {
  // @@protoc_insertion_point(field_get:AFMsg.EffectData.effect_value)
  return effect_value_;
}
 void EffectData::set_effect_value(::google::protobuf::int32 value) {
  set_has_effect_value();
  effect_value_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.EffectData.effect_value)
}

// required .AFMsg.EffectData.EResultType effect_rlt = 3;
bool EffectData::has_effect_rlt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EffectData::set_has_effect_rlt() {
  _has_bits_[0] |= 0x00000004u;
}
void EffectData::clear_has_effect_rlt() {
  _has_bits_[0] &= ~0x00000004u;
}
void EffectData::clear_effect_rlt() {
  effect_rlt_ = 0;
  clear_has_effect_rlt();
}
 ::AFMsg::EffectData_EResultType EffectData::effect_rlt() const {
  // @@protoc_insertion_point(field_get:AFMsg.EffectData.effect_rlt)
  return static_cast< ::AFMsg::EffectData_EResultType >(effect_rlt_);
}
 void EffectData::set_effect_rlt(::AFMsg::EffectData_EResultType value) {
  assert(::AFMsg::EffectData_EResultType_IsValid(value));
  set_has_effect_rlt();
  effect_rlt_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.EffectData.effect_rlt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckUseSkill::kUserFieldNumber;
const int ReqAckUseSkill::kSkillIdFieldNumber;
const int ReqAckUseSkill::kNowPosFieldNumber;
const int ReqAckUseSkill::kTarPosFieldNumber;
const int ReqAckUseSkill::kUseIndexFieldNumber;
const int ReqAckUseSkill::kEffectDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckUseSkill::ReqAckUseSkill()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckUseSkill)
}

void ReqAckUseSkill::InitAsDefaultInstance() {
  user_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  now_pos_ = const_cast< ::AFMsg::Position*>(&::AFMsg::Position::default_instance());
  tar_pos_ = const_cast< ::AFMsg::Position*>(&::AFMsg::Position::default_instance());
}

ReqAckUseSkill::ReqAckUseSkill(const ReqAckUseSkill& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckUseSkill)
}

void ReqAckUseSkill::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_ = NULL;
  skill_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  now_pos_ = NULL;
  tar_pos_ = NULL;
  use_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckUseSkill::~ReqAckUseSkill() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckUseSkill)
  SharedDtor();
}

void ReqAckUseSkill::SharedDtor() {
  skill_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete user_;
    delete now_pos_;
    delete tar_pos_;
  }
}

void ReqAckUseSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckUseSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckUseSkill_descriptor_;
}

const ReqAckUseSkill& ReqAckUseSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckUseSkill* ReqAckUseSkill::default_instance_ = NULL;

ReqAckUseSkill* ReqAckUseSkill::New(::google::protobuf::Arena* arena) const {
  ReqAckUseSkill* n = new ReqAckUseSkill;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckUseSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckUseSkill)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_user()) {
      if (user_ != NULL) user_->::AFMsg::Ident::Clear();
    }
    if (has_skill_id()) {
      skill_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_now_pos()) {
      if (now_pos_ != NULL) now_pos_->::AFMsg::Position::Clear();
    }
    if (has_tar_pos()) {
      if (tar_pos_ != NULL) tar_pos_->::AFMsg::Position::Clear();
    }
    use_index_ = 0;
  }
  effect_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqAckUseSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckUseSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_skill_id;
        break;
      }

      // required bytes skill_id = 2;
      case 2: {
        if (tag == 18) {
         parse_skill_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_skill_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_now_pos;
        break;
      }

      // required .AFMsg.Position now_pos = 3;
      case 3: {
        if (tag == 26) {
         parse_now_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_now_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tar_pos;
        break;
      }

      // required .AFMsg.Position tar_pos = 4;
      case 4: {
        if (tag == 34) {
         parse_tar_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tar_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_use_index;
        break;
      }

      // required int32 use_index = 5;
      case 5: {
        if (tag == 40) {
         parse_use_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_index_)));
          set_has_use_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_effect_data;
        break;
      }

      // repeated .AFMsg.EffectData effect_data = 6;
      case 6: {
        if (tag == 50) {
         parse_effect_data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_effect_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_effect_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_effect_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckUseSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckUseSkill)
  return false;
#undef DO_
}

void ReqAckUseSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckUseSkill)
  // required .AFMsg.Ident user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->user_, output);
  }

  // required bytes skill_id = 2;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->skill_id(), output);
  }

  // required .AFMsg.Position now_pos = 3;
  if (has_now_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->now_pos_, output);
  }

  // required .AFMsg.Position tar_pos = 4;
  if (has_tar_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->tar_pos_, output);
  }

  // required int32 use_index = 5;
  if (has_use_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->use_index(), output);
  }

  // repeated .AFMsg.EffectData effect_data = 6;
  for (unsigned int i = 0, n = this->effect_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->effect_data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckUseSkill)
}

::google::protobuf::uint8* ReqAckUseSkill::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckUseSkill)
  // required .AFMsg.Ident user = 1;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->user_, false, target);
  }

  // required bytes skill_id = 2;
  if (has_skill_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->skill_id(), target);
  }

  // required .AFMsg.Position now_pos = 3;
  if (has_now_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->now_pos_, false, target);
  }

  // required .AFMsg.Position tar_pos = 4;
  if (has_tar_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->tar_pos_, false, target);
  }

  // required int32 use_index = 5;
  if (has_use_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->use_index(), target);
  }

  // repeated .AFMsg.EffectData effect_data = 6;
  for (unsigned int i = 0, n = this->effect_data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->effect_data(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckUseSkill)
  return target;
}

int ReqAckUseSkill::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqAckUseSkill)
  int total_size = 0;

  if (has_user()) {
    // required .AFMsg.Ident user = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_);
  }

  if (has_skill_id()) {
    // required bytes skill_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->skill_id());
  }

  if (has_now_pos()) {
    // required .AFMsg.Position now_pos = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->now_pos_);
  }

  if (has_tar_pos()) {
    // required .AFMsg.Position tar_pos = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tar_pos_);
  }

  if (has_use_index()) {
    // required int32 use_index = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->use_index());
  }

  return total_size;
}
int ReqAckUseSkill::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckUseSkill)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .AFMsg.Ident user = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_);

    // required bytes skill_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->skill_id());

    // required .AFMsg.Position now_pos = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->now_pos_);

    // required .AFMsg.Position tar_pos = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tar_pos_);

    // required int32 use_index = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->use_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .AFMsg.EffectData effect_data = 6;
  total_size += 1 * this->effect_data_size();
  for (int i = 0; i < this->effect_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effect_data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckUseSkill::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckUseSkill)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqAckUseSkill* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckUseSkill>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckUseSkill)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckUseSkill)
    MergeFrom(*source);
  }
}

void ReqAckUseSkill::MergeFrom(const ReqAckUseSkill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckUseSkill)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  effect_data_.MergeFrom(from.effect_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::AFMsg::Ident::MergeFrom(from.user());
    }
    if (from.has_skill_id()) {
      set_has_skill_id();
      skill_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skill_id_);
    }
    if (from.has_now_pos()) {
      mutable_now_pos()->::AFMsg::Position::MergeFrom(from.now_pos());
    }
    if (from.has_tar_pos()) {
      mutable_tar_pos()->::AFMsg::Position::MergeFrom(from.tar_pos());
    }
    if (from.has_use_index()) {
      set_use_index(from.use_index());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqAckUseSkill::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckUseSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckUseSkill::CopyFrom(const ReqAckUseSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckUseSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckUseSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  if (has_now_pos()) {
    if (!this->now_pos_->IsInitialized()) return false;
  }
  if (has_tar_pos()) {
    if (!this->tar_pos_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->effect_data())) return false;
  return true;
}

void ReqAckUseSkill::Swap(ReqAckUseSkill* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckUseSkill::InternalSwap(ReqAckUseSkill* other) {
  std::swap(user_, other->user_);
  skill_id_.Swap(&other->skill_id_);
  std::swap(now_pos_, other->now_pos_);
  std::swap(tar_pos_, other->tar_pos_);
  std::swap(use_index_, other->use_index_);
  effect_data_.UnsafeArenaSwap(&other->effect_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckUseSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckUseSkill_descriptor_;
  metadata.reflection = ReqAckUseSkill_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAckUseSkill

// required .AFMsg.Ident user = 1;
bool ReqAckUseSkill::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqAckUseSkill::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqAckUseSkill::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqAckUseSkill::clear_user() {
  if (user_ != NULL) user_->::AFMsg::Ident::Clear();
  clear_has_user();
}
const ::AFMsg::Ident& ReqAckUseSkill::user() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseSkill.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
::AFMsg::Ident* ReqAckUseSkill::mutable_user() {
  set_has_user();
  if (user_ == NULL) {
    user_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseSkill.user)
  return user_;
}
::AFMsg::Ident* ReqAckUseSkill::release_user() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckUseSkill.user)
  clear_has_user();
  ::AFMsg::Ident* temp = user_;
  user_ = NULL;
  return temp;
}
void ReqAckUseSkill::set_allocated_user(::AFMsg::Ident* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckUseSkill.user)
}

// required bytes skill_id = 2;
bool ReqAckUseSkill::has_skill_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqAckUseSkill::set_has_skill_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqAckUseSkill::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqAckUseSkill::clear_skill_id() {
  skill_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_skill_id();
}
 const ::std::string& ReqAckUseSkill::skill_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseSkill.skill_id)
  return skill_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqAckUseSkill::set_skill_id(const ::std::string& value) {
  set_has_skill_id();
  skill_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckUseSkill.skill_id)
}
 void ReqAckUseSkill::set_skill_id(const char* value) {
  set_has_skill_id();
  skill_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckUseSkill.skill_id)
}
 void ReqAckUseSkill::set_skill_id(const void* value, size_t size) {
  set_has_skill_id();
  skill_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckUseSkill.skill_id)
}
 ::std::string* ReqAckUseSkill::mutable_skill_id() {
  set_has_skill_id();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseSkill.skill_id)
  return skill_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReqAckUseSkill::release_skill_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckUseSkill.skill_id)
  clear_has_skill_id();
  return skill_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqAckUseSkill::set_allocated_skill_id(::std::string* skill_id) {
  if (skill_id != NULL) {
    set_has_skill_id();
  } else {
    clear_has_skill_id();
  }
  skill_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), skill_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckUseSkill.skill_id)
}

// required .AFMsg.Position now_pos = 3;
bool ReqAckUseSkill::has_now_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqAckUseSkill::set_has_now_pos() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqAckUseSkill::clear_has_now_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqAckUseSkill::clear_now_pos() {
  if (now_pos_ != NULL) now_pos_->::AFMsg::Position::Clear();
  clear_has_now_pos();
}
const ::AFMsg::Position& ReqAckUseSkill::now_pos() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseSkill.now_pos)
  return now_pos_ != NULL ? *now_pos_ : *default_instance_->now_pos_;
}
::AFMsg::Position* ReqAckUseSkill::mutable_now_pos() {
  set_has_now_pos();
  if (now_pos_ == NULL) {
    now_pos_ = new ::AFMsg::Position;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseSkill.now_pos)
  return now_pos_;
}
::AFMsg::Position* ReqAckUseSkill::release_now_pos() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckUseSkill.now_pos)
  clear_has_now_pos();
  ::AFMsg::Position* temp = now_pos_;
  now_pos_ = NULL;
  return temp;
}
void ReqAckUseSkill::set_allocated_now_pos(::AFMsg::Position* now_pos) {
  delete now_pos_;
  now_pos_ = now_pos;
  if (now_pos) {
    set_has_now_pos();
  } else {
    clear_has_now_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckUseSkill.now_pos)
}

// required .AFMsg.Position tar_pos = 4;
bool ReqAckUseSkill::has_tar_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReqAckUseSkill::set_has_tar_pos() {
  _has_bits_[0] |= 0x00000008u;
}
void ReqAckUseSkill::clear_has_tar_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReqAckUseSkill::clear_tar_pos() {
  if (tar_pos_ != NULL) tar_pos_->::AFMsg::Position::Clear();
  clear_has_tar_pos();
}
const ::AFMsg::Position& ReqAckUseSkill::tar_pos() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseSkill.tar_pos)
  return tar_pos_ != NULL ? *tar_pos_ : *default_instance_->tar_pos_;
}
::AFMsg::Position* ReqAckUseSkill::mutable_tar_pos() {
  set_has_tar_pos();
  if (tar_pos_ == NULL) {
    tar_pos_ = new ::AFMsg::Position;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseSkill.tar_pos)
  return tar_pos_;
}
::AFMsg::Position* ReqAckUseSkill::release_tar_pos() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckUseSkill.tar_pos)
  clear_has_tar_pos();
  ::AFMsg::Position* temp = tar_pos_;
  tar_pos_ = NULL;
  return temp;
}
void ReqAckUseSkill::set_allocated_tar_pos(::AFMsg::Position* tar_pos) {
  delete tar_pos_;
  tar_pos_ = tar_pos;
  if (tar_pos) {
    set_has_tar_pos();
  } else {
    clear_has_tar_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckUseSkill.tar_pos)
}

// required int32 use_index = 5;
bool ReqAckUseSkill::has_use_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ReqAckUseSkill::set_has_use_index() {
  _has_bits_[0] |= 0x00000010u;
}
void ReqAckUseSkill::clear_has_use_index() {
  _has_bits_[0] &= ~0x00000010u;
}
void ReqAckUseSkill::clear_use_index() {
  use_index_ = 0;
  clear_has_use_index();
}
 ::google::protobuf::int32 ReqAckUseSkill::use_index() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseSkill.use_index)
  return use_index_;
}
 void ReqAckUseSkill::set_use_index(::google::protobuf::int32 value) {
  set_has_use_index();
  use_index_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckUseSkill.use_index)
}

// repeated .AFMsg.EffectData effect_data = 6;
int ReqAckUseSkill::effect_data_size() const {
  return effect_data_.size();
}
void ReqAckUseSkill::clear_effect_data() {
  effect_data_.Clear();
}
const ::AFMsg::EffectData& ReqAckUseSkill::effect_data(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseSkill.effect_data)
  return effect_data_.Get(index);
}
::AFMsg::EffectData* ReqAckUseSkill::mutable_effect_data(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseSkill.effect_data)
  return effect_data_.Mutable(index);
}
::AFMsg::EffectData* ReqAckUseSkill::add_effect_data() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqAckUseSkill.effect_data)
  return effect_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::AFMsg::EffectData >*
ReqAckUseSkill::mutable_effect_data() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqAckUseSkill.effect_data)
  return &effect_data_;
}
const ::google::protobuf::RepeatedPtrField< ::AFMsg::EffectData >&
ReqAckUseSkill::effect_data() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqAckUseSkill.effect_data)
  return effect_data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckUseItem::kUserFieldNumber;
const int ReqAckUseItem::kItemGuidFieldNumber;
const int ReqAckUseItem::kEffectDataFieldNumber;
const int ReqAckUseItem::kItemFieldNumber;
const int ReqAckUseItem::kTargetidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckUseItem::ReqAckUseItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckUseItem)
}

void ReqAckUseItem::InitAsDefaultInstance() {
  user_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  item_guid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  item_ = const_cast< ::AFMsg::ItemStruct*>(&::AFMsg::ItemStruct::default_instance());
  targetid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqAckUseItem::ReqAckUseItem(const ReqAckUseItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckUseItem)
}

void ReqAckUseItem::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  item_guid_ = NULL;
  item_ = NULL;
  targetid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckUseItem::~ReqAckUseItem() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckUseItem)
  SharedDtor();
}

void ReqAckUseItem::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
    delete item_guid_;
    delete item_;
    delete targetid_;
  }
}

void ReqAckUseItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckUseItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckUseItem_descriptor_;
}

const ReqAckUseItem& ReqAckUseItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckUseItem* ReqAckUseItem::default_instance_ = NULL;

ReqAckUseItem* ReqAckUseItem::New(::google::protobuf::Arena* arena) const {
  ReqAckUseItem* n = new ReqAckUseItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckUseItem::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckUseItem)
  if (_has_bits_[0 / 32] & 27u) {
    if (has_user()) {
      if (user_ != NULL) user_->::AFMsg::Ident::Clear();
    }
    if (has_item_guid()) {
      if (item_guid_ != NULL) item_guid_->::AFMsg::Ident::Clear();
    }
    if (has_item()) {
      if (item_ != NULL) item_->::AFMsg::ItemStruct::Clear();
    }
    if (has_targetid()) {
      if (targetid_ != NULL) targetid_->::AFMsg::Ident::Clear();
    }
  }
  effect_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqAckUseItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckUseItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item_guid;
        break;
      }

      // required .AFMsg.Ident item_guid = 2;
      case 2: {
        if (tag == 18) {
         parse_item_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_guid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_effect_data;
        break;
      }

      // repeated .AFMsg.EffectData effect_data = 3;
      case 3: {
        if (tag == 26) {
         parse_effect_data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_effect_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_effect_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_effect_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_item;
        break;
      }

      // required .AFMsg.ItemStruct item = 4;
      case 4: {
        if (tag == 34) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_targetid;
        break;
      }

      // required .AFMsg.Ident targetid = 5;
      case 5: {
        if (tag == 42) {
         parse_targetid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckUseItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckUseItem)
  return false;
#undef DO_
}

void ReqAckUseItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckUseItem)
  // required .AFMsg.Ident user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->user_, output);
  }

  // required .AFMsg.Ident item_guid = 2;
  if (has_item_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->item_guid_, output);
  }

  // repeated .AFMsg.EffectData effect_data = 3;
  for (unsigned int i = 0, n = this->effect_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->effect_data(i), output);
  }

  // required .AFMsg.ItemStruct item = 4;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->item_, output);
  }

  // required .AFMsg.Ident targetid = 5;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->targetid_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckUseItem)
}

::google::protobuf::uint8* ReqAckUseItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckUseItem)
  // required .AFMsg.Ident user = 1;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->user_, false, target);
  }

  // required .AFMsg.Ident item_guid = 2;
  if (has_item_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->item_guid_, false, target);
  }

  // repeated .AFMsg.EffectData effect_data = 3;
  for (unsigned int i = 0, n = this->effect_data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->effect_data(i), false, target);
  }

  // required .AFMsg.ItemStruct item = 4;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->item_, false, target);
  }

  // required .AFMsg.Ident targetid = 5;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->targetid_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckUseItem)
  return target;
}

int ReqAckUseItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqAckUseItem)
  int total_size = 0;

  if (has_user()) {
    // required .AFMsg.Ident user = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_);
  }

  if (has_item_guid()) {
    // required .AFMsg.Ident item_guid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->item_guid_);
  }

  if (has_item()) {
    // required .AFMsg.ItemStruct item = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->item_);
  }

  if (has_targetid()) {
    // required .AFMsg.Ident targetid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->targetid_);
  }

  return total_size;
}
int ReqAckUseItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckUseItem)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001b) ^ 0x0000001b) == 0) {  // All required fields are present.
    // required .AFMsg.Ident user = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_);

    // required .AFMsg.Ident item_guid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->item_guid_);

    // required .AFMsg.ItemStruct item = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->item_);

    // required .AFMsg.Ident targetid = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->targetid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .AFMsg.EffectData effect_data = 3;
  total_size += 1 * this->effect_data_size();
  for (int i = 0; i < this->effect_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effect_data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckUseItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckUseItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqAckUseItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckUseItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckUseItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckUseItem)
    MergeFrom(*source);
  }
}

void ReqAckUseItem::MergeFrom(const ReqAckUseItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckUseItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  effect_data_.MergeFrom(from.effect_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::AFMsg::Ident::MergeFrom(from.user());
    }
    if (from.has_item_guid()) {
      mutable_item_guid()->::AFMsg::Ident::MergeFrom(from.item_guid());
    }
    if (from.has_item()) {
      mutable_item()->::AFMsg::ItemStruct::MergeFrom(from.item());
    }
    if (from.has_targetid()) {
      mutable_targetid()->::AFMsg::Ident::MergeFrom(from.targetid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqAckUseItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckUseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckUseItem::CopyFrom(const ReqAckUseItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckUseItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckUseItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  if (has_user()) {
    if (!this->user_->IsInitialized()) return false;
  }
  if (has_item_guid()) {
    if (!this->item_guid_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->effect_data())) return false;
  if (has_item()) {
    if (!this->item_->IsInitialized()) return false;
  }
  if (has_targetid()) {
    if (!this->targetid_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckUseItem::Swap(ReqAckUseItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckUseItem::InternalSwap(ReqAckUseItem* other) {
  std::swap(user_, other->user_);
  std::swap(item_guid_, other->item_guid_);
  effect_data_.UnsafeArenaSwap(&other->effect_data_);
  std::swap(item_, other->item_);
  std::swap(targetid_, other->targetid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckUseItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckUseItem_descriptor_;
  metadata.reflection = ReqAckUseItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAckUseItem

// required .AFMsg.Ident user = 1;
bool ReqAckUseItem::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqAckUseItem::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqAckUseItem::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqAckUseItem::clear_user() {
  if (user_ != NULL) user_->::AFMsg::Ident::Clear();
  clear_has_user();
}
const ::AFMsg::Ident& ReqAckUseItem::user() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseItem.user)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
::AFMsg::Ident* ReqAckUseItem::mutable_user() {
  set_has_user();
  if (user_ == NULL) {
    user_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseItem.user)
  return user_;
}
::AFMsg::Ident* ReqAckUseItem::release_user() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckUseItem.user)
  clear_has_user();
  ::AFMsg::Ident* temp = user_;
  user_ = NULL;
  return temp;
}
void ReqAckUseItem::set_allocated_user(::AFMsg::Ident* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckUseItem.user)
}

// required .AFMsg.Ident item_guid = 2;
bool ReqAckUseItem::has_item_guid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqAckUseItem::set_has_item_guid() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqAckUseItem::clear_has_item_guid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqAckUseItem::clear_item_guid() {
  if (item_guid_ != NULL) item_guid_->::AFMsg::Ident::Clear();
  clear_has_item_guid();
}
const ::AFMsg::Ident& ReqAckUseItem::item_guid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseItem.item_guid)
  return item_guid_ != NULL ? *item_guid_ : *default_instance_->item_guid_;
}
::AFMsg::Ident* ReqAckUseItem::mutable_item_guid() {
  set_has_item_guid();
  if (item_guid_ == NULL) {
    item_guid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseItem.item_guid)
  return item_guid_;
}
::AFMsg::Ident* ReqAckUseItem::release_item_guid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckUseItem.item_guid)
  clear_has_item_guid();
  ::AFMsg::Ident* temp = item_guid_;
  item_guid_ = NULL;
  return temp;
}
void ReqAckUseItem::set_allocated_item_guid(::AFMsg::Ident* item_guid) {
  delete item_guid_;
  item_guid_ = item_guid;
  if (item_guid) {
    set_has_item_guid();
  } else {
    clear_has_item_guid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckUseItem.item_guid)
}

// repeated .AFMsg.EffectData effect_data = 3;
int ReqAckUseItem::effect_data_size() const {
  return effect_data_.size();
}
void ReqAckUseItem::clear_effect_data() {
  effect_data_.Clear();
}
const ::AFMsg::EffectData& ReqAckUseItem::effect_data(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseItem.effect_data)
  return effect_data_.Get(index);
}
::AFMsg::EffectData* ReqAckUseItem::mutable_effect_data(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseItem.effect_data)
  return effect_data_.Mutable(index);
}
::AFMsg::EffectData* ReqAckUseItem::add_effect_data() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqAckUseItem.effect_data)
  return effect_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::AFMsg::EffectData >*
ReqAckUseItem::mutable_effect_data() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqAckUseItem.effect_data)
  return &effect_data_;
}
const ::google::protobuf::RepeatedPtrField< ::AFMsg::EffectData >&
ReqAckUseItem::effect_data() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqAckUseItem.effect_data)
  return effect_data_;
}

// required .AFMsg.ItemStruct item = 4;
bool ReqAckUseItem::has_item() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReqAckUseItem::set_has_item() {
  _has_bits_[0] |= 0x00000008u;
}
void ReqAckUseItem::clear_has_item() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReqAckUseItem::clear_item() {
  if (item_ != NULL) item_->::AFMsg::ItemStruct::Clear();
  clear_has_item();
}
const ::AFMsg::ItemStruct& ReqAckUseItem::item() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseItem.item)
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
::AFMsg::ItemStruct* ReqAckUseItem::mutable_item() {
  set_has_item();
  if (item_ == NULL) {
    item_ = new ::AFMsg::ItemStruct;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseItem.item)
  return item_;
}
::AFMsg::ItemStruct* ReqAckUseItem::release_item() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckUseItem.item)
  clear_has_item();
  ::AFMsg::ItemStruct* temp = item_;
  item_ = NULL;
  return temp;
}
void ReqAckUseItem::set_allocated_item(::AFMsg::ItemStruct* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckUseItem.item)
}

// required .AFMsg.Ident targetid = 5;
bool ReqAckUseItem::has_targetid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ReqAckUseItem::set_has_targetid() {
  _has_bits_[0] |= 0x00000010u;
}
void ReqAckUseItem::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000010u;
}
void ReqAckUseItem::clear_targetid() {
  if (targetid_ != NULL) targetid_->::AFMsg::Ident::Clear();
  clear_has_targetid();
}
const ::AFMsg::Ident& ReqAckUseItem::targetid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckUseItem.targetid)
  return targetid_ != NULL ? *targetid_ : *default_instance_->targetid_;
}
::AFMsg::Ident* ReqAckUseItem::mutable_targetid() {
  set_has_targetid();
  if (targetid_ == NULL) {
    targetid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckUseItem.targetid)
  return targetid_;
}
::AFMsg::Ident* ReqAckUseItem::release_targetid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckUseItem.targetid)
  clear_has_targetid();
  ::AFMsg::Ident* temp = targetid_;
  targetid_ = NULL;
  return temp;
}
void ReqAckUseItem::set_allocated_targetid(::AFMsg::Ident* targetid) {
  delete targetid_;
  targetid_ = targetid;
  if (targetid) {
    set_has_targetid();
  } else {
    clear_has_targetid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckUseItem.targetid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqAckSwapScene_EGameSwapType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckSwapScene_EGameSwapType_descriptor_;
}
bool ReqAckSwapScene_EGameSwapType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_NARMAL;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_CLONE;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_ARENA;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGST_MIRROR;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGameSwapType_MIN;
const ReqAckSwapScene_EGameSwapType ReqAckSwapScene::EGameSwapType_MAX;
const int ReqAckSwapScene::EGameSwapType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckSwapScene::kTransferTypeFieldNumber;
const int ReqAckSwapScene::kSceneIdFieldNumber;
const int ReqAckSwapScene::kLineIdFieldNumber;
const int ReqAckSwapScene::kXFieldNumber;
const int ReqAckSwapScene::kYFieldNumber;
const int ReqAckSwapScene::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckSwapScene::ReqAckSwapScene()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckSwapScene)
}

void ReqAckSwapScene::InitAsDefaultInstance() {
}

ReqAckSwapScene::ReqAckSwapScene(const ReqAckSwapScene& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckSwapScene)
}

void ReqAckSwapScene::SharedCtor() {
  _cached_size_ = 0;
  transfer_type_ = 0;
  scene_id_ = 0;
  line_id_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckSwapScene::~ReqAckSwapScene() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckSwapScene)
  SharedDtor();
}

void ReqAckSwapScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqAckSwapScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckSwapScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckSwapScene_descriptor_;
}

const ReqAckSwapScene& ReqAckSwapScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckSwapScene* ReqAckSwapScene::default_instance_ = NULL;

ReqAckSwapScene* ReqAckSwapScene::New(::google::protobuf::Arena* arena) const {
  ReqAckSwapScene* n = new ReqAckSwapScene;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckSwapScene::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckSwapScene)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqAckSwapScene, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqAckSwapScene*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(transfer_type_, z_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqAckSwapScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckSwapScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AFMsg::ReqAckSwapScene_EGameSwapType_IsValid(value)) {
            set_transfer_type(static_cast< ::AFMsg::ReqAckSwapScene_EGameSwapType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // required int32 scene_id = 2;
      case 2: {
        if (tag == 16) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_line_id;
        break;
      }

      // required int32 line_id = 3;
      case 3: {
        if (tag == 24) {
         parse_line_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_id_)));
          set_has_line_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_x;
        break;
      }

      // optional float x = 4;
      case 4: {
        if (tag == 37) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_y;
        break;
      }

      // optional float y = 5;
      case 5: {
        if (tag == 45) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_z;
        break;
      }

      // optional float z = 6;
      case 6: {
        if (tag == 53) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckSwapScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckSwapScene)
  return false;
#undef DO_
}

void ReqAckSwapScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckSwapScene)
  // required .AFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
  if (has_transfer_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->transfer_type(), output);
  }

  // required int32 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->scene_id(), output);
  }

  // required int32 line_id = 3;
  if (has_line_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->line_id(), output);
  }

  // optional float x = 4;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->x(), output);
  }

  // optional float y = 5;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->y(), output);
  }

  // optional float z = 6;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckSwapScene)
}

::google::protobuf::uint8* ReqAckSwapScene::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckSwapScene)
  // required .AFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
  if (has_transfer_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->transfer_type(), target);
  }

  // required int32 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->scene_id(), target);
  }

  // required int32 line_id = 3;
  if (has_line_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->line_id(), target);
  }

  // optional float x = 4;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->x(), target);
  }

  // optional float y = 5;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->y(), target);
  }

  // optional float z = 6;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckSwapScene)
  return target;
}

int ReqAckSwapScene::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqAckSwapScene)
  int total_size = 0;

  if (has_transfer_type()) {
    // required .AFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->transfer_type());
  }

  if (has_scene_id()) {
    // required int32 scene_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scene_id());
  }

  if (has_line_id()) {
    // required int32 line_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->line_id());
  }

  return total_size;
}
int ReqAckSwapScene::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckSwapScene)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .AFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->transfer_type());

    // required int32 scene_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->scene_id());

    // required int32 line_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->line_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 56u) {
    // optional float x = 4;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 5;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 6;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckSwapScene::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckSwapScene)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqAckSwapScene* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckSwapScene>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckSwapScene)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckSwapScene)
    MergeFrom(*source);
  }
}

void ReqAckSwapScene::MergeFrom(const ReqAckSwapScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckSwapScene)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transfer_type()) {
      set_transfer_type(from.transfer_type());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_line_id()) {
      set_line_id(from.line_id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqAckSwapScene::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckSwapScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckSwapScene::CopyFrom(const ReqAckSwapScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckSwapScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckSwapScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReqAckSwapScene::Swap(ReqAckSwapScene* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckSwapScene::InternalSwap(ReqAckSwapScene* other) {
  std::swap(transfer_type_, other->transfer_type_);
  std::swap(scene_id_, other->scene_id_);
  std::swap(line_id_, other->line_id_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckSwapScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckSwapScene_descriptor_;
  metadata.reflection = ReqAckSwapScene_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAckSwapScene

// required .AFMsg.ReqAckSwapScene.EGameSwapType transfer_type = 1;
bool ReqAckSwapScene::has_transfer_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqAckSwapScene::set_has_transfer_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqAckSwapScene::clear_has_transfer_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqAckSwapScene::clear_transfer_type() {
  transfer_type_ = 0;
  clear_has_transfer_type();
}
 ::AFMsg::ReqAckSwapScene_EGameSwapType ReqAckSwapScene::transfer_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSwapScene.transfer_type)
  return static_cast< ::AFMsg::ReqAckSwapScene_EGameSwapType >(transfer_type_);
}
 void ReqAckSwapScene::set_transfer_type(::AFMsg::ReqAckSwapScene_EGameSwapType value) {
  assert(::AFMsg::ReqAckSwapScene_EGameSwapType_IsValid(value));
  set_has_transfer_type();
  transfer_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSwapScene.transfer_type)
}

// required int32 scene_id = 2;
bool ReqAckSwapScene::has_scene_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqAckSwapScene::set_has_scene_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqAckSwapScene::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqAckSwapScene::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
 ::google::protobuf::int32 ReqAckSwapScene::scene_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSwapScene.scene_id)
  return scene_id_;
}
 void ReqAckSwapScene::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSwapScene.scene_id)
}

// required int32 line_id = 3;
bool ReqAckSwapScene::has_line_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqAckSwapScene::set_has_line_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqAckSwapScene::clear_has_line_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqAckSwapScene::clear_line_id() {
  line_id_ = 0;
  clear_has_line_id();
}
 ::google::protobuf::int32 ReqAckSwapScene::line_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSwapScene.line_id)
  return line_id_;
}
 void ReqAckSwapScene::set_line_id(::google::protobuf::int32 value) {
  set_has_line_id();
  line_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSwapScene.line_id)
}

// optional float x = 4;
bool ReqAckSwapScene::has_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReqAckSwapScene::set_has_x() {
  _has_bits_[0] |= 0x00000008u;
}
void ReqAckSwapScene::clear_has_x() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReqAckSwapScene::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float ReqAckSwapScene::x() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSwapScene.x)
  return x_;
}
 void ReqAckSwapScene::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSwapScene.x)
}

// optional float y = 5;
bool ReqAckSwapScene::has_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ReqAckSwapScene::set_has_y() {
  _has_bits_[0] |= 0x00000010u;
}
void ReqAckSwapScene::clear_has_y() {
  _has_bits_[0] &= ~0x00000010u;
}
void ReqAckSwapScene::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float ReqAckSwapScene::y() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSwapScene.y)
  return y_;
}
 void ReqAckSwapScene::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSwapScene.y)
}

// optional float z = 6;
bool ReqAckSwapScene::has_z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ReqAckSwapScene::set_has_z() {
  _has_bits_[0] |= 0x00000020u;
}
void ReqAckSwapScene::clear_has_z() {
  _has_bits_[0] &= ~0x00000020u;
}
void ReqAckSwapScene::clear_z() {
  z_ = 0;
  clear_has_z();
}
 float ReqAckSwapScene::z() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSwapScene.z)
  return z_;
}
 void ReqAckSwapScene::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSwapScene.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ItemStruct::kItemIdFieldNumber;
const int ItemStruct::kItemCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ItemStruct::ItemStruct()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ItemStruct)
}

void ItemStruct::InitAsDefaultInstance() {
}

ItemStruct::ItemStruct(const ItemStruct& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ItemStruct)
}

void ItemStruct::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  item_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemStruct::~ItemStruct() {
  // @@protoc_insertion_point(destructor:AFMsg.ItemStruct)
  SharedDtor();
}

void ItemStruct::SharedDtor() {
  item_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ItemStruct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemStruct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemStruct_descriptor_;
}

const ItemStruct& ItemStruct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ItemStruct* ItemStruct::default_instance_ = NULL;

ItemStruct* ItemStruct::New(::google::protobuf::Arena* arena) const {
  ItemStruct* n = new ItemStruct;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ItemStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ItemStruct)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_item_id()) {
      item_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    item_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ItemStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ItemStruct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string item_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->item_id().data(), this->item_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AFMsg.ItemStruct.item_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_count;
        break;
      }

      // required int32 item_count = 2;
      case 2: {
        if (tag == 16) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ItemStruct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ItemStruct)
  return false;
#undef DO_
}

void ItemStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ItemStruct)
  // required string item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_id().data(), this->item_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AFMsg.ItemStruct.item_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->item_id(), output);
  }

  // required int32 item_count = 2;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ItemStruct)
}

::google::protobuf::uint8* ItemStruct::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ItemStruct)
  // required string item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_id().data(), this->item_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AFMsg.ItemStruct.item_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->item_id(), target);
  }

  // required int32 item_count = 2;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ItemStruct)
  return target;
}

int ItemStruct::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ItemStruct)
  int total_size = 0;

  if (has_item_id()) {
    // required string item_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->item_id());
  }

  if (has_item_count()) {
    // required int32 item_count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->item_count());
  }

  return total_size;
}
int ItemStruct::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ItemStruct)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string item_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->item_id());

    // required int32 item_count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->item_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemStruct::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ItemStruct)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ItemStruct* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ItemStruct>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ItemStruct)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ItemStruct)
    MergeFrom(*source);
  }
}

void ItemStruct::MergeFrom(const ItemStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ItemStruct)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_has_item_id();
      item_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_id_);
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ItemStruct::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ItemStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemStruct::CopyFrom(const ItemStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ItemStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemStruct::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ItemStruct::Swap(ItemStruct* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ItemStruct::InternalSwap(ItemStruct* other) {
  item_id_.Swap(&other->item_id_);
  std::swap(item_count_, other->item_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ItemStruct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemStruct_descriptor_;
  metadata.reflection = ItemStruct_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ItemStruct

// required string item_id = 1;
bool ItemStruct::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ItemStruct::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ItemStruct::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ItemStruct::clear_item_id() {
  item_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_item_id();
}
 const ::std::string& ItemStruct::item_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ItemStruct.item_id)
  return item_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ItemStruct::set_item_id(const ::std::string& value) {
  set_has_item_id();
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ItemStruct.item_id)
}
 void ItemStruct::set_item_id(const char* value) {
  set_has_item_id();
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ItemStruct.item_id)
}
 void ItemStruct::set_item_id(const char* value, size_t size) {
  set_has_item_id();
  item_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ItemStruct.item_id)
}
 ::std::string* ItemStruct::mutable_item_id() {
  set_has_item_id();
  // @@protoc_insertion_point(field_mutable:AFMsg.ItemStruct.item_id)
  return item_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ItemStruct::release_item_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ItemStruct.item_id)
  clear_has_item_id();
  return item_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ItemStruct::set_allocated_item_id(::std::string* item_id) {
  if (item_id != NULL) {
    set_has_item_id();
  } else {
    clear_has_item_id();
  }
  item_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ItemStruct.item_id)
}

// required int32 item_count = 2;
bool ItemStruct::has_item_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ItemStruct::set_has_item_count() {
  _has_bits_[0] |= 0x00000002u;
}
void ItemStruct::clear_has_item_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void ItemStruct::clear_item_count() {
  item_count_ = 0;
  clear_has_item_count();
}
 ::google::protobuf::int32 ItemStruct::item_count() const {
  // @@protoc_insertion_point(field_get:AFMsg.ItemStruct.item_count)
  return item_count_;
}
 void ItemStruct::set_item_count(::google::protobuf::int32 value) {
  set_has_item_count();
  item_count_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ItemStruct.item_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CurrencyStruct::kCurrencyTypeFieldNumber;
const int CurrencyStruct::kCurrencyCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CurrencyStruct::CurrencyStruct()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.CurrencyStruct)
}

void CurrencyStruct::InitAsDefaultInstance() {
}

CurrencyStruct::CurrencyStruct(const CurrencyStruct& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.CurrencyStruct)
}

void CurrencyStruct::SharedCtor() {
  _cached_size_ = 0;
  currency_type_ = 0;
  currency_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CurrencyStruct::~CurrencyStruct() {
  // @@protoc_insertion_point(destructor:AFMsg.CurrencyStruct)
  SharedDtor();
}

void CurrencyStruct::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CurrencyStruct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CurrencyStruct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CurrencyStruct_descriptor_;
}

const CurrencyStruct& CurrencyStruct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

CurrencyStruct* CurrencyStruct::default_instance_ = NULL;

CurrencyStruct* CurrencyStruct::New(::google::protobuf::Arena* arena) const {
  CurrencyStruct* n = new CurrencyStruct;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CurrencyStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.CurrencyStruct)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CurrencyStruct, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CurrencyStruct*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(currency_type_, currency_count_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CurrencyStruct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.CurrencyStruct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 currency_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_type_)));
          set_has_currency_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_currency_count;
        break;
      }

      // required int32 currency_count = 2;
      case 2: {
        if (tag == 16) {
         parse_currency_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_count_)));
          set_has_currency_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.CurrencyStruct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.CurrencyStruct)
  return false;
#undef DO_
}

void CurrencyStruct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.CurrencyStruct)
  // required int32 currency_type = 1;
  if (has_currency_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->currency_type(), output);
  }

  // required int32 currency_count = 2;
  if (has_currency_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currency_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.CurrencyStruct)
}

::google::protobuf::uint8* CurrencyStruct::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.CurrencyStruct)
  // required int32 currency_type = 1;
  if (has_currency_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->currency_type(), target);
  }

  // required int32 currency_count = 2;
  if (has_currency_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currency_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.CurrencyStruct)
  return target;
}

int CurrencyStruct::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.CurrencyStruct)
  int total_size = 0;

  if (has_currency_type()) {
    // required int32 currency_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->currency_type());
  }

  if (has_currency_count()) {
    // required int32 currency_count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->currency_count());
  }

  return total_size;
}
int CurrencyStruct::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.CurrencyStruct)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 currency_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->currency_type());

    // required int32 currency_count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->currency_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CurrencyStruct::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.CurrencyStruct)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CurrencyStruct* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CurrencyStruct>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.CurrencyStruct)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.CurrencyStruct)
    MergeFrom(*source);
  }
}

void CurrencyStruct::MergeFrom(const CurrencyStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.CurrencyStruct)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currency_type()) {
      set_currency_type(from.currency_type());
    }
    if (from.has_currency_count()) {
      set_currency_count(from.currency_count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CurrencyStruct::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.CurrencyStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CurrencyStruct::CopyFrom(const CurrencyStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.CurrencyStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CurrencyStruct::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CurrencyStruct::Swap(CurrencyStruct* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CurrencyStruct::InternalSwap(CurrencyStruct* other) {
  std::swap(currency_type_, other->currency_type_);
  std::swap(currency_count_, other->currency_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CurrencyStruct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CurrencyStruct_descriptor_;
  metadata.reflection = CurrencyStruct_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CurrencyStruct

// required int32 currency_type = 1;
bool CurrencyStruct::has_currency_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CurrencyStruct::set_has_currency_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CurrencyStruct::clear_has_currency_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CurrencyStruct::clear_currency_type() {
  currency_type_ = 0;
  clear_has_currency_type();
}
 ::google::protobuf::int32 CurrencyStruct::currency_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.CurrencyStruct.currency_type)
  return currency_type_;
}
 void CurrencyStruct::set_currency_type(::google::protobuf::int32 value) {
  set_has_currency_type();
  currency_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.CurrencyStruct.currency_type)
}

// required int32 currency_count = 2;
bool CurrencyStruct::has_currency_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CurrencyStruct::set_has_currency_count() {
  _has_bits_[0] |= 0x00000002u;
}
void CurrencyStruct::clear_has_currency_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void CurrencyStruct::clear_currency_count() {
  currency_count_ = 0;
  clear_has_currency_count();
}
 ::google::protobuf::int32 CurrencyStruct::currency_count() const {
  // @@protoc_insertion_point(field_get:AFMsg.CurrencyStruct.currency_count)
  return currency_count_;
}
 void CurrencyStruct::set_currency_count(::google::protobuf::int32 value) {
  set_has_currency_count();
  currency_count_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.CurrencyStruct.currency_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckEndBattle::kMoneyFieldNumber;
const int ReqAckEndBattle::kExpFieldNumber;
const int ReqAckEndBattle::kDiamondFieldNumber;
const int ReqAckEndBattle::kItemListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckEndBattle::ReqAckEndBattle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckEndBattle)
}

void ReqAckEndBattle::InitAsDefaultInstance() {
}

ReqAckEndBattle::ReqAckEndBattle(const ReqAckEndBattle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckEndBattle)
}

void ReqAckEndBattle::SharedCtor() {
  _cached_size_ = 0;
  money_ = 0;
  exp_ = 0;
  diamond_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckEndBattle::~ReqAckEndBattle() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckEndBattle)
  SharedDtor();
}

void ReqAckEndBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqAckEndBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckEndBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckEndBattle_descriptor_;
}

const ReqAckEndBattle& ReqAckEndBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckEndBattle* ReqAckEndBattle::default_instance_ = NULL;

ReqAckEndBattle* ReqAckEndBattle::New(::google::protobuf::Arena* arena) const {
  ReqAckEndBattle* n = new ReqAckEndBattle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckEndBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckEndBattle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqAckEndBattle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqAckEndBattle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(money_, exp_);
    diamond_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqAckEndBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckEndBattle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 money = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // required int32 exp = 2;
      case 2: {
        if (tag == 16) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_diamond;
        break;
      }

      // required int32 diamond = 3;
      case 3: {
        if (tag == 24) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_item_list;
        break;
      }

      // repeated .AFMsg.ItemStruct item_list = 4;
      case 4: {
        if (tag == 34) {
         parse_item_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_item_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_item_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckEndBattle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckEndBattle)
  return false;
#undef DO_
}

void ReqAckEndBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckEndBattle)
  // required int32 money = 1;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->money(), output);
  }

  // required int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  // required int32 diamond = 3;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->diamond(), output);
  }

  // repeated .AFMsg.ItemStruct item_list = 4;
  for (unsigned int i = 0, n = this->item_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckEndBattle)
}

::google::protobuf::uint8* ReqAckEndBattle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckEndBattle)
  // required int32 money = 1;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->money(), target);
  }

  // required int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  // required int32 diamond = 3;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->diamond(), target);
  }

  // repeated .AFMsg.ItemStruct item_list = 4;
  for (unsigned int i = 0, n = this->item_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->item_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckEndBattle)
  return target;
}

int ReqAckEndBattle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqAckEndBattle)
  int total_size = 0;

  if (has_money()) {
    // required int32 money = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->money());
  }

  if (has_exp()) {
    // required int32 exp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exp());
  }

  if (has_diamond()) {
    // required int32 diamond = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->diamond());
  }

  return total_size;
}
int ReqAckEndBattle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckEndBattle)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 money = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->money());

    // required int32 exp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exp());

    // required int32 diamond = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->diamond());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .AFMsg.ItemStruct item_list = 4;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckEndBattle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckEndBattle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqAckEndBattle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckEndBattle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckEndBattle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckEndBattle)
    MergeFrom(*source);
  }
}

void ReqAckEndBattle::MergeFrom(const ReqAckEndBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckEndBattle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqAckEndBattle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckEndBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckEndBattle::CopyFrom(const ReqAckEndBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckEndBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckEndBattle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->item_list())) return false;
  return true;
}

void ReqAckEndBattle::Swap(ReqAckEndBattle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckEndBattle::InternalSwap(ReqAckEndBattle* other) {
  std::swap(money_, other->money_);
  std::swap(exp_, other->exp_);
  std::swap(diamond_, other->diamond_);
  item_list_.UnsafeArenaSwap(&other->item_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckEndBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckEndBattle_descriptor_;
  metadata.reflection = ReqAckEndBattle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAckEndBattle

// required int32 money = 1;
bool ReqAckEndBattle::has_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqAckEndBattle::set_has_money() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqAckEndBattle::clear_has_money() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqAckEndBattle::clear_money() {
  money_ = 0;
  clear_has_money();
}
 ::google::protobuf::int32 ReqAckEndBattle::money() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckEndBattle.money)
  return money_;
}
 void ReqAckEndBattle::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckEndBattle.money)
}

// required int32 exp = 2;
bool ReqAckEndBattle::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqAckEndBattle::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqAckEndBattle::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqAckEndBattle::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
 ::google::protobuf::int32 ReqAckEndBattle::exp() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckEndBattle.exp)
  return exp_;
}
 void ReqAckEndBattle::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckEndBattle.exp)
}

// required int32 diamond = 3;
bool ReqAckEndBattle::has_diamond() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqAckEndBattle::set_has_diamond() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqAckEndBattle::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqAckEndBattle::clear_diamond() {
  diamond_ = 0;
  clear_has_diamond();
}
 ::google::protobuf::int32 ReqAckEndBattle::diamond() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckEndBattle.diamond)
  return diamond_;
}
 void ReqAckEndBattle::set_diamond(::google::protobuf::int32 value) {
  set_has_diamond();
  diamond_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckEndBattle.diamond)
}

// repeated .AFMsg.ItemStruct item_list = 4;
int ReqAckEndBattle::item_list_size() const {
  return item_list_.size();
}
void ReqAckEndBattle::clear_item_list() {
  item_list_.Clear();
}
const ::AFMsg::ItemStruct& ReqAckEndBattle::item_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckEndBattle.item_list)
  return item_list_.Get(index);
}
::AFMsg::ItemStruct* ReqAckEndBattle::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckEndBattle.item_list)
  return item_list_.Mutable(index);
}
::AFMsg::ItemStruct* ReqAckEndBattle::add_item_list() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqAckEndBattle.item_list)
  return item_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >*
ReqAckEndBattle::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqAckEndBattle.item_list)
  return &item_list_;
}
const ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >&
ReqAckEndBattle::item_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqAckEndBattle.item_list)
  return item_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqPickDropItem::kItemGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqPickDropItem::ReqPickDropItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqPickDropItem)
}

void ReqPickDropItem::InitAsDefaultInstance() {
  item_guid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqPickDropItem::ReqPickDropItem(const ReqPickDropItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqPickDropItem)
}

void ReqPickDropItem::SharedCtor() {
  _cached_size_ = 0;
  item_guid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqPickDropItem::~ReqPickDropItem() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqPickDropItem)
  SharedDtor();
}

void ReqPickDropItem::SharedDtor() {
  if (this != default_instance_) {
    delete item_guid_;
  }
}

void ReqPickDropItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPickDropItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPickDropItem_descriptor_;
}

const ReqPickDropItem& ReqPickDropItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqPickDropItem* ReqPickDropItem::default_instance_ = NULL;

ReqPickDropItem* ReqPickDropItem::New(::google::protobuf::Arena* arena) const {
  ReqPickDropItem* n = new ReqPickDropItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqPickDropItem::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqPickDropItem)
  if (has_item_guid()) {
    if (item_guid_ != NULL) item_guid_->::AFMsg::Ident::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqPickDropItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqPickDropItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident item_guid = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_guid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqPickDropItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqPickDropItem)
  return false;
#undef DO_
}

void ReqPickDropItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqPickDropItem)
  // required .AFMsg.Ident item_guid = 2;
  if (has_item_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->item_guid_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqPickDropItem)
}

::google::protobuf::uint8* ReqPickDropItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqPickDropItem)
  // required .AFMsg.Ident item_guid = 2;
  if (has_item_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->item_guid_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqPickDropItem)
  return target;
}

int ReqPickDropItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqPickDropItem)
  int total_size = 0;

  // required .AFMsg.Ident item_guid = 2;
  if (has_item_guid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->item_guid_);
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPickDropItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqPickDropItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqPickDropItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqPickDropItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqPickDropItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqPickDropItem)
    MergeFrom(*source);
  }
}

void ReqPickDropItem::MergeFrom(const ReqPickDropItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqPickDropItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_guid()) {
      mutable_item_guid()->::AFMsg::Ident::MergeFrom(from.item_guid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqPickDropItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqPickDropItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPickDropItem::CopyFrom(const ReqPickDropItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqPickDropItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPickDropItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_item_guid()) {
    if (!this->item_guid_->IsInitialized()) return false;
  }
  return true;
}

void ReqPickDropItem::Swap(ReqPickDropItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqPickDropItem::InternalSwap(ReqPickDropItem* other) {
  std::swap(item_guid_, other->item_guid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqPickDropItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqPickDropItem_descriptor_;
  metadata.reflection = ReqPickDropItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqPickDropItem

// required .AFMsg.Ident item_guid = 2;
bool ReqPickDropItem::has_item_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqPickDropItem::set_has_item_guid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqPickDropItem::clear_has_item_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqPickDropItem::clear_item_guid() {
  if (item_guid_ != NULL) item_guid_->::AFMsg::Ident::Clear();
  clear_has_item_guid();
}
const ::AFMsg::Ident& ReqPickDropItem::item_guid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqPickDropItem.item_guid)
  return item_guid_ != NULL ? *item_guid_ : *default_instance_->item_guid_;
}
::AFMsg::Ident* ReqPickDropItem::mutable_item_guid() {
  set_has_item_guid();
  if (item_guid_ == NULL) {
    item_guid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqPickDropItem.item_guid)
  return item_guid_;
}
::AFMsg::Ident* ReqPickDropItem::release_item_guid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqPickDropItem.item_guid)
  clear_has_item_guid();
  ::AFMsg::Ident* temp = item_guid_;
  item_guid_ = NULL;
  return temp;
}
void ReqPickDropItem::set_allocated_item_guid(::AFMsg::Ident* item_guid) {
  delete item_guid_;
  item_guid_ = item_guid;
  if (item_guid) {
    set_has_item_guid();
  } else {
    clear_has_item_guid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqPickDropItem.item_guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAcceptTask::kTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAcceptTask::ReqAcceptTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAcceptTask)
}

void ReqAcceptTask::InitAsDefaultInstance() {
}

ReqAcceptTask::ReqAcceptTask(const ReqAcceptTask& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAcceptTask)
}

void ReqAcceptTask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAcceptTask::~ReqAcceptTask() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAcceptTask)
  SharedDtor();
}

void ReqAcceptTask::SharedDtor() {
  task_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ReqAcceptTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAcceptTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAcceptTask_descriptor_;
}

const ReqAcceptTask& ReqAcceptTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqAcceptTask* ReqAcceptTask::default_instance_ = NULL;

ReqAcceptTask* ReqAcceptTask::New(::google::protobuf::Arena* arena) const {
  ReqAcceptTask* n = new ReqAcceptTask;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAcceptTask::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAcceptTask)
  if (has_task_id()) {
    task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqAcceptTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAcceptTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAcceptTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAcceptTask)
  return false;
#undef DO_
}

void ReqAcceptTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAcceptTask)
  // required bytes task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->task_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAcceptTask)
}

::google::protobuf::uint8* ReqAcceptTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAcceptTask)
  // required bytes task_id = 1;
  if (has_task_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAcceptTask)
  return target;
}

int ReqAcceptTask::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAcceptTask)
  int total_size = 0;

  // required bytes task_id = 1;
  if (has_task_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->task_id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAcceptTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAcceptTask)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqAcceptTask* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAcceptTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAcceptTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAcceptTask)
    MergeFrom(*source);
  }
}

void ReqAcceptTask::MergeFrom(const ReqAcceptTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAcceptTask)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_has_task_id();
      task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqAcceptTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAcceptTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAcceptTask::CopyFrom(const ReqAcceptTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAcceptTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAcceptTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqAcceptTask::Swap(ReqAcceptTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAcceptTask::InternalSwap(ReqAcceptTask* other) {
  task_id_.Swap(&other->task_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAcceptTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAcceptTask_descriptor_;
  metadata.reflection = ReqAcceptTask_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAcceptTask

// required bytes task_id = 1;
bool ReqAcceptTask::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqAcceptTask::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqAcceptTask::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqAcceptTask::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_task_id();
}
 const ::std::string& ReqAcceptTask::task_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAcceptTask.task_id)
  return task_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqAcceptTask::set_task_id(const ::std::string& value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAcceptTask.task_id)
}
 void ReqAcceptTask::set_task_id(const char* value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAcceptTask.task_id)
}
 void ReqAcceptTask::set_task_id(const void* value, size_t size) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAcceptTask.task_id)
}
 ::std::string* ReqAcceptTask::mutable_task_id() {
  set_has_task_id();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAcceptTask.task_id)
  return task_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReqAcceptTask::release_task_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAcceptTask.task_id)
  clear_has_task_id();
  return task_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqAcceptTask::set_allocated_task_id(::std::string* task_id) {
  if (task_id != NULL) {
    set_has_task_id();
  } else {
    clear_has_task_id();
  }
  task_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAcceptTask.task_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqCompeleteTask::kTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqCompeleteTask::ReqCompeleteTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqCompeleteTask)
}

void ReqCompeleteTask::InitAsDefaultInstance() {
}

ReqCompeleteTask::ReqCompeleteTask(const ReqCompeleteTask& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqCompeleteTask)
}

void ReqCompeleteTask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  task_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCompeleteTask::~ReqCompeleteTask() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqCompeleteTask)
  SharedDtor();
}

void ReqCompeleteTask::SharedDtor() {
  task_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ReqCompeleteTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCompeleteTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCompeleteTask_descriptor_;
}

const ReqCompeleteTask& ReqCompeleteTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqCompeleteTask* ReqCompeleteTask::default_instance_ = NULL;

ReqCompeleteTask* ReqCompeleteTask::New(::google::protobuf::Arena* arena) const {
  ReqCompeleteTask* n = new ReqCompeleteTask;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqCompeleteTask::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqCompeleteTask)
  if (has_task_id()) {
    task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqCompeleteTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqCompeleteTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes task_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_task_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqCompeleteTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqCompeleteTask)
  return false;
#undef DO_
}

void ReqCompeleteTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqCompeleteTask)
  // required bytes task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->task_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqCompeleteTask)
}

::google::protobuf::uint8* ReqCompeleteTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqCompeleteTask)
  // required bytes task_id = 1;
  if (has_task_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->task_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqCompeleteTask)
  return target;
}

int ReqCompeleteTask::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqCompeleteTask)
  int total_size = 0;

  // required bytes task_id = 1;
  if (has_task_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->task_id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCompeleteTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqCompeleteTask)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqCompeleteTask* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqCompeleteTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqCompeleteTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqCompeleteTask)
    MergeFrom(*source);
  }
}

void ReqCompeleteTask::MergeFrom(const ReqCompeleteTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqCompeleteTask)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_has_task_id();
      task_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqCompeleteTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqCompeleteTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCompeleteTask::CopyFrom(const ReqCompeleteTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqCompeleteTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCompeleteTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqCompeleteTask::Swap(ReqCompeleteTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqCompeleteTask::InternalSwap(ReqCompeleteTask* other) {
  task_id_.Swap(&other->task_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqCompeleteTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCompeleteTask_descriptor_;
  metadata.reflection = ReqCompeleteTask_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqCompeleteTask

// required bytes task_id = 1;
bool ReqCompeleteTask::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqCompeleteTask::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqCompeleteTask::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqCompeleteTask::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_task_id();
}
 const ::std::string& ReqCompeleteTask::task_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqCompeleteTask.task_id)
  return task_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqCompeleteTask::set_task_id(const ::std::string& value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqCompeleteTask.task_id)
}
 void ReqCompeleteTask::set_task_id(const char* value) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqCompeleteTask.task_id)
}
 void ReqCompeleteTask::set_task_id(const void* value, size_t size) {
  set_has_task_id();
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqCompeleteTask.task_id)
}
 ::std::string* ReqCompeleteTask::mutable_task_id() {
  set_has_task_id();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqCompeleteTask.task_id)
  return task_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReqCompeleteTask::release_task_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqCompeleteTask.task_id)
  clear_has_task_id();
  return task_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqCompeleteTask::set_allocated_task_id(::std::string* task_id) {
  if (task_id != NULL) {
    set_has_task_id();
  } else {
    clear_has_task_id();
  }
  task_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqCompeleteTask.task_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqAckJoinActivity_EGameActivityType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckJoinActivity_EGameActivityType_descriptor_;
}
bool ReqAckJoinActivity_EGameActivityType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckJoinActivity_EGameActivityType ReqAckJoinActivity::EGAT_PVP;
const ReqAckJoinActivity_EGameActivityType ReqAckJoinActivity::EGameActivityType_MIN;
const ReqAckJoinActivity_EGameActivityType ReqAckJoinActivity::EGameActivityType_MAX;
const int ReqAckJoinActivity::EGameActivityType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ReqAckJoinActivity_EGameActivitySubType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckJoinActivity_EGameActivitySubType_descriptor_;
}
bool ReqAckJoinActivity_EGameActivitySubType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckJoinActivity_EGameActivitySubType ReqAckJoinActivity::EGAT_NORMAL;
const ReqAckJoinActivity_EGameActivitySubType ReqAckJoinActivity::EGameActivitySubType_MIN;
const ReqAckJoinActivity_EGameActivitySubType ReqAckJoinActivity::EGameActivitySubType_MAX;
const int ReqAckJoinActivity::EGameActivitySubType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckJoinActivity::kActivityTypeFieldNumber;
const int ReqAckJoinActivity::kSubActivityTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckJoinActivity::ReqAckJoinActivity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckJoinActivity)
}

void ReqAckJoinActivity::InitAsDefaultInstance() {
}

ReqAckJoinActivity::ReqAckJoinActivity(const ReqAckJoinActivity& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckJoinActivity)
}

void ReqAckJoinActivity::SharedCtor() {
  _cached_size_ = 0;
  activity_type_ = 0;
  sub_activity_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckJoinActivity::~ReqAckJoinActivity() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckJoinActivity)
  SharedDtor();
}

void ReqAckJoinActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqAckJoinActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckJoinActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckJoinActivity_descriptor_;
}

const ReqAckJoinActivity& ReqAckJoinActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckJoinActivity* ReqAckJoinActivity::default_instance_ = NULL;

ReqAckJoinActivity* ReqAckJoinActivity::New(::google::protobuf::Arena* arena) const {
  ReqAckJoinActivity* n = new ReqAckJoinActivity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckJoinActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckJoinActivity)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqAckJoinActivity, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqAckJoinActivity*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(activity_type_, sub_activity_type_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqAckJoinActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckJoinActivity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.ReqAckJoinActivity.EGameActivityType activity_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AFMsg::ReqAckJoinActivity_EGameActivityType_IsValid(value)) {
            set_activity_type(static_cast< ::AFMsg::ReqAckJoinActivity_EGameActivityType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sub_activity_type;
        break;
      }

      // required .AFMsg.ReqAckJoinActivity.EGameActivitySubType sub_activity_type = 2;
      case 2: {
        if (tag == 16) {
         parse_sub_activity_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AFMsg::ReqAckJoinActivity_EGameActivitySubType_IsValid(value)) {
            set_sub_activity_type(static_cast< ::AFMsg::ReqAckJoinActivity_EGameActivitySubType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckJoinActivity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckJoinActivity)
  return false;
#undef DO_
}

void ReqAckJoinActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckJoinActivity)
  // required .AFMsg.ReqAckJoinActivity.EGameActivityType activity_type = 1;
  if (has_activity_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->activity_type(), output);
  }

  // required .AFMsg.ReqAckJoinActivity.EGameActivitySubType sub_activity_type = 2;
  if (has_sub_activity_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sub_activity_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckJoinActivity)
}

::google::protobuf::uint8* ReqAckJoinActivity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckJoinActivity)
  // required .AFMsg.ReqAckJoinActivity.EGameActivityType activity_type = 1;
  if (has_activity_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->activity_type(), target);
  }

  // required .AFMsg.ReqAckJoinActivity.EGameActivitySubType sub_activity_type = 2;
  if (has_sub_activity_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sub_activity_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckJoinActivity)
  return target;
}

int ReqAckJoinActivity::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqAckJoinActivity)
  int total_size = 0;

  if (has_activity_type()) {
    // required .AFMsg.ReqAckJoinActivity.EGameActivityType activity_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->activity_type());
  }

  if (has_sub_activity_type()) {
    // required .AFMsg.ReqAckJoinActivity.EGameActivitySubType sub_activity_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sub_activity_type());
  }

  return total_size;
}
int ReqAckJoinActivity::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckJoinActivity)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .AFMsg.ReqAckJoinActivity.EGameActivityType activity_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->activity_type());

    // required .AFMsg.ReqAckJoinActivity.EGameActivitySubType sub_activity_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sub_activity_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckJoinActivity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckJoinActivity)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqAckJoinActivity* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckJoinActivity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckJoinActivity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckJoinActivity)
    MergeFrom(*source);
  }
}

void ReqAckJoinActivity::MergeFrom(const ReqAckJoinActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckJoinActivity)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_type()) {
      set_activity_type(from.activity_type());
    }
    if (from.has_sub_activity_type()) {
      set_sub_activity_type(from.sub_activity_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqAckJoinActivity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckJoinActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckJoinActivity::CopyFrom(const ReqAckJoinActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckJoinActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckJoinActivity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqAckJoinActivity::Swap(ReqAckJoinActivity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckJoinActivity::InternalSwap(ReqAckJoinActivity* other) {
  std::swap(activity_type_, other->activity_type_);
  std::swap(sub_activity_type_, other->sub_activity_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckJoinActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckJoinActivity_descriptor_;
  metadata.reflection = ReqAckJoinActivity_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAckJoinActivity

// required .AFMsg.ReqAckJoinActivity.EGameActivityType activity_type = 1;
bool ReqAckJoinActivity::has_activity_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqAckJoinActivity::set_has_activity_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqAckJoinActivity::clear_has_activity_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqAckJoinActivity::clear_activity_type() {
  activity_type_ = 0;
  clear_has_activity_type();
}
 ::AFMsg::ReqAckJoinActivity_EGameActivityType ReqAckJoinActivity::activity_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckJoinActivity.activity_type)
  return static_cast< ::AFMsg::ReqAckJoinActivity_EGameActivityType >(activity_type_);
}
 void ReqAckJoinActivity::set_activity_type(::AFMsg::ReqAckJoinActivity_EGameActivityType value) {
  assert(::AFMsg::ReqAckJoinActivity_EGameActivityType_IsValid(value));
  set_has_activity_type();
  activity_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckJoinActivity.activity_type)
}

// required .AFMsg.ReqAckJoinActivity.EGameActivitySubType sub_activity_type = 2;
bool ReqAckJoinActivity::has_sub_activity_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqAckJoinActivity::set_has_sub_activity_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqAckJoinActivity::clear_has_sub_activity_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqAckJoinActivity::clear_sub_activity_type() {
  sub_activity_type_ = 0;
  clear_has_sub_activity_type();
}
 ::AFMsg::ReqAckJoinActivity_EGameActivitySubType ReqAckJoinActivity::sub_activity_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckJoinActivity.sub_activity_type)
  return static_cast< ::AFMsg::ReqAckJoinActivity_EGameActivitySubType >(sub_activity_type_);
}
 void ReqAckJoinActivity::set_sub_activity_type(::AFMsg::ReqAckJoinActivity_EGameActivitySubType value) {
  assert(::AFMsg::ReqAckJoinActivity_EGameActivitySubType_IsValid(value));
  set_has_sub_activity_type();
  sub_activity_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckJoinActivity.sub_activity_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckSearchOppnent::kSearchTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckSearchOppnent::ReqAckSearchOppnent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckSearchOppnent)
}

void ReqAckSearchOppnent::InitAsDefaultInstance() {
}

ReqAckSearchOppnent::ReqAckSearchOppnent(const ReqAckSearchOppnent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckSearchOppnent)
}

void ReqAckSearchOppnent::SharedCtor() {
  _cached_size_ = 0;
  search_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckSearchOppnent::~ReqAckSearchOppnent() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckSearchOppnent)
  SharedDtor();
}

void ReqAckSearchOppnent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqAckSearchOppnent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckSearchOppnent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckSearchOppnent_descriptor_;
}

const ReqAckSearchOppnent& ReqAckSearchOppnent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckSearchOppnent* ReqAckSearchOppnent::default_instance_ = NULL;

ReqAckSearchOppnent* ReqAckSearchOppnent::New(::google::protobuf::Arena* arena) const {
  ReqAckSearchOppnent* n = new ReqAckSearchOppnent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckSearchOppnent::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckSearchOppnent)
  search_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqAckSearchOppnent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckSearchOppnent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.EBattleType search_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AFMsg::EBattleType_IsValid(value)) {
            set_search_type(static_cast< ::AFMsg::EBattleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckSearchOppnent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckSearchOppnent)
  return false;
#undef DO_
}

void ReqAckSearchOppnent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckSearchOppnent)
  // required .AFMsg.EBattleType search_type = 1;
  if (has_search_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->search_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckSearchOppnent)
}

::google::protobuf::uint8* ReqAckSearchOppnent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckSearchOppnent)
  // required .AFMsg.EBattleType search_type = 1;
  if (has_search_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->search_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckSearchOppnent)
  return target;
}

int ReqAckSearchOppnent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckSearchOppnent)
  int total_size = 0;

  // required .AFMsg.EBattleType search_type = 1;
  if (has_search_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->search_type());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckSearchOppnent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckSearchOppnent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqAckSearchOppnent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckSearchOppnent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckSearchOppnent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckSearchOppnent)
    MergeFrom(*source);
  }
}

void ReqAckSearchOppnent::MergeFrom(const ReqAckSearchOppnent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckSearchOppnent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_search_type()) {
      set_search_type(from.search_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqAckSearchOppnent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckSearchOppnent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckSearchOppnent::CopyFrom(const ReqAckSearchOppnent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckSearchOppnent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckSearchOppnent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqAckSearchOppnent::Swap(ReqAckSearchOppnent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckSearchOppnent::InternalSwap(ReqAckSearchOppnent* other) {
  std::swap(search_type_, other->search_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckSearchOppnent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckSearchOppnent_descriptor_;
  metadata.reflection = ReqAckSearchOppnent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAckSearchOppnent

// required .AFMsg.EBattleType search_type = 1;
bool ReqAckSearchOppnent::has_search_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqAckSearchOppnent::set_has_search_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqAckSearchOppnent::clear_has_search_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqAckSearchOppnent::clear_search_type() {
  search_type_ = 0;
  clear_has_search_type();
}
 ::AFMsg::EBattleType ReqAckSearchOppnent::search_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckSearchOppnent.search_type)
  return static_cast< ::AFMsg::EBattleType >(search_type_);
}
 void ReqAckSearchOppnent::set_search_type(::AFMsg::EBattleType value) {
  assert(::AFMsg::EBattleType_IsValid(value));
  set_has_search_type();
  search_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckSearchOppnent.search_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckBattleOppnent::kBattleTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckBattleOppnent::ReqAckBattleOppnent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckBattleOppnent)
}

void ReqAckBattleOppnent::InitAsDefaultInstance() {
}

ReqAckBattleOppnent::ReqAckBattleOppnent(const ReqAckBattleOppnent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckBattleOppnent)
}

void ReqAckBattleOppnent::SharedCtor() {
  _cached_size_ = 0;
  battle_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckBattleOppnent::~ReqAckBattleOppnent() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckBattleOppnent)
  SharedDtor();
}

void ReqAckBattleOppnent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqAckBattleOppnent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckBattleOppnent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckBattleOppnent_descriptor_;
}

const ReqAckBattleOppnent& ReqAckBattleOppnent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckBattleOppnent* ReqAckBattleOppnent::default_instance_ = NULL;

ReqAckBattleOppnent* ReqAckBattleOppnent::New(::google::protobuf::Arena* arena) const {
  ReqAckBattleOppnent* n = new ReqAckBattleOppnent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckBattleOppnent::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckBattleOppnent)
  battle_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqAckBattleOppnent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckBattleOppnent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.EBattleType battle_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AFMsg::EBattleType_IsValid(value)) {
            set_battle_type(static_cast< ::AFMsg::EBattleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckBattleOppnent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckBattleOppnent)
  return false;
#undef DO_
}

void ReqAckBattleOppnent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckBattleOppnent)
  // required .AFMsg.EBattleType battle_type = 1;
  if (has_battle_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->battle_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckBattleOppnent)
}

::google::protobuf::uint8* ReqAckBattleOppnent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckBattleOppnent)
  // required .AFMsg.EBattleType battle_type = 1;
  if (has_battle_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->battle_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckBattleOppnent)
  return target;
}

int ReqAckBattleOppnent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckBattleOppnent)
  int total_size = 0;

  // required .AFMsg.EBattleType battle_type = 1;
  if (has_battle_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->battle_type());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckBattleOppnent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckBattleOppnent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqAckBattleOppnent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckBattleOppnent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckBattleOppnent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckBattleOppnent)
    MergeFrom(*source);
  }
}

void ReqAckBattleOppnent::MergeFrom(const ReqAckBattleOppnent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckBattleOppnent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_type()) {
      set_battle_type(from.battle_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqAckBattleOppnent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckBattleOppnent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckBattleOppnent::CopyFrom(const ReqAckBattleOppnent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckBattleOppnent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckBattleOppnent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqAckBattleOppnent::Swap(ReqAckBattleOppnent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckBattleOppnent::InternalSwap(ReqAckBattleOppnent* other) {
  std::swap(battle_type_, other->battle_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckBattleOppnent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckBattleOppnent_descriptor_;
  metadata.reflection = ReqAckBattleOppnent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAckBattleOppnent

// required .AFMsg.EBattleType battle_type = 1;
bool ReqAckBattleOppnent::has_battle_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqAckBattleOppnent::set_has_battle_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqAckBattleOppnent::clear_has_battle_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqAckBattleOppnent::clear_battle_type() {
  battle_type_ = 0;
  clear_has_battle_type();
}
 ::AFMsg::EBattleType ReqAckBattleOppnent::battle_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckBattleOppnent.battle_type)
  return static_cast< ::AFMsg::EBattleType >(battle_type_);
}
 void ReqAckBattleOppnent::set_battle_type(::AFMsg::EBattleType value) {
  assert(::AFMsg::EBattleType_IsValid(value));
  set_has_battle_type();
  battle_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckBattleOppnent.battle_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckCreateGuild::kGuildIdFieldNumber;
const int ReqAckCreateGuild::kGuildNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckCreateGuild::ReqAckCreateGuild()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckCreateGuild)
}

void ReqAckCreateGuild::InitAsDefaultInstance() {
  guild_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqAckCreateGuild::ReqAckCreateGuild(const ReqAckCreateGuild& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckCreateGuild)
}

void ReqAckCreateGuild::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guild_id_ = NULL;
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckCreateGuild::~ReqAckCreateGuild() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckCreateGuild)
  SharedDtor();
}

void ReqAckCreateGuild::SharedDtor() {
  guild_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete guild_id_;
  }
}

void ReqAckCreateGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckCreateGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckCreateGuild_descriptor_;
}

const ReqAckCreateGuild& ReqAckCreateGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckCreateGuild* ReqAckCreateGuild::default_instance_ = NULL;

ReqAckCreateGuild* ReqAckCreateGuild::New(::google::protobuf::Arena* arena) const {
  ReqAckCreateGuild* n = new ReqAckCreateGuild;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckCreateGuild::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckCreateGuild)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_guild_id()) {
      if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
    }
    if (has_guild_name()) {
      guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqAckCreateGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckCreateGuild)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident guild_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_guild_name;
        break;
      }

      // required string guild_name = 2;
      case 2: {
        if (tag == 18) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AFMsg.ReqAckCreateGuild.guild_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckCreateGuild)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckCreateGuild)
  return false;
#undef DO_
}

void ReqAckCreateGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckCreateGuild)
  // required .AFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->guild_id_, output);
  }

  // required string guild_name = 2;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AFMsg.ReqAckCreateGuild.guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guild_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckCreateGuild)
}

::google::protobuf::uint8* ReqAckCreateGuild::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckCreateGuild)
  // required .AFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->guild_id_, false, target);
  }

  // required string guild_name = 2;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AFMsg.ReqAckCreateGuild.guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guild_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckCreateGuild)
  return target;
}

int ReqAckCreateGuild::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqAckCreateGuild)
  int total_size = 0;

  if (has_guild_id()) {
    // required .AFMsg.Ident guild_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->guild_id_);
  }

  if (has_guild_name()) {
    // required string guild_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_name());
  }

  return total_size;
}
int ReqAckCreateGuild::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckCreateGuild)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .AFMsg.Ident guild_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->guild_id_);

    // required string guild_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckCreateGuild::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckCreateGuild)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqAckCreateGuild* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckCreateGuild>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckCreateGuild)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckCreateGuild)
    MergeFrom(*source);
  }
}

void ReqAckCreateGuild::MergeFrom(const ReqAckCreateGuild& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckCreateGuild)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      mutable_guild_id()->::AFMsg::Ident::MergeFrom(from.guild_id());
    }
    if (from.has_guild_name()) {
      set_has_guild_name();
      guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqAckCreateGuild::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckCreateGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckCreateGuild::CopyFrom(const ReqAckCreateGuild& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckCreateGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckCreateGuild::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_guild_id()) {
    if (!this->guild_id_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckCreateGuild::Swap(ReqAckCreateGuild* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckCreateGuild::InternalSwap(ReqAckCreateGuild* other) {
  std::swap(guild_id_, other->guild_id_);
  guild_name_.Swap(&other->guild_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckCreateGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckCreateGuild_descriptor_;
  metadata.reflection = ReqAckCreateGuild_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAckCreateGuild

// required .AFMsg.Ident guild_id = 1;
bool ReqAckCreateGuild::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqAckCreateGuild::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqAckCreateGuild::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqAckCreateGuild::clear_guild_id() {
  if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
  clear_has_guild_id();
}
const ::AFMsg::Ident& ReqAckCreateGuild::guild_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckCreateGuild.guild_id)
  return guild_id_ != NULL ? *guild_id_ : *default_instance_->guild_id_;
}
::AFMsg::Ident* ReqAckCreateGuild::mutable_guild_id() {
  set_has_guild_id();
  if (guild_id_ == NULL) {
    guild_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckCreateGuild.guild_id)
  return guild_id_;
}
::AFMsg::Ident* ReqAckCreateGuild::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckCreateGuild.guild_id)
  clear_has_guild_id();
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
void ReqAckCreateGuild::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  delete guild_id_;
  guild_id_ = guild_id;
  if (guild_id) {
    set_has_guild_id();
  } else {
    clear_has_guild_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckCreateGuild.guild_id)
}

// required string guild_name = 2;
bool ReqAckCreateGuild::has_guild_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqAckCreateGuild::set_has_guild_name() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqAckCreateGuild::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqAckCreateGuild::clear_guild_name() {
  guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guild_name();
}
 const ::std::string& ReqAckCreateGuild::guild_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckCreateGuild.guild_name)
  return guild_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqAckCreateGuild::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckCreateGuild.guild_name)
}
 void ReqAckCreateGuild::set_guild_name(const char* value) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckCreateGuild.guild_name)
}
 void ReqAckCreateGuild::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckCreateGuild.guild_name)
}
 ::std::string* ReqAckCreateGuild::mutable_guild_name() {
  set_has_guild_name();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckCreateGuild.guild_name)
  return guild_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReqAckCreateGuild::release_guild_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckCreateGuild.guild_name)
  clear_has_guild_name();
  return guild_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqAckCreateGuild::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name != NULL) {
    set_has_guild_name();
  } else {
    clear_has_guild_name();
  }
  guild_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckCreateGuild.guild_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSearchGuild::kGuildNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSearchGuild::ReqSearchGuild()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqSearchGuild)
}

void ReqSearchGuild::InitAsDefaultInstance() {
}

ReqSearchGuild::ReqSearchGuild(const ReqSearchGuild& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqSearchGuild)
}

void ReqSearchGuild::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSearchGuild::~ReqSearchGuild() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqSearchGuild)
  SharedDtor();
}

void ReqSearchGuild::SharedDtor() {
  guild_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ReqSearchGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSearchGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSearchGuild_descriptor_;
}

const ReqSearchGuild& ReqSearchGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqSearchGuild* ReqSearchGuild::default_instance_ = NULL;

ReqSearchGuild* ReqSearchGuild::New(::google::protobuf::Arena* arena) const {
  ReqSearchGuild* n = new ReqSearchGuild;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqSearchGuild::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqSearchGuild)
  if (has_guild_name()) {
    guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqSearchGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqSearchGuild)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string guild_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AFMsg.ReqSearchGuild.guild_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqSearchGuild)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqSearchGuild)
  return false;
#undef DO_
}

void ReqSearchGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqSearchGuild)
  // required string guild_name = 1;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AFMsg.ReqSearchGuild.guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->guild_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqSearchGuild)
}

::google::protobuf::uint8* ReqSearchGuild::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqSearchGuild)
  // required string guild_name = 1;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AFMsg.ReqSearchGuild.guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guild_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqSearchGuild)
  return target;
}

int ReqSearchGuild::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqSearchGuild)
  int total_size = 0;

  // required string guild_name = 1;
  if (has_guild_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_name());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSearchGuild::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqSearchGuild)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqSearchGuild* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqSearchGuild>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqSearchGuild)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqSearchGuild)
    MergeFrom(*source);
  }
}

void ReqSearchGuild::MergeFrom(const ReqSearchGuild& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqSearchGuild)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_name()) {
      set_has_guild_name();
      guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqSearchGuild::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqSearchGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSearchGuild::CopyFrom(const ReqSearchGuild& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqSearchGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSearchGuild::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqSearchGuild::Swap(ReqSearchGuild* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSearchGuild::InternalSwap(ReqSearchGuild* other) {
  guild_name_.Swap(&other->guild_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqSearchGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSearchGuild_descriptor_;
  metadata.reflection = ReqSearchGuild_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqSearchGuild

// required string guild_name = 1;
bool ReqSearchGuild::has_guild_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqSearchGuild::set_has_guild_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqSearchGuild::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqSearchGuild::clear_guild_name() {
  guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guild_name();
}
 const ::std::string& ReqSearchGuild::guild_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSearchGuild.guild_name)
  return guild_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqSearchGuild::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqSearchGuild.guild_name)
}
 void ReqSearchGuild::set_guild_name(const char* value) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqSearchGuild.guild_name)
}
 void ReqSearchGuild::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqSearchGuild.guild_name)
}
 ::std::string* ReqSearchGuild::mutable_guild_name() {
  set_has_guild_name();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSearchGuild.guild_name)
  return guild_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReqSearchGuild::release_guild_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqSearchGuild.guild_name)
  clear_has_guild_name();
  return guild_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqSearchGuild::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name != NULL) {
    set_has_guild_name();
  } else {
    clear_has_guild_name();
  }
  guild_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqSearchGuild.guild_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckSearchGuild_SearchGuildObject::kGuildIDFieldNumber;
const int AckSearchGuild_SearchGuildObject::kGuildNameFieldNumber;
const int AckSearchGuild_SearchGuildObject::kGuildIconFieldNumber;
const int AckSearchGuild_SearchGuildObject::kGuildMemberCountFieldNumber;
const int AckSearchGuild_SearchGuildObject::kGuildMemberMaxCountFieldNumber;
const int AckSearchGuild_SearchGuildObject::kGuildHonorFieldNumber;
const int AckSearchGuild_SearchGuildObject::kGuildRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckSearchGuild_SearchGuildObject::AckSearchGuild_SearchGuildObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckSearchGuild.SearchGuildObject)
}

void AckSearchGuild_SearchGuildObject::InitAsDefaultInstance() {
  guild_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

AckSearchGuild_SearchGuildObject::AckSearchGuild_SearchGuildObject(const AckSearchGuild_SearchGuildObject& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckSearchGuild.SearchGuildObject)
}

void AckSearchGuild_SearchGuildObject::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guild_id_ = NULL;
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_member_count_ = 0;
  guild_member_max_count_ = 0;
  guild_honor_ = 0;
  guild_rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckSearchGuild_SearchGuildObject::~AckSearchGuild_SearchGuildObject() {
  // @@protoc_insertion_point(destructor:AFMsg.AckSearchGuild.SearchGuildObject)
  SharedDtor();
}

void AckSearchGuild_SearchGuildObject::SharedDtor() {
  guild_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete guild_id_;
  }
}

void AckSearchGuild_SearchGuildObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckSearchGuild_SearchGuildObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckSearchGuild_SearchGuildObject_descriptor_;
}

const AckSearchGuild_SearchGuildObject& AckSearchGuild_SearchGuildObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

AckSearchGuild_SearchGuildObject* AckSearchGuild_SearchGuildObject::default_instance_ = NULL;

AckSearchGuild_SearchGuildObject* AckSearchGuild_SearchGuildObject::New(::google::protobuf::Arena* arena) const {
  AckSearchGuild_SearchGuildObject* n = new AckSearchGuild_SearchGuildObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckSearchGuild_SearchGuildObject::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckSearchGuild.SearchGuildObject)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AckSearchGuild_SearchGuildObject, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AckSearchGuild_SearchGuildObject*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(guild_member_count_, guild_rank_);
    if (has_guild_id()) {
      if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
    }
    if (has_guild_name()) {
      guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_guild_icon()) {
      guild_icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AckSearchGuild_SearchGuildObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckSearchGuild.SearchGuildObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident guild_ID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_guild_name;
        break;
      }

      // required string guild_name = 2;
      case 2: {
        if (tag == 18) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AFMsg.AckSearchGuild.SearchGuildObject.guild_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_guild_icon;
        break;
      }

      // required string guild_icon = 3;
      case 3: {
        if (tag == 26) {
         parse_guild_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_icon().data(), this->guild_icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AFMsg.AckSearchGuild.SearchGuildObject.guild_icon");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_guild_member_count;
        break;
      }

      // required int32 guild_member_count = 4;
      case 4: {
        if (tag == 32) {
         parse_guild_member_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_member_count_)));
          set_has_guild_member_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_guild_member_max_count;
        break;
      }

      // required int32 guild_member_max_count = 5;
      case 5: {
        if (tag == 40) {
         parse_guild_member_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_member_max_count_)));
          set_has_guild_member_max_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_guild_honor;
        break;
      }

      // required int32 guild_honor = 6;
      case 6: {
        if (tag == 48) {
         parse_guild_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_honor_)));
          set_has_guild_honor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_guild_rank;
        break;
      }

      // required int32 guild_rank = 7;
      case 7: {
        if (tag == 56) {
         parse_guild_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_rank_)));
          set_has_guild_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckSearchGuild.SearchGuildObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckSearchGuild.SearchGuildObject)
  return false;
#undef DO_
}

void AckSearchGuild_SearchGuildObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckSearchGuild.SearchGuildObject)
  // required .AFMsg.Ident guild_ID = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->guild_id_, output);
  }

  // required string guild_name = 2;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AFMsg.AckSearchGuild.SearchGuildObject.guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guild_name(), output);
  }

  // required string guild_icon = 3;
  if (has_guild_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_icon().data(), this->guild_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AFMsg.AckSearchGuild.SearchGuildObject.guild_icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->guild_icon(), output);
  }

  // required int32 guild_member_count = 4;
  if (has_guild_member_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->guild_member_count(), output);
  }

  // required int32 guild_member_max_count = 5;
  if (has_guild_member_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->guild_member_max_count(), output);
  }

  // required int32 guild_honor = 6;
  if (has_guild_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->guild_honor(), output);
  }

  // required int32 guild_rank = 7;
  if (has_guild_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->guild_rank(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckSearchGuild.SearchGuildObject)
}

::google::protobuf::uint8* AckSearchGuild_SearchGuildObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckSearchGuild.SearchGuildObject)
  // required .AFMsg.Ident guild_ID = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->guild_id_, false, target);
  }

  // required string guild_name = 2;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AFMsg.AckSearchGuild.SearchGuildObject.guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guild_name(), target);
  }

  // required string guild_icon = 3;
  if (has_guild_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_icon().data(), this->guild_icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AFMsg.AckSearchGuild.SearchGuildObject.guild_icon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guild_icon(), target);
  }

  // required int32 guild_member_count = 4;
  if (has_guild_member_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->guild_member_count(), target);
  }

  // required int32 guild_member_max_count = 5;
  if (has_guild_member_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->guild_member_max_count(), target);
  }

  // required int32 guild_honor = 6;
  if (has_guild_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->guild_honor(), target);
  }

  // required int32 guild_rank = 7;
  if (has_guild_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->guild_rank(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckSearchGuild.SearchGuildObject)
  return target;
}

int AckSearchGuild_SearchGuildObject::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.AckSearchGuild.SearchGuildObject)
  int total_size = 0;

  if (has_guild_id()) {
    // required .AFMsg.Ident guild_ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->guild_id_);
  }

  if (has_guild_name()) {
    // required string guild_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_name());
  }

  if (has_guild_icon()) {
    // required string guild_icon = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_icon());
  }

  if (has_guild_member_count()) {
    // required int32 guild_member_count = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guild_member_count());
  }

  if (has_guild_member_max_count()) {
    // required int32 guild_member_max_count = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guild_member_max_count());
  }

  if (has_guild_honor()) {
    // required int32 guild_honor = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guild_honor());
  }

  if (has_guild_rank()) {
    // required int32 guild_rank = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guild_rank());
  }

  return total_size;
}
int AckSearchGuild_SearchGuildObject::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckSearchGuild.SearchGuildObject)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .AFMsg.Ident guild_ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->guild_id_);

    // required string guild_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_name());

    // required string guild_icon = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_icon());

    // required int32 guild_member_count = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guild_member_count());

    // required int32 guild_member_max_count = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guild_member_max_count());

    // required int32 guild_honor = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guild_honor());

    // required int32 guild_rank = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->guild_rank());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckSearchGuild_SearchGuildObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckSearchGuild.SearchGuildObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AckSearchGuild_SearchGuildObject* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AckSearchGuild_SearchGuildObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckSearchGuild.SearchGuildObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckSearchGuild.SearchGuildObject)
    MergeFrom(*source);
  }
}

void AckSearchGuild_SearchGuildObject::MergeFrom(const AckSearchGuild_SearchGuildObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckSearchGuild.SearchGuildObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      mutable_guild_id()->::AFMsg::Ident::MergeFrom(from.guild_id());
    }
    if (from.has_guild_name()) {
      set_has_guild_name();
      guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
    }
    if (from.has_guild_icon()) {
      set_has_guild_icon();
      guild_icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_icon_);
    }
    if (from.has_guild_member_count()) {
      set_guild_member_count(from.guild_member_count());
    }
    if (from.has_guild_member_max_count()) {
      set_guild_member_max_count(from.guild_member_max_count());
    }
    if (from.has_guild_honor()) {
      set_guild_honor(from.guild_honor());
    }
    if (from.has_guild_rank()) {
      set_guild_rank(from.guild_rank());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AckSearchGuild_SearchGuildObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckSearchGuild.SearchGuildObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSearchGuild_SearchGuildObject::CopyFrom(const AckSearchGuild_SearchGuildObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckSearchGuild.SearchGuildObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSearchGuild_SearchGuildObject::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_guild_id()) {
    if (!this->guild_id_->IsInitialized()) return false;
  }
  return true;
}

void AckSearchGuild_SearchGuildObject::Swap(AckSearchGuild_SearchGuildObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckSearchGuild_SearchGuildObject::InternalSwap(AckSearchGuild_SearchGuildObject* other) {
  std::swap(guild_id_, other->guild_id_);
  guild_name_.Swap(&other->guild_name_);
  guild_icon_.Swap(&other->guild_icon_);
  std::swap(guild_member_count_, other->guild_member_count_);
  std::swap(guild_member_max_count_, other->guild_member_max_count_);
  std::swap(guild_honor_, other->guild_honor_);
  std::swap(guild_rank_, other->guild_rank_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckSearchGuild_SearchGuildObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckSearchGuild_SearchGuildObject_descriptor_;
  metadata.reflection = AckSearchGuild_SearchGuildObject_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckSearchGuild::kGuildListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckSearchGuild::AckSearchGuild()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckSearchGuild)
}

void AckSearchGuild::InitAsDefaultInstance() {
}

AckSearchGuild::AckSearchGuild(const AckSearchGuild& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckSearchGuild)
}

void AckSearchGuild::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckSearchGuild::~AckSearchGuild() {
  // @@protoc_insertion_point(destructor:AFMsg.AckSearchGuild)
  SharedDtor();
}

void AckSearchGuild::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckSearchGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckSearchGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckSearchGuild_descriptor_;
}

const AckSearchGuild& AckSearchGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

AckSearchGuild* AckSearchGuild::default_instance_ = NULL;

AckSearchGuild* AckSearchGuild::New(::google::protobuf::Arena* arena) const {
  AckSearchGuild* n = new AckSearchGuild;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckSearchGuild::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckSearchGuild)
  guild_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AckSearchGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckSearchGuild)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFMsg.AckSearchGuild.SearchGuildObject guild_list = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_guild_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_guild_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_guild_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckSearchGuild)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckSearchGuild)
  return false;
#undef DO_
}

void AckSearchGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckSearchGuild)
  // repeated .AFMsg.AckSearchGuild.SearchGuildObject guild_list = 1;
  for (unsigned int i = 0, n = this->guild_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guild_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckSearchGuild)
}

::google::protobuf::uint8* AckSearchGuild::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckSearchGuild)
  // repeated .AFMsg.AckSearchGuild.SearchGuildObject guild_list = 1;
  for (unsigned int i = 0, n = this->guild_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->guild_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckSearchGuild)
  return target;
}

int AckSearchGuild::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckSearchGuild)
  int total_size = 0;

  // repeated .AFMsg.AckSearchGuild.SearchGuildObject guild_list = 1;
  total_size += 1 * this->guild_list_size();
  for (int i = 0; i < this->guild_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guild_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckSearchGuild::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckSearchGuild)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AckSearchGuild* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AckSearchGuild>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckSearchGuild)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckSearchGuild)
    MergeFrom(*source);
  }
}

void AckSearchGuild::MergeFrom(const AckSearchGuild& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckSearchGuild)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  guild_list_.MergeFrom(from.guild_list_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AckSearchGuild::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckSearchGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSearchGuild::CopyFrom(const AckSearchGuild& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckSearchGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSearchGuild::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->guild_list())) return false;
  return true;
}

void AckSearchGuild::Swap(AckSearchGuild* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckSearchGuild::InternalSwap(AckSearchGuild* other) {
  guild_list_.UnsafeArenaSwap(&other->guild_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckSearchGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckSearchGuild_descriptor_;
  metadata.reflection = AckSearchGuild_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckSearchGuild_SearchGuildObject

// required .AFMsg.Ident guild_ID = 1;
bool AckSearchGuild_SearchGuildObject::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AckSearchGuild_SearchGuildObject::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
void AckSearchGuild_SearchGuildObject::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void AckSearchGuild_SearchGuildObject::clear_guild_id() {
  if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
  clear_has_guild_id();
}
const ::AFMsg::Ident& AckSearchGuild_SearchGuildObject::guild_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSearchGuild.SearchGuildObject.guild_ID)
  return guild_id_ != NULL ? *guild_id_ : *default_instance_->guild_id_;
}
::AFMsg::Ident* AckSearchGuild_SearchGuildObject::mutable_guild_id() {
  set_has_guild_id();
  if (guild_id_ == NULL) {
    guild_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckSearchGuild.SearchGuildObject.guild_ID)
  return guild_id_;
}
::AFMsg::Ident* AckSearchGuild_SearchGuildObject::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.AckSearchGuild.SearchGuildObject.guild_ID)
  clear_has_guild_id();
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
void AckSearchGuild_SearchGuildObject::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  delete guild_id_;
  guild_id_ = guild_id;
  if (guild_id) {
    set_has_guild_id();
  } else {
    clear_has_guild_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckSearchGuild.SearchGuildObject.guild_ID)
}

// required string guild_name = 2;
bool AckSearchGuild_SearchGuildObject::has_guild_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AckSearchGuild_SearchGuildObject::set_has_guild_name() {
  _has_bits_[0] |= 0x00000002u;
}
void AckSearchGuild_SearchGuildObject::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void AckSearchGuild_SearchGuildObject::clear_guild_name() {
  guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guild_name();
}
 const ::std::string& AckSearchGuild_SearchGuildObject::guild_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSearchGuild.SearchGuildObject.guild_name)
  return guild_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AckSearchGuild_SearchGuildObject::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.AckSearchGuild.SearchGuildObject.guild_name)
}
 void AckSearchGuild_SearchGuildObject::set_guild_name(const char* value) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.AckSearchGuild.SearchGuildObject.guild_name)
}
 void AckSearchGuild_SearchGuildObject::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.AckSearchGuild.SearchGuildObject.guild_name)
}
 ::std::string* AckSearchGuild_SearchGuildObject::mutable_guild_name() {
  set_has_guild_name();
  // @@protoc_insertion_point(field_mutable:AFMsg.AckSearchGuild.SearchGuildObject.guild_name)
  return guild_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AckSearchGuild_SearchGuildObject::release_guild_name() {
  // @@protoc_insertion_point(field_release:AFMsg.AckSearchGuild.SearchGuildObject.guild_name)
  clear_has_guild_name();
  return guild_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AckSearchGuild_SearchGuildObject::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name != NULL) {
    set_has_guild_name();
  } else {
    clear_has_guild_name();
  }
  guild_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckSearchGuild.SearchGuildObject.guild_name)
}

// required string guild_icon = 3;
bool AckSearchGuild_SearchGuildObject::has_guild_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AckSearchGuild_SearchGuildObject::set_has_guild_icon() {
  _has_bits_[0] |= 0x00000004u;
}
void AckSearchGuild_SearchGuildObject::clear_has_guild_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
void AckSearchGuild_SearchGuildObject::clear_guild_icon() {
  guild_icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guild_icon();
}
 const ::std::string& AckSearchGuild_SearchGuildObject::guild_icon() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSearchGuild.SearchGuildObject.guild_icon)
  return guild_icon_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AckSearchGuild_SearchGuildObject::set_guild_icon(const ::std::string& value) {
  set_has_guild_icon();
  guild_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.AckSearchGuild.SearchGuildObject.guild_icon)
}
 void AckSearchGuild_SearchGuildObject::set_guild_icon(const char* value) {
  set_has_guild_icon();
  guild_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.AckSearchGuild.SearchGuildObject.guild_icon)
}
 void AckSearchGuild_SearchGuildObject::set_guild_icon(const char* value, size_t size) {
  set_has_guild_icon();
  guild_icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.AckSearchGuild.SearchGuildObject.guild_icon)
}
 ::std::string* AckSearchGuild_SearchGuildObject::mutable_guild_icon() {
  set_has_guild_icon();
  // @@protoc_insertion_point(field_mutable:AFMsg.AckSearchGuild.SearchGuildObject.guild_icon)
  return guild_icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AckSearchGuild_SearchGuildObject::release_guild_icon() {
  // @@protoc_insertion_point(field_release:AFMsg.AckSearchGuild.SearchGuildObject.guild_icon)
  clear_has_guild_icon();
  return guild_icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AckSearchGuild_SearchGuildObject::set_allocated_guild_icon(::std::string* guild_icon) {
  if (guild_icon != NULL) {
    set_has_guild_icon();
  } else {
    clear_has_guild_icon();
  }
  guild_icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_icon);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckSearchGuild.SearchGuildObject.guild_icon)
}

// required int32 guild_member_count = 4;
bool AckSearchGuild_SearchGuildObject::has_guild_member_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AckSearchGuild_SearchGuildObject::set_has_guild_member_count() {
  _has_bits_[0] |= 0x00000008u;
}
void AckSearchGuild_SearchGuildObject::clear_has_guild_member_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void AckSearchGuild_SearchGuildObject::clear_guild_member_count() {
  guild_member_count_ = 0;
  clear_has_guild_member_count();
}
 ::google::protobuf::int32 AckSearchGuild_SearchGuildObject::guild_member_count() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSearchGuild.SearchGuildObject.guild_member_count)
  return guild_member_count_;
}
 void AckSearchGuild_SearchGuildObject::set_guild_member_count(::google::protobuf::int32 value) {
  set_has_guild_member_count();
  guild_member_count_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckSearchGuild.SearchGuildObject.guild_member_count)
}

// required int32 guild_member_max_count = 5;
bool AckSearchGuild_SearchGuildObject::has_guild_member_max_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AckSearchGuild_SearchGuildObject::set_has_guild_member_max_count() {
  _has_bits_[0] |= 0x00000010u;
}
void AckSearchGuild_SearchGuildObject::clear_has_guild_member_max_count() {
  _has_bits_[0] &= ~0x00000010u;
}
void AckSearchGuild_SearchGuildObject::clear_guild_member_max_count() {
  guild_member_max_count_ = 0;
  clear_has_guild_member_max_count();
}
 ::google::protobuf::int32 AckSearchGuild_SearchGuildObject::guild_member_max_count() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSearchGuild.SearchGuildObject.guild_member_max_count)
  return guild_member_max_count_;
}
 void AckSearchGuild_SearchGuildObject::set_guild_member_max_count(::google::protobuf::int32 value) {
  set_has_guild_member_max_count();
  guild_member_max_count_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckSearchGuild.SearchGuildObject.guild_member_max_count)
}

// required int32 guild_honor = 6;
bool AckSearchGuild_SearchGuildObject::has_guild_honor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AckSearchGuild_SearchGuildObject::set_has_guild_honor() {
  _has_bits_[0] |= 0x00000020u;
}
void AckSearchGuild_SearchGuildObject::clear_has_guild_honor() {
  _has_bits_[0] &= ~0x00000020u;
}
void AckSearchGuild_SearchGuildObject::clear_guild_honor() {
  guild_honor_ = 0;
  clear_has_guild_honor();
}
 ::google::protobuf::int32 AckSearchGuild_SearchGuildObject::guild_honor() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSearchGuild.SearchGuildObject.guild_honor)
  return guild_honor_;
}
 void AckSearchGuild_SearchGuildObject::set_guild_honor(::google::protobuf::int32 value) {
  set_has_guild_honor();
  guild_honor_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckSearchGuild.SearchGuildObject.guild_honor)
}

// required int32 guild_rank = 7;
bool AckSearchGuild_SearchGuildObject::has_guild_rank() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void AckSearchGuild_SearchGuildObject::set_has_guild_rank() {
  _has_bits_[0] |= 0x00000040u;
}
void AckSearchGuild_SearchGuildObject::clear_has_guild_rank() {
  _has_bits_[0] &= ~0x00000040u;
}
void AckSearchGuild_SearchGuildObject::clear_guild_rank() {
  guild_rank_ = 0;
  clear_has_guild_rank();
}
 ::google::protobuf::int32 AckSearchGuild_SearchGuildObject::guild_rank() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSearchGuild.SearchGuildObject.guild_rank)
  return guild_rank_;
}
 void AckSearchGuild_SearchGuildObject::set_guild_rank(::google::protobuf::int32 value) {
  set_has_guild_rank();
  guild_rank_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckSearchGuild.SearchGuildObject.guild_rank)
}

// -------------------------------------------------------------------

// AckSearchGuild

// repeated .AFMsg.AckSearchGuild.SearchGuildObject guild_list = 1;
int AckSearchGuild::guild_list_size() const {
  return guild_list_.size();
}
void AckSearchGuild::clear_guild_list() {
  guild_list_.Clear();
}
const ::AFMsg::AckSearchGuild_SearchGuildObject& AckSearchGuild::guild_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSearchGuild.guild_list)
  return guild_list_.Get(index);
}
::AFMsg::AckSearchGuild_SearchGuildObject* AckSearchGuild::mutable_guild_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.AckSearchGuild.guild_list)
  return guild_list_.Mutable(index);
}
::AFMsg::AckSearchGuild_SearchGuildObject* AckSearchGuild::add_guild_list() {
  // @@protoc_insertion_point(field_add:AFMsg.AckSearchGuild.guild_list)
  return guild_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::AFMsg::AckSearchGuild_SearchGuildObject >*
AckSearchGuild::mutable_guild_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.AckSearchGuild.guild_list)
  return &guild_list_;
}
const ::google::protobuf::RepeatedPtrField< ::AFMsg::AckSearchGuild_SearchGuildObject >&
AckSearchGuild::guild_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.AckSearchGuild.guild_list)
  return guild_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckJoinGuild::kGuildIdFieldNumber;
const int ReqAckJoinGuild::kGuildNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckJoinGuild::ReqAckJoinGuild()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckJoinGuild)
}

void ReqAckJoinGuild::InitAsDefaultInstance() {
  guild_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqAckJoinGuild::ReqAckJoinGuild(const ReqAckJoinGuild& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckJoinGuild)
}

void ReqAckJoinGuild::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guild_id_ = NULL;
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckJoinGuild::~ReqAckJoinGuild() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckJoinGuild)
  SharedDtor();
}

void ReqAckJoinGuild::SharedDtor() {
  guild_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete guild_id_;
  }
}

void ReqAckJoinGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckJoinGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckJoinGuild_descriptor_;
}

const ReqAckJoinGuild& ReqAckJoinGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckJoinGuild* ReqAckJoinGuild::default_instance_ = NULL;

ReqAckJoinGuild* ReqAckJoinGuild::New(::google::protobuf::Arena* arena) const {
  ReqAckJoinGuild* n = new ReqAckJoinGuild;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckJoinGuild::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckJoinGuild)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_guild_id()) {
      if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
    }
    if (has_guild_name()) {
      guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqAckJoinGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckJoinGuild)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident guild_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_guild_name;
        break;
      }

      // required string guild_name = 2;
      case 2: {
        if (tag == 18) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AFMsg.ReqAckJoinGuild.guild_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckJoinGuild)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckJoinGuild)
  return false;
#undef DO_
}

void ReqAckJoinGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckJoinGuild)
  // required .AFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->guild_id_, output);
  }

  // required string guild_name = 2;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AFMsg.ReqAckJoinGuild.guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guild_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckJoinGuild)
}

::google::protobuf::uint8* ReqAckJoinGuild::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckJoinGuild)
  // required .AFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->guild_id_, false, target);
  }

  // required string guild_name = 2;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AFMsg.ReqAckJoinGuild.guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guild_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckJoinGuild)
  return target;
}

int ReqAckJoinGuild::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqAckJoinGuild)
  int total_size = 0;

  if (has_guild_id()) {
    // required .AFMsg.Ident guild_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->guild_id_);
  }

  if (has_guild_name()) {
    // required string guild_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_name());
  }

  return total_size;
}
int ReqAckJoinGuild::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckJoinGuild)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .AFMsg.Ident guild_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->guild_id_);

    // required string guild_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckJoinGuild::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckJoinGuild)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqAckJoinGuild* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckJoinGuild>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckJoinGuild)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckJoinGuild)
    MergeFrom(*source);
  }
}

void ReqAckJoinGuild::MergeFrom(const ReqAckJoinGuild& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckJoinGuild)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      mutable_guild_id()->::AFMsg::Ident::MergeFrom(from.guild_id());
    }
    if (from.has_guild_name()) {
      set_has_guild_name();
      guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqAckJoinGuild::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckJoinGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckJoinGuild::CopyFrom(const ReqAckJoinGuild& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckJoinGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckJoinGuild::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_guild_id()) {
    if (!this->guild_id_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckJoinGuild::Swap(ReqAckJoinGuild* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckJoinGuild::InternalSwap(ReqAckJoinGuild* other) {
  std::swap(guild_id_, other->guild_id_);
  guild_name_.Swap(&other->guild_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckJoinGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckJoinGuild_descriptor_;
  metadata.reflection = ReqAckJoinGuild_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAckJoinGuild

// required .AFMsg.Ident guild_id = 1;
bool ReqAckJoinGuild::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqAckJoinGuild::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqAckJoinGuild::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqAckJoinGuild::clear_guild_id() {
  if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
  clear_has_guild_id();
}
const ::AFMsg::Ident& ReqAckJoinGuild::guild_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckJoinGuild.guild_id)
  return guild_id_ != NULL ? *guild_id_ : *default_instance_->guild_id_;
}
::AFMsg::Ident* ReqAckJoinGuild::mutable_guild_id() {
  set_has_guild_id();
  if (guild_id_ == NULL) {
    guild_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckJoinGuild.guild_id)
  return guild_id_;
}
::AFMsg::Ident* ReqAckJoinGuild::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckJoinGuild.guild_id)
  clear_has_guild_id();
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
void ReqAckJoinGuild::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  delete guild_id_;
  guild_id_ = guild_id;
  if (guild_id) {
    set_has_guild_id();
  } else {
    clear_has_guild_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckJoinGuild.guild_id)
}

// required string guild_name = 2;
bool ReqAckJoinGuild::has_guild_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqAckJoinGuild::set_has_guild_name() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqAckJoinGuild::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqAckJoinGuild::clear_guild_name() {
  guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guild_name();
}
 const ::std::string& ReqAckJoinGuild::guild_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckJoinGuild.guild_name)
  return guild_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqAckJoinGuild::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckJoinGuild.guild_name)
}
 void ReqAckJoinGuild::set_guild_name(const char* value) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckJoinGuild.guild_name)
}
 void ReqAckJoinGuild::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckJoinGuild.guild_name)
}
 ::std::string* ReqAckJoinGuild::mutable_guild_name() {
  set_has_guild_name();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckJoinGuild.guild_name)
  return guild_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReqAckJoinGuild::release_guild_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckJoinGuild.guild_name)
  clear_has_guild_name();
  return guild_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqAckJoinGuild::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name != NULL) {
    set_has_guild_name();
  } else {
    clear_has_guild_name();
  }
  guild_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckJoinGuild.guild_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckLeaveGuild::kGuildIdFieldNumber;
const int ReqAckLeaveGuild::kGuildNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckLeaveGuild::ReqAckLeaveGuild()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckLeaveGuild)
}

void ReqAckLeaveGuild::InitAsDefaultInstance() {
  guild_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqAckLeaveGuild::ReqAckLeaveGuild(const ReqAckLeaveGuild& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckLeaveGuild)
}

void ReqAckLeaveGuild::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guild_id_ = NULL;
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckLeaveGuild::~ReqAckLeaveGuild() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckLeaveGuild)
  SharedDtor();
}

void ReqAckLeaveGuild::SharedDtor() {
  guild_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete guild_id_;
  }
}

void ReqAckLeaveGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckLeaveGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckLeaveGuild_descriptor_;
}

const ReqAckLeaveGuild& ReqAckLeaveGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckLeaveGuild* ReqAckLeaveGuild::default_instance_ = NULL;

ReqAckLeaveGuild* ReqAckLeaveGuild::New(::google::protobuf::Arena* arena) const {
  ReqAckLeaveGuild* n = new ReqAckLeaveGuild;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckLeaveGuild::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckLeaveGuild)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_guild_id()) {
      if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
    }
    if (has_guild_name()) {
      guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqAckLeaveGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckLeaveGuild)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident guild_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_guild_name;
        break;
      }

      // required string guild_name = 2;
      case 2: {
        if (tag == 18) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AFMsg.ReqAckLeaveGuild.guild_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckLeaveGuild)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckLeaveGuild)
  return false;
#undef DO_
}

void ReqAckLeaveGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckLeaveGuild)
  // required .AFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->guild_id_, output);
  }

  // required string guild_name = 2;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AFMsg.ReqAckLeaveGuild.guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guild_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckLeaveGuild)
}

::google::protobuf::uint8* ReqAckLeaveGuild::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckLeaveGuild)
  // required .AFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->guild_id_, false, target);
  }

  // required string guild_name = 2;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AFMsg.ReqAckLeaveGuild.guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guild_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckLeaveGuild)
  return target;
}

int ReqAckLeaveGuild::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqAckLeaveGuild)
  int total_size = 0;

  if (has_guild_id()) {
    // required .AFMsg.Ident guild_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->guild_id_);
  }

  if (has_guild_name()) {
    // required string guild_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_name());
  }

  return total_size;
}
int ReqAckLeaveGuild::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckLeaveGuild)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .AFMsg.Ident guild_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->guild_id_);

    // required string guild_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->guild_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckLeaveGuild::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckLeaveGuild)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqAckLeaveGuild* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckLeaveGuild>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckLeaveGuild)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckLeaveGuild)
    MergeFrom(*source);
  }
}

void ReqAckLeaveGuild::MergeFrom(const ReqAckLeaveGuild& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckLeaveGuild)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      mutable_guild_id()->::AFMsg::Ident::MergeFrom(from.guild_id());
    }
    if (from.has_guild_name()) {
      set_has_guild_name();
      guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqAckLeaveGuild::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckLeaveGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckLeaveGuild::CopyFrom(const ReqAckLeaveGuild& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckLeaveGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckLeaveGuild::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_guild_id()) {
    if (!this->guild_id_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckLeaveGuild::Swap(ReqAckLeaveGuild* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckLeaveGuild::InternalSwap(ReqAckLeaveGuild* other) {
  std::swap(guild_id_, other->guild_id_);
  guild_name_.Swap(&other->guild_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckLeaveGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckLeaveGuild_descriptor_;
  metadata.reflection = ReqAckLeaveGuild_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAckLeaveGuild

// required .AFMsg.Ident guild_id = 1;
bool ReqAckLeaveGuild::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqAckLeaveGuild::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqAckLeaveGuild::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqAckLeaveGuild::clear_guild_id() {
  if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
  clear_has_guild_id();
}
const ::AFMsg::Ident& ReqAckLeaveGuild::guild_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckLeaveGuild.guild_id)
  return guild_id_ != NULL ? *guild_id_ : *default_instance_->guild_id_;
}
::AFMsg::Ident* ReqAckLeaveGuild::mutable_guild_id() {
  set_has_guild_id();
  if (guild_id_ == NULL) {
    guild_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckLeaveGuild.guild_id)
  return guild_id_;
}
::AFMsg::Ident* ReqAckLeaveGuild::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckLeaveGuild.guild_id)
  clear_has_guild_id();
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
void ReqAckLeaveGuild::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  delete guild_id_;
  guild_id_ = guild_id;
  if (guild_id) {
    set_has_guild_id();
  } else {
    clear_has_guild_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckLeaveGuild.guild_id)
}

// required string guild_name = 2;
bool ReqAckLeaveGuild::has_guild_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqAckLeaveGuild::set_has_guild_name() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqAckLeaveGuild::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqAckLeaveGuild::clear_guild_name() {
  guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guild_name();
}
 const ::std::string& ReqAckLeaveGuild::guild_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckLeaveGuild.guild_name)
  return guild_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqAckLeaveGuild::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckLeaveGuild.guild_name)
}
 void ReqAckLeaveGuild::set_guild_name(const char* value) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckLeaveGuild.guild_name)
}
 void ReqAckLeaveGuild::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckLeaveGuild.guild_name)
}
 ::std::string* ReqAckLeaveGuild::mutable_guild_name() {
  set_has_guild_name();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckLeaveGuild.guild_name)
  return guild_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReqAckLeaveGuild::release_guild_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckLeaveGuild.guild_name)
  clear_has_guild_name();
  return guild_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqAckLeaveGuild::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name != NULL) {
    set_has_guild_name();
  } else {
    clear_has_guild_name();
  }
  guild_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckLeaveGuild.guild_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqAckOprGuildMember_EGGuildMemberOprType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckOprGuildMember_EGGuildMemberOprType_descriptor_;
}
bool ReqAckOprGuildMember_EGGuildMemberOprType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_DOWN;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_UP;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_KICK;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_APPOINT;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_FIRE;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_DEMISE;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_ACCEPTAPPLY;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_DENYAPPLY;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGAT_KICKOUT;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGGuildMemberOprType_MIN;
const ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::EGGuildMemberOprType_MAX;
const int ReqAckOprGuildMember::EGGuildMemberOprType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckOprGuildMember::kGuildIdFieldNumber;
const int ReqAckOprGuildMember::kMemberIdFieldNumber;
const int ReqAckOprGuildMember::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckOprGuildMember::ReqAckOprGuildMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckOprGuildMember)
}

void ReqAckOprGuildMember::InitAsDefaultInstance() {
  guild_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  member_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqAckOprGuildMember::ReqAckOprGuildMember(const ReqAckOprGuildMember& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckOprGuildMember)
}

void ReqAckOprGuildMember::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = NULL;
  member_id_ = NULL;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckOprGuildMember::~ReqAckOprGuildMember() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckOprGuildMember)
  SharedDtor();
}

void ReqAckOprGuildMember::SharedDtor() {
  if (this != default_instance_) {
    delete guild_id_;
    delete member_id_;
  }
}

void ReqAckOprGuildMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckOprGuildMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckOprGuildMember_descriptor_;
}

const ReqAckOprGuildMember& ReqAckOprGuildMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckOprGuildMember* ReqAckOprGuildMember::default_instance_ = NULL;

ReqAckOprGuildMember* ReqAckOprGuildMember::New(::google::protobuf::Arena* arena) const {
  ReqAckOprGuildMember* n = new ReqAckOprGuildMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckOprGuildMember::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckOprGuildMember)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_guild_id()) {
      if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
    }
    if (has_member_id()) {
      if (member_id_ != NULL) member_id_->::AFMsg::Ident::Clear();
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqAckOprGuildMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckOprGuildMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident guild_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_member_id;
        break;
      }

      // required .AFMsg.Ident member_id = 2;
      case 2: {
        if (tag == 18) {
         parse_member_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .AFMsg.ReqAckOprGuildMember.EGGuildMemberOprType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AFMsg::ReqAckOprGuildMember_EGGuildMemberOprType_IsValid(value)) {
            set_type(static_cast< ::AFMsg::ReqAckOprGuildMember_EGGuildMemberOprType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckOprGuildMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckOprGuildMember)
  return false;
#undef DO_
}

void ReqAckOprGuildMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckOprGuildMember)
  // required .AFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->guild_id_, output);
  }

  // required .AFMsg.Ident member_id = 2;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->member_id_, output);
  }

  // required .AFMsg.ReqAckOprGuildMember.EGGuildMemberOprType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckOprGuildMember)
}

::google::protobuf::uint8* ReqAckOprGuildMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckOprGuildMember)
  // required .AFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->guild_id_, false, target);
  }

  // required .AFMsg.Ident member_id = 2;
  if (has_member_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->member_id_, false, target);
  }

  // required .AFMsg.ReqAckOprGuildMember.EGGuildMemberOprType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckOprGuildMember)
  return target;
}

int ReqAckOprGuildMember::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqAckOprGuildMember)
  int total_size = 0;

  if (has_guild_id()) {
    // required .AFMsg.Ident guild_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->guild_id_);
  }

  if (has_member_id()) {
    // required .AFMsg.Ident member_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->member_id_);
  }

  if (has_type()) {
    // required .AFMsg.ReqAckOprGuildMember.EGGuildMemberOprType type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
int ReqAckOprGuildMember::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckOprGuildMember)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .AFMsg.Ident guild_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->guild_id_);

    // required .AFMsg.Ident member_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->member_id_);

    // required .AFMsg.ReqAckOprGuildMember.EGGuildMemberOprType type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckOprGuildMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckOprGuildMember)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqAckOprGuildMember* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckOprGuildMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckOprGuildMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckOprGuildMember)
    MergeFrom(*source);
  }
}

void ReqAckOprGuildMember::MergeFrom(const ReqAckOprGuildMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckOprGuildMember)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      mutable_guild_id()->::AFMsg::Ident::MergeFrom(from.guild_id());
    }
    if (from.has_member_id()) {
      mutable_member_id()->::AFMsg::Ident::MergeFrom(from.member_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqAckOprGuildMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckOprGuildMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckOprGuildMember::CopyFrom(const ReqAckOprGuildMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckOprGuildMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckOprGuildMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_guild_id()) {
    if (!this->guild_id_->IsInitialized()) return false;
  }
  if (has_member_id()) {
    if (!this->member_id_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckOprGuildMember::Swap(ReqAckOprGuildMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckOprGuildMember::InternalSwap(ReqAckOprGuildMember* other) {
  std::swap(guild_id_, other->guild_id_);
  std::swap(member_id_, other->member_id_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckOprGuildMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckOprGuildMember_descriptor_;
  metadata.reflection = ReqAckOprGuildMember_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAckOprGuildMember

// required .AFMsg.Ident guild_id = 1;
bool ReqAckOprGuildMember::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqAckOprGuildMember::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqAckOprGuildMember::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqAckOprGuildMember::clear_guild_id() {
  if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
  clear_has_guild_id();
}
const ::AFMsg::Ident& ReqAckOprGuildMember::guild_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprGuildMember.guild_id)
  return guild_id_ != NULL ? *guild_id_ : *default_instance_->guild_id_;
}
::AFMsg::Ident* ReqAckOprGuildMember::mutable_guild_id() {
  set_has_guild_id();
  if (guild_id_ == NULL) {
    guild_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckOprGuildMember.guild_id)
  return guild_id_;
}
::AFMsg::Ident* ReqAckOprGuildMember::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckOprGuildMember.guild_id)
  clear_has_guild_id();
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
void ReqAckOprGuildMember::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  delete guild_id_;
  guild_id_ = guild_id;
  if (guild_id) {
    set_has_guild_id();
  } else {
    clear_has_guild_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckOprGuildMember.guild_id)
}

// required .AFMsg.Ident member_id = 2;
bool ReqAckOprGuildMember::has_member_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqAckOprGuildMember::set_has_member_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqAckOprGuildMember::clear_has_member_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqAckOprGuildMember::clear_member_id() {
  if (member_id_ != NULL) member_id_->::AFMsg::Ident::Clear();
  clear_has_member_id();
}
const ::AFMsg::Ident& ReqAckOprGuildMember::member_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprGuildMember.member_id)
  return member_id_ != NULL ? *member_id_ : *default_instance_->member_id_;
}
::AFMsg::Ident* ReqAckOprGuildMember::mutable_member_id() {
  set_has_member_id();
  if (member_id_ == NULL) {
    member_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckOprGuildMember.member_id)
  return member_id_;
}
::AFMsg::Ident* ReqAckOprGuildMember::release_member_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckOprGuildMember.member_id)
  clear_has_member_id();
  ::AFMsg::Ident* temp = member_id_;
  member_id_ = NULL;
  return temp;
}
void ReqAckOprGuildMember::set_allocated_member_id(::AFMsg::Ident* member_id) {
  delete member_id_;
  member_id_ = member_id;
  if (member_id) {
    set_has_member_id();
  } else {
    clear_has_member_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckOprGuildMember.member_id)
}

// required .AFMsg.ReqAckOprGuildMember.EGGuildMemberOprType type = 3;
bool ReqAckOprGuildMember::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqAckOprGuildMember::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqAckOprGuildMember::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqAckOprGuildMember::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::AFMsg::ReqAckOprGuildMember_EGGuildMemberOprType ReqAckOprGuildMember::type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprGuildMember.type)
  return static_cast< ::AFMsg::ReqAckOprGuildMember_EGGuildMemberOprType >(type_);
}
 void ReqAckOprGuildMember::set_type(::AFMsg::ReqAckOprGuildMember_EGGuildMemberOprType value) {
  assert(::AFMsg::ReqAckOprGuildMember_EGGuildMemberOprType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckOprGuildMember.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqAckOprGuild_EGGuildOprType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckOprGuild_EGGuildOprType_descriptor_;
}
bool ReqAckOprGuild_EGGuildOprType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::EGAT_APPLYDISMISS;
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::EGAT_STOPDISMISS;
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::EGAT_SETRECRUIT;
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::EGAT_PUBLISHRECRUIT;
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::EGAT_EDITAD;
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::EGAT_LEVELUP;
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::EGGuildOprType_MIN;
const ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::EGGuildOprType_MAX;
const int ReqAckOprGuild::EGGuildOprType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckOprGuild::kGuildIdFieldNumber;
const int ReqAckOprGuild::kPlayerIdFieldNumber;
const int ReqAckOprGuild::kTypeFieldNumber;
const int ReqAckOprGuild::kRecruitDataFieldNumber;
const int ReqAckOprGuild::kAdDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckOprGuild::ReqAckOprGuild()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckOprGuild)
}

void ReqAckOprGuild::InitAsDefaultInstance() {
  guild_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  player_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqAckOprGuild::ReqAckOprGuild(const ReqAckOprGuild& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckOprGuild)
}

void ReqAckOprGuild::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guild_id_ = NULL;
  player_id_ = NULL;
  type_ = 1;
  recruit_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ad_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckOprGuild::~ReqAckOprGuild() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckOprGuild)
  SharedDtor();
}

void ReqAckOprGuild::SharedDtor() {
  recruit_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ad_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete guild_id_;
    delete player_id_;
  }
}

void ReqAckOprGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckOprGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckOprGuild_descriptor_;
}

const ReqAckOprGuild& ReqAckOprGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckOprGuild* ReqAckOprGuild::default_instance_ = NULL;

ReqAckOprGuild* ReqAckOprGuild::New(::google::protobuf::Arena* arena) const {
  ReqAckOprGuild* n = new ReqAckOprGuild;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckOprGuild::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckOprGuild)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_guild_id()) {
      if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
    }
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::AFMsg::Ident::Clear();
    }
    type_ = 1;
    if (has_recruit_data()) {
      recruit_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_ad_data()) {
      ad_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqAckOprGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckOprGuild)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident guild_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_id;
        break;
      }

      // required .AFMsg.Ident player_id = 2;
      case 2: {
        if (tag == 18) {
         parse_player_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .AFMsg.ReqAckOprGuild.EGGuildOprType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AFMsg::ReqAckOprGuild_EGGuildOprType_IsValid(value)) {
            set_type(static_cast< ::AFMsg::ReqAckOprGuild_EGGuildOprType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Recruit_data;
        break;
      }

      // required string Recruit_data = 4;
      case 4: {
        if (tag == 34) {
         parse_Recruit_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recruit_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->recruit_data().data(), this->recruit_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AFMsg.ReqAckOprGuild.Recruit_data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Ad_data;
        break;
      }

      // required string Ad_data = 5;
      case 5: {
        if (tag == 42) {
         parse_Ad_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ad_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ad_data().data(), this->ad_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AFMsg.ReqAckOprGuild.Ad_data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckOprGuild)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckOprGuild)
  return false;
#undef DO_
}

void ReqAckOprGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckOprGuild)
  // required .AFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->guild_id_, output);
  }

  // required .AFMsg.Ident player_id = 2;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->player_id_, output);
  }

  // required .AFMsg.ReqAckOprGuild.EGGuildOprType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // required string Recruit_data = 4;
  if (has_recruit_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recruit_data().data(), this->recruit_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AFMsg.ReqAckOprGuild.Recruit_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->recruit_data(), output);
  }

  // required string Ad_data = 5;
  if (has_ad_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ad_data().data(), this->ad_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AFMsg.ReqAckOprGuild.Ad_data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ad_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckOprGuild)
}

::google::protobuf::uint8* ReqAckOprGuild::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckOprGuild)
  // required .AFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->guild_id_, false, target);
  }

  // required .AFMsg.Ident player_id = 2;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->player_id_, false, target);
  }

  // required .AFMsg.ReqAckOprGuild.EGGuildOprType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // required string Recruit_data = 4;
  if (has_recruit_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recruit_data().data(), this->recruit_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AFMsg.ReqAckOprGuild.Recruit_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->recruit_data(), target);
  }

  // required string Ad_data = 5;
  if (has_ad_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ad_data().data(), this->ad_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AFMsg.ReqAckOprGuild.Ad_data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ad_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckOprGuild)
  return target;
}

int ReqAckOprGuild::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqAckOprGuild)
  int total_size = 0;

  if (has_guild_id()) {
    // required .AFMsg.Ident guild_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->guild_id_);
  }

  if (has_player_id()) {
    // required .AFMsg.Ident player_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);
  }

  if (has_type()) {
    // required .AFMsg.ReqAckOprGuild.EGGuildOprType type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_recruit_data()) {
    // required string Recruit_data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->recruit_data());
  }

  if (has_ad_data()) {
    // required string Ad_data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ad_data());
  }

  return total_size;
}
int ReqAckOprGuild::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckOprGuild)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .AFMsg.Ident guild_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->guild_id_);

    // required .AFMsg.Ident player_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);

    // required .AFMsg.ReqAckOprGuild.EGGuildOprType type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required string Recruit_data = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->recruit_data());

    // required string Ad_data = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ad_data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckOprGuild::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckOprGuild)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqAckOprGuild* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckOprGuild>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckOprGuild)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckOprGuild)
    MergeFrom(*source);
  }
}

void ReqAckOprGuild::MergeFrom(const ReqAckOprGuild& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckOprGuild)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      mutable_guild_id()->::AFMsg::Ident::MergeFrom(from.guild_id());
    }
    if (from.has_player_id()) {
      mutable_player_id()->::AFMsg::Ident::MergeFrom(from.player_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_recruit_data()) {
      set_has_recruit_data();
      recruit_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recruit_data_);
    }
    if (from.has_ad_data()) {
      set_has_ad_data();
      ad_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ad_data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqAckOprGuild::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckOprGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckOprGuild::CopyFrom(const ReqAckOprGuild& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckOprGuild)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckOprGuild::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_guild_id()) {
    if (!this->guild_id_->IsInitialized()) return false;
  }
  if (has_player_id()) {
    if (!this->player_id_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckOprGuild::Swap(ReqAckOprGuild* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckOprGuild::InternalSwap(ReqAckOprGuild* other) {
  std::swap(guild_id_, other->guild_id_);
  std::swap(player_id_, other->player_id_);
  std::swap(type_, other->type_);
  recruit_data_.Swap(&other->recruit_data_);
  ad_data_.Swap(&other->ad_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckOprGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckOprGuild_descriptor_;
  metadata.reflection = ReqAckOprGuild_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAckOprGuild

// required .AFMsg.Ident guild_id = 1;
bool ReqAckOprGuild::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqAckOprGuild::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqAckOprGuild::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqAckOprGuild::clear_guild_id() {
  if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
  clear_has_guild_id();
}
const ::AFMsg::Ident& ReqAckOprGuild::guild_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprGuild.guild_id)
  return guild_id_ != NULL ? *guild_id_ : *default_instance_->guild_id_;
}
::AFMsg::Ident* ReqAckOprGuild::mutable_guild_id() {
  set_has_guild_id();
  if (guild_id_ == NULL) {
    guild_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckOprGuild.guild_id)
  return guild_id_;
}
::AFMsg::Ident* ReqAckOprGuild::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckOprGuild.guild_id)
  clear_has_guild_id();
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
void ReqAckOprGuild::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  delete guild_id_;
  guild_id_ = guild_id;
  if (guild_id) {
    set_has_guild_id();
  } else {
    clear_has_guild_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckOprGuild.guild_id)
}

// required .AFMsg.Ident player_id = 2;
bool ReqAckOprGuild::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqAckOprGuild::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqAckOprGuild::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqAckOprGuild::clear_player_id() {
  if (player_id_ != NULL) player_id_->::AFMsg::Ident::Clear();
  clear_has_player_id();
}
const ::AFMsg::Ident& ReqAckOprGuild::player_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprGuild.player_id)
  return player_id_ != NULL ? *player_id_ : *default_instance_->player_id_;
}
::AFMsg::Ident* ReqAckOprGuild::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == NULL) {
    player_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckOprGuild.player_id)
  return player_id_;
}
::AFMsg::Ident* ReqAckOprGuild::release_player_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckOprGuild.player_id)
  clear_has_player_id();
  ::AFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
void ReqAckOprGuild::set_allocated_player_id(::AFMsg::Ident* player_id) {
  delete player_id_;
  player_id_ = player_id;
  if (player_id) {
    set_has_player_id();
  } else {
    clear_has_player_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckOprGuild.player_id)
}

// required .AFMsg.ReqAckOprGuild.EGGuildOprType type = 3;
bool ReqAckOprGuild::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqAckOprGuild::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqAckOprGuild::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqAckOprGuild::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::AFMsg::ReqAckOprGuild_EGGuildOprType ReqAckOprGuild::type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprGuild.type)
  return static_cast< ::AFMsg::ReqAckOprGuild_EGGuildOprType >(type_);
}
 void ReqAckOprGuild::set_type(::AFMsg::ReqAckOprGuild_EGGuildOprType value) {
  assert(::AFMsg::ReqAckOprGuild_EGGuildOprType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckOprGuild.type)
}

// required string Recruit_data = 4;
bool ReqAckOprGuild::has_recruit_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReqAckOprGuild::set_has_recruit_data() {
  _has_bits_[0] |= 0x00000008u;
}
void ReqAckOprGuild::clear_has_recruit_data() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReqAckOprGuild::clear_recruit_data() {
  recruit_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_recruit_data();
}
 const ::std::string& ReqAckOprGuild::recruit_data() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprGuild.Recruit_data)
  return recruit_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqAckOprGuild::set_recruit_data(const ::std::string& value) {
  set_has_recruit_data();
  recruit_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckOprGuild.Recruit_data)
}
 void ReqAckOprGuild::set_recruit_data(const char* value) {
  set_has_recruit_data();
  recruit_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckOprGuild.Recruit_data)
}
 void ReqAckOprGuild::set_recruit_data(const char* value, size_t size) {
  set_has_recruit_data();
  recruit_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckOprGuild.Recruit_data)
}
 ::std::string* ReqAckOprGuild::mutable_recruit_data() {
  set_has_recruit_data();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckOprGuild.Recruit_data)
  return recruit_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReqAckOprGuild::release_recruit_data() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckOprGuild.Recruit_data)
  clear_has_recruit_data();
  return recruit_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqAckOprGuild::set_allocated_recruit_data(::std::string* recruit_data) {
  if (recruit_data != NULL) {
    set_has_recruit_data();
  } else {
    clear_has_recruit_data();
  }
  recruit_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recruit_data);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckOprGuild.Recruit_data)
}

// required string Ad_data = 5;
bool ReqAckOprGuild::has_ad_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ReqAckOprGuild::set_has_ad_data() {
  _has_bits_[0] |= 0x00000010u;
}
void ReqAckOprGuild::clear_has_ad_data() {
  _has_bits_[0] &= ~0x00000010u;
}
void ReqAckOprGuild::clear_ad_data() {
  ad_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ad_data();
}
 const ::std::string& ReqAckOprGuild::ad_data() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprGuild.Ad_data)
  return ad_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqAckOprGuild::set_ad_data(const ::std::string& value) {
  set_has_ad_data();
  ad_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckOprGuild.Ad_data)
}
 void ReqAckOprGuild::set_ad_data(const char* value) {
  set_has_ad_data();
  ad_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckOprGuild.Ad_data)
}
 void ReqAckOprGuild::set_ad_data(const char* value, size_t size) {
  set_has_ad_data();
  ad_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckOprGuild.Ad_data)
}
 ::std::string* ReqAckOprGuild::mutable_ad_data() {
  set_has_ad_data();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckOprGuild.Ad_data)
  return ad_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReqAckOprGuild::release_ad_data() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckOprGuild.Ad_data)
  clear_has_ad_data();
  return ad_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqAckOprGuild::set_allocated_ad_data(::std::string* ad_data) {
  if (ad_data != NULL) {
    set_has_ad_data();
  } else {
    clear_has_ad_data();
  }
  ad_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ad_data);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckOprGuild.Ad_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckDonateGuildItem::kGuildIdFieldNumber;
const int ReqAckDonateGuildItem::kTargetIdFieldNumber;
const int ReqAckDonateGuildItem::kItemListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckDonateGuildItem::ReqAckDonateGuildItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckDonateGuildItem)
}

void ReqAckDonateGuildItem::InitAsDefaultInstance() {
  guild_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  target_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqAckDonateGuildItem::ReqAckDonateGuildItem(const ReqAckDonateGuildItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckDonateGuildItem)
}

void ReqAckDonateGuildItem::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = NULL;
  target_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckDonateGuildItem::~ReqAckDonateGuildItem() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckDonateGuildItem)
  SharedDtor();
}

void ReqAckDonateGuildItem::SharedDtor() {
  if (this != default_instance_) {
    delete guild_id_;
    delete target_id_;
  }
}

void ReqAckDonateGuildItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckDonateGuildItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckDonateGuildItem_descriptor_;
}

const ReqAckDonateGuildItem& ReqAckDonateGuildItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckDonateGuildItem* ReqAckDonateGuildItem::default_instance_ = NULL;

ReqAckDonateGuildItem* ReqAckDonateGuildItem::New(::google::protobuf::Arena* arena) const {
  ReqAckDonateGuildItem* n = new ReqAckDonateGuildItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckDonateGuildItem::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckDonateGuildItem)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_guild_id()) {
      if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
    }
    if (has_target_id()) {
      if (target_id_ != NULL) target_id_->::AFMsg::Ident::Clear();
    }
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqAckDonateGuildItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckDonateGuildItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident guild_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_target_id;
        break;
      }

      // required .AFMsg.Ident target_id = 2;
      case 2: {
        if (tag == 18) {
         parse_target_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item_list;
        break;
      }

      // repeated .AFMsg.ItemStruct item_list = 3;
      case 3: {
        if (tag == 26) {
         parse_item_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_item_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_item_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckDonateGuildItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckDonateGuildItem)
  return false;
#undef DO_
}

void ReqAckDonateGuildItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckDonateGuildItem)
  // required .AFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->guild_id_, output);
  }

  // required .AFMsg.Ident target_id = 2;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->target_id_, output);
  }

  // repeated .AFMsg.ItemStruct item_list = 3;
  for (unsigned int i = 0, n = this->item_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckDonateGuildItem)
}

::google::protobuf::uint8* ReqAckDonateGuildItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckDonateGuildItem)
  // required .AFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->guild_id_, false, target);
  }

  // required .AFMsg.Ident target_id = 2;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->target_id_, false, target);
  }

  // repeated .AFMsg.ItemStruct item_list = 3;
  for (unsigned int i = 0, n = this->item_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->item_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckDonateGuildItem)
  return target;
}

int ReqAckDonateGuildItem::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqAckDonateGuildItem)
  int total_size = 0;

  if (has_guild_id()) {
    // required .AFMsg.Ident guild_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->guild_id_);
  }

  if (has_target_id()) {
    // required .AFMsg.Ident target_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_id_);
  }

  return total_size;
}
int ReqAckDonateGuildItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckDonateGuildItem)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .AFMsg.Ident guild_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->guild_id_);

    // required .AFMsg.Ident target_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->target_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .AFMsg.ItemStruct item_list = 3;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckDonateGuildItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckDonateGuildItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqAckDonateGuildItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckDonateGuildItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckDonateGuildItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckDonateGuildItem)
    MergeFrom(*source);
  }
}

void ReqAckDonateGuildItem::MergeFrom(const ReqAckDonateGuildItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckDonateGuildItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      mutable_guild_id()->::AFMsg::Ident::MergeFrom(from.guild_id());
    }
    if (from.has_target_id()) {
      mutable_target_id()->::AFMsg::Ident::MergeFrom(from.target_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqAckDonateGuildItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckDonateGuildItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckDonateGuildItem::CopyFrom(const ReqAckDonateGuildItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckDonateGuildItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckDonateGuildItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_guild_id()) {
    if (!this->guild_id_->IsInitialized()) return false;
  }
  if (has_target_id()) {
    if (!this->target_id_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->item_list())) return false;
  return true;
}

void ReqAckDonateGuildItem::Swap(ReqAckDonateGuildItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckDonateGuildItem::InternalSwap(ReqAckDonateGuildItem* other) {
  std::swap(guild_id_, other->guild_id_);
  std::swap(target_id_, other->target_id_);
  item_list_.UnsafeArenaSwap(&other->item_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckDonateGuildItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckDonateGuildItem_descriptor_;
  metadata.reflection = ReqAckDonateGuildItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAckDonateGuildItem

// required .AFMsg.Ident guild_id = 1;
bool ReqAckDonateGuildItem::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqAckDonateGuildItem::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqAckDonateGuildItem::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqAckDonateGuildItem::clear_guild_id() {
  if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
  clear_has_guild_id();
}
const ::AFMsg::Ident& ReqAckDonateGuildItem::guild_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckDonateGuildItem.guild_id)
  return guild_id_ != NULL ? *guild_id_ : *default_instance_->guild_id_;
}
::AFMsg::Ident* ReqAckDonateGuildItem::mutable_guild_id() {
  set_has_guild_id();
  if (guild_id_ == NULL) {
    guild_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckDonateGuildItem.guild_id)
  return guild_id_;
}
::AFMsg::Ident* ReqAckDonateGuildItem::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckDonateGuildItem.guild_id)
  clear_has_guild_id();
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
void ReqAckDonateGuildItem::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  delete guild_id_;
  guild_id_ = guild_id;
  if (guild_id) {
    set_has_guild_id();
  } else {
    clear_has_guild_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckDonateGuildItem.guild_id)
}

// required .AFMsg.Ident target_id = 2;
bool ReqAckDonateGuildItem::has_target_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqAckDonateGuildItem::set_has_target_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqAckDonateGuildItem::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqAckDonateGuildItem::clear_target_id() {
  if (target_id_ != NULL) target_id_->::AFMsg::Ident::Clear();
  clear_has_target_id();
}
const ::AFMsg::Ident& ReqAckDonateGuildItem::target_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckDonateGuildItem.target_id)
  return target_id_ != NULL ? *target_id_ : *default_instance_->target_id_;
}
::AFMsg::Ident* ReqAckDonateGuildItem::mutable_target_id() {
  set_has_target_id();
  if (target_id_ == NULL) {
    target_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckDonateGuildItem.target_id)
  return target_id_;
}
::AFMsg::Ident* ReqAckDonateGuildItem::release_target_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckDonateGuildItem.target_id)
  clear_has_target_id();
  ::AFMsg::Ident* temp = target_id_;
  target_id_ = NULL;
  return temp;
}
void ReqAckDonateGuildItem::set_allocated_target_id(::AFMsg::Ident* target_id) {
  delete target_id_;
  target_id_ = target_id;
  if (target_id) {
    set_has_target_id();
  } else {
    clear_has_target_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckDonateGuildItem.target_id)
}

// repeated .AFMsg.ItemStruct item_list = 3;
int ReqAckDonateGuildItem::item_list_size() const {
  return item_list_.size();
}
void ReqAckDonateGuildItem::clear_item_list() {
  item_list_.Clear();
}
const ::AFMsg::ItemStruct& ReqAckDonateGuildItem::item_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckDonateGuildItem.item_list)
  return item_list_.Get(index);
}
::AFMsg::ItemStruct* ReqAckDonateGuildItem::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckDonateGuildItem.item_list)
  return item_list_.Mutable(index);
}
::AFMsg::ItemStruct* ReqAckDonateGuildItem::add_item_list() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqAckDonateGuildItem.item_list)
  return item_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >*
ReqAckDonateGuildItem::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqAckDonateGuildItem.item_list)
  return &item_list_;
}
const ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >&
ReqAckDonateGuildItem::item_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqAckDonateGuildItem.item_list)
  return item_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqGuildEctypeInfo::kSelfidFieldNumber;
const int ReqGuildEctypeInfo::kGuildIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqGuildEctypeInfo::ReqGuildEctypeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqGuildEctypeInfo)
}

void ReqGuildEctypeInfo::InitAsDefaultInstance() {
  selfid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  guild_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqGuildEctypeInfo::ReqGuildEctypeInfo(const ReqGuildEctypeInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqGuildEctypeInfo)
}

void ReqGuildEctypeInfo::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  guild_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGuildEctypeInfo::~ReqGuildEctypeInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqGuildEctypeInfo)
  SharedDtor();
}

void ReqGuildEctypeInfo::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete guild_id_;
  }
}

void ReqGuildEctypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGuildEctypeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGuildEctypeInfo_descriptor_;
}

const ReqGuildEctypeInfo& ReqGuildEctypeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqGuildEctypeInfo* ReqGuildEctypeInfo::default_instance_ = NULL;

ReqGuildEctypeInfo* ReqGuildEctypeInfo::New(::google::protobuf::Arena* arena) const {
  ReqGuildEctypeInfo* n = new ReqGuildEctypeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqGuildEctypeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqGuildEctypeInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
    }
    if (has_guild_id()) {
      if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqGuildEctypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqGuildEctypeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident selfid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_guild_id;
        break;
      }

      // required .AFMsg.Ident guild_id = 2;
      case 2: {
        if (tag == 18) {
         parse_guild_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqGuildEctypeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqGuildEctypeInfo)
  return false;
#undef DO_
}

void ReqGuildEctypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqGuildEctypeInfo)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->selfid_, output);
  }

  // required .AFMsg.Ident guild_id = 2;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->guild_id_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqGuildEctypeInfo)
}

::google::protobuf::uint8* ReqGuildEctypeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqGuildEctypeInfo)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->selfid_, false, target);
  }

  // required .AFMsg.Ident guild_id = 2;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->guild_id_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqGuildEctypeInfo)
  return target;
}

int ReqGuildEctypeInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqGuildEctypeInfo)
  int total_size = 0;

  if (has_selfid()) {
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);
  }

  if (has_guild_id()) {
    // required .AFMsg.Ident guild_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->guild_id_);
  }

  return total_size;
}
int ReqGuildEctypeInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqGuildEctypeInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);

    // required .AFMsg.Ident guild_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->guild_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGuildEctypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqGuildEctypeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqGuildEctypeInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqGuildEctypeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqGuildEctypeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqGuildEctypeInfo)
    MergeFrom(*source);
  }
}

void ReqGuildEctypeInfo::MergeFrom(const ReqGuildEctypeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqGuildEctypeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_guild_id()) {
      mutable_guild_id()->::AFMsg::Ident::MergeFrom(from.guild_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqGuildEctypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqGuildEctypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGuildEctypeInfo::CopyFrom(const ReqGuildEctypeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqGuildEctypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGuildEctypeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_selfid()) {
    if (!this->selfid_->IsInitialized()) return false;
  }
  if (has_guild_id()) {
    if (!this->guild_id_->IsInitialized()) return false;
  }
  return true;
}

void ReqGuildEctypeInfo::Swap(ReqGuildEctypeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqGuildEctypeInfo::InternalSwap(ReqGuildEctypeInfo* other) {
  std::swap(selfid_, other->selfid_);
  std::swap(guild_id_, other->guild_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqGuildEctypeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGuildEctypeInfo_descriptor_;
  metadata.reflection = ReqGuildEctypeInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqGuildEctypeInfo

// required .AFMsg.Ident selfid = 1;
bool ReqGuildEctypeInfo::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqGuildEctypeInfo::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqGuildEctypeInfo::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqGuildEctypeInfo::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
const ::AFMsg::Ident& ReqGuildEctypeInfo::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqGuildEctypeInfo.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
::AFMsg::Ident* ReqGuildEctypeInfo::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqGuildEctypeInfo.selfid)
  return selfid_;
}
::AFMsg::Ident* ReqGuildEctypeInfo::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqGuildEctypeInfo.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
void ReqGuildEctypeInfo::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqGuildEctypeInfo.selfid)
}

// required .AFMsg.Ident guild_id = 2;
bool ReqGuildEctypeInfo::has_guild_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqGuildEctypeInfo::set_has_guild_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqGuildEctypeInfo::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqGuildEctypeInfo::clear_guild_id() {
  if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
  clear_has_guild_id();
}
const ::AFMsg::Ident& ReqGuildEctypeInfo::guild_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqGuildEctypeInfo.guild_id)
  return guild_id_ != NULL ? *guild_id_ : *default_instance_->guild_id_;
}
::AFMsg::Ident* ReqGuildEctypeInfo::mutable_guild_id() {
  set_has_guild_id();
  if (guild_id_ == NULL) {
    guild_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqGuildEctypeInfo.guild_id)
  return guild_id_;
}
::AFMsg::Ident* ReqGuildEctypeInfo::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqGuildEctypeInfo.guild_id)
  clear_has_guild_id();
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
void ReqGuildEctypeInfo::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  delete guild_id_;
  guild_id_ = guild_id;
  if (guild_id) {
    set_has_guild_id();
  } else {
    clear_has_guild_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqGuildEctypeInfo.guild_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GuildEctypeInfo::kGuildIdFieldNumber;
const int GuildEctypeInfo::kServerIdFieldNumber;
const int GuildEctypeInfo::kEctypeIdFieldNumber;
const int GuildEctypeInfo::kEctypeGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GuildEctypeInfo::GuildEctypeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.GuildEctypeInfo)
}

void GuildEctypeInfo::InitAsDefaultInstance() {
  guild_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

GuildEctypeInfo::GuildEctypeInfo(const GuildEctypeInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.GuildEctypeInfo)
}

void GuildEctypeInfo::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = NULL;
  server_id_ = GOOGLE_LONGLONG(0);
  ectype_id_ = GOOGLE_LONGLONG(0);
  ectype_group_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildEctypeInfo::~GuildEctypeInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.GuildEctypeInfo)
  SharedDtor();
}

void GuildEctypeInfo::SharedDtor() {
  if (this != default_instance_) {
    delete guild_id_;
  }
}

void GuildEctypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildEctypeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildEctypeInfo_descriptor_;
}

const GuildEctypeInfo& GuildEctypeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

GuildEctypeInfo* GuildEctypeInfo::default_instance_ = NULL;

GuildEctypeInfo* GuildEctypeInfo::New(::google::protobuf::Arena* arena) const {
  GuildEctypeInfo* n = new GuildEctypeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GuildEctypeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.GuildEctypeInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GuildEctypeInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GuildEctypeInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(server_id_, ectype_group_);
    if (has_guild_id()) {
      if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GuildEctypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.GuildEctypeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident guild_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }

      // required int64 server_id = 2;
      case 2: {
        if (tag == 16) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Ectype_id;
        break;
      }

      // required int64 Ectype_id = 3;
      case 3: {
        if (tag == 24) {
         parse_Ectype_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ectype_id_)));
          set_has_ectype_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Ectype_Group;
        break;
      }

      // required int64 Ectype_Group = 4;
      case 4: {
        if (tag == 32) {
         parse_Ectype_Group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ectype_group_)));
          set_has_ectype_group();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.GuildEctypeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.GuildEctypeInfo)
  return false;
#undef DO_
}

void GuildEctypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.GuildEctypeInfo)
  // required .AFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->guild_id_, output);
  }

  // required int64 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->server_id(), output);
  }

  // required int64 Ectype_id = 3;
  if (has_ectype_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->ectype_id(), output);
  }

  // required int64 Ectype_Group = 4;
  if (has_ectype_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ectype_group(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.GuildEctypeInfo)
}

::google::protobuf::uint8* GuildEctypeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.GuildEctypeInfo)
  // required .AFMsg.Ident guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->guild_id_, false, target);
  }

  // required int64 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->server_id(), target);
  }

  // required int64 Ectype_id = 3;
  if (has_ectype_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->ectype_id(), target);
  }

  // required int64 Ectype_Group = 4;
  if (has_ectype_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->ectype_group(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.GuildEctypeInfo)
  return target;
}

int GuildEctypeInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.GuildEctypeInfo)
  int total_size = 0;

  if (has_guild_id()) {
    // required .AFMsg.Ident guild_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->guild_id_);
  }

  if (has_server_id()) {
    // required int64 server_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->server_id());
  }

  if (has_ectype_id()) {
    // required int64 Ectype_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ectype_id());
  }

  if (has_ectype_group()) {
    // required int64 Ectype_Group = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ectype_group());
  }

  return total_size;
}
int GuildEctypeInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.GuildEctypeInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .AFMsg.Ident guild_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->guild_id_);

    // required int64 server_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->server_id());

    // required int64 Ectype_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ectype_id());

    // required int64 Ectype_Group = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ectype_group());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildEctypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.GuildEctypeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GuildEctypeInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GuildEctypeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.GuildEctypeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.GuildEctypeInfo)
    MergeFrom(*source);
  }
}

void GuildEctypeInfo::MergeFrom(const GuildEctypeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.GuildEctypeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      mutable_guild_id()->::AFMsg::Ident::MergeFrom(from.guild_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_ectype_id()) {
      set_ectype_id(from.ectype_id());
    }
    if (from.has_ectype_group()) {
      set_ectype_group(from.ectype_group());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GuildEctypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.GuildEctypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildEctypeInfo::CopyFrom(const GuildEctypeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.GuildEctypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildEctypeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_guild_id()) {
    if (!this->guild_id_->IsInitialized()) return false;
  }
  return true;
}

void GuildEctypeInfo::Swap(GuildEctypeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GuildEctypeInfo::InternalSwap(GuildEctypeInfo* other) {
  std::swap(guild_id_, other->guild_id_);
  std::swap(server_id_, other->server_id_);
  std::swap(ectype_id_, other->ectype_id_);
  std::swap(ectype_group_, other->ectype_group_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GuildEctypeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildEctypeInfo_descriptor_;
  metadata.reflection = GuildEctypeInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GuildEctypeInfo

// required .AFMsg.Ident guild_id = 1;
bool GuildEctypeInfo::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GuildEctypeInfo::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
void GuildEctypeInfo::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void GuildEctypeInfo::clear_guild_id() {
  if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
  clear_has_guild_id();
}
const ::AFMsg::Ident& GuildEctypeInfo::guild_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.GuildEctypeInfo.guild_id)
  return guild_id_ != NULL ? *guild_id_ : *default_instance_->guild_id_;
}
::AFMsg::Ident* GuildEctypeInfo::mutable_guild_id() {
  set_has_guild_id();
  if (guild_id_ == NULL) {
    guild_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.GuildEctypeInfo.guild_id)
  return guild_id_;
}
::AFMsg::Ident* GuildEctypeInfo::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.GuildEctypeInfo.guild_id)
  clear_has_guild_id();
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
void GuildEctypeInfo::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  delete guild_id_;
  guild_id_ = guild_id;
  if (guild_id) {
    set_has_guild_id();
  } else {
    clear_has_guild_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.GuildEctypeInfo.guild_id)
}

// required int64 server_id = 2;
bool GuildEctypeInfo::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GuildEctypeInfo::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
void GuildEctypeInfo::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void GuildEctypeInfo::clear_server_id() {
  server_id_ = GOOGLE_LONGLONG(0);
  clear_has_server_id();
}
 ::google::protobuf::int64 GuildEctypeInfo::server_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.GuildEctypeInfo.server_id)
  return server_id_;
}
 void GuildEctypeInfo::set_server_id(::google::protobuf::int64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.GuildEctypeInfo.server_id)
}

// required int64 Ectype_id = 3;
bool GuildEctypeInfo::has_ectype_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GuildEctypeInfo::set_has_ectype_id() {
  _has_bits_[0] |= 0x00000004u;
}
void GuildEctypeInfo::clear_has_ectype_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void GuildEctypeInfo::clear_ectype_id() {
  ectype_id_ = GOOGLE_LONGLONG(0);
  clear_has_ectype_id();
}
 ::google::protobuf::int64 GuildEctypeInfo::ectype_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.GuildEctypeInfo.Ectype_id)
  return ectype_id_;
}
 void GuildEctypeInfo::set_ectype_id(::google::protobuf::int64 value) {
  set_has_ectype_id();
  ectype_id_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.GuildEctypeInfo.Ectype_id)
}

// required int64 Ectype_Group = 4;
bool GuildEctypeInfo::has_ectype_group() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GuildEctypeInfo::set_has_ectype_group() {
  _has_bits_[0] |= 0x00000008u;
}
void GuildEctypeInfo::clear_has_ectype_group() {
  _has_bits_[0] &= ~0x00000008u;
}
void GuildEctypeInfo::clear_ectype_group() {
  ectype_group_ = GOOGLE_LONGLONG(0);
  clear_has_ectype_group();
}
 ::google::protobuf::int64 GuildEctypeInfo::ectype_group() const {
  // @@protoc_insertion_point(field_get:AFMsg.GuildEctypeInfo.Ectype_Group)
  return ectype_group_;
}
 void GuildEctypeInfo::set_ectype_group(::google::protobuf::int64 value) {
  set_has_ectype_group();
  ectype_group_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.GuildEctypeInfo.Ectype_Group)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckGuildEctypeInfo::kSelfidFieldNumber;
const int AckGuildEctypeInfo::kXectypeinfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckGuildEctypeInfo::AckGuildEctypeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckGuildEctypeInfo)
}

void AckGuildEctypeInfo::InitAsDefaultInstance() {
  selfid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  xectypeinfo_ = const_cast< ::AFMsg::GuildEctypeInfo*>(&::AFMsg::GuildEctypeInfo::default_instance());
}

AckGuildEctypeInfo::AckGuildEctypeInfo(const AckGuildEctypeInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckGuildEctypeInfo)
}

void AckGuildEctypeInfo::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  xectypeinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGuildEctypeInfo::~AckGuildEctypeInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.AckGuildEctypeInfo)
  SharedDtor();
}

void AckGuildEctypeInfo::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete xectypeinfo_;
  }
}

void AckGuildEctypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGuildEctypeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGuildEctypeInfo_descriptor_;
}

const AckGuildEctypeInfo& AckGuildEctypeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

AckGuildEctypeInfo* AckGuildEctypeInfo::default_instance_ = NULL;

AckGuildEctypeInfo* AckGuildEctypeInfo::New(::google::protobuf::Arena* arena) const {
  AckGuildEctypeInfo* n = new AckGuildEctypeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckGuildEctypeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckGuildEctypeInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
    }
    if (has_xectypeinfo()) {
      if (xectypeinfo_ != NULL) xectypeinfo_->::AFMsg::GuildEctypeInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AckGuildEctypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckGuildEctypeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident selfid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_xectypeinfo;
        break;
      }

      // required .AFMsg.GuildEctypeInfo xectypeinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_xectypeinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xectypeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckGuildEctypeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckGuildEctypeInfo)
  return false;
#undef DO_
}

void AckGuildEctypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckGuildEctypeInfo)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->selfid_, output);
  }

  // required .AFMsg.GuildEctypeInfo xectypeinfo = 2;
  if (has_xectypeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->xectypeinfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckGuildEctypeInfo)
}

::google::protobuf::uint8* AckGuildEctypeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckGuildEctypeInfo)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->selfid_, false, target);
  }

  // required .AFMsg.GuildEctypeInfo xectypeinfo = 2;
  if (has_xectypeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->xectypeinfo_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckGuildEctypeInfo)
  return target;
}

int AckGuildEctypeInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.AckGuildEctypeInfo)
  int total_size = 0;

  if (has_selfid()) {
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);
  }

  if (has_xectypeinfo()) {
    // required .AFMsg.GuildEctypeInfo xectypeinfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->xectypeinfo_);
  }

  return total_size;
}
int AckGuildEctypeInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckGuildEctypeInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);

    // required .AFMsg.GuildEctypeInfo xectypeinfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->xectypeinfo_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGuildEctypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckGuildEctypeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AckGuildEctypeInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AckGuildEctypeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckGuildEctypeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckGuildEctypeInfo)
    MergeFrom(*source);
  }
}

void AckGuildEctypeInfo::MergeFrom(const AckGuildEctypeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckGuildEctypeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_xectypeinfo()) {
      mutable_xectypeinfo()->::AFMsg::GuildEctypeInfo::MergeFrom(from.xectypeinfo());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AckGuildEctypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckGuildEctypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGuildEctypeInfo::CopyFrom(const AckGuildEctypeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckGuildEctypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGuildEctypeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_selfid()) {
    if (!this->selfid_->IsInitialized()) return false;
  }
  if (has_xectypeinfo()) {
    if (!this->xectypeinfo_->IsInitialized()) return false;
  }
  return true;
}

void AckGuildEctypeInfo::Swap(AckGuildEctypeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckGuildEctypeInfo::InternalSwap(AckGuildEctypeInfo* other) {
  std::swap(selfid_, other->selfid_);
  std::swap(xectypeinfo_, other->xectypeinfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckGuildEctypeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGuildEctypeInfo_descriptor_;
  metadata.reflection = AckGuildEctypeInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckGuildEctypeInfo

// required .AFMsg.Ident selfid = 1;
bool AckGuildEctypeInfo::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AckGuildEctypeInfo::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
void AckGuildEctypeInfo::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AckGuildEctypeInfo::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
const ::AFMsg::Ident& AckGuildEctypeInfo::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckGuildEctypeInfo.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
::AFMsg::Ident* AckGuildEctypeInfo::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckGuildEctypeInfo.selfid)
  return selfid_;
}
::AFMsg::Ident* AckGuildEctypeInfo::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckGuildEctypeInfo.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
void AckGuildEctypeInfo::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckGuildEctypeInfo.selfid)
}

// required .AFMsg.GuildEctypeInfo xectypeinfo = 2;
bool AckGuildEctypeInfo::has_xectypeinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AckGuildEctypeInfo::set_has_xectypeinfo() {
  _has_bits_[0] |= 0x00000002u;
}
void AckGuildEctypeInfo::clear_has_xectypeinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void AckGuildEctypeInfo::clear_xectypeinfo() {
  if (xectypeinfo_ != NULL) xectypeinfo_->::AFMsg::GuildEctypeInfo::Clear();
  clear_has_xectypeinfo();
}
const ::AFMsg::GuildEctypeInfo& AckGuildEctypeInfo::xectypeinfo() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckGuildEctypeInfo.xectypeinfo)
  return xectypeinfo_ != NULL ? *xectypeinfo_ : *default_instance_->xectypeinfo_;
}
::AFMsg::GuildEctypeInfo* AckGuildEctypeInfo::mutable_xectypeinfo() {
  set_has_xectypeinfo();
  if (xectypeinfo_ == NULL) {
    xectypeinfo_ = new ::AFMsg::GuildEctypeInfo;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckGuildEctypeInfo.xectypeinfo)
  return xectypeinfo_;
}
::AFMsg::GuildEctypeInfo* AckGuildEctypeInfo::release_xectypeinfo() {
  // @@protoc_insertion_point(field_release:AFMsg.AckGuildEctypeInfo.xectypeinfo)
  clear_has_xectypeinfo();
  ::AFMsg::GuildEctypeInfo* temp = xectypeinfo_;
  xectypeinfo_ = NULL;
  return temp;
}
void AckGuildEctypeInfo::set_allocated_xectypeinfo(::AFMsg::GuildEctypeInfo* xectypeinfo) {
  delete xectypeinfo_;
  xectypeinfo_ = xectypeinfo;
  if (xectypeinfo) {
    set_has_xectypeinfo();
  } else {
    clear_has_xectypeinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckGuildEctypeInfo.xectypeinfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetGuildEctypeInfo::kSelfidFieldNumber;
const int SetGuildEctypeInfo::kXectypeinfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetGuildEctypeInfo::SetGuildEctypeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.SetGuildEctypeInfo)
}

void SetGuildEctypeInfo::InitAsDefaultInstance() {
  selfid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  xectypeinfo_ = const_cast< ::AFMsg::GuildEctypeInfo*>(&::AFMsg::GuildEctypeInfo::default_instance());
}

SetGuildEctypeInfo::SetGuildEctypeInfo(const SetGuildEctypeInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.SetGuildEctypeInfo)
}

void SetGuildEctypeInfo::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  xectypeinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGuildEctypeInfo::~SetGuildEctypeInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.SetGuildEctypeInfo)
  SharedDtor();
}

void SetGuildEctypeInfo::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete xectypeinfo_;
  }
}

void SetGuildEctypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGuildEctypeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGuildEctypeInfo_descriptor_;
}

const SetGuildEctypeInfo& SetGuildEctypeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

SetGuildEctypeInfo* SetGuildEctypeInfo::default_instance_ = NULL;

SetGuildEctypeInfo* SetGuildEctypeInfo::New(::google::protobuf::Arena* arena) const {
  SetGuildEctypeInfo* n = new SetGuildEctypeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetGuildEctypeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.SetGuildEctypeInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
    }
    if (has_xectypeinfo()) {
      if (xectypeinfo_ != NULL) xectypeinfo_->::AFMsg::GuildEctypeInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SetGuildEctypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.SetGuildEctypeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident selfid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_xectypeinfo;
        break;
      }

      // required .AFMsg.GuildEctypeInfo xectypeinfo = 2;
      case 2: {
        if (tag == 18) {
         parse_xectypeinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xectypeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.SetGuildEctypeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.SetGuildEctypeInfo)
  return false;
#undef DO_
}

void SetGuildEctypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.SetGuildEctypeInfo)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->selfid_, output);
  }

  // required .AFMsg.GuildEctypeInfo xectypeinfo = 2;
  if (has_xectypeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->xectypeinfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.SetGuildEctypeInfo)
}

::google::protobuf::uint8* SetGuildEctypeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.SetGuildEctypeInfo)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->selfid_, false, target);
  }

  // required .AFMsg.GuildEctypeInfo xectypeinfo = 2;
  if (has_xectypeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->xectypeinfo_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.SetGuildEctypeInfo)
  return target;
}

int SetGuildEctypeInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.SetGuildEctypeInfo)
  int total_size = 0;

  if (has_selfid()) {
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);
  }

  if (has_xectypeinfo()) {
    // required .AFMsg.GuildEctypeInfo xectypeinfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->xectypeinfo_);
  }

  return total_size;
}
int SetGuildEctypeInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.SetGuildEctypeInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);

    // required .AFMsg.GuildEctypeInfo xectypeinfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->xectypeinfo_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGuildEctypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.SetGuildEctypeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SetGuildEctypeInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetGuildEctypeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.SetGuildEctypeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.SetGuildEctypeInfo)
    MergeFrom(*source);
  }
}

void SetGuildEctypeInfo::MergeFrom(const SetGuildEctypeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.SetGuildEctypeInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_xectypeinfo()) {
      mutable_xectypeinfo()->::AFMsg::GuildEctypeInfo::MergeFrom(from.xectypeinfo());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SetGuildEctypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.SetGuildEctypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGuildEctypeInfo::CopyFrom(const SetGuildEctypeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.SetGuildEctypeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGuildEctypeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_selfid()) {
    if (!this->selfid_->IsInitialized()) return false;
  }
  if (has_xectypeinfo()) {
    if (!this->xectypeinfo_->IsInitialized()) return false;
  }
  return true;
}

void SetGuildEctypeInfo::Swap(SetGuildEctypeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetGuildEctypeInfo::InternalSwap(SetGuildEctypeInfo* other) {
  std::swap(selfid_, other->selfid_);
  std::swap(xectypeinfo_, other->xectypeinfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetGuildEctypeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGuildEctypeInfo_descriptor_;
  metadata.reflection = SetGuildEctypeInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetGuildEctypeInfo

// required .AFMsg.Ident selfid = 1;
bool SetGuildEctypeInfo::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SetGuildEctypeInfo::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
void SetGuildEctypeInfo::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
void SetGuildEctypeInfo::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
const ::AFMsg::Ident& SetGuildEctypeInfo::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.SetGuildEctypeInfo.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
::AFMsg::Ident* SetGuildEctypeInfo::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.SetGuildEctypeInfo.selfid)
  return selfid_;
}
::AFMsg::Ident* SetGuildEctypeInfo::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.SetGuildEctypeInfo.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
void SetGuildEctypeInfo::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.SetGuildEctypeInfo.selfid)
}

// required .AFMsg.GuildEctypeInfo xectypeinfo = 2;
bool SetGuildEctypeInfo::has_xectypeinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SetGuildEctypeInfo::set_has_xectypeinfo() {
  _has_bits_[0] |= 0x00000002u;
}
void SetGuildEctypeInfo::clear_has_xectypeinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void SetGuildEctypeInfo::clear_xectypeinfo() {
  if (xectypeinfo_ != NULL) xectypeinfo_->::AFMsg::GuildEctypeInfo::Clear();
  clear_has_xectypeinfo();
}
const ::AFMsg::GuildEctypeInfo& SetGuildEctypeInfo::xectypeinfo() const {
  // @@protoc_insertion_point(field_get:AFMsg.SetGuildEctypeInfo.xectypeinfo)
  return xectypeinfo_ != NULL ? *xectypeinfo_ : *default_instance_->xectypeinfo_;
}
::AFMsg::GuildEctypeInfo* SetGuildEctypeInfo::mutable_xectypeinfo() {
  set_has_xectypeinfo();
  if (xectypeinfo_ == NULL) {
    xectypeinfo_ = new ::AFMsg::GuildEctypeInfo;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.SetGuildEctypeInfo.xectypeinfo)
  return xectypeinfo_;
}
::AFMsg::GuildEctypeInfo* SetGuildEctypeInfo::release_xectypeinfo() {
  // @@protoc_insertion_point(field_release:AFMsg.SetGuildEctypeInfo.xectypeinfo)
  clear_has_xectypeinfo();
  ::AFMsg::GuildEctypeInfo* temp = xectypeinfo_;
  xectypeinfo_ = NULL;
  return temp;
}
void SetGuildEctypeInfo::set_allocated_xectypeinfo(::AFMsg::GuildEctypeInfo* xectypeinfo) {
  delete xectypeinfo_;
  xectypeinfo_ = xectypeinfo;
  if (xectypeinfo) {
    set_has_xectypeinfo();
  } else {
    clear_has_xectypeinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.SetGuildEctypeInfo.xectypeinfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqEnterGuildEctype::kSelfidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqEnterGuildEctype::ReqEnterGuildEctype()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqEnterGuildEctype)
}

void ReqEnterGuildEctype::InitAsDefaultInstance() {
  selfid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqEnterGuildEctype::ReqEnterGuildEctype(const ReqEnterGuildEctype& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqEnterGuildEctype)
}

void ReqEnterGuildEctype::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqEnterGuildEctype::~ReqEnterGuildEctype() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqEnterGuildEctype)
  SharedDtor();
}

void ReqEnterGuildEctype::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
  }
}

void ReqEnterGuildEctype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqEnterGuildEctype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqEnterGuildEctype_descriptor_;
}

const ReqEnterGuildEctype& ReqEnterGuildEctype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqEnterGuildEctype* ReqEnterGuildEctype::default_instance_ = NULL;

ReqEnterGuildEctype* ReqEnterGuildEctype::New(::google::protobuf::Arena* arena) const {
  ReqEnterGuildEctype* n = new ReqEnterGuildEctype;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqEnterGuildEctype::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqEnterGuildEctype)
  if (has_selfid()) {
    if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqEnterGuildEctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqEnterGuildEctype)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident selfid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqEnterGuildEctype)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqEnterGuildEctype)
  return false;
#undef DO_
}

void ReqEnterGuildEctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqEnterGuildEctype)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->selfid_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqEnterGuildEctype)
}

::google::protobuf::uint8* ReqEnterGuildEctype::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqEnterGuildEctype)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->selfid_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqEnterGuildEctype)
  return target;
}

int ReqEnterGuildEctype::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqEnterGuildEctype)
  int total_size = 0;

  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqEnterGuildEctype::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqEnterGuildEctype)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqEnterGuildEctype* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqEnterGuildEctype>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqEnterGuildEctype)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqEnterGuildEctype)
    MergeFrom(*source);
  }
}

void ReqEnterGuildEctype::MergeFrom(const ReqEnterGuildEctype& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqEnterGuildEctype)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqEnterGuildEctype::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqEnterGuildEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnterGuildEctype::CopyFrom(const ReqEnterGuildEctype& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqEnterGuildEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEnterGuildEctype::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_selfid()) {
    if (!this->selfid_->IsInitialized()) return false;
  }
  return true;
}

void ReqEnterGuildEctype::Swap(ReqEnterGuildEctype* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqEnterGuildEctype::InternalSwap(ReqEnterGuildEctype* other) {
  std::swap(selfid_, other->selfid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqEnterGuildEctype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqEnterGuildEctype_descriptor_;
  metadata.reflection = ReqEnterGuildEctype_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqEnterGuildEctype

// required .AFMsg.Ident selfid = 1;
bool ReqEnterGuildEctype::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqEnterGuildEctype::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqEnterGuildEctype::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqEnterGuildEctype::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
const ::AFMsg::Ident& ReqEnterGuildEctype::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqEnterGuildEctype.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
::AFMsg::Ident* ReqEnterGuildEctype::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqEnterGuildEctype.selfid)
  return selfid_;
}
::AFMsg::Ident* ReqEnterGuildEctype::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqEnterGuildEctype.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
void ReqEnterGuildEctype::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqEnterGuildEctype.selfid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ChatInfo_EChatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatInfo_EChatType_descriptor_;
}
bool ChatInfo_EChatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChatInfo_EChatType ChatInfo::ECHATTYPE_NORMAL;
const ChatInfo_EChatType ChatInfo::ECHATTYPE_PRIVATE;
const ChatInfo_EChatType ChatInfo::ECHATTYPE_GUILD;
const ChatInfo_EChatType ChatInfo::ECHATTYPE_WORLD;
const ChatInfo_EChatType ChatInfo::EChatType_MIN;
const ChatInfo_EChatType ChatInfo::EChatType_MAX;
const int ChatInfo::EChatType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatInfo::kChatTypeFieldNumber;
const int ChatInfo::kChatInfoFieldNumber;
const int ChatInfo::kChatTimeFieldNumber;
const int ChatInfo::kAddtionalInfoFieldNumber;
const int ChatInfo::kSendIdFieldNumber;
const int ChatInfo::kSendNameFieldNumber;
const int ChatInfo::kSendLevelFieldNumber;
const int ChatInfo::kRecvierIdFieldNumber;
const int ChatInfo::kGuidNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatInfo::ChatInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ChatInfo)
}

void ChatInfo::InitAsDefaultInstance() {
  send_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ChatInfo::ChatInfo(const ChatInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ChatInfo)
}

void ChatInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  chat_type_ = 0;
  chat_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chat_time_ = GOOGLE_LONGLONG(0);
  addtional_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_id_ = NULL;
  send_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_level_ = 0;
  guid_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatInfo::~ChatInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.ChatInfo)
  SharedDtor();
}

void ChatInfo::SharedDtor() {
  chat_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  addtional_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  send_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guid_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete send_id_;
  }
}

void ChatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatInfo_descriptor_;
}

const ChatInfo& ChatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ChatInfo* ChatInfo::default_instance_ = NULL;

ChatInfo* ChatInfo::New(::google::protobuf::Arena* arena) const {
  ChatInfo* n = new ChatInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ChatInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChatInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChatInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(chat_type_, send_level_);
    if (has_chat_info()) {
      chat_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    chat_time_ = GOOGLE_LONGLONG(0);
    if (has_addtional_info()) {
      addtional_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_send_id()) {
      if (send_id_ != NULL) send_id_->::AFMsg::Ident::Clear();
    }
    if (has_send_name()) {
      send_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (has_guid_name()) {
    guid_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }

#undef ZR_HELPER_
#undef ZR_

  recvier_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ChatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ChatInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.ChatInfo.EChatType chat_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AFMsg::ChatInfo_EChatType_IsValid(value)) {
            set_chat_type(static_cast< ::AFMsg::ChatInfo_EChatType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chat_info;
        break;
      }

      // required bytes chat_info = 2;
      case 2: {
        if (tag == 18) {
         parse_chat_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chat_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_chat_time;
        break;
      }

      // required int64 chat_time = 3;
      case 3: {
        if (tag == 24) {
         parse_chat_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chat_time_)));
          set_has_chat_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_addtional_info;
        break;
      }

      // optional bytes addtional_info = 4;
      case 4: {
        if (tag == 34) {
         parse_addtional_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_addtional_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_send_id;
        break;
      }

      // required .AFMsg.Ident send_id = 5;
      case 5: {
        if (tag == 42) {
         parse_send_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_send_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_send_name;
        break;
      }

      // required bytes send_name = 6;
      case 6: {
        if (tag == 50) {
         parse_send_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_send_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_send_level;
        break;
      }

      // optional int32 send_level = 7;
      case 7: {
        if (tag == 56) {
         parse_send_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_level_)));
          set_has_send_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_recvier_id;
        break;
      }

      // repeated .AFMsg.Ident recvier_id = 8;
      case 8: {
        if (tag == 66) {
         parse_recvier_id:
          DO_(input->IncrementRecursionDepth());
         parse_loop_recvier_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_recvier_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_recvier_id;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(74)) goto parse_guid_name;
        break;
      }

      // optional bytes guid_name = 9;
      case 9: {
        if (tag == 74) {
         parse_guid_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guid_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ChatInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ChatInfo)
  return false;
#undef DO_
}

void ChatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ChatInfo)
  // required .AFMsg.ChatInfo.EChatType chat_type = 1;
  if (has_chat_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->chat_type(), output);
  }

  // required bytes chat_info = 2;
  if (has_chat_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->chat_info(), output);
  }

  // required int64 chat_time = 3;
  if (has_chat_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->chat_time(), output);
  }

  // optional bytes addtional_info = 4;
  if (has_addtional_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->addtional_info(), output);
  }

  // required .AFMsg.Ident send_id = 5;
  if (has_send_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->send_id_, output);
  }

  // required bytes send_name = 6;
  if (has_send_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->send_name(), output);
  }

  // optional int32 send_level = 7;
  if (has_send_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->send_level(), output);
  }

  // repeated .AFMsg.Ident recvier_id = 8;
  for (unsigned int i = 0, n = this->recvier_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->recvier_id(i), output);
  }

  // optional bytes guid_name = 9;
  if (has_guid_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->guid_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ChatInfo)
}

::google::protobuf::uint8* ChatInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ChatInfo)
  // required .AFMsg.ChatInfo.EChatType chat_type = 1;
  if (has_chat_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->chat_type(), target);
  }

  // required bytes chat_info = 2;
  if (has_chat_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->chat_info(), target);
  }

  // required int64 chat_time = 3;
  if (has_chat_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->chat_time(), target);
  }

  // optional bytes addtional_info = 4;
  if (has_addtional_info()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->addtional_info(), target);
  }

  // required .AFMsg.Ident send_id = 5;
  if (has_send_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->send_id_, false, target);
  }

  // required bytes send_name = 6;
  if (has_send_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->send_name(), target);
  }

  // optional int32 send_level = 7;
  if (has_send_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->send_level(), target);
  }

  // repeated .AFMsg.Ident recvier_id = 8;
  for (unsigned int i = 0, n = this->recvier_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->recvier_id(i), false, target);
  }

  // optional bytes guid_name = 9;
  if (has_guid_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->guid_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ChatInfo)
  return target;
}

int ChatInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ChatInfo)
  int total_size = 0;

  if (has_chat_type()) {
    // required .AFMsg.ChatInfo.EChatType chat_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->chat_type());
  }

  if (has_chat_info()) {
    // required bytes chat_info = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->chat_info());
  }

  if (has_chat_time()) {
    // required int64 chat_time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->chat_time());
  }

  if (has_send_id()) {
    // required .AFMsg.Ident send_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->send_id_);
  }

  if (has_send_name()) {
    // required bytes send_name = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->send_name());
  }

  return total_size;
}
int ChatInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ChatInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000037) ^ 0x00000037) == 0) {  // All required fields are present.
    // required .AFMsg.ChatInfo.EChatType chat_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->chat_type());

    // required bytes chat_info = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->chat_info());

    // required int64 chat_time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->chat_time());

    // required .AFMsg.Ident send_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->send_id_);

    // required bytes send_name = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->send_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 72u) {
    // optional bytes addtional_info = 4;
    if (has_addtional_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->addtional_info());
    }

    // optional int32 send_level = 7;
    if (has_send_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_level());
    }

  }
  // optional bytes guid_name = 9;
  if (has_guid_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->guid_name());
  }

  // repeated .AFMsg.Ident recvier_id = 8;
  total_size += 1 * this->recvier_id_size();
  for (int i = 0; i < this->recvier_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recvier_id(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ChatInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChatInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ChatInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ChatInfo)
    MergeFrom(*source);
  }
}

void ChatInfo::MergeFrom(const ChatInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ChatInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  recvier_id_.MergeFrom(from.recvier_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chat_type()) {
      set_chat_type(from.chat_type());
    }
    if (from.has_chat_info()) {
      set_has_chat_info();
      chat_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chat_info_);
    }
    if (from.has_chat_time()) {
      set_chat_time(from.chat_time());
    }
    if (from.has_addtional_info()) {
      set_has_addtional_info();
      addtional_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addtional_info_);
    }
    if (from.has_send_id()) {
      mutable_send_id()->::AFMsg::Ident::MergeFrom(from.send_id());
    }
    if (from.has_send_name()) {
      set_has_send_name();
      send_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.send_name_);
    }
    if (from.has_send_level()) {
      set_send_level(from.send_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_guid_name()) {
      set_has_guid_name();
      guid_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guid_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ChatInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ChatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatInfo::CopyFrom(const ChatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ChatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;

  if (has_send_id()) {
    if (!this->send_id_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->recvier_id())) return false;
  return true;
}

void ChatInfo::Swap(ChatInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatInfo::InternalSwap(ChatInfo* other) {
  std::swap(chat_type_, other->chat_type_);
  chat_info_.Swap(&other->chat_info_);
  std::swap(chat_time_, other->chat_time_);
  addtional_info_.Swap(&other->addtional_info_);
  std::swap(send_id_, other->send_id_);
  send_name_.Swap(&other->send_name_);
  std::swap(send_level_, other->send_level_);
  recvier_id_.UnsafeArenaSwap(&other->recvier_id_);
  guid_name_.Swap(&other->guid_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatInfo_descriptor_;
  metadata.reflection = ChatInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatInfo

// required .AFMsg.ChatInfo.EChatType chat_type = 1;
bool ChatInfo::has_chat_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatInfo::set_has_chat_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatInfo::clear_has_chat_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatInfo::clear_chat_type() {
  chat_type_ = 0;
  clear_has_chat_type();
}
 ::AFMsg::ChatInfo_EChatType ChatInfo::chat_type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatInfo.chat_type)
  return static_cast< ::AFMsg::ChatInfo_EChatType >(chat_type_);
}
 void ChatInfo::set_chat_type(::AFMsg::ChatInfo_EChatType value) {
  assert(::AFMsg::ChatInfo_EChatType_IsValid(value));
  set_has_chat_type();
  chat_type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ChatInfo.chat_type)
}

// required bytes chat_info = 2;
bool ChatInfo::has_chat_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChatInfo::set_has_chat_info() {
  _has_bits_[0] |= 0x00000002u;
}
void ChatInfo::clear_has_chat_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChatInfo::clear_chat_info() {
  chat_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chat_info();
}
 const ::std::string& ChatInfo::chat_info() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatInfo.chat_info)
  return chat_info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatInfo::set_chat_info(const ::std::string& value) {
  set_has_chat_info();
  chat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ChatInfo.chat_info)
}
 void ChatInfo::set_chat_info(const char* value) {
  set_has_chat_info();
  chat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ChatInfo.chat_info)
}
 void ChatInfo::set_chat_info(const void* value, size_t size) {
  set_has_chat_info();
  chat_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ChatInfo.chat_info)
}
 ::std::string* ChatInfo::mutable_chat_info() {
  set_has_chat_info();
  // @@protoc_insertion_point(field_mutable:AFMsg.ChatInfo.chat_info)
  return chat_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatInfo::release_chat_info() {
  // @@protoc_insertion_point(field_release:AFMsg.ChatInfo.chat_info)
  clear_has_chat_info();
  return chat_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatInfo::set_allocated_chat_info(::std::string* chat_info) {
  if (chat_info != NULL) {
    set_has_chat_info();
  } else {
    clear_has_chat_info();
  }
  chat_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chat_info);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ChatInfo.chat_info)
}

// required int64 chat_time = 3;
bool ChatInfo::has_chat_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChatInfo::set_has_chat_time() {
  _has_bits_[0] |= 0x00000004u;
}
void ChatInfo::clear_has_chat_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChatInfo::clear_chat_time() {
  chat_time_ = GOOGLE_LONGLONG(0);
  clear_has_chat_time();
}
 ::google::protobuf::int64 ChatInfo::chat_time() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatInfo.chat_time)
  return chat_time_;
}
 void ChatInfo::set_chat_time(::google::protobuf::int64 value) {
  set_has_chat_time();
  chat_time_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ChatInfo.chat_time)
}

// optional bytes addtional_info = 4;
bool ChatInfo::has_addtional_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChatInfo::set_has_addtional_info() {
  _has_bits_[0] |= 0x00000008u;
}
void ChatInfo::clear_has_addtional_info() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChatInfo::clear_addtional_info() {
  addtional_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_addtional_info();
}
 const ::std::string& ChatInfo::addtional_info() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatInfo.addtional_info)
  return addtional_info_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatInfo::set_addtional_info(const ::std::string& value) {
  set_has_addtional_info();
  addtional_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ChatInfo.addtional_info)
}
 void ChatInfo::set_addtional_info(const char* value) {
  set_has_addtional_info();
  addtional_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ChatInfo.addtional_info)
}
 void ChatInfo::set_addtional_info(const void* value, size_t size) {
  set_has_addtional_info();
  addtional_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ChatInfo.addtional_info)
}
 ::std::string* ChatInfo::mutable_addtional_info() {
  set_has_addtional_info();
  // @@protoc_insertion_point(field_mutable:AFMsg.ChatInfo.addtional_info)
  return addtional_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatInfo::release_addtional_info() {
  // @@protoc_insertion_point(field_release:AFMsg.ChatInfo.addtional_info)
  clear_has_addtional_info();
  return addtional_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatInfo::set_allocated_addtional_info(::std::string* addtional_info) {
  if (addtional_info != NULL) {
    set_has_addtional_info();
  } else {
    clear_has_addtional_info();
  }
  addtional_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addtional_info);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ChatInfo.addtional_info)
}

// required .AFMsg.Ident send_id = 5;
bool ChatInfo::has_send_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChatInfo::set_has_send_id() {
  _has_bits_[0] |= 0x00000010u;
}
void ChatInfo::clear_has_send_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChatInfo::clear_send_id() {
  if (send_id_ != NULL) send_id_->::AFMsg::Ident::Clear();
  clear_has_send_id();
}
const ::AFMsg::Ident& ChatInfo::send_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatInfo.send_id)
  return send_id_ != NULL ? *send_id_ : *default_instance_->send_id_;
}
::AFMsg::Ident* ChatInfo::mutable_send_id() {
  set_has_send_id();
  if (send_id_ == NULL) {
    send_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ChatInfo.send_id)
  return send_id_;
}
::AFMsg::Ident* ChatInfo::release_send_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ChatInfo.send_id)
  clear_has_send_id();
  ::AFMsg::Ident* temp = send_id_;
  send_id_ = NULL;
  return temp;
}
void ChatInfo::set_allocated_send_id(::AFMsg::Ident* send_id) {
  delete send_id_;
  send_id_ = send_id;
  if (send_id) {
    set_has_send_id();
  } else {
    clear_has_send_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ChatInfo.send_id)
}

// required bytes send_name = 6;
bool ChatInfo::has_send_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ChatInfo::set_has_send_name() {
  _has_bits_[0] |= 0x00000020u;
}
void ChatInfo::clear_has_send_name() {
  _has_bits_[0] &= ~0x00000020u;
}
void ChatInfo::clear_send_name() {
  send_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_send_name();
}
 const ::std::string& ChatInfo::send_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatInfo.send_name)
  return send_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatInfo::set_send_name(const ::std::string& value) {
  set_has_send_name();
  send_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ChatInfo.send_name)
}
 void ChatInfo::set_send_name(const char* value) {
  set_has_send_name();
  send_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ChatInfo.send_name)
}
 void ChatInfo::set_send_name(const void* value, size_t size) {
  set_has_send_name();
  send_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ChatInfo.send_name)
}
 ::std::string* ChatInfo::mutable_send_name() {
  set_has_send_name();
  // @@protoc_insertion_point(field_mutable:AFMsg.ChatInfo.send_name)
  return send_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatInfo::release_send_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ChatInfo.send_name)
  clear_has_send_name();
  return send_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatInfo::set_allocated_send_name(::std::string* send_name) {
  if (send_name != NULL) {
    set_has_send_name();
  } else {
    clear_has_send_name();
  }
  send_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), send_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ChatInfo.send_name)
}

// optional int32 send_level = 7;
bool ChatInfo::has_send_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ChatInfo::set_has_send_level() {
  _has_bits_[0] |= 0x00000040u;
}
void ChatInfo::clear_has_send_level() {
  _has_bits_[0] &= ~0x00000040u;
}
void ChatInfo::clear_send_level() {
  send_level_ = 0;
  clear_has_send_level();
}
 ::google::protobuf::int32 ChatInfo::send_level() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatInfo.send_level)
  return send_level_;
}
 void ChatInfo::set_send_level(::google::protobuf::int32 value) {
  set_has_send_level();
  send_level_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ChatInfo.send_level)
}

// repeated .AFMsg.Ident recvier_id = 8;
int ChatInfo::recvier_id_size() const {
  return recvier_id_.size();
}
void ChatInfo::clear_recvier_id() {
  recvier_id_.Clear();
}
const ::AFMsg::Ident& ChatInfo::recvier_id(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatInfo.recvier_id)
  return recvier_id_.Get(index);
}
::AFMsg::Ident* ChatInfo::mutable_recvier_id(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ChatInfo.recvier_id)
  return recvier_id_.Mutable(index);
}
::AFMsg::Ident* ChatInfo::add_recvier_id() {
  // @@protoc_insertion_point(field_add:AFMsg.ChatInfo.recvier_id)
  return recvier_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
ChatInfo::mutable_recvier_id() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ChatInfo.recvier_id)
  return &recvier_id_;
}
const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
ChatInfo::recvier_id() const {
  // @@protoc_insertion_point(field_list:AFMsg.ChatInfo.recvier_id)
  return recvier_id_;
}

// optional bytes guid_name = 9;
bool ChatInfo::has_guid_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ChatInfo::set_has_guid_name() {
  _has_bits_[0] |= 0x00000100u;
}
void ChatInfo::clear_has_guid_name() {
  _has_bits_[0] &= ~0x00000100u;
}
void ChatInfo::clear_guid_name() {
  guid_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guid_name();
}
 const ::std::string& ChatInfo::guid_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ChatInfo.guid_name)
  return guid_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatInfo::set_guid_name(const ::std::string& value) {
  set_has_guid_name();
  guid_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ChatInfo.guid_name)
}
 void ChatInfo::set_guid_name(const char* value) {
  set_has_guid_name();
  guid_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ChatInfo.guid_name)
}
 void ChatInfo::set_guid_name(const void* value, size_t size) {
  set_has_guid_name();
  guid_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ChatInfo.guid_name)
}
 ::std::string* ChatInfo::mutable_guid_name() {
  set_has_guid_name();
  // @@protoc_insertion_point(field_mutable:AFMsg.ChatInfo.guid_name)
  return guid_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatInfo::release_guid_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ChatInfo.guid_name)
  clear_has_guid_name();
  return guid_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatInfo::set_allocated_guid_name(::std::string* guid_name) {
  if (guid_name != NULL) {
    set_has_guid_name();
  } else {
    clear_has_guid_name();
  }
  guid_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guid_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ChatInfo.guid_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckCreateChatGroup::kNameFieldNumber;
const int ReqAckCreateChatGroup::kSelfidFieldNumber;
const int ReqAckCreateChatGroup::kXChatGroupidFieldNumber;
const int ReqAckCreateChatGroup::kChatTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckCreateChatGroup::ReqAckCreateChatGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckCreateChatGroup)
}

void ReqAckCreateChatGroup::InitAsDefaultInstance() {
  selfid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  xchatgroupid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqAckCreateChatGroup::ReqAckCreateChatGroup(const ReqAckCreateChatGroup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckCreateChatGroup)
}

void ReqAckCreateChatGroup::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  selfid_ = NULL;
  xchatgroupid_ = NULL;
  chattype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckCreateChatGroup::~ReqAckCreateChatGroup() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckCreateChatGroup)
  SharedDtor();
}

void ReqAckCreateChatGroup::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete selfid_;
    delete xchatgroupid_;
  }
}

void ReqAckCreateChatGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckCreateChatGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckCreateChatGroup_descriptor_;
}

const ReqAckCreateChatGroup& ReqAckCreateChatGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckCreateChatGroup* ReqAckCreateChatGroup::default_instance_ = NULL;

ReqAckCreateChatGroup* ReqAckCreateChatGroup::New(::google::protobuf::Arena* arena) const {
  ReqAckCreateChatGroup* n = new ReqAckCreateChatGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckCreateChatGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckCreateChatGroup)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
    }
    if (has_xchatgroupid()) {
      if (xchatgroupid_ != NULL) xchatgroupid_->::AFMsg::Ident::Clear();
    }
    chattype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqAckCreateChatGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckCreateChatGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_selfid;
        break;
      }

      // required .AFMsg.Ident selfid = 2;
      case 2: {
        if (tag == 18) {
         parse_selfid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_xChatGroupid;
        break;
      }

      // optional .AFMsg.Ident xChatGroupid = 3;
      case 3: {
        if (tag == 26) {
         parse_xChatGroupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xchatgroupid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_chatType;
        break;
      }

      // optional int32 chatType = 4;
      case 4: {
        if (tag == 32) {
         parse_chatType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chattype_)));
          set_has_chattype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckCreateChatGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckCreateChatGroup)
  return false;
#undef DO_
}

void ReqAckCreateChatGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckCreateChatGroup)
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // required .AFMsg.Ident selfid = 2;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->selfid_, output);
  }

  // optional .AFMsg.Ident xChatGroupid = 3;
  if (has_xchatgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->xchatgroupid_, output);
  }

  // optional int32 chatType = 4;
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chattype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckCreateChatGroup)
}

::google::protobuf::uint8* ReqAckCreateChatGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckCreateChatGroup)
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // required .AFMsg.Ident selfid = 2;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->selfid_, false, target);
  }

  // optional .AFMsg.Ident xChatGroupid = 3;
  if (has_xchatgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->xchatgroupid_, false, target);
  }

  // optional int32 chatType = 4;
  if (has_chattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chattype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckCreateChatGroup)
  return target;
}

int ReqAckCreateChatGroup::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqAckCreateChatGroup)
  int total_size = 0;

  if (has_name()) {
    // required bytes name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  if (has_selfid()) {
    // required .AFMsg.Ident selfid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);
  }

  return total_size;
}
int ReqAckCreateChatGroup::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckCreateChatGroup)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());

    // required .AFMsg.Ident selfid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 12u) {
    // optional .AFMsg.Ident xChatGroupid = 3;
    if (has_xchatgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->xchatgroupid_);
    }

    // optional int32 chatType = 4;
    if (has_chattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chattype());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckCreateChatGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckCreateChatGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqAckCreateChatGroup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckCreateChatGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckCreateChatGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckCreateChatGroup)
    MergeFrom(*source);
  }
}

void ReqAckCreateChatGroup::MergeFrom(const ReqAckCreateChatGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckCreateChatGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_selfid()) {
      mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_xchatgroupid()) {
      mutable_xchatgroupid()->::AFMsg::Ident::MergeFrom(from.xchatgroupid());
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqAckCreateChatGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckCreateChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckCreateChatGroup::CopyFrom(const ReqAckCreateChatGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckCreateChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckCreateChatGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_selfid()) {
    if (!this->selfid_->IsInitialized()) return false;
  }
  if (has_xchatgroupid()) {
    if (!this->xchatgroupid_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckCreateChatGroup::Swap(ReqAckCreateChatGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckCreateChatGroup::InternalSwap(ReqAckCreateChatGroup* other) {
  name_.Swap(&other->name_);
  std::swap(selfid_, other->selfid_);
  std::swap(xchatgroupid_, other->xchatgroupid_);
  std::swap(chattype_, other->chattype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckCreateChatGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckCreateChatGroup_descriptor_;
  metadata.reflection = ReqAckCreateChatGroup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAckCreateChatGroup

// required bytes name = 1;
bool ReqAckCreateChatGroup::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqAckCreateChatGroup::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqAckCreateChatGroup::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqAckCreateChatGroup::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& ReqAckCreateChatGroup::name() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckCreateChatGroup.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqAckCreateChatGroup::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckCreateChatGroup.name)
}
 void ReqAckCreateChatGroup::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqAckCreateChatGroup.name)
}
 void ReqAckCreateChatGroup::set_name(const void* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqAckCreateChatGroup.name)
}
 ::std::string* ReqAckCreateChatGroup::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckCreateChatGroup.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReqAckCreateChatGroup::release_name() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckCreateChatGroup.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqAckCreateChatGroup::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckCreateChatGroup.name)
}

// required .AFMsg.Ident selfid = 2;
bool ReqAckCreateChatGroup::has_selfid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqAckCreateChatGroup::set_has_selfid() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqAckCreateChatGroup::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqAckCreateChatGroup::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
const ::AFMsg::Ident& ReqAckCreateChatGroup::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckCreateChatGroup.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
::AFMsg::Ident* ReqAckCreateChatGroup::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckCreateChatGroup.selfid)
  return selfid_;
}
::AFMsg::Ident* ReqAckCreateChatGroup::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckCreateChatGroup.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
void ReqAckCreateChatGroup::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckCreateChatGroup.selfid)
}

// optional .AFMsg.Ident xChatGroupid = 3;
bool ReqAckCreateChatGroup::has_xchatgroupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqAckCreateChatGroup::set_has_xchatgroupid() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqAckCreateChatGroup::clear_has_xchatgroupid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqAckCreateChatGroup::clear_xchatgroupid() {
  if (xchatgroupid_ != NULL) xchatgroupid_->::AFMsg::Ident::Clear();
  clear_has_xchatgroupid();
}
const ::AFMsg::Ident& ReqAckCreateChatGroup::xchatgroupid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckCreateChatGroup.xChatGroupid)
  return xchatgroupid_ != NULL ? *xchatgroupid_ : *default_instance_->xchatgroupid_;
}
::AFMsg::Ident* ReqAckCreateChatGroup::mutable_xchatgroupid() {
  set_has_xchatgroupid();
  if (xchatgroupid_ == NULL) {
    xchatgroupid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckCreateChatGroup.xChatGroupid)
  return xchatgroupid_;
}
::AFMsg::Ident* ReqAckCreateChatGroup::release_xchatgroupid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckCreateChatGroup.xChatGroupid)
  clear_has_xchatgroupid();
  ::AFMsg::Ident* temp = xchatgroupid_;
  xchatgroupid_ = NULL;
  return temp;
}
void ReqAckCreateChatGroup::set_allocated_xchatgroupid(::AFMsg::Ident* xchatgroupid) {
  delete xchatgroupid_;
  xchatgroupid_ = xchatgroupid;
  if (xchatgroupid) {
    set_has_xchatgroupid();
  } else {
    clear_has_xchatgroupid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckCreateChatGroup.xChatGroupid)
}

// optional int32 chatType = 4;
bool ReqAckCreateChatGroup::has_chattype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReqAckCreateChatGroup::set_has_chattype() {
  _has_bits_[0] |= 0x00000008u;
}
void ReqAckCreateChatGroup::clear_has_chattype() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReqAckCreateChatGroup::clear_chattype() {
  chattype_ = 0;
  clear_has_chattype();
}
 ::google::protobuf::int32 ReqAckCreateChatGroup::chattype() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckCreateChatGroup.chatType)
  return chattype_;
}
 void ReqAckCreateChatGroup::set_chattype(::google::protobuf::int32 value) {
  set_has_chattype();
  chattype_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckCreateChatGroup.chatType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckjoinChatGroup::kSelfidFieldNumber;
const int ReqAckjoinChatGroup::kXChatGroupidFieldNumber;
const int ReqAckjoinChatGroup::kResultFieldNumber;
const int ReqAckjoinChatGroup::kChatTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckjoinChatGroup::ReqAckjoinChatGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckjoinChatGroup)
}

void ReqAckjoinChatGroup::InitAsDefaultInstance() {
  selfid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  xchatgroupid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqAckjoinChatGroup::ReqAckjoinChatGroup(const ReqAckjoinChatGroup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckjoinChatGroup)
}

void ReqAckjoinChatGroup::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  xchatgroupid_ = NULL;
  result_ = GOOGLE_LONGLONG(0);
  chattype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckjoinChatGroup::~ReqAckjoinChatGroup() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckjoinChatGroup)
  SharedDtor();
}

void ReqAckjoinChatGroup::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete xchatgroupid_;
  }
}

void ReqAckjoinChatGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckjoinChatGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckjoinChatGroup_descriptor_;
}

const ReqAckjoinChatGroup& ReqAckjoinChatGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckjoinChatGroup* ReqAckjoinChatGroup::default_instance_ = NULL;

ReqAckjoinChatGroup* ReqAckjoinChatGroup::New(::google::protobuf::Arena* arena) const {
  ReqAckjoinChatGroup* n = new ReqAckjoinChatGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckjoinChatGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckjoinChatGroup)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqAckjoinChatGroup, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqAckjoinChatGroup*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(result_, chattype_);
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
    }
    if (has_xchatgroupid()) {
      if (xchatgroupid_ != NULL) xchatgroupid_->::AFMsg::Ident::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqAckjoinChatGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckjoinChatGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident selfid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_xChatGroupid;
        break;
      }

      // optional .AFMsg.Ident xChatGroupid = 2;
      case 2: {
        if (tag == 18) {
         parse_xChatGroupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xchatgroupid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int64 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_chatType;
        break;
      }

      // optional int32 chatType = 4;
      case 4: {
        if (tag == 32) {
         parse_chatType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chattype_)));
          set_has_chattype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckjoinChatGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckjoinChatGroup)
  return false;
#undef DO_
}

void ReqAckjoinChatGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckjoinChatGroup)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->selfid_, output);
  }

  // optional .AFMsg.Ident xChatGroupid = 2;
  if (has_xchatgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->xchatgroupid_, output);
  }

  // optional int64 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->result(), output);
  }

  // optional int32 chatType = 4;
  if (has_chattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->chattype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckjoinChatGroup)
}

::google::protobuf::uint8* ReqAckjoinChatGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckjoinChatGroup)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->selfid_, false, target);
  }

  // optional .AFMsg.Ident xChatGroupid = 2;
  if (has_xchatgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->xchatgroupid_, false, target);
  }

  // optional int64 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->result(), target);
  }

  // optional int32 chatType = 4;
  if (has_chattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->chattype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckjoinChatGroup)
  return target;
}

int ReqAckjoinChatGroup::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckjoinChatGroup)
  int total_size = 0;

  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);
  }
  if (_has_bits_[1 / 32] & 14u) {
    // optional .AFMsg.Ident xChatGroupid = 2;
    if (has_xchatgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->xchatgroupid_);
    }

    // optional int64 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->result());
    }

    // optional int32 chatType = 4;
    if (has_chattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chattype());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckjoinChatGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckjoinChatGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqAckjoinChatGroup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckjoinChatGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckjoinChatGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckjoinChatGroup)
    MergeFrom(*source);
  }
}

void ReqAckjoinChatGroup::MergeFrom(const ReqAckjoinChatGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckjoinChatGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_xchatgroupid()) {
      mutable_xchatgroupid()->::AFMsg::Ident::MergeFrom(from.xchatgroupid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_chattype()) {
      set_chattype(from.chattype());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqAckjoinChatGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckjoinChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckjoinChatGroup::CopyFrom(const ReqAckjoinChatGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckjoinChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckjoinChatGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_selfid()) {
    if (!this->selfid_->IsInitialized()) return false;
  }
  if (has_xchatgroupid()) {
    if (!this->xchatgroupid_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckjoinChatGroup::Swap(ReqAckjoinChatGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckjoinChatGroup::InternalSwap(ReqAckjoinChatGroup* other) {
  std::swap(selfid_, other->selfid_);
  std::swap(xchatgroupid_, other->xchatgroupid_);
  std::swap(result_, other->result_);
  std::swap(chattype_, other->chattype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckjoinChatGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckjoinChatGroup_descriptor_;
  metadata.reflection = ReqAckjoinChatGroup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAckjoinChatGroup

// required .AFMsg.Ident selfid = 1;
bool ReqAckjoinChatGroup::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqAckjoinChatGroup::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqAckjoinChatGroup::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqAckjoinChatGroup::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
const ::AFMsg::Ident& ReqAckjoinChatGroup::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckjoinChatGroup.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
::AFMsg::Ident* ReqAckjoinChatGroup::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckjoinChatGroup.selfid)
  return selfid_;
}
::AFMsg::Ident* ReqAckjoinChatGroup::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckjoinChatGroup.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
void ReqAckjoinChatGroup::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckjoinChatGroup.selfid)
}

// optional .AFMsg.Ident xChatGroupid = 2;
bool ReqAckjoinChatGroup::has_xchatgroupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqAckjoinChatGroup::set_has_xchatgroupid() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqAckjoinChatGroup::clear_has_xchatgroupid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqAckjoinChatGroup::clear_xchatgroupid() {
  if (xchatgroupid_ != NULL) xchatgroupid_->::AFMsg::Ident::Clear();
  clear_has_xchatgroupid();
}
const ::AFMsg::Ident& ReqAckjoinChatGroup::xchatgroupid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckjoinChatGroup.xChatGroupid)
  return xchatgroupid_ != NULL ? *xchatgroupid_ : *default_instance_->xchatgroupid_;
}
::AFMsg::Ident* ReqAckjoinChatGroup::mutable_xchatgroupid() {
  set_has_xchatgroupid();
  if (xchatgroupid_ == NULL) {
    xchatgroupid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckjoinChatGroup.xChatGroupid)
  return xchatgroupid_;
}
::AFMsg::Ident* ReqAckjoinChatGroup::release_xchatgroupid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckjoinChatGroup.xChatGroupid)
  clear_has_xchatgroupid();
  ::AFMsg::Ident* temp = xchatgroupid_;
  xchatgroupid_ = NULL;
  return temp;
}
void ReqAckjoinChatGroup::set_allocated_xchatgroupid(::AFMsg::Ident* xchatgroupid) {
  delete xchatgroupid_;
  xchatgroupid_ = xchatgroupid;
  if (xchatgroupid) {
    set_has_xchatgroupid();
  } else {
    clear_has_xchatgroupid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckjoinChatGroup.xChatGroupid)
}

// optional int64 result = 3;
bool ReqAckjoinChatGroup::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqAckjoinChatGroup::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqAckjoinChatGroup::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqAckjoinChatGroup::clear_result() {
  result_ = GOOGLE_LONGLONG(0);
  clear_has_result();
}
 ::google::protobuf::int64 ReqAckjoinChatGroup::result() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckjoinChatGroup.result)
  return result_;
}
 void ReqAckjoinChatGroup::set_result(::google::protobuf::int64 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckjoinChatGroup.result)
}

// optional int32 chatType = 4;
bool ReqAckjoinChatGroup::has_chattype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReqAckjoinChatGroup::set_has_chattype() {
  _has_bits_[0] |= 0x00000008u;
}
void ReqAckjoinChatGroup::clear_has_chattype() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReqAckjoinChatGroup::clear_chattype() {
  chattype_ = 0;
  clear_has_chattype();
}
 ::google::protobuf::int32 ReqAckjoinChatGroup::chattype() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckjoinChatGroup.chatType)
  return chattype_;
}
 void ReqAckjoinChatGroup::set_chattype(::google::protobuf::int32 value) {
  set_has_chattype();
  chattype_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckjoinChatGroup.chatType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckQuitChatGroup::kSelfidFieldNumber;
const int ReqAckQuitChatGroup::kXChatGroupidFieldNumber;
const int ReqAckQuitChatGroup::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckQuitChatGroup::ReqAckQuitChatGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckQuitChatGroup)
}

void ReqAckQuitChatGroup::InitAsDefaultInstance() {
  selfid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  xchatgroupid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqAckQuitChatGroup::ReqAckQuitChatGroup(const ReqAckQuitChatGroup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckQuitChatGroup)
}

void ReqAckQuitChatGroup::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  xchatgroupid_ = NULL;
  result_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckQuitChatGroup::~ReqAckQuitChatGroup() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckQuitChatGroup)
  SharedDtor();
}

void ReqAckQuitChatGroup::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete xchatgroupid_;
  }
}

void ReqAckQuitChatGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckQuitChatGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckQuitChatGroup_descriptor_;
}

const ReqAckQuitChatGroup& ReqAckQuitChatGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckQuitChatGroup* ReqAckQuitChatGroup::default_instance_ = NULL;

ReqAckQuitChatGroup* ReqAckQuitChatGroup::New(::google::protobuf::Arena* arena) const {
  ReqAckQuitChatGroup* n = new ReqAckQuitChatGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckQuitChatGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckQuitChatGroup)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
    }
    if (has_xchatgroupid()) {
      if (xchatgroupid_ != NULL) xchatgroupid_->::AFMsg::Ident::Clear();
    }
    result_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqAckQuitChatGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckQuitChatGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident selfid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_xChatGroupid;
        break;
      }

      // optional .AFMsg.Ident xChatGroupid = 2;
      case 2: {
        if (tag == 18) {
         parse_xChatGroupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xchatgroupid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int64 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckQuitChatGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckQuitChatGroup)
  return false;
#undef DO_
}

void ReqAckQuitChatGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckQuitChatGroup)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->selfid_, output);
  }

  // optional .AFMsg.Ident xChatGroupid = 2;
  if (has_xchatgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->xchatgroupid_, output);
  }

  // optional int64 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckQuitChatGroup)
}

::google::protobuf::uint8* ReqAckQuitChatGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckQuitChatGroup)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->selfid_, false, target);
  }

  // optional .AFMsg.Ident xChatGroupid = 2;
  if (has_xchatgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->xchatgroupid_, false, target);
  }

  // optional int64 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckQuitChatGroup)
  return target;
}

int ReqAckQuitChatGroup::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckQuitChatGroup)
  int total_size = 0;

  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional .AFMsg.Ident xChatGroupid = 2;
    if (has_xchatgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->xchatgroupid_);
    }

    // optional int64 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->result());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckQuitChatGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckQuitChatGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqAckQuitChatGroup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckQuitChatGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckQuitChatGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckQuitChatGroup)
    MergeFrom(*source);
  }
}

void ReqAckQuitChatGroup::MergeFrom(const ReqAckQuitChatGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckQuitChatGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_xchatgroupid()) {
      mutable_xchatgroupid()->::AFMsg::Ident::MergeFrom(from.xchatgroupid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqAckQuitChatGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckQuitChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckQuitChatGroup::CopyFrom(const ReqAckQuitChatGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckQuitChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckQuitChatGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_selfid()) {
    if (!this->selfid_->IsInitialized()) return false;
  }
  if (has_xchatgroupid()) {
    if (!this->xchatgroupid_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckQuitChatGroup::Swap(ReqAckQuitChatGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckQuitChatGroup::InternalSwap(ReqAckQuitChatGroup* other) {
  std::swap(selfid_, other->selfid_);
  std::swap(xchatgroupid_, other->xchatgroupid_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckQuitChatGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckQuitChatGroup_descriptor_;
  metadata.reflection = ReqAckQuitChatGroup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAckQuitChatGroup

// required .AFMsg.Ident selfid = 1;
bool ReqAckQuitChatGroup::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqAckQuitChatGroup::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqAckQuitChatGroup::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqAckQuitChatGroup::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
const ::AFMsg::Ident& ReqAckQuitChatGroup::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckQuitChatGroup.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
::AFMsg::Ident* ReqAckQuitChatGroup::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckQuitChatGroup.selfid)
  return selfid_;
}
::AFMsg::Ident* ReqAckQuitChatGroup::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckQuitChatGroup.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
void ReqAckQuitChatGroup::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckQuitChatGroup.selfid)
}

// optional .AFMsg.Ident xChatGroupid = 2;
bool ReqAckQuitChatGroup::has_xchatgroupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqAckQuitChatGroup::set_has_xchatgroupid() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqAckQuitChatGroup::clear_has_xchatgroupid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqAckQuitChatGroup::clear_xchatgroupid() {
  if (xchatgroupid_ != NULL) xchatgroupid_->::AFMsg::Ident::Clear();
  clear_has_xchatgroupid();
}
const ::AFMsg::Ident& ReqAckQuitChatGroup::xchatgroupid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckQuitChatGroup.xChatGroupid)
  return xchatgroupid_ != NULL ? *xchatgroupid_ : *default_instance_->xchatgroupid_;
}
::AFMsg::Ident* ReqAckQuitChatGroup::mutable_xchatgroupid() {
  set_has_xchatgroupid();
  if (xchatgroupid_ == NULL) {
    xchatgroupid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckQuitChatGroup.xChatGroupid)
  return xchatgroupid_;
}
::AFMsg::Ident* ReqAckQuitChatGroup::release_xchatgroupid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckQuitChatGroup.xChatGroupid)
  clear_has_xchatgroupid();
  ::AFMsg::Ident* temp = xchatgroupid_;
  xchatgroupid_ = NULL;
  return temp;
}
void ReqAckQuitChatGroup::set_allocated_xchatgroupid(::AFMsg::Ident* xchatgroupid) {
  delete xchatgroupid_;
  xchatgroupid_ = xchatgroupid;
  if (xchatgroupid) {
    set_has_xchatgroupid();
  } else {
    clear_has_xchatgroupid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckQuitChatGroup.xChatGroupid)
}

// optional int64 result = 3;
bool ReqAckQuitChatGroup::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqAckQuitChatGroup::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqAckQuitChatGroup::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqAckQuitChatGroup::clear_result() {
  result_ = GOOGLE_LONGLONG(0);
  clear_has_result();
}
 ::google::protobuf::int64 ReqAckQuitChatGroup::result() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckQuitChatGroup.result)
  return result_;
}
 void ReqAckQuitChatGroup::set_result(::google::protobuf::int64 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckQuitChatGroup.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSubscriptionChatGroup::kSelfidFieldNumber;
const int ReqSubscriptionChatGroup::kXChatGroupidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSubscriptionChatGroup::ReqSubscriptionChatGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqSubscriptionChatGroup)
}

void ReqSubscriptionChatGroup::InitAsDefaultInstance() {
  selfid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqSubscriptionChatGroup::ReqSubscriptionChatGroup(const ReqSubscriptionChatGroup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqSubscriptionChatGroup)
}

void ReqSubscriptionChatGroup::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSubscriptionChatGroup::~ReqSubscriptionChatGroup() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqSubscriptionChatGroup)
  SharedDtor();
}

void ReqSubscriptionChatGroup::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
  }
}

void ReqSubscriptionChatGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSubscriptionChatGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSubscriptionChatGroup_descriptor_;
}

const ReqSubscriptionChatGroup& ReqSubscriptionChatGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqSubscriptionChatGroup* ReqSubscriptionChatGroup::default_instance_ = NULL;

ReqSubscriptionChatGroup* ReqSubscriptionChatGroup::New(::google::protobuf::Arena* arena) const {
  ReqSubscriptionChatGroup* n = new ReqSubscriptionChatGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqSubscriptionChatGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqSubscriptionChatGroup)
  if (has_selfid()) {
    if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  }
  xchatgroupid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqSubscriptionChatGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqSubscriptionChatGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident selfid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_xChatGroupid;
        break;
      }

      // repeated .AFMsg.Ident xChatGroupid = 2;
      case 2: {
        if (tag == 18) {
         parse_xChatGroupid:
          DO_(input->IncrementRecursionDepth());
         parse_loop_xChatGroupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_xchatgroupid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_xChatGroupid;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqSubscriptionChatGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqSubscriptionChatGroup)
  return false;
#undef DO_
}

void ReqSubscriptionChatGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqSubscriptionChatGroup)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->selfid_, output);
  }

  // repeated .AFMsg.Ident xChatGroupid = 2;
  for (unsigned int i = 0, n = this->xchatgroupid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->xchatgroupid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqSubscriptionChatGroup)
}

::google::protobuf::uint8* ReqSubscriptionChatGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqSubscriptionChatGroup)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->selfid_, false, target);
  }

  // repeated .AFMsg.Ident xChatGroupid = 2;
  for (unsigned int i = 0, n = this->xchatgroupid_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->xchatgroupid(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqSubscriptionChatGroup)
  return target;
}

int ReqSubscriptionChatGroup::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqSubscriptionChatGroup)
  int total_size = 0;

  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);
  }
  // repeated .AFMsg.Ident xChatGroupid = 2;
  total_size += 1 * this->xchatgroupid_size();
  for (int i = 0; i < this->xchatgroupid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xchatgroupid(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSubscriptionChatGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqSubscriptionChatGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqSubscriptionChatGroup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqSubscriptionChatGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqSubscriptionChatGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqSubscriptionChatGroup)
    MergeFrom(*source);
  }
}

void ReqSubscriptionChatGroup::MergeFrom(const ReqSubscriptionChatGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqSubscriptionChatGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  xchatgroupid_.MergeFrom(from.xchatgroupid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqSubscriptionChatGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqSubscriptionChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSubscriptionChatGroup::CopyFrom(const ReqSubscriptionChatGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqSubscriptionChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSubscriptionChatGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_selfid()) {
    if (!this->selfid_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->xchatgroupid())) return false;
  return true;
}

void ReqSubscriptionChatGroup::Swap(ReqSubscriptionChatGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSubscriptionChatGroup::InternalSwap(ReqSubscriptionChatGroup* other) {
  std::swap(selfid_, other->selfid_);
  xchatgroupid_.UnsafeArenaSwap(&other->xchatgroupid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqSubscriptionChatGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSubscriptionChatGroup_descriptor_;
  metadata.reflection = ReqSubscriptionChatGroup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqSubscriptionChatGroup

// required .AFMsg.Ident selfid = 1;
bool ReqSubscriptionChatGroup::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqSubscriptionChatGroup::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqSubscriptionChatGroup::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqSubscriptionChatGroup::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
const ::AFMsg::Ident& ReqSubscriptionChatGroup::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSubscriptionChatGroup.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
::AFMsg::Ident* ReqSubscriptionChatGroup::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSubscriptionChatGroup.selfid)
  return selfid_;
}
::AFMsg::Ident* ReqSubscriptionChatGroup::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqSubscriptionChatGroup.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
void ReqSubscriptionChatGroup::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqSubscriptionChatGroup.selfid)
}

// repeated .AFMsg.Ident xChatGroupid = 2;
int ReqSubscriptionChatGroup::xchatgroupid_size() const {
  return xchatgroupid_.size();
}
void ReqSubscriptionChatGroup::clear_xchatgroupid() {
  xchatgroupid_.Clear();
}
const ::AFMsg::Ident& ReqSubscriptionChatGroup::xchatgroupid(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSubscriptionChatGroup.xChatGroupid)
  return xchatgroupid_.Get(index);
}
::AFMsg::Ident* ReqSubscriptionChatGroup::mutable_xchatgroupid(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSubscriptionChatGroup.xChatGroupid)
  return xchatgroupid_.Mutable(index);
}
::AFMsg::Ident* ReqSubscriptionChatGroup::add_xchatgroupid() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqSubscriptionChatGroup.xChatGroupid)
  return xchatgroupid_.Add();
}
::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
ReqSubscriptionChatGroup::mutable_xchatgroupid() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqSubscriptionChatGroup.xChatGroupid)
  return &xchatgroupid_;
}
const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
ReqSubscriptionChatGroup::xchatgroupid() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqSubscriptionChatGroup.xChatGroupid)
  return xchatgroupid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqCancelSubscriptionChatGroup::kSelfidFieldNumber;
const int ReqCancelSubscriptionChatGroup::kXChatGroupidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqCancelSubscriptionChatGroup::ReqCancelSubscriptionChatGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqCancelSubscriptionChatGroup)
}

void ReqCancelSubscriptionChatGroup::InitAsDefaultInstance() {
  selfid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqCancelSubscriptionChatGroup::ReqCancelSubscriptionChatGroup(const ReqCancelSubscriptionChatGroup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqCancelSubscriptionChatGroup)
}

void ReqCancelSubscriptionChatGroup::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCancelSubscriptionChatGroup::~ReqCancelSubscriptionChatGroup() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqCancelSubscriptionChatGroup)
  SharedDtor();
}

void ReqCancelSubscriptionChatGroup::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
  }
}

void ReqCancelSubscriptionChatGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCancelSubscriptionChatGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCancelSubscriptionChatGroup_descriptor_;
}

const ReqCancelSubscriptionChatGroup& ReqCancelSubscriptionChatGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqCancelSubscriptionChatGroup* ReqCancelSubscriptionChatGroup::default_instance_ = NULL;

ReqCancelSubscriptionChatGroup* ReqCancelSubscriptionChatGroup::New(::google::protobuf::Arena* arena) const {
  ReqCancelSubscriptionChatGroup* n = new ReqCancelSubscriptionChatGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqCancelSubscriptionChatGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqCancelSubscriptionChatGroup)
  if (has_selfid()) {
    if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  }
  xchatgroupid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqCancelSubscriptionChatGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqCancelSubscriptionChatGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident selfid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_xChatGroupid;
        break;
      }

      // repeated .AFMsg.Ident xChatGroupid = 2;
      case 2: {
        if (tag == 18) {
         parse_xChatGroupid:
          DO_(input->IncrementRecursionDepth());
         parse_loop_xChatGroupid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_xchatgroupid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_xChatGroupid;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqCancelSubscriptionChatGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqCancelSubscriptionChatGroup)
  return false;
#undef DO_
}

void ReqCancelSubscriptionChatGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqCancelSubscriptionChatGroup)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->selfid_, output);
  }

  // repeated .AFMsg.Ident xChatGroupid = 2;
  for (unsigned int i = 0, n = this->xchatgroupid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->xchatgroupid(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqCancelSubscriptionChatGroup)
}

::google::protobuf::uint8* ReqCancelSubscriptionChatGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqCancelSubscriptionChatGroup)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->selfid_, false, target);
  }

  // repeated .AFMsg.Ident xChatGroupid = 2;
  for (unsigned int i = 0, n = this->xchatgroupid_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->xchatgroupid(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqCancelSubscriptionChatGroup)
  return target;
}

int ReqCancelSubscriptionChatGroup::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqCancelSubscriptionChatGroup)
  int total_size = 0;

  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);
  }
  // repeated .AFMsg.Ident xChatGroupid = 2;
  total_size += 1 * this->xchatgroupid_size();
  for (int i = 0; i < this->xchatgroupid_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xchatgroupid(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCancelSubscriptionChatGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqCancelSubscriptionChatGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqCancelSubscriptionChatGroup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqCancelSubscriptionChatGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqCancelSubscriptionChatGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqCancelSubscriptionChatGroup)
    MergeFrom(*source);
  }
}

void ReqCancelSubscriptionChatGroup::MergeFrom(const ReqCancelSubscriptionChatGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqCancelSubscriptionChatGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  xchatgroupid_.MergeFrom(from.xchatgroupid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqCancelSubscriptionChatGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqCancelSubscriptionChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCancelSubscriptionChatGroup::CopyFrom(const ReqCancelSubscriptionChatGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqCancelSubscriptionChatGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCancelSubscriptionChatGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_selfid()) {
    if (!this->selfid_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->xchatgroupid())) return false;
  return true;
}

void ReqCancelSubscriptionChatGroup::Swap(ReqCancelSubscriptionChatGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqCancelSubscriptionChatGroup::InternalSwap(ReqCancelSubscriptionChatGroup* other) {
  std::swap(selfid_, other->selfid_);
  xchatgroupid_.UnsafeArenaSwap(&other->xchatgroupid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqCancelSubscriptionChatGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCancelSubscriptionChatGroup_descriptor_;
  metadata.reflection = ReqCancelSubscriptionChatGroup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqCancelSubscriptionChatGroup

// required .AFMsg.Ident selfid = 1;
bool ReqCancelSubscriptionChatGroup::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqCancelSubscriptionChatGroup::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqCancelSubscriptionChatGroup::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqCancelSubscriptionChatGroup::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
const ::AFMsg::Ident& ReqCancelSubscriptionChatGroup::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqCancelSubscriptionChatGroup.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
::AFMsg::Ident* ReqCancelSubscriptionChatGroup::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqCancelSubscriptionChatGroup.selfid)
  return selfid_;
}
::AFMsg::Ident* ReqCancelSubscriptionChatGroup::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqCancelSubscriptionChatGroup.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
void ReqCancelSubscriptionChatGroup::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqCancelSubscriptionChatGroup.selfid)
}

// repeated .AFMsg.Ident xChatGroupid = 2;
int ReqCancelSubscriptionChatGroup::xchatgroupid_size() const {
  return xchatgroupid_.size();
}
void ReqCancelSubscriptionChatGroup::clear_xchatgroupid() {
  xchatgroupid_.Clear();
}
const ::AFMsg::Ident& ReqCancelSubscriptionChatGroup::xchatgroupid(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqCancelSubscriptionChatGroup.xChatGroupid)
  return xchatgroupid_.Get(index);
}
::AFMsg::Ident* ReqCancelSubscriptionChatGroup::mutable_xchatgroupid(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqCancelSubscriptionChatGroup.xChatGroupid)
  return xchatgroupid_.Mutable(index);
}
::AFMsg::Ident* ReqCancelSubscriptionChatGroup::add_xchatgroupid() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqCancelSubscriptionChatGroup.xChatGroupid)
  return xchatgroupid_.Add();
}
::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
ReqCancelSubscriptionChatGroup::mutable_xchatgroupid() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqCancelSubscriptionChatGroup.xChatGroupid)
  return &xchatgroupid_;
}
const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
ReqCancelSubscriptionChatGroup::xchatgroupid() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqCancelSubscriptionChatGroup.xChatGroupid)
  return xchatgroupid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqIntensifylevelToEquip::kSelfidFieldNumber;
const int ReqIntensifylevelToEquip::kEquipidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqIntensifylevelToEquip::ReqIntensifylevelToEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqIntensifylevelToEquip)
}

void ReqIntensifylevelToEquip::InitAsDefaultInstance() {
  selfid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  equipid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqIntensifylevelToEquip::ReqIntensifylevelToEquip(const ReqIntensifylevelToEquip& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqIntensifylevelToEquip)
}

void ReqIntensifylevelToEquip::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  equipid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqIntensifylevelToEquip::~ReqIntensifylevelToEquip() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqIntensifylevelToEquip)
  SharedDtor();
}

void ReqIntensifylevelToEquip::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete equipid_;
  }
}

void ReqIntensifylevelToEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqIntensifylevelToEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqIntensifylevelToEquip_descriptor_;
}

const ReqIntensifylevelToEquip& ReqIntensifylevelToEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqIntensifylevelToEquip* ReqIntensifylevelToEquip::default_instance_ = NULL;

ReqIntensifylevelToEquip* ReqIntensifylevelToEquip::New(::google::protobuf::Arena* arena) const {
  ReqIntensifylevelToEquip* n = new ReqIntensifylevelToEquip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqIntensifylevelToEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqIntensifylevelToEquip)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
    }
    if (has_equipid()) {
      if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqIntensifylevelToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqIntensifylevelToEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident selfid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equipid;
        break;
      }

      // required .AFMsg.Ident equipid = 2;
      case 2: {
        if (tag == 18) {
         parse_equipid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqIntensifylevelToEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqIntensifylevelToEquip)
  return false;
#undef DO_
}

void ReqIntensifylevelToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqIntensifylevelToEquip)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->selfid_, output);
  }

  // required .AFMsg.Ident equipid = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->equipid_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqIntensifylevelToEquip)
}

::google::protobuf::uint8* ReqIntensifylevelToEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqIntensifylevelToEquip)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->selfid_, false, target);
  }

  // required .AFMsg.Ident equipid = 2;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->equipid_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqIntensifylevelToEquip)
  return target;
}

int ReqIntensifylevelToEquip::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqIntensifylevelToEquip)
  int total_size = 0;

  if (has_selfid()) {
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);
  }

  if (has_equipid()) {
    // required .AFMsg.Ident equipid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->equipid_);
  }

  return total_size;
}
int ReqIntensifylevelToEquip::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqIntensifylevelToEquip)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);

    // required .AFMsg.Ident equipid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->equipid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqIntensifylevelToEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqIntensifylevelToEquip)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqIntensifylevelToEquip* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqIntensifylevelToEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqIntensifylevelToEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqIntensifylevelToEquip)
    MergeFrom(*source);
  }
}

void ReqIntensifylevelToEquip::MergeFrom(const ReqIntensifylevelToEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqIntensifylevelToEquip)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_equipid()) {
      mutable_equipid()->::AFMsg::Ident::MergeFrom(from.equipid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqIntensifylevelToEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqIntensifylevelToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqIntensifylevelToEquip::CopyFrom(const ReqIntensifylevelToEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqIntensifylevelToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqIntensifylevelToEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_selfid()) {
    if (!this->selfid_->IsInitialized()) return false;
  }
  if (has_equipid()) {
    if (!this->equipid_->IsInitialized()) return false;
  }
  return true;
}

void ReqIntensifylevelToEquip::Swap(ReqIntensifylevelToEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqIntensifylevelToEquip::InternalSwap(ReqIntensifylevelToEquip* other) {
  std::swap(selfid_, other->selfid_);
  std::swap(equipid_, other->equipid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqIntensifylevelToEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqIntensifylevelToEquip_descriptor_;
  metadata.reflection = ReqIntensifylevelToEquip_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqIntensifylevelToEquip

// required .AFMsg.Ident selfid = 1;
bool ReqIntensifylevelToEquip::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqIntensifylevelToEquip::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqIntensifylevelToEquip::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqIntensifylevelToEquip::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
const ::AFMsg::Ident& ReqIntensifylevelToEquip::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqIntensifylevelToEquip.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
::AFMsg::Ident* ReqIntensifylevelToEquip::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqIntensifylevelToEquip.selfid)
  return selfid_;
}
::AFMsg::Ident* ReqIntensifylevelToEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqIntensifylevelToEquip.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
void ReqIntensifylevelToEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqIntensifylevelToEquip.selfid)
}

// required .AFMsg.Ident equipid = 2;
bool ReqIntensifylevelToEquip::has_equipid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqIntensifylevelToEquip::set_has_equipid() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqIntensifylevelToEquip::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqIntensifylevelToEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
  clear_has_equipid();
}
const ::AFMsg::Ident& ReqIntensifylevelToEquip::equipid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqIntensifylevelToEquip.equipid)
  return equipid_ != NULL ? *equipid_ : *default_instance_->equipid_;
}
::AFMsg::Ident* ReqIntensifylevelToEquip::mutable_equipid() {
  set_has_equipid();
  if (equipid_ == NULL) {
    equipid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqIntensifylevelToEquip.equipid)
  return equipid_;
}
::AFMsg::Ident* ReqIntensifylevelToEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqIntensifylevelToEquip.equipid)
  clear_has_equipid();
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
void ReqIntensifylevelToEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  delete equipid_;
  equipid_ = equipid;
  if (equipid) {
    set_has_equipid();
  } else {
    clear_has_equipid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqIntensifylevelToEquip.equipid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckIntensifylevelToEquip::kSelfidFieldNumber;
const int AckIntensifylevelToEquip::kEquipidFieldNumber;
const int AckIntensifylevelToEquip::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckIntensifylevelToEquip::AckIntensifylevelToEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckIntensifylevelToEquip)
}

void AckIntensifylevelToEquip::InitAsDefaultInstance() {
  selfid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  equipid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

AckIntensifylevelToEquip::AckIntensifylevelToEquip(const AckIntensifylevelToEquip& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckIntensifylevelToEquip)
}

void AckIntensifylevelToEquip::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  equipid_ = NULL;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckIntensifylevelToEquip::~AckIntensifylevelToEquip() {
  // @@protoc_insertion_point(destructor:AFMsg.AckIntensifylevelToEquip)
  SharedDtor();
}

void AckIntensifylevelToEquip::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete equipid_;
  }
}

void AckIntensifylevelToEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckIntensifylevelToEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckIntensifylevelToEquip_descriptor_;
}

const AckIntensifylevelToEquip& AckIntensifylevelToEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

AckIntensifylevelToEquip* AckIntensifylevelToEquip::default_instance_ = NULL;

AckIntensifylevelToEquip* AckIntensifylevelToEquip::New(::google::protobuf::Arena* arena) const {
  AckIntensifylevelToEquip* n = new AckIntensifylevelToEquip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckIntensifylevelToEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckIntensifylevelToEquip)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
    }
    if (has_equipid()) {
      if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AckIntensifylevelToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckIntensifylevelToEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident selfid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equipid;
        break;
      }

      // required .AFMsg.Ident equipid = 2;
      case 2: {
        if (tag == 18) {
         parse_equipid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required int32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckIntensifylevelToEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckIntensifylevelToEquip)
  return false;
#undef DO_
}

void AckIntensifylevelToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckIntensifylevelToEquip)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->selfid_, output);
  }

  // required .AFMsg.Ident equipid = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->equipid_, output);
  }

  // required int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckIntensifylevelToEquip)
}

::google::protobuf::uint8* AckIntensifylevelToEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckIntensifylevelToEquip)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->selfid_, false, target);
  }

  // required .AFMsg.Ident equipid = 2;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->equipid_, false, target);
  }

  // required int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckIntensifylevelToEquip)
  return target;
}

int AckIntensifylevelToEquip::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.AckIntensifylevelToEquip)
  int total_size = 0;

  if (has_selfid()) {
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);
  }

  if (has_equipid()) {
    // required .AFMsg.Ident equipid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->equipid_);
  }

  if (has_result()) {
    // required int32 result = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  return total_size;
}
int AckIntensifylevelToEquip::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckIntensifylevelToEquip)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);

    // required .AFMsg.Ident equipid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->equipid_);

    // required int32 result = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckIntensifylevelToEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckIntensifylevelToEquip)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AckIntensifylevelToEquip* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AckIntensifylevelToEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckIntensifylevelToEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckIntensifylevelToEquip)
    MergeFrom(*source);
  }
}

void AckIntensifylevelToEquip::MergeFrom(const AckIntensifylevelToEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckIntensifylevelToEquip)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_equipid()) {
      mutable_equipid()->::AFMsg::Ident::MergeFrom(from.equipid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AckIntensifylevelToEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckIntensifylevelToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckIntensifylevelToEquip::CopyFrom(const AckIntensifylevelToEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckIntensifylevelToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckIntensifylevelToEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_selfid()) {
    if (!this->selfid_->IsInitialized()) return false;
  }
  if (has_equipid()) {
    if (!this->equipid_->IsInitialized()) return false;
  }
  return true;
}

void AckIntensifylevelToEquip::Swap(AckIntensifylevelToEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckIntensifylevelToEquip::InternalSwap(AckIntensifylevelToEquip* other) {
  std::swap(selfid_, other->selfid_);
  std::swap(equipid_, other->equipid_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckIntensifylevelToEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckIntensifylevelToEquip_descriptor_;
  metadata.reflection = AckIntensifylevelToEquip_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckIntensifylevelToEquip

// required .AFMsg.Ident selfid = 1;
bool AckIntensifylevelToEquip::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AckIntensifylevelToEquip::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
void AckIntensifylevelToEquip::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AckIntensifylevelToEquip::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
const ::AFMsg::Ident& AckIntensifylevelToEquip::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckIntensifylevelToEquip.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
::AFMsg::Ident* AckIntensifylevelToEquip::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckIntensifylevelToEquip.selfid)
  return selfid_;
}
::AFMsg::Ident* AckIntensifylevelToEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckIntensifylevelToEquip.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
void AckIntensifylevelToEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckIntensifylevelToEquip.selfid)
}

// required .AFMsg.Ident equipid = 2;
bool AckIntensifylevelToEquip::has_equipid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AckIntensifylevelToEquip::set_has_equipid() {
  _has_bits_[0] |= 0x00000002u;
}
void AckIntensifylevelToEquip::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000002u;
}
void AckIntensifylevelToEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
  clear_has_equipid();
}
const ::AFMsg::Ident& AckIntensifylevelToEquip::equipid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckIntensifylevelToEquip.equipid)
  return equipid_ != NULL ? *equipid_ : *default_instance_->equipid_;
}
::AFMsg::Ident* AckIntensifylevelToEquip::mutable_equipid() {
  set_has_equipid();
  if (equipid_ == NULL) {
    equipid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckIntensifylevelToEquip.equipid)
  return equipid_;
}
::AFMsg::Ident* AckIntensifylevelToEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckIntensifylevelToEquip.equipid)
  clear_has_equipid();
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
void AckIntensifylevelToEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  delete equipid_;
  equipid_ = equipid;
  if (equipid) {
    set_has_equipid();
  } else {
    clear_has_equipid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckIntensifylevelToEquip.equipid)
}

// required int32 result = 3;
bool AckIntensifylevelToEquip::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AckIntensifylevelToEquip::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
void AckIntensifylevelToEquip::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void AckIntensifylevelToEquip::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::google::protobuf::int32 AckIntensifylevelToEquip::result() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckIntensifylevelToEquip.result)
  return result_;
}
 void AckIntensifylevelToEquip::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckIntensifylevelToEquip.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqHoleToEquip::kSelfidFieldNumber;
const int ReqHoleToEquip::kEquipidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqHoleToEquip::ReqHoleToEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqHoleToEquip)
}

void ReqHoleToEquip::InitAsDefaultInstance() {
  selfid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  equipid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqHoleToEquip::ReqHoleToEquip(const ReqHoleToEquip& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqHoleToEquip)
}

void ReqHoleToEquip::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  equipid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqHoleToEquip::~ReqHoleToEquip() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqHoleToEquip)
  SharedDtor();
}

void ReqHoleToEquip::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete equipid_;
  }
}

void ReqHoleToEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqHoleToEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqHoleToEquip_descriptor_;
}

const ReqHoleToEquip& ReqHoleToEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqHoleToEquip* ReqHoleToEquip::default_instance_ = NULL;

ReqHoleToEquip* ReqHoleToEquip::New(::google::protobuf::Arena* arena) const {
  ReqHoleToEquip* n = new ReqHoleToEquip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqHoleToEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqHoleToEquip)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
    }
    if (has_equipid()) {
      if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqHoleToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqHoleToEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident selfid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equipid;
        break;
      }

      // required .AFMsg.Ident equipid = 2;
      case 2: {
        if (tag == 18) {
         parse_equipid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqHoleToEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqHoleToEquip)
  return false;
#undef DO_
}

void ReqHoleToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqHoleToEquip)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->selfid_, output);
  }

  // required .AFMsg.Ident equipid = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->equipid_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqHoleToEquip)
}

::google::protobuf::uint8* ReqHoleToEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqHoleToEquip)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->selfid_, false, target);
  }

  // required .AFMsg.Ident equipid = 2;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->equipid_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqHoleToEquip)
  return target;
}

int ReqHoleToEquip::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqHoleToEquip)
  int total_size = 0;

  if (has_selfid()) {
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);
  }

  if (has_equipid()) {
    // required .AFMsg.Ident equipid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->equipid_);
  }

  return total_size;
}
int ReqHoleToEquip::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqHoleToEquip)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);

    // required .AFMsg.Ident equipid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->equipid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHoleToEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqHoleToEquip)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqHoleToEquip* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqHoleToEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqHoleToEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqHoleToEquip)
    MergeFrom(*source);
  }
}

void ReqHoleToEquip::MergeFrom(const ReqHoleToEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqHoleToEquip)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_equipid()) {
      mutable_equipid()->::AFMsg::Ident::MergeFrom(from.equipid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqHoleToEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqHoleToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHoleToEquip::CopyFrom(const ReqHoleToEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqHoleToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHoleToEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_selfid()) {
    if (!this->selfid_->IsInitialized()) return false;
  }
  if (has_equipid()) {
    if (!this->equipid_->IsInitialized()) return false;
  }
  return true;
}

void ReqHoleToEquip::Swap(ReqHoleToEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqHoleToEquip::InternalSwap(ReqHoleToEquip* other) {
  std::swap(selfid_, other->selfid_);
  std::swap(equipid_, other->equipid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqHoleToEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqHoleToEquip_descriptor_;
  metadata.reflection = ReqHoleToEquip_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqHoleToEquip

// required .AFMsg.Ident selfid = 1;
bool ReqHoleToEquip::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqHoleToEquip::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqHoleToEquip::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqHoleToEquip::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
const ::AFMsg::Ident& ReqHoleToEquip::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqHoleToEquip.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
::AFMsg::Ident* ReqHoleToEquip::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqHoleToEquip.selfid)
  return selfid_;
}
::AFMsg::Ident* ReqHoleToEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqHoleToEquip.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
void ReqHoleToEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqHoleToEquip.selfid)
}

// required .AFMsg.Ident equipid = 2;
bool ReqHoleToEquip::has_equipid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqHoleToEquip::set_has_equipid() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqHoleToEquip::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqHoleToEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
  clear_has_equipid();
}
const ::AFMsg::Ident& ReqHoleToEquip::equipid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqHoleToEquip.equipid)
  return equipid_ != NULL ? *equipid_ : *default_instance_->equipid_;
}
::AFMsg::Ident* ReqHoleToEquip::mutable_equipid() {
  set_has_equipid();
  if (equipid_ == NULL) {
    equipid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqHoleToEquip.equipid)
  return equipid_;
}
::AFMsg::Ident* ReqHoleToEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqHoleToEquip.equipid)
  clear_has_equipid();
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
void ReqHoleToEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  delete equipid_;
  equipid_ = equipid;
  if (equipid) {
    set_has_equipid();
  } else {
    clear_has_equipid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqHoleToEquip.equipid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckHoleToEquip::kSelfidFieldNumber;
const int AckHoleToEquip::kEquipidFieldNumber;
const int AckHoleToEquip::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckHoleToEquip::AckHoleToEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckHoleToEquip)
}

void AckHoleToEquip::InitAsDefaultInstance() {
  selfid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  equipid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

AckHoleToEquip::AckHoleToEquip(const AckHoleToEquip& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckHoleToEquip)
}

void AckHoleToEquip::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  equipid_ = NULL;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckHoleToEquip::~AckHoleToEquip() {
  // @@protoc_insertion_point(destructor:AFMsg.AckHoleToEquip)
  SharedDtor();
}

void AckHoleToEquip::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete equipid_;
  }
}

void AckHoleToEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckHoleToEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckHoleToEquip_descriptor_;
}

const AckHoleToEquip& AckHoleToEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

AckHoleToEquip* AckHoleToEquip::default_instance_ = NULL;

AckHoleToEquip* AckHoleToEquip::New(::google::protobuf::Arena* arena) const {
  AckHoleToEquip* n = new AckHoleToEquip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckHoleToEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckHoleToEquip)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
    }
    if (has_equipid()) {
      if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AckHoleToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckHoleToEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident selfid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equipid;
        break;
      }

      // required .AFMsg.Ident equipid = 2;
      case 2: {
        if (tag == 18) {
         parse_equipid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required int32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckHoleToEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckHoleToEquip)
  return false;
#undef DO_
}

void AckHoleToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckHoleToEquip)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->selfid_, output);
  }

  // required .AFMsg.Ident equipid = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->equipid_, output);
  }

  // required int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckHoleToEquip)
}

::google::protobuf::uint8* AckHoleToEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckHoleToEquip)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->selfid_, false, target);
  }

  // required .AFMsg.Ident equipid = 2;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->equipid_, false, target);
  }

  // required int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckHoleToEquip)
  return target;
}

int AckHoleToEquip::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.AckHoleToEquip)
  int total_size = 0;

  if (has_selfid()) {
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);
  }

  if (has_equipid()) {
    // required .AFMsg.Ident equipid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->equipid_);
  }

  if (has_result()) {
    // required int32 result = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  return total_size;
}
int AckHoleToEquip::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckHoleToEquip)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);

    // required .AFMsg.Ident equipid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->equipid_);

    // required int32 result = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckHoleToEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckHoleToEquip)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AckHoleToEquip* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AckHoleToEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckHoleToEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckHoleToEquip)
    MergeFrom(*source);
  }
}

void AckHoleToEquip::MergeFrom(const AckHoleToEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckHoleToEquip)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_equipid()) {
      mutable_equipid()->::AFMsg::Ident::MergeFrom(from.equipid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AckHoleToEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckHoleToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckHoleToEquip::CopyFrom(const AckHoleToEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckHoleToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckHoleToEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_selfid()) {
    if (!this->selfid_->IsInitialized()) return false;
  }
  if (has_equipid()) {
    if (!this->equipid_->IsInitialized()) return false;
  }
  return true;
}

void AckHoleToEquip::Swap(AckHoleToEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckHoleToEquip::InternalSwap(AckHoleToEquip* other) {
  std::swap(selfid_, other->selfid_);
  std::swap(equipid_, other->equipid_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckHoleToEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckHoleToEquip_descriptor_;
  metadata.reflection = AckHoleToEquip_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckHoleToEquip

// required .AFMsg.Ident selfid = 1;
bool AckHoleToEquip::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AckHoleToEquip::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
void AckHoleToEquip::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AckHoleToEquip::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
const ::AFMsg::Ident& AckHoleToEquip::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckHoleToEquip.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
::AFMsg::Ident* AckHoleToEquip::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckHoleToEquip.selfid)
  return selfid_;
}
::AFMsg::Ident* AckHoleToEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckHoleToEquip.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
void AckHoleToEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckHoleToEquip.selfid)
}

// required .AFMsg.Ident equipid = 2;
bool AckHoleToEquip::has_equipid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AckHoleToEquip::set_has_equipid() {
  _has_bits_[0] |= 0x00000002u;
}
void AckHoleToEquip::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000002u;
}
void AckHoleToEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
  clear_has_equipid();
}
const ::AFMsg::Ident& AckHoleToEquip::equipid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckHoleToEquip.equipid)
  return equipid_ != NULL ? *equipid_ : *default_instance_->equipid_;
}
::AFMsg::Ident* AckHoleToEquip::mutable_equipid() {
  set_has_equipid();
  if (equipid_ == NULL) {
    equipid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckHoleToEquip.equipid)
  return equipid_;
}
::AFMsg::Ident* AckHoleToEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckHoleToEquip.equipid)
  clear_has_equipid();
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
void AckHoleToEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  delete equipid_;
  equipid_ = equipid;
  if (equipid) {
    set_has_equipid();
  } else {
    clear_has_equipid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckHoleToEquip.equipid)
}

// required int32 result = 3;
bool AckHoleToEquip::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AckHoleToEquip::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
void AckHoleToEquip::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void AckHoleToEquip::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::google::protobuf::int32 AckHoleToEquip::result() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckHoleToEquip.result)
  return result_;
}
 void AckHoleToEquip::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckHoleToEquip.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqInlaystoneToEquip::kSelfidFieldNumber;
const int ReqInlaystoneToEquip::kEquipidFieldNumber;
const int ReqInlaystoneToEquip::kStoneidFieldNumber;
const int ReqInlaystoneToEquip::kHoleIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqInlaystoneToEquip::ReqInlaystoneToEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqInlaystoneToEquip)
}

void ReqInlaystoneToEquip::InitAsDefaultInstance() {
  selfid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  equipid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqInlaystoneToEquip::ReqInlaystoneToEquip(const ReqInlaystoneToEquip& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqInlaystoneToEquip)
}

void ReqInlaystoneToEquip::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  selfid_ = NULL;
  equipid_ = NULL;
  stoneid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hole_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqInlaystoneToEquip::~ReqInlaystoneToEquip() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqInlaystoneToEquip)
  SharedDtor();
}

void ReqInlaystoneToEquip::SharedDtor() {
  stoneid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete selfid_;
    delete equipid_;
  }
}

void ReqInlaystoneToEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqInlaystoneToEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqInlaystoneToEquip_descriptor_;
}

const ReqInlaystoneToEquip& ReqInlaystoneToEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqInlaystoneToEquip* ReqInlaystoneToEquip::default_instance_ = NULL;

ReqInlaystoneToEquip* ReqInlaystoneToEquip::New(::google::protobuf::Arena* arena) const {
  ReqInlaystoneToEquip* n = new ReqInlaystoneToEquip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqInlaystoneToEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqInlaystoneToEquip)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
    }
    if (has_equipid()) {
      if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
    }
    if (has_stoneid()) {
      stoneid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    hole_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqInlaystoneToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqInlaystoneToEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident selfid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equipid;
        break;
      }

      // required .AFMsg.Ident equipid = 2;
      case 2: {
        if (tag == 18) {
         parse_equipid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_stoneid;
        break;
      }

      // required bytes stoneid = 3;
      case 3: {
        if (tag == 26) {
         parse_stoneid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stoneid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hole_index;
        break;
      }

      // required int32 hole_index = 4;
      case 4: {
        if (tag == 32) {
         parse_hole_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hole_index_)));
          set_has_hole_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqInlaystoneToEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqInlaystoneToEquip)
  return false;
#undef DO_
}

void ReqInlaystoneToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqInlaystoneToEquip)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->selfid_, output);
  }

  // required .AFMsg.Ident equipid = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->equipid_, output);
  }

  // required bytes stoneid = 3;
  if (has_stoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->stoneid(), output);
  }

  // required int32 hole_index = 4;
  if (has_hole_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hole_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqInlaystoneToEquip)
}

::google::protobuf::uint8* ReqInlaystoneToEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqInlaystoneToEquip)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->selfid_, false, target);
  }

  // required .AFMsg.Ident equipid = 2;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->equipid_, false, target);
  }

  // required bytes stoneid = 3;
  if (has_stoneid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->stoneid(), target);
  }

  // required int32 hole_index = 4;
  if (has_hole_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hole_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqInlaystoneToEquip)
  return target;
}

int ReqInlaystoneToEquip::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqInlaystoneToEquip)
  int total_size = 0;

  if (has_selfid()) {
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);
  }

  if (has_equipid()) {
    // required .AFMsg.Ident equipid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->equipid_);
  }

  if (has_stoneid()) {
    // required bytes stoneid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->stoneid());
  }

  if (has_hole_index()) {
    // required int32 hole_index = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hole_index());
  }

  return total_size;
}
int ReqInlaystoneToEquip::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqInlaystoneToEquip)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);

    // required .AFMsg.Ident equipid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->equipid_);

    // required bytes stoneid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->stoneid());

    // required int32 hole_index = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hole_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqInlaystoneToEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqInlaystoneToEquip)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqInlaystoneToEquip* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqInlaystoneToEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqInlaystoneToEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqInlaystoneToEquip)
    MergeFrom(*source);
  }
}

void ReqInlaystoneToEquip::MergeFrom(const ReqInlaystoneToEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqInlaystoneToEquip)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_equipid()) {
      mutable_equipid()->::AFMsg::Ident::MergeFrom(from.equipid());
    }
    if (from.has_stoneid()) {
      set_has_stoneid();
      stoneid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stoneid_);
    }
    if (from.has_hole_index()) {
      set_hole_index(from.hole_index());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqInlaystoneToEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqInlaystoneToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqInlaystoneToEquip::CopyFrom(const ReqInlaystoneToEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqInlaystoneToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqInlaystoneToEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_selfid()) {
    if (!this->selfid_->IsInitialized()) return false;
  }
  if (has_equipid()) {
    if (!this->equipid_->IsInitialized()) return false;
  }
  return true;
}

void ReqInlaystoneToEquip::Swap(ReqInlaystoneToEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqInlaystoneToEquip::InternalSwap(ReqInlaystoneToEquip* other) {
  std::swap(selfid_, other->selfid_);
  std::swap(equipid_, other->equipid_);
  stoneid_.Swap(&other->stoneid_);
  std::swap(hole_index_, other->hole_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqInlaystoneToEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqInlaystoneToEquip_descriptor_;
  metadata.reflection = ReqInlaystoneToEquip_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqInlaystoneToEquip

// required .AFMsg.Ident selfid = 1;
bool ReqInlaystoneToEquip::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqInlaystoneToEquip::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqInlaystoneToEquip::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqInlaystoneToEquip::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
const ::AFMsg::Ident& ReqInlaystoneToEquip::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqInlaystoneToEquip.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
::AFMsg::Ident* ReqInlaystoneToEquip::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqInlaystoneToEquip.selfid)
  return selfid_;
}
::AFMsg::Ident* ReqInlaystoneToEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqInlaystoneToEquip.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
void ReqInlaystoneToEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqInlaystoneToEquip.selfid)
}

// required .AFMsg.Ident equipid = 2;
bool ReqInlaystoneToEquip::has_equipid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqInlaystoneToEquip::set_has_equipid() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqInlaystoneToEquip::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqInlaystoneToEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
  clear_has_equipid();
}
const ::AFMsg::Ident& ReqInlaystoneToEquip::equipid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqInlaystoneToEquip.equipid)
  return equipid_ != NULL ? *equipid_ : *default_instance_->equipid_;
}
::AFMsg::Ident* ReqInlaystoneToEquip::mutable_equipid() {
  set_has_equipid();
  if (equipid_ == NULL) {
    equipid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqInlaystoneToEquip.equipid)
  return equipid_;
}
::AFMsg::Ident* ReqInlaystoneToEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqInlaystoneToEquip.equipid)
  clear_has_equipid();
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
void ReqInlaystoneToEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  delete equipid_;
  equipid_ = equipid;
  if (equipid) {
    set_has_equipid();
  } else {
    clear_has_equipid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqInlaystoneToEquip.equipid)
}

// required bytes stoneid = 3;
bool ReqInlaystoneToEquip::has_stoneid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqInlaystoneToEquip::set_has_stoneid() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqInlaystoneToEquip::clear_has_stoneid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqInlaystoneToEquip::clear_stoneid() {
  stoneid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stoneid();
}
 const ::std::string& ReqInlaystoneToEquip::stoneid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqInlaystoneToEquip.stoneid)
  return stoneid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqInlaystoneToEquip::set_stoneid(const ::std::string& value) {
  set_has_stoneid();
  stoneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqInlaystoneToEquip.stoneid)
}
 void ReqInlaystoneToEquip::set_stoneid(const char* value) {
  set_has_stoneid();
  stoneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqInlaystoneToEquip.stoneid)
}
 void ReqInlaystoneToEquip::set_stoneid(const void* value, size_t size) {
  set_has_stoneid();
  stoneid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqInlaystoneToEquip.stoneid)
}
 ::std::string* ReqInlaystoneToEquip::mutable_stoneid() {
  set_has_stoneid();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqInlaystoneToEquip.stoneid)
  return stoneid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReqInlaystoneToEquip::release_stoneid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqInlaystoneToEquip.stoneid)
  clear_has_stoneid();
  return stoneid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqInlaystoneToEquip::set_allocated_stoneid(::std::string* stoneid) {
  if (stoneid != NULL) {
    set_has_stoneid();
  } else {
    clear_has_stoneid();
  }
  stoneid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stoneid);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqInlaystoneToEquip.stoneid)
}

// required int32 hole_index = 4;
bool ReqInlaystoneToEquip::has_hole_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReqInlaystoneToEquip::set_has_hole_index() {
  _has_bits_[0] |= 0x00000008u;
}
void ReqInlaystoneToEquip::clear_has_hole_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReqInlaystoneToEquip::clear_hole_index() {
  hole_index_ = 0;
  clear_has_hole_index();
}
 ::google::protobuf::int32 ReqInlaystoneToEquip::hole_index() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqInlaystoneToEquip.hole_index)
  return hole_index_;
}
 void ReqInlaystoneToEquip::set_hole_index(::google::protobuf::int32 value) {
  set_has_hole_index();
  hole_index_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqInlaystoneToEquip.hole_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckInlaystoneToEquip::kSelfidFieldNumber;
const int AckInlaystoneToEquip::kEquipidFieldNumber;
const int AckInlaystoneToEquip::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckInlaystoneToEquip::AckInlaystoneToEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckInlaystoneToEquip)
}

void AckInlaystoneToEquip::InitAsDefaultInstance() {
  selfid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  equipid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

AckInlaystoneToEquip::AckInlaystoneToEquip(const AckInlaystoneToEquip& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckInlaystoneToEquip)
}

void AckInlaystoneToEquip::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  equipid_ = NULL;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckInlaystoneToEquip::~AckInlaystoneToEquip() {
  // @@protoc_insertion_point(destructor:AFMsg.AckInlaystoneToEquip)
  SharedDtor();
}

void AckInlaystoneToEquip::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete equipid_;
  }
}

void AckInlaystoneToEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckInlaystoneToEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckInlaystoneToEquip_descriptor_;
}

const AckInlaystoneToEquip& AckInlaystoneToEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

AckInlaystoneToEquip* AckInlaystoneToEquip::default_instance_ = NULL;

AckInlaystoneToEquip* AckInlaystoneToEquip::New(::google::protobuf::Arena* arena) const {
  AckInlaystoneToEquip* n = new AckInlaystoneToEquip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckInlaystoneToEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckInlaystoneToEquip)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
    }
    if (has_equipid()) {
      if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AckInlaystoneToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckInlaystoneToEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident selfid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equipid;
        break;
      }

      // required .AFMsg.Ident equipid = 2;
      case 2: {
        if (tag == 18) {
         parse_equipid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required int32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckInlaystoneToEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckInlaystoneToEquip)
  return false;
#undef DO_
}

void AckInlaystoneToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckInlaystoneToEquip)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->selfid_, output);
  }

  // required .AFMsg.Ident equipid = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->equipid_, output);
  }

  // required int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckInlaystoneToEquip)
}

::google::protobuf::uint8* AckInlaystoneToEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckInlaystoneToEquip)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->selfid_, false, target);
  }

  // required .AFMsg.Ident equipid = 2;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->equipid_, false, target);
  }

  // required int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckInlaystoneToEquip)
  return target;
}

int AckInlaystoneToEquip::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.AckInlaystoneToEquip)
  int total_size = 0;

  if (has_selfid()) {
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);
  }

  if (has_equipid()) {
    // required .AFMsg.Ident equipid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->equipid_);
  }

  if (has_result()) {
    // required int32 result = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  return total_size;
}
int AckInlaystoneToEquip::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckInlaystoneToEquip)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);

    // required .AFMsg.Ident equipid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->equipid_);

    // required int32 result = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckInlaystoneToEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckInlaystoneToEquip)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AckInlaystoneToEquip* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AckInlaystoneToEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckInlaystoneToEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckInlaystoneToEquip)
    MergeFrom(*source);
  }
}

void AckInlaystoneToEquip::MergeFrom(const AckInlaystoneToEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckInlaystoneToEquip)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_equipid()) {
      mutable_equipid()->::AFMsg::Ident::MergeFrom(from.equipid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AckInlaystoneToEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckInlaystoneToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckInlaystoneToEquip::CopyFrom(const AckInlaystoneToEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckInlaystoneToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckInlaystoneToEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_selfid()) {
    if (!this->selfid_->IsInitialized()) return false;
  }
  if (has_equipid()) {
    if (!this->equipid_->IsInitialized()) return false;
  }
  return true;
}

void AckInlaystoneToEquip::Swap(AckInlaystoneToEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckInlaystoneToEquip::InternalSwap(AckInlaystoneToEquip* other) {
  std::swap(selfid_, other->selfid_);
  std::swap(equipid_, other->equipid_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckInlaystoneToEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckInlaystoneToEquip_descriptor_;
  metadata.reflection = AckInlaystoneToEquip_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckInlaystoneToEquip

// required .AFMsg.Ident selfid = 1;
bool AckInlaystoneToEquip::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AckInlaystoneToEquip::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
void AckInlaystoneToEquip::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AckInlaystoneToEquip::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
const ::AFMsg::Ident& AckInlaystoneToEquip::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckInlaystoneToEquip.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
::AFMsg::Ident* AckInlaystoneToEquip::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckInlaystoneToEquip.selfid)
  return selfid_;
}
::AFMsg::Ident* AckInlaystoneToEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckInlaystoneToEquip.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
void AckInlaystoneToEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckInlaystoneToEquip.selfid)
}

// required .AFMsg.Ident equipid = 2;
bool AckInlaystoneToEquip::has_equipid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AckInlaystoneToEquip::set_has_equipid() {
  _has_bits_[0] |= 0x00000002u;
}
void AckInlaystoneToEquip::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000002u;
}
void AckInlaystoneToEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
  clear_has_equipid();
}
const ::AFMsg::Ident& AckInlaystoneToEquip::equipid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckInlaystoneToEquip.equipid)
  return equipid_ != NULL ? *equipid_ : *default_instance_->equipid_;
}
::AFMsg::Ident* AckInlaystoneToEquip::mutable_equipid() {
  set_has_equipid();
  if (equipid_ == NULL) {
    equipid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckInlaystoneToEquip.equipid)
  return equipid_;
}
::AFMsg::Ident* AckInlaystoneToEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckInlaystoneToEquip.equipid)
  clear_has_equipid();
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
void AckInlaystoneToEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  delete equipid_;
  equipid_ = equipid;
  if (equipid) {
    set_has_equipid();
  } else {
    clear_has_equipid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckInlaystoneToEquip.equipid)
}

// required int32 result = 3;
bool AckInlaystoneToEquip::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AckInlaystoneToEquip::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
void AckInlaystoneToEquip::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void AckInlaystoneToEquip::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::google::protobuf::int32 AckInlaystoneToEquip::result() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckInlaystoneToEquip.result)
  return result_;
}
 void AckInlaystoneToEquip::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckInlaystoneToEquip.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqElementlevelToEquip::kSelfidFieldNumber;
const int ReqElementlevelToEquip::kEquipidFieldNumber;
const int ReqElementlevelToEquip::kEElementTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqElementlevelToEquip::ReqElementlevelToEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqElementlevelToEquip)
}

void ReqElementlevelToEquip::InitAsDefaultInstance() {
  selfid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  equipid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqElementlevelToEquip::ReqElementlevelToEquip(const ReqElementlevelToEquip& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqElementlevelToEquip)
}

void ReqElementlevelToEquip::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  equipid_ = NULL;
  eelementtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqElementlevelToEquip::~ReqElementlevelToEquip() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqElementlevelToEquip)
  SharedDtor();
}

void ReqElementlevelToEquip::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete equipid_;
  }
}

void ReqElementlevelToEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqElementlevelToEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqElementlevelToEquip_descriptor_;
}

const ReqElementlevelToEquip& ReqElementlevelToEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqElementlevelToEquip* ReqElementlevelToEquip::default_instance_ = NULL;

ReqElementlevelToEquip* ReqElementlevelToEquip::New(::google::protobuf::Arena* arena) const {
  ReqElementlevelToEquip* n = new ReqElementlevelToEquip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqElementlevelToEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqElementlevelToEquip)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
    }
    if (has_equipid()) {
      if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
    }
    eelementtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqElementlevelToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqElementlevelToEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident selfid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equipid;
        break;
      }

      // required .AFMsg.Ident equipid = 2;
      case 2: {
        if (tag == 18) {
         parse_equipid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_eElementType;
        break;
      }

      // required .AFMsg.EGameElementType eElementType = 3;
      case 3: {
        if (tag == 24) {
         parse_eElementType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AFMsg::EGameElementType_IsValid(value)) {
            set_eelementtype(static_cast< ::AFMsg::EGameElementType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqElementlevelToEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqElementlevelToEquip)
  return false;
#undef DO_
}

void ReqElementlevelToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqElementlevelToEquip)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->selfid_, output);
  }

  // required .AFMsg.Ident equipid = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->equipid_, output);
  }

  // required .AFMsg.EGameElementType eElementType = 3;
  if (has_eelementtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->eelementtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqElementlevelToEquip)
}

::google::protobuf::uint8* ReqElementlevelToEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqElementlevelToEquip)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->selfid_, false, target);
  }

  // required .AFMsg.Ident equipid = 2;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->equipid_, false, target);
  }

  // required .AFMsg.EGameElementType eElementType = 3;
  if (has_eelementtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->eelementtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqElementlevelToEquip)
  return target;
}

int ReqElementlevelToEquip::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqElementlevelToEquip)
  int total_size = 0;

  if (has_selfid()) {
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);
  }

  if (has_equipid()) {
    // required .AFMsg.Ident equipid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->equipid_);
  }

  if (has_eelementtype()) {
    // required .AFMsg.EGameElementType eElementType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->eelementtype());
  }

  return total_size;
}
int ReqElementlevelToEquip::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqElementlevelToEquip)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);

    // required .AFMsg.Ident equipid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->equipid_);

    // required .AFMsg.EGameElementType eElementType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->eelementtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqElementlevelToEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqElementlevelToEquip)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqElementlevelToEquip* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqElementlevelToEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqElementlevelToEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqElementlevelToEquip)
    MergeFrom(*source);
  }
}

void ReqElementlevelToEquip::MergeFrom(const ReqElementlevelToEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqElementlevelToEquip)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_equipid()) {
      mutable_equipid()->::AFMsg::Ident::MergeFrom(from.equipid());
    }
    if (from.has_eelementtype()) {
      set_eelementtype(from.eelementtype());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqElementlevelToEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqElementlevelToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqElementlevelToEquip::CopyFrom(const ReqElementlevelToEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqElementlevelToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqElementlevelToEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_selfid()) {
    if (!this->selfid_->IsInitialized()) return false;
  }
  if (has_equipid()) {
    if (!this->equipid_->IsInitialized()) return false;
  }
  return true;
}

void ReqElementlevelToEquip::Swap(ReqElementlevelToEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqElementlevelToEquip::InternalSwap(ReqElementlevelToEquip* other) {
  std::swap(selfid_, other->selfid_);
  std::swap(equipid_, other->equipid_);
  std::swap(eelementtype_, other->eelementtype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqElementlevelToEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqElementlevelToEquip_descriptor_;
  metadata.reflection = ReqElementlevelToEquip_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqElementlevelToEquip

// required .AFMsg.Ident selfid = 1;
bool ReqElementlevelToEquip::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqElementlevelToEquip::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqElementlevelToEquip::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqElementlevelToEquip::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
const ::AFMsg::Ident& ReqElementlevelToEquip::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqElementlevelToEquip.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
::AFMsg::Ident* ReqElementlevelToEquip::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqElementlevelToEquip.selfid)
  return selfid_;
}
::AFMsg::Ident* ReqElementlevelToEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqElementlevelToEquip.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
void ReqElementlevelToEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqElementlevelToEquip.selfid)
}

// required .AFMsg.Ident equipid = 2;
bool ReqElementlevelToEquip::has_equipid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqElementlevelToEquip::set_has_equipid() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqElementlevelToEquip::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqElementlevelToEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
  clear_has_equipid();
}
const ::AFMsg::Ident& ReqElementlevelToEquip::equipid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqElementlevelToEquip.equipid)
  return equipid_ != NULL ? *equipid_ : *default_instance_->equipid_;
}
::AFMsg::Ident* ReqElementlevelToEquip::mutable_equipid() {
  set_has_equipid();
  if (equipid_ == NULL) {
    equipid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqElementlevelToEquip.equipid)
  return equipid_;
}
::AFMsg::Ident* ReqElementlevelToEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqElementlevelToEquip.equipid)
  clear_has_equipid();
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
void ReqElementlevelToEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  delete equipid_;
  equipid_ = equipid;
  if (equipid) {
    set_has_equipid();
  } else {
    clear_has_equipid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqElementlevelToEquip.equipid)
}

// required .AFMsg.EGameElementType eElementType = 3;
bool ReqElementlevelToEquip::has_eelementtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqElementlevelToEquip::set_has_eelementtype() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqElementlevelToEquip::clear_has_eelementtype() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqElementlevelToEquip::clear_eelementtype() {
  eelementtype_ = 0;
  clear_has_eelementtype();
}
 ::AFMsg::EGameElementType ReqElementlevelToEquip::eelementtype() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqElementlevelToEquip.eElementType)
  return static_cast< ::AFMsg::EGameElementType >(eelementtype_);
}
 void ReqElementlevelToEquip::set_eelementtype(::AFMsg::EGameElementType value) {
  assert(::AFMsg::EGameElementType_IsValid(value));
  set_has_eelementtype();
  eelementtype_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqElementlevelToEquip.eElementType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckElementlevelToEquip::kSelfidFieldNumber;
const int AckElementlevelToEquip::kEquipidFieldNumber;
const int AckElementlevelToEquip::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckElementlevelToEquip::AckElementlevelToEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckElementlevelToEquip)
}

void AckElementlevelToEquip::InitAsDefaultInstance() {
  selfid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  equipid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

AckElementlevelToEquip::AckElementlevelToEquip(const AckElementlevelToEquip& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckElementlevelToEquip)
}

void AckElementlevelToEquip::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  equipid_ = NULL;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckElementlevelToEquip::~AckElementlevelToEquip() {
  // @@protoc_insertion_point(destructor:AFMsg.AckElementlevelToEquip)
  SharedDtor();
}

void AckElementlevelToEquip::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete equipid_;
  }
}

void AckElementlevelToEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckElementlevelToEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckElementlevelToEquip_descriptor_;
}

const AckElementlevelToEquip& AckElementlevelToEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

AckElementlevelToEquip* AckElementlevelToEquip::default_instance_ = NULL;

AckElementlevelToEquip* AckElementlevelToEquip::New(::google::protobuf::Arena* arena) const {
  AckElementlevelToEquip* n = new AckElementlevelToEquip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckElementlevelToEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckElementlevelToEquip)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
    }
    if (has_equipid()) {
      if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AckElementlevelToEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckElementlevelToEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident selfid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equipid;
        break;
      }

      // required .AFMsg.Ident equipid = 2;
      case 2: {
        if (tag == 18) {
         parse_equipid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required int32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckElementlevelToEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckElementlevelToEquip)
  return false;
#undef DO_
}

void AckElementlevelToEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckElementlevelToEquip)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->selfid_, output);
  }

  // required .AFMsg.Ident equipid = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->equipid_, output);
  }

  // required int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckElementlevelToEquip)
}

::google::protobuf::uint8* AckElementlevelToEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckElementlevelToEquip)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->selfid_, false, target);
  }

  // required .AFMsg.Ident equipid = 2;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->equipid_, false, target);
  }

  // required int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckElementlevelToEquip)
  return target;
}

int AckElementlevelToEquip::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.AckElementlevelToEquip)
  int total_size = 0;

  if (has_selfid()) {
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);
  }

  if (has_equipid()) {
    // required .AFMsg.Ident equipid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->equipid_);
  }

  if (has_result()) {
    // required int32 result = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  return total_size;
}
int AckElementlevelToEquip::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckElementlevelToEquip)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);

    // required .AFMsg.Ident equipid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->equipid_);

    // required int32 result = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckElementlevelToEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckElementlevelToEquip)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AckElementlevelToEquip* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AckElementlevelToEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckElementlevelToEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckElementlevelToEquip)
    MergeFrom(*source);
  }
}

void AckElementlevelToEquip::MergeFrom(const AckElementlevelToEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckElementlevelToEquip)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_equipid()) {
      mutable_equipid()->::AFMsg::Ident::MergeFrom(from.equipid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AckElementlevelToEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckElementlevelToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckElementlevelToEquip::CopyFrom(const AckElementlevelToEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckElementlevelToEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckElementlevelToEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_selfid()) {
    if (!this->selfid_->IsInitialized()) return false;
  }
  if (has_equipid()) {
    if (!this->equipid_->IsInitialized()) return false;
  }
  return true;
}

void AckElementlevelToEquip::Swap(AckElementlevelToEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckElementlevelToEquip::InternalSwap(AckElementlevelToEquip* other) {
  std::swap(selfid_, other->selfid_);
  std::swap(equipid_, other->equipid_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckElementlevelToEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckElementlevelToEquip_descriptor_;
  metadata.reflection = AckElementlevelToEquip_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckElementlevelToEquip

// required .AFMsg.Ident selfid = 1;
bool AckElementlevelToEquip::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AckElementlevelToEquip::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
void AckElementlevelToEquip::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AckElementlevelToEquip::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
const ::AFMsg::Ident& AckElementlevelToEquip::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckElementlevelToEquip.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
::AFMsg::Ident* AckElementlevelToEquip::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckElementlevelToEquip.selfid)
  return selfid_;
}
::AFMsg::Ident* AckElementlevelToEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckElementlevelToEquip.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
void AckElementlevelToEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckElementlevelToEquip.selfid)
}

// required .AFMsg.Ident equipid = 2;
bool AckElementlevelToEquip::has_equipid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AckElementlevelToEquip::set_has_equipid() {
  _has_bits_[0] |= 0x00000002u;
}
void AckElementlevelToEquip::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000002u;
}
void AckElementlevelToEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
  clear_has_equipid();
}
const ::AFMsg::Ident& AckElementlevelToEquip::equipid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckElementlevelToEquip.equipid)
  return equipid_ != NULL ? *equipid_ : *default_instance_->equipid_;
}
::AFMsg::Ident* AckElementlevelToEquip::mutable_equipid() {
  set_has_equipid();
  if (equipid_ == NULL) {
    equipid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckElementlevelToEquip.equipid)
  return equipid_;
}
::AFMsg::Ident* AckElementlevelToEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckElementlevelToEquip.equipid)
  clear_has_equipid();
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
void AckElementlevelToEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  delete equipid_;
  equipid_ = equipid;
  if (equipid) {
    set_has_equipid();
  } else {
    clear_has_equipid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckElementlevelToEquip.equipid)
}

// required int32 result = 3;
bool AckElementlevelToEquip::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AckElementlevelToEquip::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
void AckElementlevelToEquip::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void AckElementlevelToEquip::clear_result() {
  result_ = 0;
  clear_has_result();
}
 ::google::protobuf::int32 AckElementlevelToEquip::result() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckElementlevelToEquip.result)
  return result_;
}
 void AckElementlevelToEquip::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckElementlevelToEquip.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSetFightHero::kSelfidFieldNumber;
const int ReqSetFightHero::kHeroidFieldNumber;
const int ReqSetFightHero::kFightPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSetFightHero::ReqSetFightHero()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqSetFightHero)
}

void ReqSetFightHero::InitAsDefaultInstance() {
  selfid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  heroid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqSetFightHero::ReqSetFightHero(const ReqSetFightHero& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqSetFightHero)
}

void ReqSetFightHero::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  heroid_ = NULL;
  fightpos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSetFightHero::~ReqSetFightHero() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqSetFightHero)
  SharedDtor();
}

void ReqSetFightHero::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete heroid_;
  }
}

void ReqSetFightHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSetFightHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSetFightHero_descriptor_;
}

const ReqSetFightHero& ReqSetFightHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqSetFightHero* ReqSetFightHero::default_instance_ = NULL;

ReqSetFightHero* ReqSetFightHero::New(::google::protobuf::Arena* arena) const {
  ReqSetFightHero* n = new ReqSetFightHero;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqSetFightHero::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqSetFightHero)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
    }
    if (has_heroid()) {
      if (heroid_ != NULL) heroid_->::AFMsg::Ident::Clear();
    }
    fightpos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqSetFightHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqSetFightHero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident selfid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Heroid;
        break;
      }

      // required .AFMsg.Ident Heroid = 2;
      case 2: {
        if (tag == 18) {
         parse_Heroid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heroid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_FightPos;
        break;
      }

      // required int32 FightPos = 3;
      case 3: {
        if (tag == 24) {
         parse_FightPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightpos_)));
          set_has_fightpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqSetFightHero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqSetFightHero)
  return false;
#undef DO_
}

void ReqSetFightHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqSetFightHero)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->selfid_, output);
  }

  // required .AFMsg.Ident Heroid = 2;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->heroid_, output);
  }

  // required int32 FightPos = 3;
  if (has_fightpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fightpos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqSetFightHero)
}

::google::protobuf::uint8* ReqSetFightHero::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqSetFightHero)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->selfid_, false, target);
  }

  // required .AFMsg.Ident Heroid = 2;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->heroid_, false, target);
  }

  // required int32 FightPos = 3;
  if (has_fightpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fightpos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqSetFightHero)
  return target;
}

int ReqSetFightHero::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqSetFightHero)
  int total_size = 0;

  if (has_selfid()) {
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);
  }

  if (has_heroid()) {
    // required .AFMsg.Ident Heroid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->heroid_);
  }

  if (has_fightpos()) {
    // required int32 FightPos = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fightpos());
  }

  return total_size;
}
int ReqSetFightHero::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqSetFightHero)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);

    // required .AFMsg.Ident Heroid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->heroid_);

    // required int32 FightPos = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fightpos());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSetFightHero::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqSetFightHero)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqSetFightHero* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqSetFightHero>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqSetFightHero)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqSetFightHero)
    MergeFrom(*source);
  }
}

void ReqSetFightHero::MergeFrom(const ReqSetFightHero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqSetFightHero)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_heroid()) {
      mutable_heroid()->::AFMsg::Ident::MergeFrom(from.heroid());
    }
    if (from.has_fightpos()) {
      set_fightpos(from.fightpos());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqSetFightHero::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqSetFightHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSetFightHero::CopyFrom(const ReqSetFightHero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqSetFightHero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSetFightHero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_selfid()) {
    if (!this->selfid_->IsInitialized()) return false;
  }
  if (has_heroid()) {
    if (!this->heroid_->IsInitialized()) return false;
  }
  return true;
}

void ReqSetFightHero::Swap(ReqSetFightHero* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSetFightHero::InternalSwap(ReqSetFightHero* other) {
  std::swap(selfid_, other->selfid_);
  std::swap(heroid_, other->heroid_);
  std::swap(fightpos_, other->fightpos_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqSetFightHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSetFightHero_descriptor_;
  metadata.reflection = ReqSetFightHero_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqSetFightHero

// required .AFMsg.Ident selfid = 1;
bool ReqSetFightHero::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqSetFightHero::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqSetFightHero::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqSetFightHero::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
const ::AFMsg::Ident& ReqSetFightHero::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSetFightHero.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
::AFMsg::Ident* ReqSetFightHero::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSetFightHero.selfid)
  return selfid_;
}
::AFMsg::Ident* ReqSetFightHero::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqSetFightHero.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
void ReqSetFightHero::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqSetFightHero.selfid)
}

// required .AFMsg.Ident Heroid = 2;
bool ReqSetFightHero::has_heroid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqSetFightHero::set_has_heroid() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqSetFightHero::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqSetFightHero::clear_heroid() {
  if (heroid_ != NULL) heroid_->::AFMsg::Ident::Clear();
  clear_has_heroid();
}
const ::AFMsg::Ident& ReqSetFightHero::heroid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSetFightHero.Heroid)
  return heroid_ != NULL ? *heroid_ : *default_instance_->heroid_;
}
::AFMsg::Ident* ReqSetFightHero::mutable_heroid() {
  set_has_heroid();
  if (heroid_ == NULL) {
    heroid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSetFightHero.Heroid)
  return heroid_;
}
::AFMsg::Ident* ReqSetFightHero::release_heroid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqSetFightHero.Heroid)
  clear_has_heroid();
  ::AFMsg::Ident* temp = heroid_;
  heroid_ = NULL;
  return temp;
}
void ReqSetFightHero::set_allocated_heroid(::AFMsg::Ident* heroid) {
  delete heroid_;
  heroid_ = heroid;
  if (heroid) {
    set_has_heroid();
  } else {
    clear_has_heroid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqSetFightHero.Heroid)
}

// required int32 FightPos = 3;
bool ReqSetFightHero::has_fightpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqSetFightHero::set_has_fightpos() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqSetFightHero::clear_has_fightpos() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqSetFightHero::clear_fightpos() {
  fightpos_ = 0;
  clear_has_fightpos();
}
 ::google::protobuf::int32 ReqSetFightHero::fightpos() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSetFightHero.FightPos)
  return fightpos_;
}
 void ReqSetFightHero::set_fightpos(::google::protobuf::int32 value) {
  set_has_fightpos();
  fightpos_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqSetFightHero.FightPos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqWearEquip::kSelfidFieldNumber;
const int ReqWearEquip::kEquipidFieldNumber;
const int ReqWearEquip::kTargetidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqWearEquip::ReqWearEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqWearEquip)
}

void ReqWearEquip::InitAsDefaultInstance() {
  selfid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  equipid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  targetid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqWearEquip::ReqWearEquip(const ReqWearEquip& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqWearEquip)
}

void ReqWearEquip::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  equipid_ = NULL;
  targetid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqWearEquip::~ReqWearEquip() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqWearEquip)
  SharedDtor();
}

void ReqWearEquip::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete equipid_;
    delete targetid_;
  }
}

void ReqWearEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqWearEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqWearEquip_descriptor_;
}

const ReqWearEquip& ReqWearEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqWearEquip* ReqWearEquip::default_instance_ = NULL;

ReqWearEquip* ReqWearEquip::New(::google::protobuf::Arena* arena) const {
  ReqWearEquip* n = new ReqWearEquip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqWearEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqWearEquip)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
    }
    if (has_equipid()) {
      if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
    }
    if (has_targetid()) {
      if (targetid_ != NULL) targetid_->::AFMsg::Ident::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqWearEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqWearEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident selfid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equipid;
        break;
      }

      // required .AFMsg.Ident equipid = 2;
      case 2: {
        if (tag == 18) {
         parse_equipid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Targetid;
        break;
      }

      // required .AFMsg.Ident Targetid = 3;
      case 3: {
        if (tag == 26) {
         parse_Targetid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqWearEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqWearEquip)
  return false;
#undef DO_
}

void ReqWearEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqWearEquip)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->selfid_, output);
  }

  // required .AFMsg.Ident equipid = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->equipid_, output);
  }

  // required .AFMsg.Ident Targetid = 3;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->targetid_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqWearEquip)
}

::google::protobuf::uint8* ReqWearEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqWearEquip)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->selfid_, false, target);
  }

  // required .AFMsg.Ident equipid = 2;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->equipid_, false, target);
  }

  // required .AFMsg.Ident Targetid = 3;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->targetid_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqWearEquip)
  return target;
}

int ReqWearEquip::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqWearEquip)
  int total_size = 0;

  if (has_selfid()) {
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);
  }

  if (has_equipid()) {
    // required .AFMsg.Ident equipid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->equipid_);
  }

  if (has_targetid()) {
    // required .AFMsg.Ident Targetid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->targetid_);
  }

  return total_size;
}
int ReqWearEquip::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqWearEquip)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);

    // required .AFMsg.Ident equipid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->equipid_);

    // required .AFMsg.Ident Targetid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->targetid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqWearEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqWearEquip)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqWearEquip* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqWearEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqWearEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqWearEquip)
    MergeFrom(*source);
  }
}

void ReqWearEquip::MergeFrom(const ReqWearEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqWearEquip)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_equipid()) {
      mutable_equipid()->::AFMsg::Ident::MergeFrom(from.equipid());
    }
    if (from.has_targetid()) {
      mutable_targetid()->::AFMsg::Ident::MergeFrom(from.targetid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqWearEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqWearEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWearEquip::CopyFrom(const ReqWearEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqWearEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqWearEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_selfid()) {
    if (!this->selfid_->IsInitialized()) return false;
  }
  if (has_equipid()) {
    if (!this->equipid_->IsInitialized()) return false;
  }
  if (has_targetid()) {
    if (!this->targetid_->IsInitialized()) return false;
  }
  return true;
}

void ReqWearEquip::Swap(ReqWearEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqWearEquip::InternalSwap(ReqWearEquip* other) {
  std::swap(selfid_, other->selfid_);
  std::swap(equipid_, other->equipid_);
  std::swap(targetid_, other->targetid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqWearEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqWearEquip_descriptor_;
  metadata.reflection = ReqWearEquip_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqWearEquip

// required .AFMsg.Ident selfid = 1;
bool ReqWearEquip::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqWearEquip::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqWearEquip::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqWearEquip::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
const ::AFMsg::Ident& ReqWearEquip::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqWearEquip.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
::AFMsg::Ident* ReqWearEquip::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqWearEquip.selfid)
  return selfid_;
}
::AFMsg::Ident* ReqWearEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqWearEquip.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
void ReqWearEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqWearEquip.selfid)
}

// required .AFMsg.Ident equipid = 2;
bool ReqWearEquip::has_equipid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqWearEquip::set_has_equipid() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqWearEquip::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqWearEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
  clear_has_equipid();
}
const ::AFMsg::Ident& ReqWearEquip::equipid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqWearEquip.equipid)
  return equipid_ != NULL ? *equipid_ : *default_instance_->equipid_;
}
::AFMsg::Ident* ReqWearEquip::mutable_equipid() {
  set_has_equipid();
  if (equipid_ == NULL) {
    equipid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqWearEquip.equipid)
  return equipid_;
}
::AFMsg::Ident* ReqWearEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqWearEquip.equipid)
  clear_has_equipid();
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
void ReqWearEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  delete equipid_;
  equipid_ = equipid;
  if (equipid) {
    set_has_equipid();
  } else {
    clear_has_equipid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqWearEquip.equipid)
}

// required .AFMsg.Ident Targetid = 3;
bool ReqWearEquip::has_targetid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqWearEquip::set_has_targetid() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqWearEquip::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqWearEquip::clear_targetid() {
  if (targetid_ != NULL) targetid_->::AFMsg::Ident::Clear();
  clear_has_targetid();
}
const ::AFMsg::Ident& ReqWearEquip::targetid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqWearEquip.Targetid)
  return targetid_ != NULL ? *targetid_ : *default_instance_->targetid_;
}
::AFMsg::Ident* ReqWearEquip::mutable_targetid() {
  set_has_targetid();
  if (targetid_ == NULL) {
    targetid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqWearEquip.Targetid)
  return targetid_;
}
::AFMsg::Ident* ReqWearEquip::release_targetid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqWearEquip.Targetid)
  clear_has_targetid();
  ::AFMsg::Ident* temp = targetid_;
  targetid_ = NULL;
  return temp;
}
void ReqWearEquip::set_allocated_targetid(::AFMsg::Ident* targetid) {
  delete targetid_;
  targetid_ = targetid;
  if (targetid) {
    set_has_targetid();
  } else {
    clear_has_targetid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqWearEquip.Targetid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TakeOffEquip::kSelfidFieldNumber;
const int TakeOffEquip::kEquipidFieldNumber;
const int TakeOffEquip::kTargetidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TakeOffEquip::TakeOffEquip()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.TakeOffEquip)
}

void TakeOffEquip::InitAsDefaultInstance() {
  selfid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  equipid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  targetid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

TakeOffEquip::TakeOffEquip(const TakeOffEquip& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.TakeOffEquip)
}

void TakeOffEquip::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  equipid_ = NULL;
  targetid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TakeOffEquip::~TakeOffEquip() {
  // @@protoc_insertion_point(destructor:AFMsg.TakeOffEquip)
  SharedDtor();
}

void TakeOffEquip::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete equipid_;
    delete targetid_;
  }
}

void TakeOffEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeOffEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TakeOffEquip_descriptor_;
}

const TakeOffEquip& TakeOffEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

TakeOffEquip* TakeOffEquip::default_instance_ = NULL;

TakeOffEquip* TakeOffEquip::New(::google::protobuf::Arena* arena) const {
  TakeOffEquip* n = new TakeOffEquip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TakeOffEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.TakeOffEquip)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
    }
    if (has_equipid()) {
      if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
    }
    if (has_targetid()) {
      if (targetid_ != NULL) targetid_->::AFMsg::Ident::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TakeOffEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.TakeOffEquip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident selfid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_equipid;
        break;
      }

      // required .AFMsg.Ident equipid = 2;
      case 2: {
        if (tag == 18) {
         parse_equipid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Targetid;
        break;
      }

      // required .AFMsg.Ident Targetid = 3;
      case 3: {
        if (tag == 26) {
         parse_Targetid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.TakeOffEquip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.TakeOffEquip)
  return false;
#undef DO_
}

void TakeOffEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.TakeOffEquip)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->selfid_, output);
  }

  // required .AFMsg.Ident equipid = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->equipid_, output);
  }

  // required .AFMsg.Ident Targetid = 3;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->targetid_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.TakeOffEquip)
}

::google::protobuf::uint8* TakeOffEquip::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.TakeOffEquip)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->selfid_, false, target);
  }

  // required .AFMsg.Ident equipid = 2;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->equipid_, false, target);
  }

  // required .AFMsg.Ident Targetid = 3;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->targetid_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.TakeOffEquip)
  return target;
}

int TakeOffEquip::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.TakeOffEquip)
  int total_size = 0;

  if (has_selfid()) {
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);
  }

  if (has_equipid()) {
    // required .AFMsg.Ident equipid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->equipid_);
  }

  if (has_targetid()) {
    // required .AFMsg.Ident Targetid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->targetid_);
  }

  return total_size;
}
int TakeOffEquip::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.TakeOffEquip)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);

    // required .AFMsg.Ident equipid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->equipid_);

    // required .AFMsg.Ident Targetid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->targetid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeOffEquip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.TakeOffEquip)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TakeOffEquip* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TakeOffEquip>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.TakeOffEquip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.TakeOffEquip)
    MergeFrom(*source);
  }
}

void TakeOffEquip::MergeFrom(const TakeOffEquip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.TakeOffEquip)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_equipid()) {
      mutable_equipid()->::AFMsg::Ident::MergeFrom(from.equipid());
    }
    if (from.has_targetid()) {
      mutable_targetid()->::AFMsg::Ident::MergeFrom(from.targetid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TakeOffEquip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.TakeOffEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeOffEquip::CopyFrom(const TakeOffEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.TakeOffEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeOffEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_selfid()) {
    if (!this->selfid_->IsInitialized()) return false;
  }
  if (has_equipid()) {
    if (!this->equipid_->IsInitialized()) return false;
  }
  if (has_targetid()) {
    if (!this->targetid_->IsInitialized()) return false;
  }
  return true;
}

void TakeOffEquip::Swap(TakeOffEquip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TakeOffEquip::InternalSwap(TakeOffEquip* other) {
  std::swap(selfid_, other->selfid_);
  std::swap(equipid_, other->equipid_);
  std::swap(targetid_, other->targetid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TakeOffEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TakeOffEquip_descriptor_;
  metadata.reflection = TakeOffEquip_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TakeOffEquip

// required .AFMsg.Ident selfid = 1;
bool TakeOffEquip::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TakeOffEquip::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
void TakeOffEquip::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TakeOffEquip::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
const ::AFMsg::Ident& TakeOffEquip::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.TakeOffEquip.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
::AFMsg::Ident* TakeOffEquip::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.TakeOffEquip.selfid)
  return selfid_;
}
::AFMsg::Ident* TakeOffEquip::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.TakeOffEquip.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
void TakeOffEquip::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.TakeOffEquip.selfid)
}

// required .AFMsg.Ident equipid = 2;
bool TakeOffEquip::has_equipid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TakeOffEquip::set_has_equipid() {
  _has_bits_[0] |= 0x00000002u;
}
void TakeOffEquip::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000002u;
}
void TakeOffEquip::clear_equipid() {
  if (equipid_ != NULL) equipid_->::AFMsg::Ident::Clear();
  clear_has_equipid();
}
const ::AFMsg::Ident& TakeOffEquip::equipid() const {
  // @@protoc_insertion_point(field_get:AFMsg.TakeOffEquip.equipid)
  return equipid_ != NULL ? *equipid_ : *default_instance_->equipid_;
}
::AFMsg::Ident* TakeOffEquip::mutable_equipid() {
  set_has_equipid();
  if (equipid_ == NULL) {
    equipid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.TakeOffEquip.equipid)
  return equipid_;
}
::AFMsg::Ident* TakeOffEquip::release_equipid() {
  // @@protoc_insertion_point(field_release:AFMsg.TakeOffEquip.equipid)
  clear_has_equipid();
  ::AFMsg::Ident* temp = equipid_;
  equipid_ = NULL;
  return temp;
}
void TakeOffEquip::set_allocated_equipid(::AFMsg::Ident* equipid) {
  delete equipid_;
  equipid_ = equipid;
  if (equipid) {
    set_has_equipid();
  } else {
    clear_has_equipid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.TakeOffEquip.equipid)
}

// required .AFMsg.Ident Targetid = 3;
bool TakeOffEquip::has_targetid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TakeOffEquip::set_has_targetid() {
  _has_bits_[0] |= 0x00000004u;
}
void TakeOffEquip::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000004u;
}
void TakeOffEquip::clear_targetid() {
  if (targetid_ != NULL) targetid_->::AFMsg::Ident::Clear();
  clear_has_targetid();
}
const ::AFMsg::Ident& TakeOffEquip::targetid() const {
  // @@protoc_insertion_point(field_get:AFMsg.TakeOffEquip.Targetid)
  return targetid_ != NULL ? *targetid_ : *default_instance_->targetid_;
}
::AFMsg::Ident* TakeOffEquip::mutable_targetid() {
  set_has_targetid();
  if (targetid_ == NULL) {
    targetid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.TakeOffEquip.Targetid)
  return targetid_;
}
::AFMsg::Ident* TakeOffEquip::release_targetid() {
  // @@protoc_insertion_point(field_release:AFMsg.TakeOffEquip.Targetid)
  clear_has_targetid();
  ::AFMsg::Ident* temp = targetid_;
  targetid_ = NULL;
  return temp;
}
void TakeOffEquip::set_allocated_targetid(::AFMsg::Ident* targetid) {
  delete targetid_;
  targetid_ = targetid;
  if (targetid) {
    set_has_targetid();
  } else {
    clear_has_targetid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.TakeOffEquip.Targetid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqMiningTitle::kSelfidFieldNumber;
const int ReqMiningTitle::kXFieldNumber;
const int ReqMiningTitle::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqMiningTitle::ReqMiningTitle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqMiningTitle)
}

void ReqMiningTitle::InitAsDefaultInstance() {
  selfid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqMiningTitle::ReqMiningTitle(const ReqMiningTitle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqMiningTitle)
}

void ReqMiningTitle::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMiningTitle::~ReqMiningTitle() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqMiningTitle)
  SharedDtor();
}

void ReqMiningTitle::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
  }
}

void ReqMiningTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMiningTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMiningTitle_descriptor_;
}

const ReqMiningTitle& ReqMiningTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqMiningTitle* ReqMiningTitle::default_instance_ = NULL;

ReqMiningTitle* ReqMiningTitle::New(::google::protobuf::Arena* arena) const {
  ReqMiningTitle* n = new ReqMiningTitle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqMiningTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqMiningTitle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqMiningTitle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqMiningTitle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(x_, y_);
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqMiningTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqMiningTitle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident selfid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required int32 x = 2;
      case 2: {
        if (tag == 16) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // required int32 y = 3;
      case 3: {
        if (tag == 24) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqMiningTitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqMiningTitle)
  return false;
#undef DO_
}

void ReqMiningTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqMiningTitle)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->selfid_, output);
  }

  // required int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // required int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqMiningTitle)
}

::google::protobuf::uint8* ReqMiningTitle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqMiningTitle)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->selfid_, false, target);
  }

  // required int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // required int32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqMiningTitle)
  return target;
}

int ReqMiningTitle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqMiningTitle)
  int total_size = 0;

  if (has_selfid()) {
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);
  }

  if (has_x()) {
    // required int32 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_y()) {
    // required int32 y = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  return total_size;
}
int ReqMiningTitle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqMiningTitle)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);

    // required int32 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 y = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMiningTitle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqMiningTitle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqMiningTitle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqMiningTitle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqMiningTitle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqMiningTitle)
    MergeFrom(*source);
  }
}

void ReqMiningTitle::MergeFrom(const ReqMiningTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqMiningTitle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqMiningTitle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqMiningTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMiningTitle::CopyFrom(const ReqMiningTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqMiningTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMiningTitle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_selfid()) {
    if (!this->selfid_->IsInitialized()) return false;
  }
  return true;
}

void ReqMiningTitle::Swap(ReqMiningTitle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqMiningTitle::InternalSwap(ReqMiningTitle* other) {
  std::swap(selfid_, other->selfid_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqMiningTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMiningTitle_descriptor_;
  metadata.reflection = ReqMiningTitle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqMiningTitle

// required .AFMsg.Ident selfid = 1;
bool ReqMiningTitle::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqMiningTitle::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqMiningTitle::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqMiningTitle::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
const ::AFMsg::Ident& ReqMiningTitle::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqMiningTitle.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
::AFMsg::Ident* ReqMiningTitle::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqMiningTitle.selfid)
  return selfid_;
}
::AFMsg::Ident* ReqMiningTitle::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqMiningTitle.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
void ReqMiningTitle::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqMiningTitle.selfid)
}

// required int32 x = 2;
bool ReqMiningTitle::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqMiningTitle::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqMiningTitle::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqMiningTitle::clear_x() {
  x_ = 0;
  clear_has_x();
}
 ::google::protobuf::int32 ReqMiningTitle::x() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqMiningTitle.x)
  return x_;
}
 void ReqMiningTitle::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqMiningTitle.x)
}

// required int32 y = 3;
bool ReqMiningTitle::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqMiningTitle::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqMiningTitle::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqMiningTitle::clear_y() {
  y_ = 0;
  clear_has_y();
}
 ::google::protobuf::int32 ReqMiningTitle::y() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqMiningTitle.y)
  return y_;
}
 void ReqMiningTitle::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqMiningTitle.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSendMail::kSelfidFieldNumber;
const int ReqSendMail::kRecieverFieldNumber;
const int ReqSendMail::kItemListFieldNumber;
const int ReqSendMail::kCurrencyListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSendMail::ReqSendMail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqSendMail)
}

void ReqSendMail::InitAsDefaultInstance() {
  selfid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  reciever_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqSendMail::ReqSendMail(const ReqSendMail& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqSendMail)
}

void ReqSendMail::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  reciever_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSendMail::~ReqSendMail() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqSendMail)
  SharedDtor();
}

void ReqSendMail::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete reciever_;
  }
}

void ReqSendMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSendMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSendMail_descriptor_;
}

const ReqSendMail& ReqSendMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqSendMail* ReqSendMail::default_instance_ = NULL;

ReqSendMail* ReqSendMail::New(::google::protobuf::Arena* arena) const {
  ReqSendMail* n = new ReqSendMail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqSendMail::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqSendMail)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
    }
    if (has_reciever()) {
      if (reciever_ != NULL) reciever_->::AFMsg::Ident::Clear();
    }
  }
  item_list_.Clear();
  currency_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqSendMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqSendMail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident selfid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reciever;
        break;
      }

      // required .AFMsg.Ident reciever = 2;
      case 2: {
        if (tag == 18) {
         parse_reciever:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reciever()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item_list;
        break;
      }

      // repeated .AFMsg.ItemStruct item_list = 3;
      case 3: {
        if (tag == 26) {
         parse_item_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_item_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_item_list;
        if (input->ExpectTag(34)) goto parse_loop_currency_list;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .AFMsg.CurrencyStruct currency_list = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_currency_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_currency_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_currency_list;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqSendMail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqSendMail)
  return false;
#undef DO_
}

void ReqSendMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqSendMail)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->selfid_, output);
  }

  // required .AFMsg.Ident reciever = 2;
  if (has_reciever()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->reciever_, output);
  }

  // repeated .AFMsg.ItemStruct item_list = 3;
  for (unsigned int i = 0, n = this->item_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item_list(i), output);
  }

  // repeated .AFMsg.CurrencyStruct currency_list = 4;
  for (unsigned int i = 0, n = this->currency_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->currency_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqSendMail)
}

::google::protobuf::uint8* ReqSendMail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqSendMail)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->selfid_, false, target);
  }

  // required .AFMsg.Ident reciever = 2;
  if (has_reciever()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->reciever_, false, target);
  }

  // repeated .AFMsg.ItemStruct item_list = 3;
  for (unsigned int i = 0, n = this->item_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->item_list(i), false, target);
  }

  // repeated .AFMsg.CurrencyStruct currency_list = 4;
  for (unsigned int i = 0, n = this->currency_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->currency_list(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqSendMail)
  return target;
}

int ReqSendMail::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqSendMail)
  int total_size = 0;

  if (has_selfid()) {
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);
  }

  if (has_reciever()) {
    // required .AFMsg.Ident reciever = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reciever_);
  }

  return total_size;
}
int ReqSendMail::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqSendMail)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);

    // required .AFMsg.Ident reciever = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reciever_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .AFMsg.ItemStruct item_list = 3;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  // repeated .AFMsg.CurrencyStruct currency_list = 4;
  total_size += 1 * this->currency_list_size();
  for (int i = 0; i < this->currency_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->currency_list(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSendMail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqSendMail)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqSendMail* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqSendMail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqSendMail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqSendMail)
    MergeFrom(*source);
  }
}

void ReqSendMail::MergeFrom(const ReqSendMail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqSendMail)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  item_list_.MergeFrom(from.item_list_);
  currency_list_.MergeFrom(from.currency_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_reciever()) {
      mutable_reciever()->::AFMsg::Ident::MergeFrom(from.reciever());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqSendMail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqSendMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSendMail::CopyFrom(const ReqSendMail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqSendMail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSendMail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_selfid()) {
    if (!this->selfid_->IsInitialized()) return false;
  }
  if (has_reciever()) {
    if (!this->reciever_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->item_list())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->currency_list())) return false;
  return true;
}

void ReqSendMail::Swap(ReqSendMail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSendMail::InternalSwap(ReqSendMail* other) {
  std::swap(selfid_, other->selfid_);
  std::swap(reciever_, other->reciever_);
  item_list_.UnsafeArenaSwap(&other->item_list_);
  currency_list_.UnsafeArenaSwap(&other->currency_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqSendMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSendMail_descriptor_;
  metadata.reflection = ReqSendMail_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqSendMail

// required .AFMsg.Ident selfid = 1;
bool ReqSendMail::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqSendMail::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqSendMail::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqSendMail::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
const ::AFMsg::Ident& ReqSendMail::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSendMail.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
::AFMsg::Ident* ReqSendMail::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSendMail.selfid)
  return selfid_;
}
::AFMsg::Ident* ReqSendMail::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqSendMail.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
void ReqSendMail::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqSendMail.selfid)
}

// required .AFMsg.Ident reciever = 2;
bool ReqSendMail::has_reciever() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqSendMail::set_has_reciever() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqSendMail::clear_has_reciever() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqSendMail::clear_reciever() {
  if (reciever_ != NULL) reciever_->::AFMsg::Ident::Clear();
  clear_has_reciever();
}
const ::AFMsg::Ident& ReqSendMail::reciever() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSendMail.reciever)
  return reciever_ != NULL ? *reciever_ : *default_instance_->reciever_;
}
::AFMsg::Ident* ReqSendMail::mutable_reciever() {
  set_has_reciever();
  if (reciever_ == NULL) {
    reciever_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSendMail.reciever)
  return reciever_;
}
::AFMsg::Ident* ReqSendMail::release_reciever() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqSendMail.reciever)
  clear_has_reciever();
  ::AFMsg::Ident* temp = reciever_;
  reciever_ = NULL;
  return temp;
}
void ReqSendMail::set_allocated_reciever(::AFMsg::Ident* reciever) {
  delete reciever_;
  reciever_ = reciever;
  if (reciever) {
    set_has_reciever();
  } else {
    clear_has_reciever();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqSendMail.reciever)
}

// repeated .AFMsg.ItemStruct item_list = 3;
int ReqSendMail::item_list_size() const {
  return item_list_.size();
}
void ReqSendMail::clear_item_list() {
  item_list_.Clear();
}
const ::AFMsg::ItemStruct& ReqSendMail::item_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSendMail.item_list)
  return item_list_.Get(index);
}
::AFMsg::ItemStruct* ReqSendMail::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSendMail.item_list)
  return item_list_.Mutable(index);
}
::AFMsg::ItemStruct* ReqSendMail::add_item_list() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqSendMail.item_list)
  return item_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >*
ReqSendMail::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqSendMail.item_list)
  return &item_list_;
}
const ::google::protobuf::RepeatedPtrField< ::AFMsg::ItemStruct >&
ReqSendMail::item_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqSendMail.item_list)
  return item_list_;
}

// repeated .AFMsg.CurrencyStruct currency_list = 4;
int ReqSendMail::currency_list_size() const {
  return currency_list_.size();
}
void ReqSendMail::clear_currency_list() {
  currency_list_.Clear();
}
const ::AFMsg::CurrencyStruct& ReqSendMail::currency_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSendMail.currency_list)
  return currency_list_.Get(index);
}
::AFMsg::CurrencyStruct* ReqSendMail::mutable_currency_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSendMail.currency_list)
  return currency_list_.Mutable(index);
}
::AFMsg::CurrencyStruct* ReqSendMail::add_currency_list() {
  // @@protoc_insertion_point(field_add:AFMsg.ReqSendMail.currency_list)
  return currency_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::AFMsg::CurrencyStruct >*
ReqSendMail::mutable_currency_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqSendMail.currency_list)
  return &currency_list_;
}
const ::google::protobuf::RepeatedPtrField< ::AFMsg::CurrencyStruct >&
ReqSendMail::currency_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqSendMail.currency_list)
  return currency_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqSwitchServer::kSelfidFieldNumber;
const int ReqSwitchServer::kSelfServeridFieldNumber;
const int ReqSwitchServer::kTargetServeridFieldNumber;
const int ReqSwitchServer::kGateServeridFieldNumber;
const int ReqSwitchServer::kSceneIDFieldNumber;
const int ReqSwitchServer::kClientIdFieldNumber;
const int ReqSwitchServer::kGroupIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqSwitchServer::ReqSwitchServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqSwitchServer)
}

void ReqSwitchServer::InitAsDefaultInstance() {
  selfid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  client_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqSwitchServer::ReqSwitchServer(const ReqSwitchServer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqSwitchServer)
}

void ReqSwitchServer::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  self_serverid_ = GOOGLE_LONGLONG(0);
  target_serverid_ = GOOGLE_LONGLONG(0);
  gate_serverid_ = GOOGLE_LONGLONG(0);
  sceneid_ = GOOGLE_LONGLONG(0);
  client_id_ = NULL;
  groupid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSwitchServer::~ReqSwitchServer() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqSwitchServer)
  SharedDtor();
}

void ReqSwitchServer::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
    delete client_id_;
  }
}

void ReqSwitchServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSwitchServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSwitchServer_descriptor_;
}

const ReqSwitchServer& ReqSwitchServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqSwitchServer* ReqSwitchServer::default_instance_ = NULL;

ReqSwitchServer* ReqSwitchServer::New(::google::protobuf::Arena* arena) const {
  ReqSwitchServer* n = new ReqSwitchServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqSwitchServer::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqSwitchServer)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqSwitchServer, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqSwitchServer*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(self_serverid_, sceneid_);
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
    }
    if (has_client_id()) {
      if (client_id_ != NULL) client_id_->::AFMsg::Ident::Clear();
    }
    groupid_ = GOOGLE_LONGLONG(0);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqSwitchServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqSwitchServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident selfid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_self_serverid;
        break;
      }

      // required int64 self_serverid = 2;
      case 2: {
        if (tag == 16) {
         parse_self_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &self_serverid_)));
          set_has_self_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_target_serverid;
        break;
      }

      // required int64 target_serverid = 3;
      case 3: {
        if (tag == 24) {
         parse_target_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_serverid_)));
          set_has_target_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gate_serverid;
        break;
      }

      // required int64 gate_serverid = 4;
      case 4: {
        if (tag == 32) {
         parse_gate_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gate_serverid_)));
          set_has_gate_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_SceneID;
        break;
      }

      // required int64 SceneID = 5;
      case 5: {
        if (tag == 40) {
         parse_SceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_client_id;
        break;
      }

      // required .AFMsg.Ident client_id = 6;
      case 6: {
        if (tag == 50) {
         parse_client_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_groupID;
        break;
      }

      // required int64 groupID = 7;
      case 7: {
        if (tag == 56) {
         parse_groupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqSwitchServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqSwitchServer)
  return false;
#undef DO_
}

void ReqSwitchServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqSwitchServer)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->selfid_, output);
  }

  // required int64 self_serverid = 2;
  if (has_self_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->self_serverid(), output);
  }

  // required int64 target_serverid = 3;
  if (has_target_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->target_serverid(), output);
  }

  // required int64 gate_serverid = 4;
  if (has_gate_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->gate_serverid(), output);
  }

  // required int64 SceneID = 5;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->sceneid(), output);
  }

  // required .AFMsg.Ident client_id = 6;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->client_id_, output);
  }

  // required int64 groupID = 7;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->groupid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqSwitchServer)
}

::google::protobuf::uint8* ReqSwitchServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqSwitchServer)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->selfid_, false, target);
  }

  // required int64 self_serverid = 2;
  if (has_self_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->self_serverid(), target);
  }

  // required int64 target_serverid = 3;
  if (has_target_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->target_serverid(), target);
  }

  // required int64 gate_serverid = 4;
  if (has_gate_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->gate_serverid(), target);
  }

  // required int64 SceneID = 5;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->sceneid(), target);
  }

  // required .AFMsg.Ident client_id = 6;
  if (has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->client_id_, false, target);
  }

  // required int64 groupID = 7;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->groupid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqSwitchServer)
  return target;
}

int ReqSwitchServer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqSwitchServer)
  int total_size = 0;

  if (has_selfid()) {
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);
  }

  if (has_self_serverid()) {
    // required int64 self_serverid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->self_serverid());
  }

  if (has_target_serverid()) {
    // required int64 target_serverid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->target_serverid());
  }

  if (has_gate_serverid()) {
    // required int64 gate_serverid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gate_serverid());
  }

  if (has_sceneid()) {
    // required int64 SceneID = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sceneid());
  }

  if (has_client_id()) {
    // required .AFMsg.Ident client_id = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->client_id_);
  }

  if (has_groupid()) {
    // required int64 groupID = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->groupid());
  }

  return total_size;
}
int ReqSwitchServer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqSwitchServer)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);

    // required int64 self_serverid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->self_serverid());

    // required int64 target_serverid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->target_serverid());

    // required int64 gate_serverid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gate_serverid());

    // required int64 SceneID = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sceneid());

    // required .AFMsg.Ident client_id = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->client_id_);

    // required int64 groupID = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->groupid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSwitchServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqSwitchServer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqSwitchServer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqSwitchServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqSwitchServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqSwitchServer)
    MergeFrom(*source);
  }
}

void ReqSwitchServer::MergeFrom(const ReqSwitchServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqSwitchServer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_self_serverid()) {
      set_self_serverid(from.self_serverid());
    }
    if (from.has_target_serverid()) {
      set_target_serverid(from.target_serverid());
    }
    if (from.has_gate_serverid()) {
      set_gate_serverid(from.gate_serverid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_client_id()) {
      mutable_client_id()->::AFMsg::Ident::MergeFrom(from.client_id());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqSwitchServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqSwitchServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSwitchServer::CopyFrom(const ReqSwitchServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqSwitchServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSwitchServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_selfid()) {
    if (!this->selfid_->IsInitialized()) return false;
  }
  if (has_client_id()) {
    if (!this->client_id_->IsInitialized()) return false;
  }
  return true;
}

void ReqSwitchServer::Swap(ReqSwitchServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqSwitchServer::InternalSwap(ReqSwitchServer* other) {
  std::swap(selfid_, other->selfid_);
  std::swap(self_serverid_, other->self_serverid_);
  std::swap(target_serverid_, other->target_serverid_);
  std::swap(gate_serverid_, other->gate_serverid_);
  std::swap(sceneid_, other->sceneid_);
  std::swap(client_id_, other->client_id_);
  std::swap(groupid_, other->groupid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqSwitchServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSwitchServer_descriptor_;
  metadata.reflection = ReqSwitchServer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqSwitchServer

// required .AFMsg.Ident selfid = 1;
bool ReqSwitchServer::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqSwitchServer::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqSwitchServer::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqSwitchServer::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
const ::AFMsg::Ident& ReqSwitchServer::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSwitchServer.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
::AFMsg::Ident* ReqSwitchServer::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSwitchServer.selfid)
  return selfid_;
}
::AFMsg::Ident* ReqSwitchServer::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqSwitchServer.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
void ReqSwitchServer::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqSwitchServer.selfid)
}

// required int64 self_serverid = 2;
bool ReqSwitchServer::has_self_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqSwitchServer::set_has_self_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqSwitchServer::clear_has_self_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqSwitchServer::clear_self_serverid() {
  self_serverid_ = GOOGLE_LONGLONG(0);
  clear_has_self_serverid();
}
 ::google::protobuf::int64 ReqSwitchServer::self_serverid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSwitchServer.self_serverid)
  return self_serverid_;
}
 void ReqSwitchServer::set_self_serverid(::google::protobuf::int64 value) {
  set_has_self_serverid();
  self_serverid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqSwitchServer.self_serverid)
}

// required int64 target_serverid = 3;
bool ReqSwitchServer::has_target_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqSwitchServer::set_has_target_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqSwitchServer::clear_has_target_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqSwitchServer::clear_target_serverid() {
  target_serverid_ = GOOGLE_LONGLONG(0);
  clear_has_target_serverid();
}
 ::google::protobuf::int64 ReqSwitchServer::target_serverid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSwitchServer.target_serverid)
  return target_serverid_;
}
 void ReqSwitchServer::set_target_serverid(::google::protobuf::int64 value) {
  set_has_target_serverid();
  target_serverid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqSwitchServer.target_serverid)
}

// required int64 gate_serverid = 4;
bool ReqSwitchServer::has_gate_serverid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReqSwitchServer::set_has_gate_serverid() {
  _has_bits_[0] |= 0x00000008u;
}
void ReqSwitchServer::clear_has_gate_serverid() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReqSwitchServer::clear_gate_serverid() {
  gate_serverid_ = GOOGLE_LONGLONG(0);
  clear_has_gate_serverid();
}
 ::google::protobuf::int64 ReqSwitchServer::gate_serverid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSwitchServer.gate_serverid)
  return gate_serverid_;
}
 void ReqSwitchServer::set_gate_serverid(::google::protobuf::int64 value) {
  set_has_gate_serverid();
  gate_serverid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqSwitchServer.gate_serverid)
}

// required int64 SceneID = 5;
bool ReqSwitchServer::has_sceneid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ReqSwitchServer::set_has_sceneid() {
  _has_bits_[0] |= 0x00000010u;
}
void ReqSwitchServer::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000010u;
}
void ReqSwitchServer::clear_sceneid() {
  sceneid_ = GOOGLE_LONGLONG(0);
  clear_has_sceneid();
}
 ::google::protobuf::int64 ReqSwitchServer::sceneid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSwitchServer.SceneID)
  return sceneid_;
}
 void ReqSwitchServer::set_sceneid(::google::protobuf::int64 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqSwitchServer.SceneID)
}

// required .AFMsg.Ident client_id = 6;
bool ReqSwitchServer::has_client_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ReqSwitchServer::set_has_client_id() {
  _has_bits_[0] |= 0x00000020u;
}
void ReqSwitchServer::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void ReqSwitchServer::clear_client_id() {
  if (client_id_ != NULL) client_id_->::AFMsg::Ident::Clear();
  clear_has_client_id();
}
const ::AFMsg::Ident& ReqSwitchServer::client_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSwitchServer.client_id)
  return client_id_ != NULL ? *client_id_ : *default_instance_->client_id_;
}
::AFMsg::Ident* ReqSwitchServer::mutable_client_id() {
  set_has_client_id();
  if (client_id_ == NULL) {
    client_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqSwitchServer.client_id)
  return client_id_;
}
::AFMsg::Ident* ReqSwitchServer::release_client_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqSwitchServer.client_id)
  clear_has_client_id();
  ::AFMsg::Ident* temp = client_id_;
  client_id_ = NULL;
  return temp;
}
void ReqSwitchServer::set_allocated_client_id(::AFMsg::Ident* client_id) {
  delete client_id_;
  client_id_ = client_id;
  if (client_id) {
    set_has_client_id();
  } else {
    clear_has_client_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqSwitchServer.client_id)
}

// required int64 groupID = 7;
bool ReqSwitchServer::has_groupid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ReqSwitchServer::set_has_groupid() {
  _has_bits_[0] |= 0x00000040u;
}
void ReqSwitchServer::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000040u;
}
void ReqSwitchServer::clear_groupid() {
  groupid_ = GOOGLE_LONGLONG(0);
  clear_has_groupid();
}
 ::google::protobuf::int64 ReqSwitchServer::groupid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqSwitchServer.groupID)
  return groupid_;
}
 void ReqSwitchServer::set_groupid(::google::protobuf::int64 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqSwitchServer.groupID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckSwitchServer::kSelfidFieldNumber;
const int AckSwitchServer::kSelfServeridFieldNumber;
const int AckSwitchServer::kTargetServeridFieldNumber;
const int AckSwitchServer::kGateServeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckSwitchServer::AckSwitchServer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckSwitchServer)
}

void AckSwitchServer::InitAsDefaultInstance() {
  selfid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

AckSwitchServer::AckSwitchServer(const AckSwitchServer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckSwitchServer)
}

void AckSwitchServer::SharedCtor() {
  _cached_size_ = 0;
  selfid_ = NULL;
  self_serverid_ = GOOGLE_LONGLONG(0);
  target_serverid_ = GOOGLE_LONGLONG(0);
  gate_serverid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckSwitchServer::~AckSwitchServer() {
  // @@protoc_insertion_point(destructor:AFMsg.AckSwitchServer)
  SharedDtor();
}

void AckSwitchServer::SharedDtor() {
  if (this != default_instance_) {
    delete selfid_;
  }
}

void AckSwitchServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckSwitchServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckSwitchServer_descriptor_;
}

const AckSwitchServer& AckSwitchServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

AckSwitchServer* AckSwitchServer::default_instance_ = NULL;

AckSwitchServer* AckSwitchServer::New(::google::protobuf::Arena* arena) const {
  AckSwitchServer* n = new AckSwitchServer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckSwitchServer::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckSwitchServer)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AckSwitchServer, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AckSwitchServer*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(self_serverid_, gate_serverid_);
    if (has_selfid()) {
      if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AckSwitchServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckSwitchServer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident selfid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_self_serverid;
        break;
      }

      // required int64 self_serverid = 2;
      case 2: {
        if (tag == 16) {
         parse_self_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &self_serverid_)));
          set_has_self_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_target_serverid;
        break;
      }

      // required int64 target_serverid = 3;
      case 3: {
        if (tag == 24) {
         parse_target_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_serverid_)));
          set_has_target_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gate_serverid;
        break;
      }

      // required int64 gate_serverid = 4;
      case 4: {
        if (tag == 32) {
         parse_gate_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gate_serverid_)));
          set_has_gate_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckSwitchServer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckSwitchServer)
  return false;
#undef DO_
}

void AckSwitchServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckSwitchServer)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->selfid_, output);
  }

  // required int64 self_serverid = 2;
  if (has_self_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->self_serverid(), output);
  }

  // required int64 target_serverid = 3;
  if (has_target_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->target_serverid(), output);
  }

  // required int64 gate_serverid = 4;
  if (has_gate_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->gate_serverid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckSwitchServer)
}

::google::protobuf::uint8* AckSwitchServer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckSwitchServer)
  // required .AFMsg.Ident selfid = 1;
  if (has_selfid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->selfid_, false, target);
  }

  // required int64 self_serverid = 2;
  if (has_self_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->self_serverid(), target);
  }

  // required int64 target_serverid = 3;
  if (has_target_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->target_serverid(), target);
  }

  // required int64 gate_serverid = 4;
  if (has_gate_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->gate_serverid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckSwitchServer)
  return target;
}

int AckSwitchServer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.AckSwitchServer)
  int total_size = 0;

  if (has_selfid()) {
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);
  }

  if (has_self_serverid()) {
    // required int64 self_serverid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->self_serverid());
  }

  if (has_target_serverid()) {
    // required int64 target_serverid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->target_serverid());
  }

  if (has_gate_serverid()) {
    // required int64 gate_serverid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gate_serverid());
  }

  return total_size;
}
int AckSwitchServer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckSwitchServer)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .AFMsg.Ident selfid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selfid_);

    // required int64 self_serverid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->self_serverid());

    // required int64 target_serverid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->target_serverid());

    // required int64 gate_serverid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->gate_serverid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckSwitchServer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckSwitchServer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AckSwitchServer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AckSwitchServer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckSwitchServer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckSwitchServer)
    MergeFrom(*source);
  }
}

void AckSwitchServer::MergeFrom(const AckSwitchServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckSwitchServer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfid()) {
      mutable_selfid()->::AFMsg::Ident::MergeFrom(from.selfid());
    }
    if (from.has_self_serverid()) {
      set_self_serverid(from.self_serverid());
    }
    if (from.has_target_serverid()) {
      set_target_serverid(from.target_serverid());
    }
    if (from.has_gate_serverid()) {
      set_gate_serverid(from.gate_serverid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AckSwitchServer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckSwitchServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSwitchServer::CopyFrom(const AckSwitchServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckSwitchServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSwitchServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_selfid()) {
    if (!this->selfid_->IsInitialized()) return false;
  }
  return true;
}

void AckSwitchServer::Swap(AckSwitchServer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckSwitchServer::InternalSwap(AckSwitchServer* other) {
  std::swap(selfid_, other->selfid_);
  std::swap(self_serverid_, other->self_serverid_);
  std::swap(target_serverid_, other->target_serverid_);
  std::swap(gate_serverid_, other->gate_serverid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckSwitchServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckSwitchServer_descriptor_;
  metadata.reflection = AckSwitchServer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckSwitchServer

// required .AFMsg.Ident selfid = 1;
bool AckSwitchServer::has_selfid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AckSwitchServer::set_has_selfid() {
  _has_bits_[0] |= 0x00000001u;
}
void AckSwitchServer::clear_has_selfid() {
  _has_bits_[0] &= ~0x00000001u;
}
void AckSwitchServer::clear_selfid() {
  if (selfid_ != NULL) selfid_->::AFMsg::Ident::Clear();
  clear_has_selfid();
}
const ::AFMsg::Ident& AckSwitchServer::selfid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSwitchServer.selfid)
  return selfid_ != NULL ? *selfid_ : *default_instance_->selfid_;
}
::AFMsg::Ident* AckSwitchServer::mutable_selfid() {
  set_has_selfid();
  if (selfid_ == NULL) {
    selfid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckSwitchServer.selfid)
  return selfid_;
}
::AFMsg::Ident* AckSwitchServer::release_selfid() {
  // @@protoc_insertion_point(field_release:AFMsg.AckSwitchServer.selfid)
  clear_has_selfid();
  ::AFMsg::Ident* temp = selfid_;
  selfid_ = NULL;
  return temp;
}
void AckSwitchServer::set_allocated_selfid(::AFMsg::Ident* selfid) {
  delete selfid_;
  selfid_ = selfid;
  if (selfid) {
    set_has_selfid();
  } else {
    clear_has_selfid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckSwitchServer.selfid)
}

// required int64 self_serverid = 2;
bool AckSwitchServer::has_self_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AckSwitchServer::set_has_self_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
void AckSwitchServer::clear_has_self_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
void AckSwitchServer::clear_self_serverid() {
  self_serverid_ = GOOGLE_LONGLONG(0);
  clear_has_self_serverid();
}
 ::google::protobuf::int64 AckSwitchServer::self_serverid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSwitchServer.self_serverid)
  return self_serverid_;
}
 void AckSwitchServer::set_self_serverid(::google::protobuf::int64 value) {
  set_has_self_serverid();
  self_serverid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckSwitchServer.self_serverid)
}

// required int64 target_serverid = 3;
bool AckSwitchServer::has_target_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AckSwitchServer::set_has_target_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
void AckSwitchServer::clear_has_target_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
void AckSwitchServer::clear_target_serverid() {
  target_serverid_ = GOOGLE_LONGLONG(0);
  clear_has_target_serverid();
}
 ::google::protobuf::int64 AckSwitchServer::target_serverid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSwitchServer.target_serverid)
  return target_serverid_;
}
 void AckSwitchServer::set_target_serverid(::google::protobuf::int64 value) {
  set_has_target_serverid();
  target_serverid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckSwitchServer.target_serverid)
}

// required int64 gate_serverid = 4;
bool AckSwitchServer::has_gate_serverid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AckSwitchServer::set_has_gate_serverid() {
  _has_bits_[0] |= 0x00000008u;
}
void AckSwitchServer::clear_has_gate_serverid() {
  _has_bits_[0] &= ~0x00000008u;
}
void AckSwitchServer::clear_gate_serverid() {
  gate_serverid_ = GOOGLE_LONGLONG(0);
  clear_has_gate_serverid();
}
 ::google::protobuf::int64 AckSwitchServer::gate_serverid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckSwitchServer.gate_serverid)
  return gate_serverid_;
}
 void AckSwitchServer::set_gate_serverid(::google::protobuf::int64 value) {
  set_has_gate_serverid();
  gate_serverid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckSwitchServer.gate_serverid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamInfo::kTeamIdFieldNumber;
const int TeamInfo::kCaptainIdFieldNumber;
const int TeamInfo::kTeammemberInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamInfo::TeamInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.TeamInfo)
}

void TeamInfo::InitAsDefaultInstance() {
  team_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  captain_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

TeamInfo::TeamInfo(const TeamInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.TeamInfo)
}

void TeamInfo::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = NULL;
  captain_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamInfo::~TeamInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.TeamInfo)
  SharedDtor();
}

void TeamInfo::SharedDtor() {
  if (this != default_instance_) {
    delete team_id_;
    delete captain_id_;
  }
}

void TeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamInfo_descriptor_;
}

const TeamInfo& TeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

TeamInfo* TeamInfo::default_instance_ = NULL;

TeamInfo* TeamInfo::New(::google::protobuf::Arena* arena) const {
  TeamInfo* n = new TeamInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.TeamInfo)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_team_id()) {
      if (team_id_ != NULL) team_id_->::AFMsg::Ident::Clear();
    }
    if (has_captain_id()) {
      if (captain_id_ != NULL) captain_id_->::AFMsg::Ident::Clear();
    }
  }
  teammemberinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.TeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident team_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_captain_id;
        break;
      }

      // required .AFMsg.Ident captain_id = 2;
      case 2: {
        if (tag == 18) {
         parse_captain_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_captain_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_teammemberInfo;
        break;
      }

      // repeated .AFMsg.TeammemberInfo teammemberInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_teammemberInfo:
          DO_(input->IncrementRecursionDepth());
         parse_loop_teammemberInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_teammemberinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_teammemberInfo;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.TeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.TeamInfo)
  return false;
#undef DO_
}

void TeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.TeamInfo)
  // required .AFMsg.Ident team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->team_id_, output);
  }

  // required .AFMsg.Ident captain_id = 2;
  if (has_captain_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->captain_id_, output);
  }

  // repeated .AFMsg.TeammemberInfo teammemberInfo = 3;
  for (unsigned int i = 0, n = this->teammemberinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->teammemberinfo(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.TeamInfo)
}

::google::protobuf::uint8* TeamInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.TeamInfo)
  // required .AFMsg.Ident team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->team_id_, false, target);
  }

  // required .AFMsg.Ident captain_id = 2;
  if (has_captain_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->captain_id_, false, target);
  }

  // repeated .AFMsg.TeammemberInfo teammemberInfo = 3;
  for (unsigned int i = 0, n = this->teammemberinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->teammemberinfo(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.TeamInfo)
  return target;
}

int TeamInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.TeamInfo)
  int total_size = 0;

  if (has_team_id()) {
    // required .AFMsg.Ident team_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->team_id_);
  }

  if (has_captain_id()) {
    // required .AFMsg.Ident captain_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->captain_id_);
  }

  return total_size;
}
int TeamInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.TeamInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .AFMsg.Ident team_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->team_id_);

    // required .AFMsg.Ident captain_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->captain_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .AFMsg.TeammemberInfo teammemberInfo = 3;
  total_size += 1 * this->teammemberinfo_size();
  for (int i = 0; i < this->teammemberinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teammemberinfo(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.TeamInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TeamInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.TeamInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.TeamInfo)
    MergeFrom(*source);
  }
}

void TeamInfo::MergeFrom(const TeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.TeamInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  teammemberinfo_.MergeFrom(from.teammemberinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      mutable_team_id()->::AFMsg::Ident::MergeFrom(from.team_id());
    }
    if (from.has_captain_id()) {
      mutable_captain_id()->::AFMsg::Ident::MergeFrom(from.captain_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamInfo::CopyFrom(const TeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_team_id()) {
    if (!this->team_id_->IsInitialized()) return false;
  }
  if (has_captain_id()) {
    if (!this->captain_id_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->teammemberinfo())) return false;
  return true;
}

void TeamInfo::Swap(TeamInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamInfo::InternalSwap(TeamInfo* other) {
  std::swap(team_id_, other->team_id_);
  std::swap(captain_id_, other->captain_id_);
  teammemberinfo_.UnsafeArenaSwap(&other->teammemberinfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamInfo_descriptor_;
  metadata.reflection = TeamInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamInfo

// required .AFMsg.Ident team_id = 1;
bool TeamInfo::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeamInfo::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TeamInfo::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeamInfo::clear_team_id() {
  if (team_id_ != NULL) team_id_->::AFMsg::Ident::Clear();
  clear_has_team_id();
}
const ::AFMsg::Ident& TeamInfo::team_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.TeamInfo.team_id)
  return team_id_ != NULL ? *team_id_ : *default_instance_->team_id_;
}
::AFMsg::Ident* TeamInfo::mutable_team_id() {
  set_has_team_id();
  if (team_id_ == NULL) {
    team_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.TeamInfo.team_id)
  return team_id_;
}
::AFMsg::Ident* TeamInfo::release_team_id() {
  // @@protoc_insertion_point(field_release:AFMsg.TeamInfo.team_id)
  clear_has_team_id();
  ::AFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
void TeamInfo::set_allocated_team_id(::AFMsg::Ident* team_id) {
  delete team_id_;
  team_id_ = team_id;
  if (team_id) {
    set_has_team_id();
  } else {
    clear_has_team_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.TeamInfo.team_id)
}

// required .AFMsg.Ident captain_id = 2;
bool TeamInfo::has_captain_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TeamInfo::set_has_captain_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TeamInfo::clear_has_captain_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TeamInfo::clear_captain_id() {
  if (captain_id_ != NULL) captain_id_->::AFMsg::Ident::Clear();
  clear_has_captain_id();
}
const ::AFMsg::Ident& TeamInfo::captain_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.TeamInfo.captain_id)
  return captain_id_ != NULL ? *captain_id_ : *default_instance_->captain_id_;
}
::AFMsg::Ident* TeamInfo::mutable_captain_id() {
  set_has_captain_id();
  if (captain_id_ == NULL) {
    captain_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.TeamInfo.captain_id)
  return captain_id_;
}
::AFMsg::Ident* TeamInfo::release_captain_id() {
  // @@protoc_insertion_point(field_release:AFMsg.TeamInfo.captain_id)
  clear_has_captain_id();
  ::AFMsg::Ident* temp = captain_id_;
  captain_id_ = NULL;
  return temp;
}
void TeamInfo::set_allocated_captain_id(::AFMsg::Ident* captain_id) {
  delete captain_id_;
  captain_id_ = captain_id;
  if (captain_id) {
    set_has_captain_id();
  } else {
    clear_has_captain_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.TeamInfo.captain_id)
}

// repeated .AFMsg.TeammemberInfo teammemberInfo = 3;
int TeamInfo::teammemberinfo_size() const {
  return teammemberinfo_.size();
}
void TeamInfo::clear_teammemberinfo() {
  teammemberinfo_.Clear();
}
const ::AFMsg::TeammemberInfo& TeamInfo::teammemberinfo(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.TeamInfo.teammemberInfo)
  return teammemberinfo_.Get(index);
}
::AFMsg::TeammemberInfo* TeamInfo::mutable_teammemberinfo(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.TeamInfo.teammemberInfo)
  return teammemberinfo_.Mutable(index);
}
::AFMsg::TeammemberInfo* TeamInfo::add_teammemberinfo() {
  // @@protoc_insertion_point(field_add:AFMsg.TeamInfo.teammemberInfo)
  return teammemberinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::AFMsg::TeammemberInfo >*
TeamInfo::mutable_teammemberinfo() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.TeamInfo.teammemberInfo)
  return &teammemberinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::AFMsg::TeammemberInfo >&
TeamInfo::teammemberinfo() const {
  // @@protoc_insertion_point(field_list:AFMsg.TeamInfo.teammemberInfo)
  return teammemberinfo_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeammemberInfo::kPlayerIdFieldNumber;
const int TeammemberInfo::kNameFieldNumber;
const int TeammemberInfo::kNLevelFieldNumber;
const int TeammemberInfo::kJobFieldNumber;
const int TeammemberInfo::kHeadIconFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeammemberInfo::TeammemberInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.TeammemberInfo)
}

void TeammemberInfo::InitAsDefaultInstance() {
  player_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

TeammemberInfo::TeammemberInfo(const TeammemberInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.TeammemberInfo)
}

void TeammemberInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_id_ = NULL;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nlevel_ = 0;
  job_ = 0;
  headicon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeammemberInfo::~TeammemberInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.TeammemberInfo)
  SharedDtor();
}

void TeammemberInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  headicon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete player_id_;
  }
}

void TeammemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeammemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeammemberInfo_descriptor_;
}

const TeammemberInfo& TeammemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

TeammemberInfo* TeammemberInfo::default_instance_ = NULL;

TeammemberInfo* TeammemberInfo::New(::google::protobuf::Arena* arena) const {
  TeammemberInfo* n = new TeammemberInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeammemberInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.TeammemberInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TeammemberInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TeammemberInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(nlevel_, job_);
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::AFMsg::Ident::Clear();
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_headicon()) {
      headicon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TeammemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.TeammemberInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident player_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AFMsg.TeammemberInfo.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nLevel;
        break;
      }

      // required int32 nLevel = 3;
      case 3: {
        if (tag == 24) {
         parse_nLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlevel_)));
          set_has_nlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // required int32 job = 4;
      case 4: {
        if (tag == 32) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_HeadIcon;
        break;
      }

      // required string HeadIcon = 5;
      case 5: {
        if (tag == 42) {
         parse_HeadIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headicon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->headicon().data(), this->headicon().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AFMsg.TeammemberInfo.HeadIcon");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.TeammemberInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.TeammemberInfo)
  return false;
#undef DO_
}

void TeammemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.TeammemberInfo)
  // required .AFMsg.Ident player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_id_, output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AFMsg.TeammemberInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required int32 nLevel = 3;
  if (has_nlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nlevel(), output);
  }

  // required int32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->job(), output);
  }

  // required string HeadIcon = 5;
  if (has_headicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headicon().data(), this->headicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AFMsg.TeammemberInfo.HeadIcon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->headicon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.TeammemberInfo)
}

::google::protobuf::uint8* TeammemberInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.TeammemberInfo)
  // required .AFMsg.Ident player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_id_, false, target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AFMsg.TeammemberInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 nLevel = 3;
  if (has_nlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nlevel(), target);
  }

  // required int32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->job(), target);
  }

  // required string HeadIcon = 5;
  if (has_headicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->headicon().data(), this->headicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AFMsg.TeammemberInfo.HeadIcon");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->headicon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.TeammemberInfo)
  return target;
}

int TeammemberInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.TeammemberInfo)
  int total_size = 0;

  if (has_player_id()) {
    // required .AFMsg.Ident player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);
  }

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_nlevel()) {
    // required int32 nLevel = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nlevel());
  }

  if (has_job()) {
    // required int32 job = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->job());
  }

  if (has_headicon()) {
    // required string HeadIcon = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->headicon());
  }

  return total_size;
}
int TeammemberInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.TeammemberInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .AFMsg.Ident player_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_id_);

    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required int32 nLevel = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nlevel());

    // required int32 job = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->job());

    // required string HeadIcon = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->headicon());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeammemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.TeammemberInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TeammemberInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TeammemberInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.TeammemberInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.TeammemberInfo)
    MergeFrom(*source);
  }
}

void TeammemberInfo::MergeFrom(const TeammemberInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.TeammemberInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      mutable_player_id()->::AFMsg::Ident::MergeFrom(from.player_id());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_nlevel()) {
      set_nlevel(from.nlevel());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_headicon()) {
      set_has_headicon();
      headicon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.headicon_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TeammemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.TeammemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeammemberInfo::CopyFrom(const TeammemberInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.TeammemberInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeammemberInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_player_id()) {
    if (!this->player_id_->IsInitialized()) return false;
  }
  return true;
}

void TeammemberInfo::Swap(TeammemberInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeammemberInfo::InternalSwap(TeammemberInfo* other) {
  std::swap(player_id_, other->player_id_);
  name_.Swap(&other->name_);
  std::swap(nlevel_, other->nlevel_);
  std::swap(job_, other->job_);
  headicon_.Swap(&other->headicon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeammemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeammemberInfo_descriptor_;
  metadata.reflection = TeammemberInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeammemberInfo

// required .AFMsg.Ident player_id = 1;
bool TeammemberInfo::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TeammemberInfo::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TeammemberInfo::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TeammemberInfo::clear_player_id() {
  if (player_id_ != NULL) player_id_->::AFMsg::Ident::Clear();
  clear_has_player_id();
}
const ::AFMsg::Ident& TeammemberInfo::player_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.TeammemberInfo.player_id)
  return player_id_ != NULL ? *player_id_ : *default_instance_->player_id_;
}
::AFMsg::Ident* TeammemberInfo::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == NULL) {
    player_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.TeammemberInfo.player_id)
  return player_id_;
}
::AFMsg::Ident* TeammemberInfo::release_player_id() {
  // @@protoc_insertion_point(field_release:AFMsg.TeammemberInfo.player_id)
  clear_has_player_id();
  ::AFMsg::Ident* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
void TeammemberInfo::set_allocated_player_id(::AFMsg::Ident* player_id) {
  delete player_id_;
  player_id_ = player_id;
  if (player_id) {
    set_has_player_id();
  } else {
    clear_has_player_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.TeammemberInfo.player_id)
}

// required string name = 2;
bool TeammemberInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TeammemberInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void TeammemberInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void TeammemberInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& TeammemberInfo::name() const {
  // @@protoc_insertion_point(field_get:AFMsg.TeammemberInfo.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TeammemberInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.TeammemberInfo.name)
}
 void TeammemberInfo::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.TeammemberInfo.name)
}
 void TeammemberInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.TeammemberInfo.name)
}
 ::std::string* TeammemberInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:AFMsg.TeammemberInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TeammemberInfo::release_name() {
  // @@protoc_insertion_point(field_release:AFMsg.TeammemberInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TeammemberInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.TeammemberInfo.name)
}

// required int32 nLevel = 3;
bool TeammemberInfo::has_nlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TeammemberInfo::set_has_nlevel() {
  _has_bits_[0] |= 0x00000004u;
}
void TeammemberInfo::clear_has_nlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
void TeammemberInfo::clear_nlevel() {
  nlevel_ = 0;
  clear_has_nlevel();
}
 ::google::protobuf::int32 TeammemberInfo::nlevel() const {
  // @@protoc_insertion_point(field_get:AFMsg.TeammemberInfo.nLevel)
  return nlevel_;
}
 void TeammemberInfo::set_nlevel(::google::protobuf::int32 value) {
  set_has_nlevel();
  nlevel_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.TeammemberInfo.nLevel)
}

// required int32 job = 4;
bool TeammemberInfo::has_job() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TeammemberInfo::set_has_job() {
  _has_bits_[0] |= 0x00000008u;
}
void TeammemberInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000008u;
}
void TeammemberInfo::clear_job() {
  job_ = 0;
  clear_has_job();
}
 ::google::protobuf::int32 TeammemberInfo::job() const {
  // @@protoc_insertion_point(field_get:AFMsg.TeammemberInfo.job)
  return job_;
}
 void TeammemberInfo::set_job(::google::protobuf::int32 value) {
  set_has_job();
  job_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.TeammemberInfo.job)
}

// required string HeadIcon = 5;
bool TeammemberInfo::has_headicon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TeammemberInfo::set_has_headicon() {
  _has_bits_[0] |= 0x00000010u;
}
void TeammemberInfo::clear_has_headicon() {
  _has_bits_[0] &= ~0x00000010u;
}
void TeammemberInfo::clear_headicon() {
  headicon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_headicon();
}
 const ::std::string& TeammemberInfo::headicon() const {
  // @@protoc_insertion_point(field_get:AFMsg.TeammemberInfo.HeadIcon)
  return headicon_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TeammemberInfo::set_headicon(const ::std::string& value) {
  set_has_headicon();
  headicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.TeammemberInfo.HeadIcon)
}
 void TeammemberInfo::set_headicon(const char* value) {
  set_has_headicon();
  headicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.TeammemberInfo.HeadIcon)
}
 void TeammemberInfo::set_headicon(const char* value, size_t size) {
  set_has_headicon();
  headicon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.TeammemberInfo.HeadIcon)
}
 ::std::string* TeammemberInfo::mutable_headicon() {
  set_has_headicon();
  // @@protoc_insertion_point(field_mutable:AFMsg.TeammemberInfo.HeadIcon)
  return headicon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TeammemberInfo::release_headicon() {
  // @@protoc_insertion_point(field_release:AFMsg.TeammemberInfo.HeadIcon)
  clear_has_headicon();
  return headicon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TeammemberInfo::set_allocated_headicon(::std::string* headicon) {
  if (headicon != NULL) {
    set_has_headicon();
  } else {
    clear_has_headicon();
  }
  headicon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headicon);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.TeammemberInfo.HeadIcon)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckCreateTeam::kTeamIdFieldNumber;
const int ReqAckCreateTeam::kXTeamInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckCreateTeam::ReqAckCreateTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckCreateTeam)
}

void ReqAckCreateTeam::InitAsDefaultInstance() {
  team_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  xteaminfo_ = const_cast< ::AFMsg::TeamInfo*>(&::AFMsg::TeamInfo::default_instance());
}

ReqAckCreateTeam::ReqAckCreateTeam(const ReqAckCreateTeam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckCreateTeam)
}

void ReqAckCreateTeam::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = NULL;
  xteaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckCreateTeam::~ReqAckCreateTeam() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckCreateTeam)
  SharedDtor();
}

void ReqAckCreateTeam::SharedDtor() {
  if (this != default_instance_) {
    delete team_id_;
    delete xteaminfo_;
  }
}

void ReqAckCreateTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckCreateTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckCreateTeam_descriptor_;
}

const ReqAckCreateTeam& ReqAckCreateTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckCreateTeam* ReqAckCreateTeam::default_instance_ = NULL;

ReqAckCreateTeam* ReqAckCreateTeam::New(::google::protobuf::Arena* arena) const {
  ReqAckCreateTeam* n = new ReqAckCreateTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckCreateTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckCreateTeam)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_team_id()) {
      if (team_id_ != NULL) team_id_->::AFMsg::Ident::Clear();
    }
    if (has_xteaminfo()) {
      if (xteaminfo_ != NULL) xteaminfo_->::AFMsg::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqAckCreateTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckCreateTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident team_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_xTeamInfo;
        break;
      }

      // optional .AFMsg.TeamInfo xTeamInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_xTeamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xteaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckCreateTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckCreateTeam)
  return false;
#undef DO_
}

void ReqAckCreateTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckCreateTeam)
  // required .AFMsg.Ident team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->team_id_, output);
  }

  // optional .AFMsg.TeamInfo xTeamInfo = 2;
  if (has_xteaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->xteaminfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckCreateTeam)
}

::google::protobuf::uint8* ReqAckCreateTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckCreateTeam)
  // required .AFMsg.Ident team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->team_id_, false, target);
  }

  // optional .AFMsg.TeamInfo xTeamInfo = 2;
  if (has_xteaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->xteaminfo_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckCreateTeam)
  return target;
}

int ReqAckCreateTeam::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckCreateTeam)
  int total_size = 0;

  // required .AFMsg.Ident team_id = 1;
  if (has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->team_id_);
  }
  // optional .AFMsg.TeamInfo xTeamInfo = 2;
  if (has_xteaminfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->xteaminfo_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckCreateTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckCreateTeam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqAckCreateTeam* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckCreateTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckCreateTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckCreateTeam)
    MergeFrom(*source);
  }
}

void ReqAckCreateTeam::MergeFrom(const ReqAckCreateTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckCreateTeam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      mutable_team_id()->::AFMsg::Ident::MergeFrom(from.team_id());
    }
    if (from.has_xteaminfo()) {
      mutable_xteaminfo()->::AFMsg::TeamInfo::MergeFrom(from.xteaminfo());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqAckCreateTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckCreateTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckCreateTeam::CopyFrom(const ReqAckCreateTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckCreateTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckCreateTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_team_id()) {
    if (!this->team_id_->IsInitialized()) return false;
  }
  if (has_xteaminfo()) {
    if (!this->xteaminfo_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckCreateTeam::Swap(ReqAckCreateTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckCreateTeam::InternalSwap(ReqAckCreateTeam* other) {
  std::swap(team_id_, other->team_id_);
  std::swap(xteaminfo_, other->xteaminfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckCreateTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckCreateTeam_descriptor_;
  metadata.reflection = ReqAckCreateTeam_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAckCreateTeam

// required .AFMsg.Ident team_id = 1;
bool ReqAckCreateTeam::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqAckCreateTeam::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqAckCreateTeam::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqAckCreateTeam::clear_team_id() {
  if (team_id_ != NULL) team_id_->::AFMsg::Ident::Clear();
  clear_has_team_id();
}
const ::AFMsg::Ident& ReqAckCreateTeam::team_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckCreateTeam.team_id)
  return team_id_ != NULL ? *team_id_ : *default_instance_->team_id_;
}
::AFMsg::Ident* ReqAckCreateTeam::mutable_team_id() {
  set_has_team_id();
  if (team_id_ == NULL) {
    team_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckCreateTeam.team_id)
  return team_id_;
}
::AFMsg::Ident* ReqAckCreateTeam::release_team_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckCreateTeam.team_id)
  clear_has_team_id();
  ::AFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
void ReqAckCreateTeam::set_allocated_team_id(::AFMsg::Ident* team_id) {
  delete team_id_;
  team_id_ = team_id;
  if (team_id) {
    set_has_team_id();
  } else {
    clear_has_team_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckCreateTeam.team_id)
}

// optional .AFMsg.TeamInfo xTeamInfo = 2;
bool ReqAckCreateTeam::has_xteaminfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqAckCreateTeam::set_has_xteaminfo() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqAckCreateTeam::clear_has_xteaminfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqAckCreateTeam::clear_xteaminfo() {
  if (xteaminfo_ != NULL) xteaminfo_->::AFMsg::TeamInfo::Clear();
  clear_has_xteaminfo();
}
const ::AFMsg::TeamInfo& ReqAckCreateTeam::xteaminfo() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckCreateTeam.xTeamInfo)
  return xteaminfo_ != NULL ? *xteaminfo_ : *default_instance_->xteaminfo_;
}
::AFMsg::TeamInfo* ReqAckCreateTeam::mutable_xteaminfo() {
  set_has_xteaminfo();
  if (xteaminfo_ == NULL) {
    xteaminfo_ = new ::AFMsg::TeamInfo;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckCreateTeam.xTeamInfo)
  return xteaminfo_;
}
::AFMsg::TeamInfo* ReqAckCreateTeam::release_xteaminfo() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckCreateTeam.xTeamInfo)
  clear_has_xteaminfo();
  ::AFMsg::TeamInfo* temp = xteaminfo_;
  xteaminfo_ = NULL;
  return temp;
}
void ReqAckCreateTeam::set_allocated_xteaminfo(::AFMsg::TeamInfo* xteaminfo) {
  delete xteaminfo_;
  xteaminfo_ = xteaminfo;
  if (xteaminfo) {
    set_has_xteaminfo();
  } else {
    clear_has_xteaminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckCreateTeam.xTeamInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckJoinTeam::kTeamIdFieldNumber;
const int ReqAckJoinTeam::kXTeamInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckJoinTeam::ReqAckJoinTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckJoinTeam)
}

void ReqAckJoinTeam::InitAsDefaultInstance() {
  team_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  xteaminfo_ = const_cast< ::AFMsg::TeamInfo*>(&::AFMsg::TeamInfo::default_instance());
}

ReqAckJoinTeam::ReqAckJoinTeam(const ReqAckJoinTeam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckJoinTeam)
}

void ReqAckJoinTeam::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = NULL;
  xteaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckJoinTeam::~ReqAckJoinTeam() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckJoinTeam)
  SharedDtor();
}

void ReqAckJoinTeam::SharedDtor() {
  if (this != default_instance_) {
    delete team_id_;
    delete xteaminfo_;
  }
}

void ReqAckJoinTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckJoinTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckJoinTeam_descriptor_;
}

const ReqAckJoinTeam& ReqAckJoinTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckJoinTeam* ReqAckJoinTeam::default_instance_ = NULL;

ReqAckJoinTeam* ReqAckJoinTeam::New(::google::protobuf::Arena* arena) const {
  ReqAckJoinTeam* n = new ReqAckJoinTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckJoinTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckJoinTeam)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_team_id()) {
      if (team_id_ != NULL) team_id_->::AFMsg::Ident::Clear();
    }
    if (has_xteaminfo()) {
      if (xteaminfo_ != NULL) xteaminfo_->::AFMsg::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqAckJoinTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckJoinTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident team_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_xTeamInfo;
        break;
      }

      // optional .AFMsg.TeamInfo xTeamInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_xTeamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xteaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckJoinTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckJoinTeam)
  return false;
#undef DO_
}

void ReqAckJoinTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckJoinTeam)
  // required .AFMsg.Ident team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->team_id_, output);
  }

  // optional .AFMsg.TeamInfo xTeamInfo = 2;
  if (has_xteaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->xteaminfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckJoinTeam)
}

::google::protobuf::uint8* ReqAckJoinTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckJoinTeam)
  // required .AFMsg.Ident team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->team_id_, false, target);
  }

  // optional .AFMsg.TeamInfo xTeamInfo = 2;
  if (has_xteaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->xteaminfo_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckJoinTeam)
  return target;
}

int ReqAckJoinTeam::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckJoinTeam)
  int total_size = 0;

  // required .AFMsg.Ident team_id = 1;
  if (has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->team_id_);
  }
  // optional .AFMsg.TeamInfo xTeamInfo = 2;
  if (has_xteaminfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->xteaminfo_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckJoinTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckJoinTeam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqAckJoinTeam* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckJoinTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckJoinTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckJoinTeam)
    MergeFrom(*source);
  }
}

void ReqAckJoinTeam::MergeFrom(const ReqAckJoinTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckJoinTeam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      mutable_team_id()->::AFMsg::Ident::MergeFrom(from.team_id());
    }
    if (from.has_xteaminfo()) {
      mutable_xteaminfo()->::AFMsg::TeamInfo::MergeFrom(from.xteaminfo());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqAckJoinTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckJoinTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckJoinTeam::CopyFrom(const ReqAckJoinTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckJoinTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckJoinTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_team_id()) {
    if (!this->team_id_->IsInitialized()) return false;
  }
  if (has_xteaminfo()) {
    if (!this->xteaminfo_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckJoinTeam::Swap(ReqAckJoinTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckJoinTeam::InternalSwap(ReqAckJoinTeam* other) {
  std::swap(team_id_, other->team_id_);
  std::swap(xteaminfo_, other->xteaminfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckJoinTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckJoinTeam_descriptor_;
  metadata.reflection = ReqAckJoinTeam_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAckJoinTeam

// required .AFMsg.Ident team_id = 1;
bool ReqAckJoinTeam::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqAckJoinTeam::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqAckJoinTeam::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqAckJoinTeam::clear_team_id() {
  if (team_id_ != NULL) team_id_->::AFMsg::Ident::Clear();
  clear_has_team_id();
}
const ::AFMsg::Ident& ReqAckJoinTeam::team_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckJoinTeam.team_id)
  return team_id_ != NULL ? *team_id_ : *default_instance_->team_id_;
}
::AFMsg::Ident* ReqAckJoinTeam::mutable_team_id() {
  set_has_team_id();
  if (team_id_ == NULL) {
    team_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckJoinTeam.team_id)
  return team_id_;
}
::AFMsg::Ident* ReqAckJoinTeam::release_team_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckJoinTeam.team_id)
  clear_has_team_id();
  ::AFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
void ReqAckJoinTeam::set_allocated_team_id(::AFMsg::Ident* team_id) {
  delete team_id_;
  team_id_ = team_id;
  if (team_id) {
    set_has_team_id();
  } else {
    clear_has_team_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckJoinTeam.team_id)
}

// optional .AFMsg.TeamInfo xTeamInfo = 2;
bool ReqAckJoinTeam::has_xteaminfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqAckJoinTeam::set_has_xteaminfo() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqAckJoinTeam::clear_has_xteaminfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqAckJoinTeam::clear_xteaminfo() {
  if (xteaminfo_ != NULL) xteaminfo_->::AFMsg::TeamInfo::Clear();
  clear_has_xteaminfo();
}
const ::AFMsg::TeamInfo& ReqAckJoinTeam::xteaminfo() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckJoinTeam.xTeamInfo)
  return xteaminfo_ != NULL ? *xteaminfo_ : *default_instance_->xteaminfo_;
}
::AFMsg::TeamInfo* ReqAckJoinTeam::mutable_xteaminfo() {
  set_has_xteaminfo();
  if (xteaminfo_ == NULL) {
    xteaminfo_ = new ::AFMsg::TeamInfo;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckJoinTeam.xTeamInfo)
  return xteaminfo_;
}
::AFMsg::TeamInfo* ReqAckJoinTeam::release_xteaminfo() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckJoinTeam.xTeamInfo)
  clear_has_xteaminfo();
  ::AFMsg::TeamInfo* temp = xteaminfo_;
  xteaminfo_ = NULL;
  return temp;
}
void ReqAckJoinTeam::set_allocated_xteaminfo(::AFMsg::TeamInfo* xteaminfo) {
  delete xteaminfo_;
  xteaminfo_ = xteaminfo;
  if (xteaminfo) {
    set_has_xteaminfo();
  } else {
    clear_has_xteaminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckJoinTeam.xTeamInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckLeaveTeam::kTeamIdFieldNumber;
const int ReqAckLeaveTeam::kXTeamInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckLeaveTeam::ReqAckLeaveTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckLeaveTeam)
}

void ReqAckLeaveTeam::InitAsDefaultInstance() {
  team_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  xteaminfo_ = const_cast< ::AFMsg::TeamInfo*>(&::AFMsg::TeamInfo::default_instance());
}

ReqAckLeaveTeam::ReqAckLeaveTeam(const ReqAckLeaveTeam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckLeaveTeam)
}

void ReqAckLeaveTeam::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = NULL;
  xteaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckLeaveTeam::~ReqAckLeaveTeam() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckLeaveTeam)
  SharedDtor();
}

void ReqAckLeaveTeam::SharedDtor() {
  if (this != default_instance_) {
    delete team_id_;
    delete xteaminfo_;
  }
}

void ReqAckLeaveTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckLeaveTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckLeaveTeam_descriptor_;
}

const ReqAckLeaveTeam& ReqAckLeaveTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckLeaveTeam* ReqAckLeaveTeam::default_instance_ = NULL;

ReqAckLeaveTeam* ReqAckLeaveTeam::New(::google::protobuf::Arena* arena) const {
  ReqAckLeaveTeam* n = new ReqAckLeaveTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckLeaveTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckLeaveTeam)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_team_id()) {
      if (team_id_ != NULL) team_id_->::AFMsg::Ident::Clear();
    }
    if (has_xteaminfo()) {
      if (xteaminfo_ != NULL) xteaminfo_->::AFMsg::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqAckLeaveTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckLeaveTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident team_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_xTeamInfo;
        break;
      }

      // optional .AFMsg.TeamInfo xTeamInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_xTeamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xteaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckLeaveTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckLeaveTeam)
  return false;
#undef DO_
}

void ReqAckLeaveTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckLeaveTeam)
  // required .AFMsg.Ident team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->team_id_, output);
  }

  // optional .AFMsg.TeamInfo xTeamInfo = 2;
  if (has_xteaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->xteaminfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckLeaveTeam)
}

::google::protobuf::uint8* ReqAckLeaveTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckLeaveTeam)
  // required .AFMsg.Ident team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->team_id_, false, target);
  }

  // optional .AFMsg.TeamInfo xTeamInfo = 2;
  if (has_xteaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->xteaminfo_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckLeaveTeam)
  return target;
}

int ReqAckLeaveTeam::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckLeaveTeam)
  int total_size = 0;

  // required .AFMsg.Ident team_id = 1;
  if (has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->team_id_);
  }
  // optional .AFMsg.TeamInfo xTeamInfo = 2;
  if (has_xteaminfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->xteaminfo_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckLeaveTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckLeaveTeam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqAckLeaveTeam* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckLeaveTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckLeaveTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckLeaveTeam)
    MergeFrom(*source);
  }
}

void ReqAckLeaveTeam::MergeFrom(const ReqAckLeaveTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckLeaveTeam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      mutable_team_id()->::AFMsg::Ident::MergeFrom(from.team_id());
    }
    if (from.has_xteaminfo()) {
      mutable_xteaminfo()->::AFMsg::TeamInfo::MergeFrom(from.xteaminfo());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqAckLeaveTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckLeaveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckLeaveTeam::CopyFrom(const ReqAckLeaveTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckLeaveTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckLeaveTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_team_id()) {
    if (!this->team_id_->IsInitialized()) return false;
  }
  if (has_xteaminfo()) {
    if (!this->xteaminfo_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckLeaveTeam::Swap(ReqAckLeaveTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckLeaveTeam::InternalSwap(ReqAckLeaveTeam* other) {
  std::swap(team_id_, other->team_id_);
  std::swap(xteaminfo_, other->xteaminfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckLeaveTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckLeaveTeam_descriptor_;
  metadata.reflection = ReqAckLeaveTeam_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAckLeaveTeam

// required .AFMsg.Ident team_id = 1;
bool ReqAckLeaveTeam::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqAckLeaveTeam::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqAckLeaveTeam::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqAckLeaveTeam::clear_team_id() {
  if (team_id_ != NULL) team_id_->::AFMsg::Ident::Clear();
  clear_has_team_id();
}
const ::AFMsg::Ident& ReqAckLeaveTeam::team_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckLeaveTeam.team_id)
  return team_id_ != NULL ? *team_id_ : *default_instance_->team_id_;
}
::AFMsg::Ident* ReqAckLeaveTeam::mutable_team_id() {
  set_has_team_id();
  if (team_id_ == NULL) {
    team_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckLeaveTeam.team_id)
  return team_id_;
}
::AFMsg::Ident* ReqAckLeaveTeam::release_team_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckLeaveTeam.team_id)
  clear_has_team_id();
  ::AFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
void ReqAckLeaveTeam::set_allocated_team_id(::AFMsg::Ident* team_id) {
  delete team_id_;
  team_id_ = team_id;
  if (team_id) {
    set_has_team_id();
  } else {
    clear_has_team_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckLeaveTeam.team_id)
}

// optional .AFMsg.TeamInfo xTeamInfo = 2;
bool ReqAckLeaveTeam::has_xteaminfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqAckLeaveTeam::set_has_xteaminfo() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqAckLeaveTeam::clear_has_xteaminfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqAckLeaveTeam::clear_xteaminfo() {
  if (xteaminfo_ != NULL) xteaminfo_->::AFMsg::TeamInfo::Clear();
  clear_has_xteaminfo();
}
const ::AFMsg::TeamInfo& ReqAckLeaveTeam::xteaminfo() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckLeaveTeam.xTeamInfo)
  return xteaminfo_ != NULL ? *xteaminfo_ : *default_instance_->xteaminfo_;
}
::AFMsg::TeamInfo* ReqAckLeaveTeam::mutable_xteaminfo() {
  set_has_xteaminfo();
  if (xteaminfo_ == NULL) {
    xteaminfo_ = new ::AFMsg::TeamInfo;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckLeaveTeam.xTeamInfo)
  return xteaminfo_;
}
::AFMsg::TeamInfo* ReqAckLeaveTeam::release_xteaminfo() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckLeaveTeam.xTeamInfo)
  clear_has_xteaminfo();
  ::AFMsg::TeamInfo* temp = xteaminfo_;
  xteaminfo_ = NULL;
  return temp;
}
void ReqAckLeaveTeam::set_allocated_xteaminfo(::AFMsg::TeamInfo* xteaminfo) {
  delete xteaminfo_;
  xteaminfo_ = xteaminfo;
  if (xteaminfo) {
    set_has_xteaminfo();
  } else {
    clear_has_xteaminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckLeaveTeam.xTeamInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqAckOprTeamMember_EGTeamMemberOprType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckOprTeamMember_EGTeamMemberOprType_descriptor_;
}
bool ReqAckOprTeamMember_EGTeamMemberOprType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_DOWN;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_UP;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_KICK;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_APPOINT;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_FIRE;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_DEMISE;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_ACCEPTAPPLY;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_DENYAPPLY;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGAT_KICKOUT;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGTeamMemberOprType_MIN;
const ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::EGTeamMemberOprType_MAX;
const int ReqAckOprTeamMember::EGTeamMemberOprType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckOprTeamMember::kTeamIdFieldNumber;
const int ReqAckOprTeamMember::kMemberIdFieldNumber;
const int ReqAckOprTeamMember::kTypeFieldNumber;
const int ReqAckOprTeamMember::kXTeamInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckOprTeamMember::ReqAckOprTeamMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckOprTeamMember)
}

void ReqAckOprTeamMember::InitAsDefaultInstance() {
  team_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  member_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  xteaminfo_ = const_cast< ::AFMsg::TeamInfo*>(&::AFMsg::TeamInfo::default_instance());
}

ReqAckOprTeamMember::ReqAckOprTeamMember(const ReqAckOprTeamMember& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckOprTeamMember)
}

void ReqAckOprTeamMember::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = NULL;
  member_id_ = NULL;
  type_ = 0;
  xteaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckOprTeamMember::~ReqAckOprTeamMember() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckOprTeamMember)
  SharedDtor();
}

void ReqAckOprTeamMember::SharedDtor() {
  if (this != default_instance_) {
    delete team_id_;
    delete member_id_;
    delete xteaminfo_;
  }
}

void ReqAckOprTeamMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckOprTeamMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckOprTeamMember_descriptor_;
}

const ReqAckOprTeamMember& ReqAckOprTeamMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckOprTeamMember* ReqAckOprTeamMember::default_instance_ = NULL;

ReqAckOprTeamMember* ReqAckOprTeamMember::New(::google::protobuf::Arena* arena) const {
  ReqAckOprTeamMember* n = new ReqAckOprTeamMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckOprTeamMember::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckOprTeamMember)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_team_id()) {
      if (team_id_ != NULL) team_id_->::AFMsg::Ident::Clear();
    }
    if (has_member_id()) {
      if (member_id_ != NULL) member_id_->::AFMsg::Ident::Clear();
    }
    type_ = 0;
    if (has_xteaminfo()) {
      if (xteaminfo_ != NULL) xteaminfo_->::AFMsg::TeamInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqAckOprTeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckOprTeamMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident team_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_member_id;
        break;
      }

      // required .AFMsg.Ident member_id = 2;
      case 2: {
        if (tag == 18) {
         parse_member_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .AFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::AFMsg::ReqAckOprTeamMember_EGTeamMemberOprType_IsValid(value)) {
            set_type(static_cast< ::AFMsg::ReqAckOprTeamMember_EGTeamMemberOprType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_xTeamInfo;
        break;
      }

      // optional .AFMsg.TeamInfo xTeamInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_xTeamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xteaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckOprTeamMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckOprTeamMember)
  return false;
#undef DO_
}

void ReqAckOprTeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckOprTeamMember)
  // required .AFMsg.Ident team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->team_id_, output);
  }

  // required .AFMsg.Ident member_id = 2;
  if (has_member_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->member_id_, output);
  }

  // required .AFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .AFMsg.TeamInfo xTeamInfo = 4;
  if (has_xteaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->xteaminfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckOprTeamMember)
}

::google::protobuf::uint8* ReqAckOprTeamMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckOprTeamMember)
  // required .AFMsg.Ident team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->team_id_, false, target);
  }

  // required .AFMsg.Ident member_id = 2;
  if (has_member_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->member_id_, false, target);
  }

  // required .AFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .AFMsg.TeamInfo xTeamInfo = 4;
  if (has_xteaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->xteaminfo_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckOprTeamMember)
  return target;
}

int ReqAckOprTeamMember::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqAckOprTeamMember)
  int total_size = 0;

  if (has_team_id()) {
    // required .AFMsg.Ident team_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->team_id_);
  }

  if (has_member_id()) {
    // required .AFMsg.Ident member_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->member_id_);
  }

  if (has_type()) {
    // required .AFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
int ReqAckOprTeamMember::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckOprTeamMember)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .AFMsg.Ident team_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->team_id_);

    // required .AFMsg.Ident member_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->member_id_);

    // required .AFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .AFMsg.TeamInfo xTeamInfo = 4;
  if (has_xteaminfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->xteaminfo_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckOprTeamMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckOprTeamMember)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqAckOprTeamMember* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckOprTeamMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckOprTeamMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckOprTeamMember)
    MergeFrom(*source);
  }
}

void ReqAckOprTeamMember::MergeFrom(const ReqAckOprTeamMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckOprTeamMember)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      mutable_team_id()->::AFMsg::Ident::MergeFrom(from.team_id());
    }
    if (from.has_member_id()) {
      mutable_member_id()->::AFMsg::Ident::MergeFrom(from.member_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_xteaminfo()) {
      mutable_xteaminfo()->::AFMsg::TeamInfo::MergeFrom(from.xteaminfo());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqAckOprTeamMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckOprTeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckOprTeamMember::CopyFrom(const ReqAckOprTeamMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckOprTeamMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckOprTeamMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_team_id()) {
    if (!this->team_id_->IsInitialized()) return false;
  }
  if (has_member_id()) {
    if (!this->member_id_->IsInitialized()) return false;
  }
  if (has_xteaminfo()) {
    if (!this->xteaminfo_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckOprTeamMember::Swap(ReqAckOprTeamMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckOprTeamMember::InternalSwap(ReqAckOprTeamMember* other) {
  std::swap(team_id_, other->team_id_);
  std::swap(member_id_, other->member_id_);
  std::swap(type_, other->type_);
  std::swap(xteaminfo_, other->xteaminfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckOprTeamMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckOprTeamMember_descriptor_;
  metadata.reflection = ReqAckOprTeamMember_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAckOprTeamMember

// required .AFMsg.Ident team_id = 1;
bool ReqAckOprTeamMember::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqAckOprTeamMember::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqAckOprTeamMember::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqAckOprTeamMember::clear_team_id() {
  if (team_id_ != NULL) team_id_->::AFMsg::Ident::Clear();
  clear_has_team_id();
}
const ::AFMsg::Ident& ReqAckOprTeamMember::team_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprTeamMember.team_id)
  return team_id_ != NULL ? *team_id_ : *default_instance_->team_id_;
}
::AFMsg::Ident* ReqAckOprTeamMember::mutable_team_id() {
  set_has_team_id();
  if (team_id_ == NULL) {
    team_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckOprTeamMember.team_id)
  return team_id_;
}
::AFMsg::Ident* ReqAckOprTeamMember::release_team_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckOprTeamMember.team_id)
  clear_has_team_id();
  ::AFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
void ReqAckOprTeamMember::set_allocated_team_id(::AFMsg::Ident* team_id) {
  delete team_id_;
  team_id_ = team_id;
  if (team_id) {
    set_has_team_id();
  } else {
    clear_has_team_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckOprTeamMember.team_id)
}

// required .AFMsg.Ident member_id = 2;
bool ReqAckOprTeamMember::has_member_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqAckOprTeamMember::set_has_member_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqAckOprTeamMember::clear_has_member_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqAckOprTeamMember::clear_member_id() {
  if (member_id_ != NULL) member_id_->::AFMsg::Ident::Clear();
  clear_has_member_id();
}
const ::AFMsg::Ident& ReqAckOprTeamMember::member_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprTeamMember.member_id)
  return member_id_ != NULL ? *member_id_ : *default_instance_->member_id_;
}
::AFMsg::Ident* ReqAckOprTeamMember::mutable_member_id() {
  set_has_member_id();
  if (member_id_ == NULL) {
    member_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckOprTeamMember.member_id)
  return member_id_;
}
::AFMsg::Ident* ReqAckOprTeamMember::release_member_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckOprTeamMember.member_id)
  clear_has_member_id();
  ::AFMsg::Ident* temp = member_id_;
  member_id_ = NULL;
  return temp;
}
void ReqAckOprTeamMember::set_allocated_member_id(::AFMsg::Ident* member_id) {
  delete member_id_;
  member_id_ = member_id;
  if (member_id) {
    set_has_member_id();
  } else {
    clear_has_member_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckOprTeamMember.member_id)
}

// required .AFMsg.ReqAckOprTeamMember.EGTeamMemberOprType type = 3;
bool ReqAckOprTeamMember::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqAckOprTeamMember::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqAckOprTeamMember::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqAckOprTeamMember::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::AFMsg::ReqAckOprTeamMember_EGTeamMemberOprType ReqAckOprTeamMember::type() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprTeamMember.type)
  return static_cast< ::AFMsg::ReqAckOprTeamMember_EGTeamMemberOprType >(type_);
}
 void ReqAckOprTeamMember::set_type(::AFMsg::ReqAckOprTeamMember_EGTeamMemberOprType value) {
  assert(::AFMsg::ReqAckOprTeamMember_EGTeamMemberOprType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqAckOprTeamMember.type)
}

// optional .AFMsg.TeamInfo xTeamInfo = 4;
bool ReqAckOprTeamMember::has_xteaminfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReqAckOprTeamMember::set_has_xteaminfo() {
  _has_bits_[0] |= 0x00000008u;
}
void ReqAckOprTeamMember::clear_has_xteaminfo() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReqAckOprTeamMember::clear_xteaminfo() {
  if (xteaminfo_ != NULL) xteaminfo_->::AFMsg::TeamInfo::Clear();
  clear_has_xteaminfo();
}
const ::AFMsg::TeamInfo& ReqAckOprTeamMember::xteaminfo() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckOprTeamMember.xTeamInfo)
  return xteaminfo_ != NULL ? *xteaminfo_ : *default_instance_->xteaminfo_;
}
::AFMsg::TeamInfo* ReqAckOprTeamMember::mutable_xteaminfo() {
  set_has_xteaminfo();
  if (xteaminfo_ == NULL) {
    xteaminfo_ = new ::AFMsg::TeamInfo;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckOprTeamMember.xTeamInfo)
  return xteaminfo_;
}
::AFMsg::TeamInfo* ReqAckOprTeamMember::release_xteaminfo() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckOprTeamMember.xTeamInfo)
  clear_has_xteaminfo();
  ::AFMsg::TeamInfo* temp = xteaminfo_;
  xteaminfo_ = NULL;
  return temp;
}
void ReqAckOprTeamMember::set_allocated_xteaminfo(::AFMsg::TeamInfo* xteaminfo) {
  delete xteaminfo_;
  xteaminfo_ = xteaminfo;
  if (xteaminfo) {
    set_has_xteaminfo();
  } else {
    clear_has_xteaminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckOprTeamMember.xTeamInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqAckInviteTeam::kTeamIdFieldNumber;
const int ReqAckInviteTeam::kSelfIdFieldNumber;
const int ReqAckInviteTeam::kInviteTargetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqAckInviteTeam::ReqAckInviteTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqAckInviteTeam)
}

void ReqAckInviteTeam::InitAsDefaultInstance() {
  team_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  self_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  invite_target_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqAckInviteTeam::ReqAckInviteTeam(const ReqAckInviteTeam& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqAckInviteTeam)
}

void ReqAckInviteTeam::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = NULL;
  self_id_ = NULL;
  invite_target_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqAckInviteTeam::~ReqAckInviteTeam() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqAckInviteTeam)
  SharedDtor();
}

void ReqAckInviteTeam::SharedDtor() {
  if (this != default_instance_) {
    delete team_id_;
    delete self_id_;
    delete invite_target_id_;
  }
}

void ReqAckInviteTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqAckInviteTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqAckInviteTeam_descriptor_;
}

const ReqAckInviteTeam& ReqAckInviteTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqAckInviteTeam* ReqAckInviteTeam::default_instance_ = NULL;

ReqAckInviteTeam* ReqAckInviteTeam::New(::google::protobuf::Arena* arena) const {
  ReqAckInviteTeam* n = new ReqAckInviteTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqAckInviteTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqAckInviteTeam)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_team_id()) {
      if (team_id_ != NULL) team_id_->::AFMsg::Ident::Clear();
    }
    if (has_self_id()) {
      if (self_id_ != NULL) self_id_->::AFMsg::Ident::Clear();
    }
    if (has_invite_target_id()) {
      if (invite_target_id_ != NULL) invite_target_id_->::AFMsg::Ident::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqAckInviteTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqAckInviteTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident team_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_self_id;
        break;
      }

      // required .AFMsg.Ident self_id = 2;
      case 2: {
        if (tag == 18) {
         parse_self_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_invite_target_id;
        break;
      }

      // required .AFMsg.Ident invite_target_id = 3;
      case 3: {
        if (tag == 26) {
         parse_invite_target_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invite_target_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqAckInviteTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqAckInviteTeam)
  return false;
#undef DO_
}

void ReqAckInviteTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqAckInviteTeam)
  // required .AFMsg.Ident team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->team_id_, output);
  }

  // required .AFMsg.Ident self_id = 2;
  if (has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->self_id_, output);
  }

  // required .AFMsg.Ident invite_target_id = 3;
  if (has_invite_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->invite_target_id_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqAckInviteTeam)
}

::google::protobuf::uint8* ReqAckInviteTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqAckInviteTeam)
  // required .AFMsg.Ident team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->team_id_, false, target);
  }

  // required .AFMsg.Ident self_id = 2;
  if (has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->self_id_, false, target);
  }

  // required .AFMsg.Ident invite_target_id = 3;
  if (has_invite_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->invite_target_id_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqAckInviteTeam)
  return target;
}

int ReqAckInviteTeam::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqAckInviteTeam)
  int total_size = 0;

  if (has_team_id()) {
    // required .AFMsg.Ident team_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->team_id_);
  }

  if (has_self_id()) {
    // required .AFMsg.Ident self_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->self_id_);
  }

  if (has_invite_target_id()) {
    // required .AFMsg.Ident invite_target_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->invite_target_id_);
  }

  return total_size;
}
int ReqAckInviteTeam::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqAckInviteTeam)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .AFMsg.Ident team_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->team_id_);

    // required .AFMsg.Ident self_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->self_id_);

    // required .AFMsg.Ident invite_target_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->invite_target_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqAckInviteTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqAckInviteTeam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqAckInviteTeam* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqAckInviteTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqAckInviteTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqAckInviteTeam)
    MergeFrom(*source);
  }
}

void ReqAckInviteTeam::MergeFrom(const ReqAckInviteTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqAckInviteTeam)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      mutable_team_id()->::AFMsg::Ident::MergeFrom(from.team_id());
    }
    if (from.has_self_id()) {
      mutable_self_id()->::AFMsg::Ident::MergeFrom(from.self_id());
    }
    if (from.has_invite_target_id()) {
      mutable_invite_target_id()->::AFMsg::Ident::MergeFrom(from.invite_target_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqAckInviteTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqAckInviteTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckInviteTeam::CopyFrom(const ReqAckInviteTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqAckInviteTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckInviteTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_team_id()) {
    if (!this->team_id_->IsInitialized()) return false;
  }
  if (has_self_id()) {
    if (!this->self_id_->IsInitialized()) return false;
  }
  if (has_invite_target_id()) {
    if (!this->invite_target_id_->IsInitialized()) return false;
  }
  return true;
}

void ReqAckInviteTeam::Swap(ReqAckInviteTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqAckInviteTeam::InternalSwap(ReqAckInviteTeam* other) {
  std::swap(team_id_, other->team_id_);
  std::swap(self_id_, other->self_id_);
  std::swap(invite_target_id_, other->invite_target_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqAckInviteTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqAckInviteTeam_descriptor_;
  metadata.reflection = ReqAckInviteTeam_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqAckInviteTeam

// required .AFMsg.Ident team_id = 1;
bool ReqAckInviteTeam::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqAckInviteTeam::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqAckInviteTeam::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqAckInviteTeam::clear_team_id() {
  if (team_id_ != NULL) team_id_->::AFMsg::Ident::Clear();
  clear_has_team_id();
}
const ::AFMsg::Ident& ReqAckInviteTeam::team_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckInviteTeam.team_id)
  return team_id_ != NULL ? *team_id_ : *default_instance_->team_id_;
}
::AFMsg::Ident* ReqAckInviteTeam::mutable_team_id() {
  set_has_team_id();
  if (team_id_ == NULL) {
    team_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckInviteTeam.team_id)
  return team_id_;
}
::AFMsg::Ident* ReqAckInviteTeam::release_team_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckInviteTeam.team_id)
  clear_has_team_id();
  ::AFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
void ReqAckInviteTeam::set_allocated_team_id(::AFMsg::Ident* team_id) {
  delete team_id_;
  team_id_ = team_id;
  if (team_id) {
    set_has_team_id();
  } else {
    clear_has_team_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckInviteTeam.team_id)
}

// required .AFMsg.Ident self_id = 2;
bool ReqAckInviteTeam::has_self_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqAckInviteTeam::set_has_self_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqAckInviteTeam::clear_has_self_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqAckInviteTeam::clear_self_id() {
  if (self_id_ != NULL) self_id_->::AFMsg::Ident::Clear();
  clear_has_self_id();
}
const ::AFMsg::Ident& ReqAckInviteTeam::self_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckInviteTeam.self_id)
  return self_id_ != NULL ? *self_id_ : *default_instance_->self_id_;
}
::AFMsg::Ident* ReqAckInviteTeam::mutable_self_id() {
  set_has_self_id();
  if (self_id_ == NULL) {
    self_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckInviteTeam.self_id)
  return self_id_;
}
::AFMsg::Ident* ReqAckInviteTeam::release_self_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckInviteTeam.self_id)
  clear_has_self_id();
  ::AFMsg::Ident* temp = self_id_;
  self_id_ = NULL;
  return temp;
}
void ReqAckInviteTeam::set_allocated_self_id(::AFMsg::Ident* self_id) {
  delete self_id_;
  self_id_ = self_id;
  if (self_id) {
    set_has_self_id();
  } else {
    clear_has_self_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckInviteTeam.self_id)
}

// required .AFMsg.Ident invite_target_id = 3;
bool ReqAckInviteTeam::has_invite_target_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqAckInviteTeam::set_has_invite_target_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqAckInviteTeam::clear_has_invite_target_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqAckInviteTeam::clear_invite_target_id() {
  if (invite_target_id_ != NULL) invite_target_id_->::AFMsg::Ident::Clear();
  clear_has_invite_target_id();
}
const ::AFMsg::Ident& ReqAckInviteTeam::invite_target_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqAckInviteTeam.invite_target_id)
  return invite_target_id_ != NULL ? *invite_target_id_ : *default_instance_->invite_target_id_;
}
::AFMsg::Ident* ReqAckInviteTeam::mutable_invite_target_id() {
  set_has_invite_target_id();
  if (invite_target_id_ == NULL) {
    invite_target_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqAckInviteTeam.invite_target_id)
  return invite_target_id_;
}
::AFMsg::Ident* ReqAckInviteTeam::release_invite_target_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqAckInviteTeam.invite_target_id)
  clear_has_invite_target_id();
  ::AFMsg::Ident* temp = invite_target_id_;
  invite_target_id_ = NULL;
  return temp;
}
void ReqAckInviteTeam::set_allocated_invite_target_id(::AFMsg::Ident* invite_target_id) {
  delete invite_target_id_;
  invite_target_id_ = invite_target_id;
  if (invite_target_id) {
    set_has_invite_target_id();
  } else {
    clear_has_invite_target_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqAckInviteTeam.invite_target_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqTeamEnterEctype::kTeamIdFieldNumber;
const int ReqTeamEnterEctype::kSelfIdFieldNumber;
const int ReqTeamEnterEctype::kNEctypeIDFieldNumber;
const int ReqTeamEnterEctype::kNGroupIDFieldNumber;
const int ReqTeamEnterEctype::kNResultFieldNumber;
const int ReqTeamEnterEctype::kNServerIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqTeamEnterEctype::ReqTeamEnterEctype()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqTeamEnterEctype)
}

void ReqTeamEnterEctype::InitAsDefaultInstance() {
  team_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  self_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqTeamEnterEctype::ReqTeamEnterEctype(const ReqTeamEnterEctype& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqTeamEnterEctype)
}

void ReqTeamEnterEctype::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = NULL;
  self_id_ = NULL;
  nectypeid_ = 0;
  ngroupid_ = 0;
  nresult_ = 0;
  nserverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqTeamEnterEctype::~ReqTeamEnterEctype() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqTeamEnterEctype)
  SharedDtor();
}

void ReqTeamEnterEctype::SharedDtor() {
  if (this != default_instance_) {
    delete team_id_;
    delete self_id_;
  }
}

void ReqTeamEnterEctype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqTeamEnterEctype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqTeamEnterEctype_descriptor_;
}

const ReqTeamEnterEctype& ReqTeamEnterEctype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqTeamEnterEctype* ReqTeamEnterEctype::default_instance_ = NULL;

ReqTeamEnterEctype* ReqTeamEnterEctype::New(::google::protobuf::Arena* arena) const {
  ReqTeamEnterEctype* n = new ReqTeamEnterEctype;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqTeamEnterEctype::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqTeamEnterEctype)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqTeamEnterEctype, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqTeamEnterEctype*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(nectypeid_, nserverid_);
    if (has_team_id()) {
      if (team_id_ != NULL) team_id_->::AFMsg::Ident::Clear();
    }
    if (has_self_id()) {
      if (self_id_ != NULL) self_id_->::AFMsg::Ident::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqTeamEnterEctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqTeamEnterEctype)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident team_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_self_id;
        break;
      }

      // required .AFMsg.Ident self_id = 2;
      case 2: {
        if (tag == 18) {
         parse_self_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nEctypeID;
        break;
      }

      // optional int32 nEctypeID = 3;
      case 3: {
        if (tag == 24) {
         parse_nEctypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nectypeid_)));
          set_has_nectypeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_nGroupID;
        break;
      }

      // optional int32 nGroupID = 4;
      case 4: {
        if (tag == 32) {
         parse_nGroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngroupid_)));
          set_has_ngroupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nResult;
        break;
      }

      // optional int32 nResult = 5;
      case 5: {
        if (tag == 40) {
         parse_nResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nresult_)));
          set_has_nresult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_nServerID;
        break;
      }

      // optional int32 nServerID = 6;
      case 6: {
        if (tag == 48) {
         parse_nServerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nserverid_)));
          set_has_nserverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqTeamEnterEctype)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqTeamEnterEctype)
  return false;
#undef DO_
}

void ReqTeamEnterEctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqTeamEnterEctype)
  // required .AFMsg.Ident team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->team_id_, output);
  }

  // required .AFMsg.Ident self_id = 2;
  if (has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->self_id_, output);
  }

  // optional int32 nEctypeID = 3;
  if (has_nectypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nectypeid(), output);
  }

  // optional int32 nGroupID = 4;
  if (has_ngroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ngroupid(), output);
  }

  // optional int32 nResult = 5;
  if (has_nresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nresult(), output);
  }

  // optional int32 nServerID = 6;
  if (has_nserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nserverid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqTeamEnterEctype)
}

::google::protobuf::uint8* ReqTeamEnterEctype::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqTeamEnterEctype)
  // required .AFMsg.Ident team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->team_id_, false, target);
  }

  // required .AFMsg.Ident self_id = 2;
  if (has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->self_id_, false, target);
  }

  // optional int32 nEctypeID = 3;
  if (has_nectypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nectypeid(), target);
  }

  // optional int32 nGroupID = 4;
  if (has_ngroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ngroupid(), target);
  }

  // optional int32 nResult = 5;
  if (has_nresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nresult(), target);
  }

  // optional int32 nServerID = 6;
  if (has_nserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nserverid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqTeamEnterEctype)
  return target;
}

int ReqTeamEnterEctype::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqTeamEnterEctype)
  int total_size = 0;

  if (has_team_id()) {
    // required .AFMsg.Ident team_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->team_id_);
  }

  if (has_self_id()) {
    // required .AFMsg.Ident self_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->self_id_);
  }

  return total_size;
}
int ReqTeamEnterEctype::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqTeamEnterEctype)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .AFMsg.Ident team_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->team_id_);

    // required .AFMsg.Ident self_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->self_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 60u) {
    // optional int32 nEctypeID = 3;
    if (has_nectypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nectypeid());
    }

    // optional int32 nGroupID = 4;
    if (has_ngroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngroupid());
    }

    // optional int32 nResult = 5;
    if (has_nresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nresult());
    }

    // optional int32 nServerID = 6;
    if (has_nserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nserverid());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqTeamEnterEctype::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqTeamEnterEctype)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqTeamEnterEctype* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqTeamEnterEctype>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqTeamEnterEctype)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqTeamEnterEctype)
    MergeFrom(*source);
  }
}

void ReqTeamEnterEctype::MergeFrom(const ReqTeamEnterEctype& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqTeamEnterEctype)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      mutable_team_id()->::AFMsg::Ident::MergeFrom(from.team_id());
    }
    if (from.has_self_id()) {
      mutable_self_id()->::AFMsg::Ident::MergeFrom(from.self_id());
    }
    if (from.has_nectypeid()) {
      set_nectypeid(from.nectypeid());
    }
    if (from.has_ngroupid()) {
      set_ngroupid(from.ngroupid());
    }
    if (from.has_nresult()) {
      set_nresult(from.nresult());
    }
    if (from.has_nserverid()) {
      set_nserverid(from.nserverid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqTeamEnterEctype::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqTeamEnterEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTeamEnterEctype::CopyFrom(const ReqTeamEnterEctype& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqTeamEnterEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTeamEnterEctype::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_team_id()) {
    if (!this->team_id_->IsInitialized()) return false;
  }
  if (has_self_id()) {
    if (!this->self_id_->IsInitialized()) return false;
  }
  return true;
}

void ReqTeamEnterEctype::Swap(ReqTeamEnterEctype* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqTeamEnterEctype::InternalSwap(ReqTeamEnterEctype* other) {
  std::swap(team_id_, other->team_id_);
  std::swap(self_id_, other->self_id_);
  std::swap(nectypeid_, other->nectypeid_);
  std::swap(ngroupid_, other->ngroupid_);
  std::swap(nresult_, other->nresult_);
  std::swap(nserverid_, other->nserverid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqTeamEnterEctype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqTeamEnterEctype_descriptor_;
  metadata.reflection = ReqTeamEnterEctype_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqTeamEnterEctype

// required .AFMsg.Ident team_id = 1;
bool ReqTeamEnterEctype::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqTeamEnterEctype::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqTeamEnterEctype::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqTeamEnterEctype::clear_team_id() {
  if (team_id_ != NULL) team_id_->::AFMsg::Ident::Clear();
  clear_has_team_id();
}
const ::AFMsg::Ident& ReqTeamEnterEctype::team_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqTeamEnterEctype.team_id)
  return team_id_ != NULL ? *team_id_ : *default_instance_->team_id_;
}
::AFMsg::Ident* ReqTeamEnterEctype::mutable_team_id() {
  set_has_team_id();
  if (team_id_ == NULL) {
    team_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqTeamEnterEctype.team_id)
  return team_id_;
}
::AFMsg::Ident* ReqTeamEnterEctype::release_team_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqTeamEnterEctype.team_id)
  clear_has_team_id();
  ::AFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
void ReqTeamEnterEctype::set_allocated_team_id(::AFMsg::Ident* team_id) {
  delete team_id_;
  team_id_ = team_id;
  if (team_id) {
    set_has_team_id();
  } else {
    clear_has_team_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqTeamEnterEctype.team_id)
}

// required .AFMsg.Ident self_id = 2;
bool ReqTeamEnterEctype::has_self_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqTeamEnterEctype::set_has_self_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqTeamEnterEctype::clear_has_self_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqTeamEnterEctype::clear_self_id() {
  if (self_id_ != NULL) self_id_->::AFMsg::Ident::Clear();
  clear_has_self_id();
}
const ::AFMsg::Ident& ReqTeamEnterEctype::self_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqTeamEnterEctype.self_id)
  return self_id_ != NULL ? *self_id_ : *default_instance_->self_id_;
}
::AFMsg::Ident* ReqTeamEnterEctype::mutable_self_id() {
  set_has_self_id();
  if (self_id_ == NULL) {
    self_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqTeamEnterEctype.self_id)
  return self_id_;
}
::AFMsg::Ident* ReqTeamEnterEctype::release_self_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqTeamEnterEctype.self_id)
  clear_has_self_id();
  ::AFMsg::Ident* temp = self_id_;
  self_id_ = NULL;
  return temp;
}
void ReqTeamEnterEctype::set_allocated_self_id(::AFMsg::Ident* self_id) {
  delete self_id_;
  self_id_ = self_id;
  if (self_id) {
    set_has_self_id();
  } else {
    clear_has_self_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqTeamEnterEctype.self_id)
}

// optional int32 nEctypeID = 3;
bool ReqTeamEnterEctype::has_nectypeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqTeamEnterEctype::set_has_nectypeid() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqTeamEnterEctype::clear_has_nectypeid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqTeamEnterEctype::clear_nectypeid() {
  nectypeid_ = 0;
  clear_has_nectypeid();
}
 ::google::protobuf::int32 ReqTeamEnterEctype::nectypeid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqTeamEnterEctype.nEctypeID)
  return nectypeid_;
}
 void ReqTeamEnterEctype::set_nectypeid(::google::protobuf::int32 value) {
  set_has_nectypeid();
  nectypeid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqTeamEnterEctype.nEctypeID)
}

// optional int32 nGroupID = 4;
bool ReqTeamEnterEctype::has_ngroupid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReqTeamEnterEctype::set_has_ngroupid() {
  _has_bits_[0] |= 0x00000008u;
}
void ReqTeamEnterEctype::clear_has_ngroupid() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReqTeamEnterEctype::clear_ngroupid() {
  ngroupid_ = 0;
  clear_has_ngroupid();
}
 ::google::protobuf::int32 ReqTeamEnterEctype::ngroupid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqTeamEnterEctype.nGroupID)
  return ngroupid_;
}
 void ReqTeamEnterEctype::set_ngroupid(::google::protobuf::int32 value) {
  set_has_ngroupid();
  ngroupid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqTeamEnterEctype.nGroupID)
}

// optional int32 nResult = 5;
bool ReqTeamEnterEctype::has_nresult() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ReqTeamEnterEctype::set_has_nresult() {
  _has_bits_[0] |= 0x00000010u;
}
void ReqTeamEnterEctype::clear_has_nresult() {
  _has_bits_[0] &= ~0x00000010u;
}
void ReqTeamEnterEctype::clear_nresult() {
  nresult_ = 0;
  clear_has_nresult();
}
 ::google::protobuf::int32 ReqTeamEnterEctype::nresult() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqTeamEnterEctype.nResult)
  return nresult_;
}
 void ReqTeamEnterEctype::set_nresult(::google::protobuf::int32 value) {
  set_has_nresult();
  nresult_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqTeamEnterEctype.nResult)
}

// optional int32 nServerID = 6;
bool ReqTeamEnterEctype::has_nserverid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ReqTeamEnterEctype::set_has_nserverid() {
  _has_bits_[0] |= 0x00000020u;
}
void ReqTeamEnterEctype::clear_has_nserverid() {
  _has_bits_[0] &= ~0x00000020u;
}
void ReqTeamEnterEctype::clear_nserverid() {
  nserverid_ = 0;
  clear_has_nserverid();
}
 ::google::protobuf::int32 ReqTeamEnterEctype::nserverid() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqTeamEnterEctype.nServerID)
  return nserverid_;
}
 void ReqTeamEnterEctype::set_nserverid(::google::protobuf::int32 value) {
  set_has_nserverid();
  nserverid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqTeamEnterEctype.nServerID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckTeamEnterEctype::kTeamIdFieldNumber;
const int AckTeamEnterEctype::kSelfIdFieldNumber;
const int AckTeamEnterEctype::kNEctypeIDFieldNumber;
const int AckTeamEnterEctype::kNGroupIDFieldNumber;
const int AckTeamEnterEctype::kNResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckTeamEnterEctype::AckTeamEnterEctype()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckTeamEnterEctype)
}

void AckTeamEnterEctype::InitAsDefaultInstance() {
  team_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  self_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

AckTeamEnterEctype::AckTeamEnterEctype(const AckTeamEnterEctype& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckTeamEnterEctype)
}

void AckTeamEnterEctype::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = NULL;
  self_id_ = NULL;
  nectypeid_ = 0;
  ngroupid_ = 0;
  nresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckTeamEnterEctype::~AckTeamEnterEctype() {
  // @@protoc_insertion_point(destructor:AFMsg.AckTeamEnterEctype)
  SharedDtor();
}

void AckTeamEnterEctype::SharedDtor() {
  if (this != default_instance_) {
    delete team_id_;
    delete self_id_;
  }
}

void AckTeamEnterEctype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckTeamEnterEctype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckTeamEnterEctype_descriptor_;
}

const AckTeamEnterEctype& AckTeamEnterEctype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

AckTeamEnterEctype* AckTeamEnterEctype::default_instance_ = NULL;

AckTeamEnterEctype* AckTeamEnterEctype::New(::google::protobuf::Arena* arena) const {
  AckTeamEnterEctype* n = new AckTeamEnterEctype;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckTeamEnterEctype::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckTeamEnterEctype)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AckTeamEnterEctype, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AckTeamEnterEctype*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(nectypeid_, nresult_);
    if (has_team_id()) {
      if (team_id_ != NULL) team_id_->::AFMsg::Ident::Clear();
    }
    if (has_self_id()) {
      if (self_id_ != NULL) self_id_->::AFMsg::Ident::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AckTeamEnterEctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckTeamEnterEctype)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident team_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_self_id;
        break;
      }

      // required .AFMsg.Ident self_id = 2;
      case 2: {
        if (tag == 18) {
         parse_self_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nEctypeID;
        break;
      }

      // optional int32 nEctypeID = 3;
      case 3: {
        if (tag == 24) {
         parse_nEctypeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nectypeid_)));
          set_has_nectypeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_nGroupID;
        break;
      }

      // optional int32 nGroupID = 4;
      case 4: {
        if (tag == 32) {
         parse_nGroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngroupid_)));
          set_has_ngroupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nResult;
        break;
      }

      // optional int32 nResult = 5;
      case 5: {
        if (tag == 40) {
         parse_nResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nresult_)));
          set_has_nresult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckTeamEnterEctype)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckTeamEnterEctype)
  return false;
#undef DO_
}

void AckTeamEnterEctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckTeamEnterEctype)
  // required .AFMsg.Ident team_id = 1;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->team_id_, output);
  }

  // required .AFMsg.Ident self_id = 2;
  if (has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->self_id_, output);
  }

  // optional int32 nEctypeID = 3;
  if (has_nectypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nectypeid(), output);
  }

  // optional int32 nGroupID = 4;
  if (has_ngroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ngroupid(), output);
  }

  // optional int32 nResult = 5;
  if (has_nresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckTeamEnterEctype)
}

::google::protobuf::uint8* AckTeamEnterEctype::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckTeamEnterEctype)
  // required .AFMsg.Ident team_id = 1;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->team_id_, false, target);
  }

  // required .AFMsg.Ident self_id = 2;
  if (has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->self_id_, false, target);
  }

  // optional int32 nEctypeID = 3;
  if (has_nectypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nectypeid(), target);
  }

  // optional int32 nGroupID = 4;
  if (has_ngroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ngroupid(), target);
  }

  // optional int32 nResult = 5;
  if (has_nresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckTeamEnterEctype)
  return target;
}

int AckTeamEnterEctype::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.AckTeamEnterEctype)
  int total_size = 0;

  if (has_team_id()) {
    // required .AFMsg.Ident team_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->team_id_);
  }

  if (has_self_id()) {
    // required .AFMsg.Ident self_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->self_id_);
  }

  return total_size;
}
int AckTeamEnterEctype::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckTeamEnterEctype)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .AFMsg.Ident team_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->team_id_);

    // required .AFMsg.Ident self_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->self_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 28u) {
    // optional int32 nEctypeID = 3;
    if (has_nectypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nectypeid());
    }

    // optional int32 nGroupID = 4;
    if (has_ngroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ngroupid());
    }

    // optional int32 nResult = 5;
    if (has_nresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nresult());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckTeamEnterEctype::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckTeamEnterEctype)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AckTeamEnterEctype* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AckTeamEnterEctype>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckTeamEnterEctype)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckTeamEnterEctype)
    MergeFrom(*source);
  }
}

void AckTeamEnterEctype::MergeFrom(const AckTeamEnterEctype& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckTeamEnterEctype)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_id()) {
      mutable_team_id()->::AFMsg::Ident::MergeFrom(from.team_id());
    }
    if (from.has_self_id()) {
      mutable_self_id()->::AFMsg::Ident::MergeFrom(from.self_id());
    }
    if (from.has_nectypeid()) {
      set_nectypeid(from.nectypeid());
    }
    if (from.has_ngroupid()) {
      set_ngroupid(from.ngroupid());
    }
    if (from.has_nresult()) {
      set_nresult(from.nresult());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AckTeamEnterEctype::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckTeamEnterEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckTeamEnterEctype::CopyFrom(const AckTeamEnterEctype& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckTeamEnterEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckTeamEnterEctype::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_team_id()) {
    if (!this->team_id_->IsInitialized()) return false;
  }
  if (has_self_id()) {
    if (!this->self_id_->IsInitialized()) return false;
  }
  return true;
}

void AckTeamEnterEctype::Swap(AckTeamEnterEctype* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckTeamEnterEctype::InternalSwap(AckTeamEnterEctype* other) {
  std::swap(team_id_, other->team_id_);
  std::swap(self_id_, other->self_id_);
  std::swap(nectypeid_, other->nectypeid_);
  std::swap(ngroupid_, other->ngroupid_);
  std::swap(nresult_, other->nresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckTeamEnterEctype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckTeamEnterEctype_descriptor_;
  metadata.reflection = AckTeamEnterEctype_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckTeamEnterEctype

// required .AFMsg.Ident team_id = 1;
bool AckTeamEnterEctype::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AckTeamEnterEctype::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
void AckTeamEnterEctype::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void AckTeamEnterEctype::clear_team_id() {
  if (team_id_ != NULL) team_id_->::AFMsg::Ident::Clear();
  clear_has_team_id();
}
const ::AFMsg::Ident& AckTeamEnterEctype::team_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckTeamEnterEctype.team_id)
  return team_id_ != NULL ? *team_id_ : *default_instance_->team_id_;
}
::AFMsg::Ident* AckTeamEnterEctype::mutable_team_id() {
  set_has_team_id();
  if (team_id_ == NULL) {
    team_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckTeamEnterEctype.team_id)
  return team_id_;
}
::AFMsg::Ident* AckTeamEnterEctype::release_team_id() {
  // @@protoc_insertion_point(field_release:AFMsg.AckTeamEnterEctype.team_id)
  clear_has_team_id();
  ::AFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
void AckTeamEnterEctype::set_allocated_team_id(::AFMsg::Ident* team_id) {
  delete team_id_;
  team_id_ = team_id;
  if (team_id) {
    set_has_team_id();
  } else {
    clear_has_team_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckTeamEnterEctype.team_id)
}

// required .AFMsg.Ident self_id = 2;
bool AckTeamEnterEctype::has_self_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AckTeamEnterEctype::set_has_self_id() {
  _has_bits_[0] |= 0x00000002u;
}
void AckTeamEnterEctype::clear_has_self_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void AckTeamEnterEctype::clear_self_id() {
  if (self_id_ != NULL) self_id_->::AFMsg::Ident::Clear();
  clear_has_self_id();
}
const ::AFMsg::Ident& AckTeamEnterEctype::self_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckTeamEnterEctype.self_id)
  return self_id_ != NULL ? *self_id_ : *default_instance_->self_id_;
}
::AFMsg::Ident* AckTeamEnterEctype::mutable_self_id() {
  set_has_self_id();
  if (self_id_ == NULL) {
    self_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckTeamEnterEctype.self_id)
  return self_id_;
}
::AFMsg::Ident* AckTeamEnterEctype::release_self_id() {
  // @@protoc_insertion_point(field_release:AFMsg.AckTeamEnterEctype.self_id)
  clear_has_self_id();
  ::AFMsg::Ident* temp = self_id_;
  self_id_ = NULL;
  return temp;
}
void AckTeamEnterEctype::set_allocated_self_id(::AFMsg::Ident* self_id) {
  delete self_id_;
  self_id_ = self_id;
  if (self_id) {
    set_has_self_id();
  } else {
    clear_has_self_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckTeamEnterEctype.self_id)
}

// optional int32 nEctypeID = 3;
bool AckTeamEnterEctype::has_nectypeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AckTeamEnterEctype::set_has_nectypeid() {
  _has_bits_[0] |= 0x00000004u;
}
void AckTeamEnterEctype::clear_has_nectypeid() {
  _has_bits_[0] &= ~0x00000004u;
}
void AckTeamEnterEctype::clear_nectypeid() {
  nectypeid_ = 0;
  clear_has_nectypeid();
}
 ::google::protobuf::int32 AckTeamEnterEctype::nectypeid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckTeamEnterEctype.nEctypeID)
  return nectypeid_;
}
 void AckTeamEnterEctype::set_nectypeid(::google::protobuf::int32 value) {
  set_has_nectypeid();
  nectypeid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckTeamEnterEctype.nEctypeID)
}

// optional int32 nGroupID = 4;
bool AckTeamEnterEctype::has_ngroupid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AckTeamEnterEctype::set_has_ngroupid() {
  _has_bits_[0] |= 0x00000008u;
}
void AckTeamEnterEctype::clear_has_ngroupid() {
  _has_bits_[0] &= ~0x00000008u;
}
void AckTeamEnterEctype::clear_ngroupid() {
  ngroupid_ = 0;
  clear_has_ngroupid();
}
 ::google::protobuf::int32 AckTeamEnterEctype::ngroupid() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckTeamEnterEctype.nGroupID)
  return ngroupid_;
}
 void AckTeamEnterEctype::set_ngroupid(::google::protobuf::int32 value) {
  set_has_ngroupid();
  ngroupid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckTeamEnterEctype.nGroupID)
}

// optional int32 nResult = 5;
bool AckTeamEnterEctype::has_nresult() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AckTeamEnterEctype::set_has_nresult() {
  _has_bits_[0] |= 0x00000010u;
}
void AckTeamEnterEctype::clear_has_nresult() {
  _has_bits_[0] &= ~0x00000010u;
}
void AckTeamEnterEctype::clear_nresult() {
  nresult_ = 0;
  clear_has_nresult();
}
 ::google::protobuf::int32 AckTeamEnterEctype::nresult() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckTeamEnterEctype.nResult)
  return nresult_;
}
 void AckTeamEnterEctype::set_nresult(::google::protobuf::int32 value) {
  set_has_nresult();
  nresult_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckTeamEnterEctype.nResult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GridGuildBaseInfo::kIdFieldNumber;
const int GridGuildBaseInfo::kLevelFieldNumber;
const int GridGuildBaseInfo::kCountFieldNumber;
const int GridGuildBaseInfo::kResourceFieldNumber;
const int GridGuildBaseInfo::kIconFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GridGuildBaseInfo::GridGuildBaseInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.GridGuildBaseInfo)
}

void GridGuildBaseInfo::InitAsDefaultInstance() {
  id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

GridGuildBaseInfo::GridGuildBaseInfo(const GridGuildBaseInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.GridGuildBaseInfo)
}

void GridGuildBaseInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = NULL;
  level_ = 0;
  count_ = 0;
  resource_ = 0;
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GridGuildBaseInfo::~GridGuildBaseInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.GridGuildBaseInfo)
  SharedDtor();
}

void GridGuildBaseInfo::SharedDtor() {
  icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete id_;
  }
}

void GridGuildBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridGuildBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridGuildBaseInfo_descriptor_;
}

const GridGuildBaseInfo& GridGuildBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

GridGuildBaseInfo* GridGuildBaseInfo::default_instance_ = NULL;

GridGuildBaseInfo* GridGuildBaseInfo::New(::google::protobuf::Arena* arena) const {
  GridGuildBaseInfo* n = new GridGuildBaseInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GridGuildBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.GridGuildBaseInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GridGuildBaseInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GridGuildBaseInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(level_, count_);
    if (has_id()) {
      if (id_ != NULL) id_->::AFMsg::Ident::Clear();
    }
    resource_ = 0;
    if (has_icon()) {
      icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GridGuildBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.GridGuildBaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required int32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_resource;
        break;
      }

      // required int32 resource = 4;
      case 4: {
        if (tag == 32) {
         parse_resource:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resource_)));
          set_has_resource();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_icon;
        break;
      }

      // required bytes icon = 5;
      case 5: {
        if (tag == 42) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_icon()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.GridGuildBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.GridGuildBaseInfo)
  return false;
#undef DO_
}

void GridGuildBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.GridGuildBaseInfo)
  // required .AFMsg.Ident id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // required int32 resource = 4;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->resource(), output);
  }

  // required bytes icon = 5;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->icon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.GridGuildBaseInfo)
}

::google::protobuf::uint8* GridGuildBaseInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.GridGuildBaseInfo)
  // required .AFMsg.Ident id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, false, target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // required int32 resource = 4;
  if (has_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->resource(), target);
  }

  // required bytes icon = 5;
  if (has_icon()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->icon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.GridGuildBaseInfo)
  return target;
}

int GridGuildBaseInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.GridGuildBaseInfo)
  int total_size = 0;

  if (has_id()) {
    // required .AFMsg.Ident id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }

  if (has_level()) {
    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  if (has_count()) {
    // required int32 count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  if (has_resource()) {
    // required int32 resource = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->resource());
  }

  if (has_icon()) {
    // required bytes icon = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->icon());
  }

  return total_size;
}
int GridGuildBaseInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.GridGuildBaseInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .AFMsg.Ident id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);

    // required int32 level = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());

    // required int32 count = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());

    // required int32 resource = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->resource());

    // required bytes icon = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->icon());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridGuildBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.GridGuildBaseInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GridGuildBaseInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GridGuildBaseInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.GridGuildBaseInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.GridGuildBaseInfo)
    MergeFrom(*source);
  }
}

void GridGuildBaseInfo::MergeFrom(const GridGuildBaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.GridGuildBaseInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::AFMsg::Ident::MergeFrom(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_icon()) {
      set_has_icon();
      icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GridGuildBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.GridGuildBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridGuildBaseInfo::CopyFrom(const GridGuildBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.GridGuildBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridGuildBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_id()) {
    if (!this->id_->IsInitialized()) return false;
  }
  return true;
}

void GridGuildBaseInfo::Swap(GridGuildBaseInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GridGuildBaseInfo::InternalSwap(GridGuildBaseInfo* other) {
  std::swap(id_, other->id_);
  std::swap(level_, other->level_);
  std::swap(count_, other->count_);
  std::swap(resource_, other->resource_);
  icon_.Swap(&other->icon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GridGuildBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GridGuildBaseInfo_descriptor_;
  metadata.reflection = GridGuildBaseInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GridGuildBaseInfo

// required .AFMsg.Ident id = 1;
bool GridGuildBaseInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GridGuildBaseInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void GridGuildBaseInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void GridGuildBaseInfo::clear_id() {
  if (id_ != NULL) id_->::AFMsg::Ident::Clear();
  clear_has_id();
}
const ::AFMsg::Ident& GridGuildBaseInfo::id() const {
  // @@protoc_insertion_point(field_get:AFMsg.GridGuildBaseInfo.id)
  return id_ != NULL ? *id_ : *default_instance_->id_;
}
::AFMsg::Ident* GridGuildBaseInfo::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.GridGuildBaseInfo.id)
  return id_;
}
::AFMsg::Ident* GridGuildBaseInfo::release_id() {
  // @@protoc_insertion_point(field_release:AFMsg.GridGuildBaseInfo.id)
  clear_has_id();
  ::AFMsg::Ident* temp = id_;
  id_ = NULL;
  return temp;
}
void GridGuildBaseInfo::set_allocated_id(::AFMsg::Ident* id) {
  delete id_;
  id_ = id;
  if (id) {
    set_has_id();
  } else {
    clear_has_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.GridGuildBaseInfo.id)
}

// required int32 level = 2;
bool GridGuildBaseInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GridGuildBaseInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
void GridGuildBaseInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void GridGuildBaseInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
 ::google::protobuf::int32 GridGuildBaseInfo::level() const {
  // @@protoc_insertion_point(field_get:AFMsg.GridGuildBaseInfo.level)
  return level_;
}
 void GridGuildBaseInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.GridGuildBaseInfo.level)
}

// required int32 count = 3;
bool GridGuildBaseInfo::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GridGuildBaseInfo::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
void GridGuildBaseInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void GridGuildBaseInfo::clear_count() {
  count_ = 0;
  clear_has_count();
}
 ::google::protobuf::int32 GridGuildBaseInfo::count() const {
  // @@protoc_insertion_point(field_get:AFMsg.GridGuildBaseInfo.count)
  return count_;
}
 void GridGuildBaseInfo::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.GridGuildBaseInfo.count)
}

// required int32 resource = 4;
bool GridGuildBaseInfo::has_resource() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GridGuildBaseInfo::set_has_resource() {
  _has_bits_[0] |= 0x00000008u;
}
void GridGuildBaseInfo::clear_has_resource() {
  _has_bits_[0] &= ~0x00000008u;
}
void GridGuildBaseInfo::clear_resource() {
  resource_ = 0;
  clear_has_resource();
}
 ::google::protobuf::int32 GridGuildBaseInfo::resource() const {
  // @@protoc_insertion_point(field_get:AFMsg.GridGuildBaseInfo.resource)
  return resource_;
}
 void GridGuildBaseInfo::set_resource(::google::protobuf::int32 value) {
  set_has_resource();
  resource_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.GridGuildBaseInfo.resource)
}

// required bytes icon = 5;
bool GridGuildBaseInfo::has_icon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GridGuildBaseInfo::set_has_icon() {
  _has_bits_[0] |= 0x00000010u;
}
void GridGuildBaseInfo::clear_has_icon() {
  _has_bits_[0] &= ~0x00000010u;
}
void GridGuildBaseInfo::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_icon();
}
 const ::std::string& GridGuildBaseInfo::icon() const {
  // @@protoc_insertion_point(field_get:AFMsg.GridGuildBaseInfo.icon)
  return icon_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GridGuildBaseInfo::set_icon(const ::std::string& value) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.GridGuildBaseInfo.icon)
}
 void GridGuildBaseInfo::set_icon(const char* value) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.GridGuildBaseInfo.icon)
}
 void GridGuildBaseInfo::set_icon(const void* value, size_t size) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.GridGuildBaseInfo.icon)
}
 ::std::string* GridGuildBaseInfo::mutable_icon() {
  set_has_icon();
  // @@protoc_insertion_point(field_mutable:AFMsg.GridGuildBaseInfo.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GridGuildBaseInfo::release_icon() {
  // @@protoc_insertion_point(field_release:AFMsg.GridGuildBaseInfo.icon)
  clear_has_icon();
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GridGuildBaseInfo::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    set_has_icon();
  } else {
    clear_has_icon();
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.GridGuildBaseInfo.icon)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqBigMapGridInfo::kMapTitleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqBigMapGridInfo::ReqBigMapGridInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqBigMapGridInfo)
}

void ReqBigMapGridInfo::InitAsDefaultInstance() {
}

ReqBigMapGridInfo::ReqBigMapGridInfo(const ReqBigMapGridInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqBigMapGridInfo)
}

void ReqBigMapGridInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBigMapGridInfo::~ReqBigMapGridInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqBigMapGridInfo)
  SharedDtor();
}

void ReqBigMapGridInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqBigMapGridInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBigMapGridInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBigMapGridInfo_descriptor_;
}

const ReqBigMapGridInfo& ReqBigMapGridInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqBigMapGridInfo* ReqBigMapGridInfo::default_instance_ = NULL;

ReqBigMapGridInfo* ReqBigMapGridInfo::New(::google::protobuf::Arena* arena) const {
  ReqBigMapGridInfo* n = new ReqBigMapGridInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqBigMapGridInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqBigMapGridInfo)
  map_title_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqBigMapGridInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqBigMapGridInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes map_title_id = 1;
      case 1: {
        if (tag == 10) {
         parse_map_title_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_map_title_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_map_title_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqBigMapGridInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqBigMapGridInfo)
  return false;
#undef DO_
}

void ReqBigMapGridInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqBigMapGridInfo)
  // repeated bytes map_title_id = 1;
  for (int i = 0; i < this->map_title_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->map_title_id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqBigMapGridInfo)
}

::google::protobuf::uint8* ReqBigMapGridInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqBigMapGridInfo)
  // repeated bytes map_title_id = 1;
  for (int i = 0; i < this->map_title_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->map_title_id(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqBigMapGridInfo)
  return target;
}

int ReqBigMapGridInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqBigMapGridInfo)
  int total_size = 0;

  // repeated bytes map_title_id = 1;
  total_size += 1 * this->map_title_id_size();
  for (int i = 0; i < this->map_title_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->map_title_id(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBigMapGridInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqBigMapGridInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqBigMapGridInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqBigMapGridInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqBigMapGridInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqBigMapGridInfo)
    MergeFrom(*source);
  }
}

void ReqBigMapGridInfo::MergeFrom(const ReqBigMapGridInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqBigMapGridInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  map_title_id_.MergeFrom(from.map_title_id_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqBigMapGridInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqBigMapGridInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBigMapGridInfo::CopyFrom(const ReqBigMapGridInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqBigMapGridInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBigMapGridInfo::IsInitialized() const {

  return true;
}

void ReqBigMapGridInfo::Swap(ReqBigMapGridInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqBigMapGridInfo::InternalSwap(ReqBigMapGridInfo* other) {
  map_title_id_.UnsafeArenaSwap(&other->map_title_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqBigMapGridInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBigMapGridInfo_descriptor_;
  metadata.reflection = ReqBigMapGridInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqBigMapGridInfo

// repeated bytes map_title_id = 1;
int ReqBigMapGridInfo::map_title_id_size() const {
  return map_title_id_.size();
}
void ReqBigMapGridInfo::clear_map_title_id() {
  map_title_id_.Clear();
}
 const ::std::string& ReqBigMapGridInfo::map_title_id(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqBigMapGridInfo.map_title_id)
  return map_title_id_.Get(index);
}
 ::std::string* ReqBigMapGridInfo::mutable_map_title_id(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqBigMapGridInfo.map_title_id)
  return map_title_id_.Mutable(index);
}
 void ReqBigMapGridInfo::set_map_title_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:AFMsg.ReqBigMapGridInfo.map_title_id)
  map_title_id_.Mutable(index)->assign(value);
}
 void ReqBigMapGridInfo::set_map_title_id(int index, const char* value) {
  map_title_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqBigMapGridInfo.map_title_id)
}
 void ReqBigMapGridInfo::set_map_title_id(int index, const void* value, size_t size) {
  map_title_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqBigMapGridInfo.map_title_id)
}
 ::std::string* ReqBigMapGridInfo::add_map_title_id() {
  // @@protoc_insertion_point(field_add_mutable:AFMsg.ReqBigMapGridInfo.map_title_id)
  return map_title_id_.Add();
}
 void ReqBigMapGridInfo::add_map_title_id(const ::std::string& value) {
  map_title_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AFMsg.ReqBigMapGridInfo.map_title_id)
}
 void ReqBigMapGridInfo::add_map_title_id(const char* value) {
  map_title_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AFMsg.ReqBigMapGridInfo.map_title_id)
}
 void ReqBigMapGridInfo::add_map_title_id(const void* value, size_t size) {
  map_title_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AFMsg.ReqBigMapGridInfo.map_title_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReqBigMapGridInfo::map_title_id() const {
  // @@protoc_insertion_point(field_list:AFMsg.ReqBigMapGridInfo.map_title_id)
  return map_title_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ReqBigMapGridInfo::mutable_map_title_id() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.ReqBigMapGridInfo.map_title_id)
  return &map_title_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BigMapGridBaseInfo::kIdFieldNumber;
const int BigMapGridBaseInfo::kGuildInfoFieldNumber;
const int BigMapGridBaseInfo::kKingwarTimeFieldNumber;
const int BigMapGridBaseInfo::kKingwarrerFieldNumber;
const int BigMapGridBaseInfo::kHurtingTimeFieldNumber;
const int BigMapGridBaseInfo::kHurterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BigMapGridBaseInfo::BigMapGridBaseInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.BigMapGridBaseInfo)
}

void BigMapGridBaseInfo::InitAsDefaultInstance() {
  guild_info_ = const_cast< ::AFMsg::GridGuildBaseInfo*>(&::AFMsg::GridGuildBaseInfo::default_instance());
  kingwarrer_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  hurter_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

BigMapGridBaseInfo::BigMapGridBaseInfo(const BigMapGridBaseInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.BigMapGridBaseInfo)
}

void BigMapGridBaseInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_info_ = NULL;
  kingwar_time_ = 0;
  kingwarrer_ = NULL;
  hurting_time_ = 0;
  hurter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BigMapGridBaseInfo::~BigMapGridBaseInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.BigMapGridBaseInfo)
  SharedDtor();
}

void BigMapGridBaseInfo::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete guild_info_;
    delete kingwarrer_;
    delete hurter_;
  }
}

void BigMapGridBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BigMapGridBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BigMapGridBaseInfo_descriptor_;
}

const BigMapGridBaseInfo& BigMapGridBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

BigMapGridBaseInfo* BigMapGridBaseInfo::default_instance_ = NULL;

BigMapGridBaseInfo* BigMapGridBaseInfo::New(::google::protobuf::Arena* arena) const {
  BigMapGridBaseInfo* n = new BigMapGridBaseInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BigMapGridBaseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.BigMapGridBaseInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BigMapGridBaseInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BigMapGridBaseInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(kingwar_time_, hurting_time_);
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_guild_info()) {
      if (guild_info_ != NULL) guild_info_->::AFMsg::GridGuildBaseInfo::Clear();
    }
    if (has_kingwarrer()) {
      if (kingwarrer_ != NULL) kingwarrer_->::AFMsg::Ident::Clear();
    }
    if (has_hurter()) {
      if (hurter_ != NULL) hurter_->::AFMsg::Ident::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BigMapGridBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.BigMapGridBaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_guild_info;
        break;
      }

      // required .AFMsg.GridGuildBaseInfo guild_info = 2;
      case 2: {
        if (tag == 18) {
         parse_guild_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_kingwar_time;
        break;
      }

      // required int32 kingwar_time = 10;
      case 10: {
        if (tag == 80) {
         parse_kingwar_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kingwar_time_)));
          set_has_kingwar_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_kingwarrer;
        break;
      }

      // required .AFMsg.Ident kingwarrer = 11;
      case 11: {
        if (tag == 90) {
         parse_kingwarrer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kingwarrer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_hurting_time;
        break;
      }

      // required int32 hurting_time = 20;
      case 20: {
        if (tag == 160) {
         parse_hurting_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hurting_time_)));
          set_has_hurting_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_hurter;
        break;
      }

      // required .AFMsg.Ident hurter = 21;
      case 21: {
        if (tag == 170) {
         parse_hurter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hurter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.BigMapGridBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.BigMapGridBaseInfo)
  return false;
#undef DO_
}

void BigMapGridBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.BigMapGridBaseInfo)
  // required bytes id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // required .AFMsg.GridGuildBaseInfo guild_info = 2;
  if (has_guild_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->guild_info_, output);
  }

  // required int32 kingwar_time = 10;
  if (has_kingwar_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->kingwar_time(), output);
  }

  // required .AFMsg.Ident kingwarrer = 11;
  if (has_kingwarrer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->kingwarrer_, output);
  }

  // required int32 hurting_time = 20;
  if (has_hurting_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->hurting_time(), output);
  }

  // required .AFMsg.Ident hurter = 21;
  if (has_hurter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->hurter_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.BigMapGridBaseInfo)
}

::google::protobuf::uint8* BigMapGridBaseInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.BigMapGridBaseInfo)
  // required bytes id = 1;
  if (has_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // required .AFMsg.GridGuildBaseInfo guild_info = 2;
  if (has_guild_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->guild_info_, false, target);
  }

  // required int32 kingwar_time = 10;
  if (has_kingwar_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->kingwar_time(), target);
  }

  // required .AFMsg.Ident kingwarrer = 11;
  if (has_kingwarrer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->kingwarrer_, false, target);
  }

  // required int32 hurting_time = 20;
  if (has_hurting_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->hurting_time(), target);
  }

  // required .AFMsg.Ident hurter = 21;
  if (has_hurter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->hurter_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.BigMapGridBaseInfo)
  return target;
}

int BigMapGridBaseInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.BigMapGridBaseInfo)
  int total_size = 0;

  if (has_id()) {
    // required bytes id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->id());
  }

  if (has_guild_info()) {
    // required .AFMsg.GridGuildBaseInfo guild_info = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->guild_info_);
  }

  if (has_kingwar_time()) {
    // required int32 kingwar_time = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kingwar_time());
  }

  if (has_kingwarrer()) {
    // required .AFMsg.Ident kingwarrer = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kingwarrer_);
  }

  if (has_hurting_time()) {
    // required int32 hurting_time = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hurting_time());
  }

  if (has_hurter()) {
    // required .AFMsg.Ident hurter = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hurter_);
  }

  return total_size;
}
int BigMapGridBaseInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.BigMapGridBaseInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required bytes id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->id());

    // required .AFMsg.GridGuildBaseInfo guild_info = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->guild_info_);

    // required int32 kingwar_time = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kingwar_time());

    // required .AFMsg.Ident kingwarrer = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kingwarrer_);

    // required int32 hurting_time = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hurting_time());

    // required .AFMsg.Ident hurter = 21;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hurter_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BigMapGridBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.BigMapGridBaseInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BigMapGridBaseInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BigMapGridBaseInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.BigMapGridBaseInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.BigMapGridBaseInfo)
    MergeFrom(*source);
  }
}

void BigMapGridBaseInfo::MergeFrom(const BigMapGridBaseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.BigMapGridBaseInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_guild_info()) {
      mutable_guild_info()->::AFMsg::GridGuildBaseInfo::MergeFrom(from.guild_info());
    }
    if (from.has_kingwar_time()) {
      set_kingwar_time(from.kingwar_time());
    }
    if (from.has_kingwarrer()) {
      mutable_kingwarrer()->::AFMsg::Ident::MergeFrom(from.kingwarrer());
    }
    if (from.has_hurting_time()) {
      set_hurting_time(from.hurting_time());
    }
    if (from.has_hurter()) {
      mutable_hurter()->::AFMsg::Ident::MergeFrom(from.hurter());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BigMapGridBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.BigMapGridBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigMapGridBaseInfo::CopyFrom(const BigMapGridBaseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.BigMapGridBaseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigMapGridBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_guild_info()) {
    if (!this->guild_info_->IsInitialized()) return false;
  }
  if (has_kingwarrer()) {
    if (!this->kingwarrer_->IsInitialized()) return false;
  }
  if (has_hurter()) {
    if (!this->hurter_->IsInitialized()) return false;
  }
  return true;
}

void BigMapGridBaseInfo::Swap(BigMapGridBaseInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BigMapGridBaseInfo::InternalSwap(BigMapGridBaseInfo* other) {
  id_.Swap(&other->id_);
  std::swap(guild_info_, other->guild_info_);
  std::swap(kingwar_time_, other->kingwar_time_);
  std::swap(kingwarrer_, other->kingwarrer_);
  std::swap(hurting_time_, other->hurting_time_);
  std::swap(hurter_, other->hurter_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BigMapGridBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BigMapGridBaseInfo_descriptor_;
  metadata.reflection = BigMapGridBaseInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BigMapGridBaseInfo

// required bytes id = 1;
bool BigMapGridBaseInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BigMapGridBaseInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BigMapGridBaseInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BigMapGridBaseInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& BigMapGridBaseInfo::id() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridBaseInfo.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BigMapGridBaseInfo::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.BigMapGridBaseInfo.id)
}
 void BigMapGridBaseInfo::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.BigMapGridBaseInfo.id)
}
 void BigMapGridBaseInfo::set_id(const void* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.BigMapGridBaseInfo.id)
}
 ::std::string* BigMapGridBaseInfo::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapGridBaseInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BigMapGridBaseInfo::release_id() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapGridBaseInfo.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BigMapGridBaseInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapGridBaseInfo.id)
}

// required .AFMsg.GridGuildBaseInfo guild_info = 2;
bool BigMapGridBaseInfo::has_guild_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BigMapGridBaseInfo::set_has_guild_info() {
  _has_bits_[0] |= 0x00000002u;
}
void BigMapGridBaseInfo::clear_has_guild_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void BigMapGridBaseInfo::clear_guild_info() {
  if (guild_info_ != NULL) guild_info_->::AFMsg::GridGuildBaseInfo::Clear();
  clear_has_guild_info();
}
const ::AFMsg::GridGuildBaseInfo& BigMapGridBaseInfo::guild_info() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridBaseInfo.guild_info)
  return guild_info_ != NULL ? *guild_info_ : *default_instance_->guild_info_;
}
::AFMsg::GridGuildBaseInfo* BigMapGridBaseInfo::mutable_guild_info() {
  set_has_guild_info();
  if (guild_info_ == NULL) {
    guild_info_ = new ::AFMsg::GridGuildBaseInfo;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapGridBaseInfo.guild_info)
  return guild_info_;
}
::AFMsg::GridGuildBaseInfo* BigMapGridBaseInfo::release_guild_info() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapGridBaseInfo.guild_info)
  clear_has_guild_info();
  ::AFMsg::GridGuildBaseInfo* temp = guild_info_;
  guild_info_ = NULL;
  return temp;
}
void BigMapGridBaseInfo::set_allocated_guild_info(::AFMsg::GridGuildBaseInfo* guild_info) {
  delete guild_info_;
  guild_info_ = guild_info;
  if (guild_info) {
    set_has_guild_info();
  } else {
    clear_has_guild_info();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapGridBaseInfo.guild_info)
}

// required int32 kingwar_time = 10;
bool BigMapGridBaseInfo::has_kingwar_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BigMapGridBaseInfo::set_has_kingwar_time() {
  _has_bits_[0] |= 0x00000004u;
}
void BigMapGridBaseInfo::clear_has_kingwar_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void BigMapGridBaseInfo::clear_kingwar_time() {
  kingwar_time_ = 0;
  clear_has_kingwar_time();
}
 ::google::protobuf::int32 BigMapGridBaseInfo::kingwar_time() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridBaseInfo.kingwar_time)
  return kingwar_time_;
}
 void BigMapGridBaseInfo::set_kingwar_time(::google::protobuf::int32 value) {
  set_has_kingwar_time();
  kingwar_time_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.BigMapGridBaseInfo.kingwar_time)
}

// required .AFMsg.Ident kingwarrer = 11;
bool BigMapGridBaseInfo::has_kingwarrer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BigMapGridBaseInfo::set_has_kingwarrer() {
  _has_bits_[0] |= 0x00000008u;
}
void BigMapGridBaseInfo::clear_has_kingwarrer() {
  _has_bits_[0] &= ~0x00000008u;
}
void BigMapGridBaseInfo::clear_kingwarrer() {
  if (kingwarrer_ != NULL) kingwarrer_->::AFMsg::Ident::Clear();
  clear_has_kingwarrer();
}
const ::AFMsg::Ident& BigMapGridBaseInfo::kingwarrer() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridBaseInfo.kingwarrer)
  return kingwarrer_ != NULL ? *kingwarrer_ : *default_instance_->kingwarrer_;
}
::AFMsg::Ident* BigMapGridBaseInfo::mutable_kingwarrer() {
  set_has_kingwarrer();
  if (kingwarrer_ == NULL) {
    kingwarrer_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapGridBaseInfo.kingwarrer)
  return kingwarrer_;
}
::AFMsg::Ident* BigMapGridBaseInfo::release_kingwarrer() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapGridBaseInfo.kingwarrer)
  clear_has_kingwarrer();
  ::AFMsg::Ident* temp = kingwarrer_;
  kingwarrer_ = NULL;
  return temp;
}
void BigMapGridBaseInfo::set_allocated_kingwarrer(::AFMsg::Ident* kingwarrer) {
  delete kingwarrer_;
  kingwarrer_ = kingwarrer;
  if (kingwarrer) {
    set_has_kingwarrer();
  } else {
    clear_has_kingwarrer();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapGridBaseInfo.kingwarrer)
}

// required int32 hurting_time = 20;
bool BigMapGridBaseInfo::has_hurting_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BigMapGridBaseInfo::set_has_hurting_time() {
  _has_bits_[0] |= 0x00000010u;
}
void BigMapGridBaseInfo::clear_has_hurting_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void BigMapGridBaseInfo::clear_hurting_time() {
  hurting_time_ = 0;
  clear_has_hurting_time();
}
 ::google::protobuf::int32 BigMapGridBaseInfo::hurting_time() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridBaseInfo.hurting_time)
  return hurting_time_;
}
 void BigMapGridBaseInfo::set_hurting_time(::google::protobuf::int32 value) {
  set_has_hurting_time();
  hurting_time_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.BigMapGridBaseInfo.hurting_time)
}

// required .AFMsg.Ident hurter = 21;
bool BigMapGridBaseInfo::has_hurter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void BigMapGridBaseInfo::set_has_hurter() {
  _has_bits_[0] |= 0x00000020u;
}
void BigMapGridBaseInfo::clear_has_hurter() {
  _has_bits_[0] &= ~0x00000020u;
}
void BigMapGridBaseInfo::clear_hurter() {
  if (hurter_ != NULL) hurter_->::AFMsg::Ident::Clear();
  clear_has_hurter();
}
const ::AFMsg::Ident& BigMapGridBaseInfo::hurter() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridBaseInfo.hurter)
  return hurter_ != NULL ? *hurter_ : *default_instance_->hurter_;
}
::AFMsg::Ident* BigMapGridBaseInfo::mutable_hurter() {
  set_has_hurter();
  if (hurter_ == NULL) {
    hurter_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapGridBaseInfo.hurter)
  return hurter_;
}
::AFMsg::Ident* BigMapGridBaseInfo::release_hurter() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapGridBaseInfo.hurter)
  clear_has_hurter();
  ::AFMsg::Ident* temp = hurter_;
  hurter_ = NULL;
  return temp;
}
void BigMapGridBaseInfo::set_allocated_hurter(::AFMsg::Ident* hurter) {
  delete hurter_;
  hurter_ = hurter;
  if (hurter) {
    set_has_hurter();
  } else {
    clear_has_hurter();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapGridBaseInfo.hurter)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BigMapLeaveMsg::kOwnerFieldNumber;
const int BigMapLeaveMsg::kOwnerNameFieldNumber;
const int BigMapLeaveMsg::kMsgDataFieldNumber;
const int BigMapLeaveMsg::kMsgTimeFieldNumber;
const int BigMapLeaveMsg::kOwnerLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BigMapLeaveMsg::BigMapLeaveMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.BigMapLeaveMsg)
}

void BigMapLeaveMsg::InitAsDefaultInstance() {
  owner_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

BigMapLeaveMsg::BigMapLeaveMsg(const BigMapLeaveMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.BigMapLeaveMsg)
}

void BigMapLeaveMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  owner_ = NULL;
  owner_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_time_ = 0;
  owner_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BigMapLeaveMsg::~BigMapLeaveMsg() {
  // @@protoc_insertion_point(destructor:AFMsg.BigMapLeaveMsg)
  SharedDtor();
}

void BigMapLeaveMsg::SharedDtor() {
  owner_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete owner_;
  }
}

void BigMapLeaveMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BigMapLeaveMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BigMapLeaveMsg_descriptor_;
}

const BigMapLeaveMsg& BigMapLeaveMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

BigMapLeaveMsg* BigMapLeaveMsg::default_instance_ = NULL;

BigMapLeaveMsg* BigMapLeaveMsg::New(::google::protobuf::Arena* arena) const {
  BigMapLeaveMsg* n = new BigMapLeaveMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BigMapLeaveMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.BigMapLeaveMsg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BigMapLeaveMsg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BigMapLeaveMsg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(msg_time_, owner_level_);
    if (has_owner()) {
      if (owner_ != NULL) owner_->::AFMsg::Ident::Clear();
    }
    if (has_owner_name()) {
      owner_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_msg_data()) {
      msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BigMapLeaveMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.BigMapLeaveMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident owner = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_owner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_owner_name;
        break;
      }

      // required bytes owner_name = 2;
      case 2: {
        if (tag == 18) {
         parse_owner_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_owner_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msg_data;
        break;
      }

      // required bytes msg_data = 3;
      case 3: {
        if (tag == 26) {
         parse_msg_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msg_time;
        break;
      }

      // required int32 msg_time = 4;
      case 4: {
        if (tag == 32) {
         parse_msg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_time_)));
          set_has_msg_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_owner_level;
        break;
      }

      // required int32 owner_level = 5;
      case 5: {
        if (tag == 40) {
         parse_owner_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_level_)));
          set_has_owner_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.BigMapLeaveMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.BigMapLeaveMsg)
  return false;
#undef DO_
}

void BigMapLeaveMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.BigMapLeaveMsg)
  // required .AFMsg.Ident owner = 1;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->owner_, output);
  }

  // required bytes owner_name = 2;
  if (has_owner_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->owner_name(), output);
  }

  // required bytes msg_data = 3;
  if (has_msg_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->msg_data(), output);
  }

  // required int32 msg_time = 4;
  if (has_msg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->msg_time(), output);
  }

  // required int32 owner_level = 5;
  if (has_owner_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->owner_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.BigMapLeaveMsg)
}

::google::protobuf::uint8* BigMapLeaveMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.BigMapLeaveMsg)
  // required .AFMsg.Ident owner = 1;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->owner_, false, target);
  }

  // required bytes owner_name = 2;
  if (has_owner_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->owner_name(), target);
  }

  // required bytes msg_data = 3;
  if (has_msg_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->msg_data(), target);
  }

  // required int32 msg_time = 4;
  if (has_msg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->msg_time(), target);
  }

  // required int32 owner_level = 5;
  if (has_owner_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->owner_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.BigMapLeaveMsg)
  return target;
}

int BigMapLeaveMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.BigMapLeaveMsg)
  int total_size = 0;

  if (has_owner()) {
    // required .AFMsg.Ident owner = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->owner_);
  }

  if (has_owner_name()) {
    // required bytes owner_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->owner_name());
  }

  if (has_msg_data()) {
    // required bytes msg_data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg_data());
  }

  if (has_msg_time()) {
    // required int32 msg_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msg_time());
  }

  if (has_owner_level()) {
    // required int32 owner_level = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->owner_level());
  }

  return total_size;
}
int BigMapLeaveMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.BigMapLeaveMsg)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .AFMsg.Ident owner = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->owner_);

    // required bytes owner_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->owner_name());

    // required bytes msg_data = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg_data());

    // required int32 msg_time = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msg_time());

    // required int32 owner_level = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->owner_level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BigMapLeaveMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.BigMapLeaveMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BigMapLeaveMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BigMapLeaveMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.BigMapLeaveMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.BigMapLeaveMsg)
    MergeFrom(*source);
  }
}

void BigMapLeaveMsg::MergeFrom(const BigMapLeaveMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.BigMapLeaveMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner()) {
      mutable_owner()->::AFMsg::Ident::MergeFrom(from.owner());
    }
    if (from.has_owner_name()) {
      set_has_owner_name();
      owner_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.owner_name_);
    }
    if (from.has_msg_data()) {
      set_has_msg_data();
      msg_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_data_);
    }
    if (from.has_msg_time()) {
      set_msg_time(from.msg_time());
    }
    if (from.has_owner_level()) {
      set_owner_level(from.owner_level());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BigMapLeaveMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.BigMapLeaveMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigMapLeaveMsg::CopyFrom(const BigMapLeaveMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.BigMapLeaveMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigMapLeaveMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_owner()) {
    if (!this->owner_->IsInitialized()) return false;
  }
  return true;
}

void BigMapLeaveMsg::Swap(BigMapLeaveMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BigMapLeaveMsg::InternalSwap(BigMapLeaveMsg* other) {
  std::swap(owner_, other->owner_);
  owner_name_.Swap(&other->owner_name_);
  msg_data_.Swap(&other->msg_data_);
  std::swap(msg_time_, other->msg_time_);
  std::swap(owner_level_, other->owner_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BigMapLeaveMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BigMapLeaveMsg_descriptor_;
  metadata.reflection = BigMapLeaveMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BigMapLeaveMsg

// required .AFMsg.Ident owner = 1;
bool BigMapLeaveMsg::has_owner() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BigMapLeaveMsg::set_has_owner() {
  _has_bits_[0] |= 0x00000001u;
}
void BigMapLeaveMsg::clear_has_owner() {
  _has_bits_[0] &= ~0x00000001u;
}
void BigMapLeaveMsg::clear_owner() {
  if (owner_ != NULL) owner_->::AFMsg::Ident::Clear();
  clear_has_owner();
}
const ::AFMsg::Ident& BigMapLeaveMsg::owner() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapLeaveMsg.owner)
  return owner_ != NULL ? *owner_ : *default_instance_->owner_;
}
::AFMsg::Ident* BigMapLeaveMsg::mutable_owner() {
  set_has_owner();
  if (owner_ == NULL) {
    owner_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapLeaveMsg.owner)
  return owner_;
}
::AFMsg::Ident* BigMapLeaveMsg::release_owner() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapLeaveMsg.owner)
  clear_has_owner();
  ::AFMsg::Ident* temp = owner_;
  owner_ = NULL;
  return temp;
}
void BigMapLeaveMsg::set_allocated_owner(::AFMsg::Ident* owner) {
  delete owner_;
  owner_ = owner;
  if (owner) {
    set_has_owner();
  } else {
    clear_has_owner();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapLeaveMsg.owner)
}

// required bytes owner_name = 2;
bool BigMapLeaveMsg::has_owner_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BigMapLeaveMsg::set_has_owner_name() {
  _has_bits_[0] |= 0x00000002u;
}
void BigMapLeaveMsg::clear_has_owner_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void BigMapLeaveMsg::clear_owner_name() {
  owner_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_owner_name();
}
 const ::std::string& BigMapLeaveMsg::owner_name() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapLeaveMsg.owner_name)
  return owner_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BigMapLeaveMsg::set_owner_name(const ::std::string& value) {
  set_has_owner_name();
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.BigMapLeaveMsg.owner_name)
}
 void BigMapLeaveMsg::set_owner_name(const char* value) {
  set_has_owner_name();
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.BigMapLeaveMsg.owner_name)
}
 void BigMapLeaveMsg::set_owner_name(const void* value, size_t size) {
  set_has_owner_name();
  owner_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.BigMapLeaveMsg.owner_name)
}
 ::std::string* BigMapLeaveMsg::mutable_owner_name() {
  set_has_owner_name();
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapLeaveMsg.owner_name)
  return owner_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BigMapLeaveMsg::release_owner_name() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapLeaveMsg.owner_name)
  clear_has_owner_name();
  return owner_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BigMapLeaveMsg::set_allocated_owner_name(::std::string* owner_name) {
  if (owner_name != NULL) {
    set_has_owner_name();
  } else {
    clear_has_owner_name();
  }
  owner_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), owner_name);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapLeaveMsg.owner_name)
}

// required bytes msg_data = 3;
bool BigMapLeaveMsg::has_msg_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BigMapLeaveMsg::set_has_msg_data() {
  _has_bits_[0] |= 0x00000004u;
}
void BigMapLeaveMsg::clear_has_msg_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void BigMapLeaveMsg::clear_msg_data() {
  msg_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_data();
}
 const ::std::string& BigMapLeaveMsg::msg_data() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapLeaveMsg.msg_data)
  return msg_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BigMapLeaveMsg::set_msg_data(const ::std::string& value) {
  set_has_msg_data();
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.BigMapLeaveMsg.msg_data)
}
 void BigMapLeaveMsg::set_msg_data(const char* value) {
  set_has_msg_data();
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.BigMapLeaveMsg.msg_data)
}
 void BigMapLeaveMsg::set_msg_data(const void* value, size_t size) {
  set_has_msg_data();
  msg_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.BigMapLeaveMsg.msg_data)
}
 ::std::string* BigMapLeaveMsg::mutable_msg_data() {
  set_has_msg_data();
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapLeaveMsg.msg_data)
  return msg_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BigMapLeaveMsg::release_msg_data() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapLeaveMsg.msg_data)
  clear_has_msg_data();
  return msg_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BigMapLeaveMsg::set_allocated_msg_data(::std::string* msg_data) {
  if (msg_data != NULL) {
    set_has_msg_data();
  } else {
    clear_has_msg_data();
  }
  msg_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_data);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapLeaveMsg.msg_data)
}

// required int32 msg_time = 4;
bool BigMapLeaveMsg::has_msg_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BigMapLeaveMsg::set_has_msg_time() {
  _has_bits_[0] |= 0x00000008u;
}
void BigMapLeaveMsg::clear_has_msg_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void BigMapLeaveMsg::clear_msg_time() {
  msg_time_ = 0;
  clear_has_msg_time();
}
 ::google::protobuf::int32 BigMapLeaveMsg::msg_time() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapLeaveMsg.msg_time)
  return msg_time_;
}
 void BigMapLeaveMsg::set_msg_time(::google::protobuf::int32 value) {
  set_has_msg_time();
  msg_time_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.BigMapLeaveMsg.msg_time)
}

// required int32 owner_level = 5;
bool BigMapLeaveMsg::has_owner_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BigMapLeaveMsg::set_has_owner_level() {
  _has_bits_[0] |= 0x00000010u;
}
void BigMapLeaveMsg::clear_has_owner_level() {
  _has_bits_[0] &= ~0x00000010u;
}
void BigMapLeaveMsg::clear_owner_level() {
  owner_level_ = 0;
  clear_has_owner_level();
}
 ::google::protobuf::int32 BigMapLeaveMsg::owner_level() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapLeaveMsg.owner_level)
  return owner_level_;
}
 void BigMapLeaveMsg::set_owner_level(::google::protobuf::int32 value) {
  set_has_owner_level();
  owner_level_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.BigMapLeaveMsg.owner_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BigMapWarHistory::kRedInfoFieldNumber;
const int BigMapWarHistory::kBlueInfoFieldNumber;
const int BigMapWarHistory::kWinnerIdFieldNumber;
const int BigMapWarHistory::kWarTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BigMapWarHistory::BigMapWarHistory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.BigMapWarHistory)
}

void BigMapWarHistory::InitAsDefaultInstance() {
  red_info_ = const_cast< ::AFMsg::GridGuildBaseInfo*>(&::AFMsg::GridGuildBaseInfo::default_instance());
  blue_info_ = const_cast< ::AFMsg::GridGuildBaseInfo*>(&::AFMsg::GridGuildBaseInfo::default_instance());
  winner_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

BigMapWarHistory::BigMapWarHistory(const BigMapWarHistory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.BigMapWarHistory)
}

void BigMapWarHistory::SharedCtor() {
  _cached_size_ = 0;
  red_info_ = NULL;
  blue_info_ = NULL;
  winner_id_ = NULL;
  war_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BigMapWarHistory::~BigMapWarHistory() {
  // @@protoc_insertion_point(destructor:AFMsg.BigMapWarHistory)
  SharedDtor();
}

void BigMapWarHistory::SharedDtor() {
  if (this != default_instance_) {
    delete red_info_;
    delete blue_info_;
    delete winner_id_;
  }
}

void BigMapWarHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BigMapWarHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BigMapWarHistory_descriptor_;
}

const BigMapWarHistory& BigMapWarHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

BigMapWarHistory* BigMapWarHistory::default_instance_ = NULL;

BigMapWarHistory* BigMapWarHistory::New(::google::protobuf::Arena* arena) const {
  BigMapWarHistory* n = new BigMapWarHistory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BigMapWarHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.BigMapWarHistory)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_red_info()) {
      if (red_info_ != NULL) red_info_->::AFMsg::GridGuildBaseInfo::Clear();
    }
    if (has_blue_info()) {
      if (blue_info_ != NULL) blue_info_->::AFMsg::GridGuildBaseInfo::Clear();
    }
    if (has_winner_id()) {
      if (winner_id_ != NULL) winner_id_->::AFMsg::Ident::Clear();
    }
    war_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BigMapWarHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.BigMapWarHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.GridGuildBaseInfo red_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_red_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_blue_info;
        break;
      }

      // required .AFMsg.GridGuildBaseInfo blue_info = 2;
      case 2: {
        if (tag == 18) {
         parse_blue_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blue_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_winner_id;
        break;
      }

      // required .AFMsg.Ident winner_id = 10;
      case 10: {
        if (tag == 82) {
         parse_winner_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_winner_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_war_time;
        break;
      }

      // required int32 war_time = 11;
      case 11: {
        if (tag == 88) {
         parse_war_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &war_time_)));
          set_has_war_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.BigMapWarHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.BigMapWarHistory)
  return false;
#undef DO_
}

void BigMapWarHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.BigMapWarHistory)
  // required .AFMsg.GridGuildBaseInfo red_info = 1;
  if (has_red_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->red_info_, output);
  }

  // required .AFMsg.GridGuildBaseInfo blue_info = 2;
  if (has_blue_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->blue_info_, output);
  }

  // required .AFMsg.Ident winner_id = 10;
  if (has_winner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->winner_id_, output);
  }

  // required int32 war_time = 11;
  if (has_war_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->war_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.BigMapWarHistory)
}

::google::protobuf::uint8* BigMapWarHistory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.BigMapWarHistory)
  // required .AFMsg.GridGuildBaseInfo red_info = 1;
  if (has_red_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->red_info_, false, target);
  }

  // required .AFMsg.GridGuildBaseInfo blue_info = 2;
  if (has_blue_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->blue_info_, false, target);
  }

  // required .AFMsg.Ident winner_id = 10;
  if (has_winner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->winner_id_, false, target);
  }

  // required int32 war_time = 11;
  if (has_war_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->war_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.BigMapWarHistory)
  return target;
}

int BigMapWarHistory::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.BigMapWarHistory)
  int total_size = 0;

  if (has_red_info()) {
    // required .AFMsg.GridGuildBaseInfo red_info = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->red_info_);
  }

  if (has_blue_info()) {
    // required .AFMsg.GridGuildBaseInfo blue_info = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->blue_info_);
  }

  if (has_winner_id()) {
    // required .AFMsg.Ident winner_id = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->winner_id_);
  }

  if (has_war_time()) {
    // required int32 war_time = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->war_time());
  }

  return total_size;
}
int BigMapWarHistory::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.BigMapWarHistory)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .AFMsg.GridGuildBaseInfo red_info = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->red_info_);

    // required .AFMsg.GridGuildBaseInfo blue_info = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->blue_info_);

    // required .AFMsg.Ident winner_id = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->winner_id_);

    // required int32 war_time = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->war_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BigMapWarHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.BigMapWarHistory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BigMapWarHistory* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BigMapWarHistory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.BigMapWarHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.BigMapWarHistory)
    MergeFrom(*source);
  }
}

void BigMapWarHistory::MergeFrom(const BigMapWarHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.BigMapWarHistory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_red_info()) {
      mutable_red_info()->::AFMsg::GridGuildBaseInfo::MergeFrom(from.red_info());
    }
    if (from.has_blue_info()) {
      mutable_blue_info()->::AFMsg::GridGuildBaseInfo::MergeFrom(from.blue_info());
    }
    if (from.has_winner_id()) {
      mutable_winner_id()->::AFMsg::Ident::MergeFrom(from.winner_id());
    }
    if (from.has_war_time()) {
      set_war_time(from.war_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BigMapWarHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.BigMapWarHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigMapWarHistory::CopyFrom(const BigMapWarHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.BigMapWarHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigMapWarHistory::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_red_info()) {
    if (!this->red_info_->IsInitialized()) return false;
  }
  if (has_blue_info()) {
    if (!this->blue_info_->IsInitialized()) return false;
  }
  if (has_winner_id()) {
    if (!this->winner_id_->IsInitialized()) return false;
  }
  return true;
}

void BigMapWarHistory::Swap(BigMapWarHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BigMapWarHistory::InternalSwap(BigMapWarHistory* other) {
  std::swap(red_info_, other->red_info_);
  std::swap(blue_info_, other->blue_info_);
  std::swap(winner_id_, other->winner_id_);
  std::swap(war_time_, other->war_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BigMapWarHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BigMapWarHistory_descriptor_;
  metadata.reflection = BigMapWarHistory_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BigMapWarHistory

// required .AFMsg.GridGuildBaseInfo red_info = 1;
bool BigMapWarHistory::has_red_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BigMapWarHistory::set_has_red_info() {
  _has_bits_[0] |= 0x00000001u;
}
void BigMapWarHistory::clear_has_red_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void BigMapWarHistory::clear_red_info() {
  if (red_info_ != NULL) red_info_->::AFMsg::GridGuildBaseInfo::Clear();
  clear_has_red_info();
}
const ::AFMsg::GridGuildBaseInfo& BigMapWarHistory::red_info() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapWarHistory.red_info)
  return red_info_ != NULL ? *red_info_ : *default_instance_->red_info_;
}
::AFMsg::GridGuildBaseInfo* BigMapWarHistory::mutable_red_info() {
  set_has_red_info();
  if (red_info_ == NULL) {
    red_info_ = new ::AFMsg::GridGuildBaseInfo;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapWarHistory.red_info)
  return red_info_;
}
::AFMsg::GridGuildBaseInfo* BigMapWarHistory::release_red_info() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapWarHistory.red_info)
  clear_has_red_info();
  ::AFMsg::GridGuildBaseInfo* temp = red_info_;
  red_info_ = NULL;
  return temp;
}
void BigMapWarHistory::set_allocated_red_info(::AFMsg::GridGuildBaseInfo* red_info) {
  delete red_info_;
  red_info_ = red_info;
  if (red_info) {
    set_has_red_info();
  } else {
    clear_has_red_info();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapWarHistory.red_info)
}

// required .AFMsg.GridGuildBaseInfo blue_info = 2;
bool BigMapWarHistory::has_blue_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BigMapWarHistory::set_has_blue_info() {
  _has_bits_[0] |= 0x00000002u;
}
void BigMapWarHistory::clear_has_blue_info() {
  _has_bits_[0] &= ~0x00000002u;
}
void BigMapWarHistory::clear_blue_info() {
  if (blue_info_ != NULL) blue_info_->::AFMsg::GridGuildBaseInfo::Clear();
  clear_has_blue_info();
}
const ::AFMsg::GridGuildBaseInfo& BigMapWarHistory::blue_info() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapWarHistory.blue_info)
  return blue_info_ != NULL ? *blue_info_ : *default_instance_->blue_info_;
}
::AFMsg::GridGuildBaseInfo* BigMapWarHistory::mutable_blue_info() {
  set_has_blue_info();
  if (blue_info_ == NULL) {
    blue_info_ = new ::AFMsg::GridGuildBaseInfo;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapWarHistory.blue_info)
  return blue_info_;
}
::AFMsg::GridGuildBaseInfo* BigMapWarHistory::release_blue_info() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapWarHistory.blue_info)
  clear_has_blue_info();
  ::AFMsg::GridGuildBaseInfo* temp = blue_info_;
  blue_info_ = NULL;
  return temp;
}
void BigMapWarHistory::set_allocated_blue_info(::AFMsg::GridGuildBaseInfo* blue_info) {
  delete blue_info_;
  blue_info_ = blue_info;
  if (blue_info) {
    set_has_blue_info();
  } else {
    clear_has_blue_info();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapWarHistory.blue_info)
}

// required .AFMsg.Ident winner_id = 10;
bool BigMapWarHistory::has_winner_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BigMapWarHistory::set_has_winner_id() {
  _has_bits_[0] |= 0x00000004u;
}
void BigMapWarHistory::clear_has_winner_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void BigMapWarHistory::clear_winner_id() {
  if (winner_id_ != NULL) winner_id_->::AFMsg::Ident::Clear();
  clear_has_winner_id();
}
const ::AFMsg::Ident& BigMapWarHistory::winner_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapWarHistory.winner_id)
  return winner_id_ != NULL ? *winner_id_ : *default_instance_->winner_id_;
}
::AFMsg::Ident* BigMapWarHistory::mutable_winner_id() {
  set_has_winner_id();
  if (winner_id_ == NULL) {
    winner_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapWarHistory.winner_id)
  return winner_id_;
}
::AFMsg::Ident* BigMapWarHistory::release_winner_id() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapWarHistory.winner_id)
  clear_has_winner_id();
  ::AFMsg::Ident* temp = winner_id_;
  winner_id_ = NULL;
  return temp;
}
void BigMapWarHistory::set_allocated_winner_id(::AFMsg::Ident* winner_id) {
  delete winner_id_;
  winner_id_ = winner_id;
  if (winner_id) {
    set_has_winner_id();
  } else {
    clear_has_winner_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapWarHistory.winner_id)
}

// required int32 war_time = 11;
bool BigMapWarHistory::has_war_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BigMapWarHistory::set_has_war_time() {
  _has_bits_[0] |= 0x00000008u;
}
void BigMapWarHistory::clear_has_war_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void BigMapWarHistory::clear_war_time() {
  war_time_ = 0;
  clear_has_war_time();
}
 ::google::protobuf::int32 BigMapWarHistory::war_time() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapWarHistory.war_time)
  return war_time_;
}
 void BigMapWarHistory::set_war_time(::google::protobuf::int32 value) {
  set_has_war_time();
  war_time_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.BigMapWarHistory.war_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BigMapGridDetailInfo::kGridBaseInfoFieldNumber;
const int BigMapGridDetailInfo::kStayGuidListFieldNumber;
const int BigMapGridDetailInfo::kLeaveMsgFieldNumber;
const int BigMapGridDetailInfo::kWarHistoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BigMapGridDetailInfo::BigMapGridDetailInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.BigMapGridDetailInfo)
}

void BigMapGridDetailInfo::InitAsDefaultInstance() {
  grid_base_info_ = const_cast< ::AFMsg::BigMapGridBaseInfo*>(&::AFMsg::BigMapGridBaseInfo::default_instance());
}

BigMapGridDetailInfo::BigMapGridDetailInfo(const BigMapGridDetailInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.BigMapGridDetailInfo)
}

void BigMapGridDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  grid_base_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BigMapGridDetailInfo::~BigMapGridDetailInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.BigMapGridDetailInfo)
  SharedDtor();
}

void BigMapGridDetailInfo::SharedDtor() {
  if (this != default_instance_) {
    delete grid_base_info_;
  }
}

void BigMapGridDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BigMapGridDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BigMapGridDetailInfo_descriptor_;
}

const BigMapGridDetailInfo& BigMapGridDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

BigMapGridDetailInfo* BigMapGridDetailInfo::default_instance_ = NULL;

BigMapGridDetailInfo* BigMapGridDetailInfo::New(::google::protobuf::Arena* arena) const {
  BigMapGridDetailInfo* n = new BigMapGridDetailInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BigMapGridDetailInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.BigMapGridDetailInfo)
  if (has_grid_base_info()) {
    if (grid_base_info_ != NULL) grid_base_info_->::AFMsg::BigMapGridBaseInfo::Clear();
  }
  stay_guid_list_.Clear();
  leave_msg_.Clear();
  war_history_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BigMapGridDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.BigMapGridDetailInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.BigMapGridBaseInfo grid_base_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grid_base_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_stay_guid_list;
        break;
      }

      // repeated .AFMsg.GridGuildBaseInfo stay_guid_list = 2;
      case 2: {
        if (tag == 18) {
         parse_stay_guid_list:
          DO_(input->IncrementRecursionDepth());
         parse_loop_stay_guid_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stay_guid_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_stay_guid_list;
        if (input->ExpectTag(26)) goto parse_loop_leave_msg;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .AFMsg.BigMapLeaveMsg leave_msg = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_leave_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_leave_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_leave_msg;
        if (input->ExpectTag(34)) goto parse_loop_war_history;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .AFMsg.BigMapWarHistory war_history = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_war_history:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_war_history()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_war_history;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.BigMapGridDetailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.BigMapGridDetailInfo)
  return false;
#undef DO_
}

void BigMapGridDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.BigMapGridDetailInfo)
  // required .AFMsg.BigMapGridBaseInfo grid_base_info = 1;
  if (has_grid_base_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->grid_base_info_, output);
  }

  // repeated .AFMsg.GridGuildBaseInfo stay_guid_list = 2;
  for (unsigned int i = 0, n = this->stay_guid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stay_guid_list(i), output);
  }

  // repeated .AFMsg.BigMapLeaveMsg leave_msg = 3;
  for (unsigned int i = 0, n = this->leave_msg_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->leave_msg(i), output);
  }

  // repeated .AFMsg.BigMapWarHistory war_history = 4;
  for (unsigned int i = 0, n = this->war_history_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->war_history(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.BigMapGridDetailInfo)
}

::google::protobuf::uint8* BigMapGridDetailInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.BigMapGridDetailInfo)
  // required .AFMsg.BigMapGridBaseInfo grid_base_info = 1;
  if (has_grid_base_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->grid_base_info_, false, target);
  }

  // repeated .AFMsg.GridGuildBaseInfo stay_guid_list = 2;
  for (unsigned int i = 0, n = this->stay_guid_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->stay_guid_list(i), false, target);
  }

  // repeated .AFMsg.BigMapLeaveMsg leave_msg = 3;
  for (unsigned int i = 0, n = this->leave_msg_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->leave_msg(i), false, target);
  }

  // repeated .AFMsg.BigMapWarHistory war_history = 4;
  for (unsigned int i = 0, n = this->war_history_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->war_history(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.BigMapGridDetailInfo)
  return target;
}

int BigMapGridDetailInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.BigMapGridDetailInfo)
  int total_size = 0;

  // required .AFMsg.BigMapGridBaseInfo grid_base_info = 1;
  if (has_grid_base_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->grid_base_info_);
  }
  // repeated .AFMsg.GridGuildBaseInfo stay_guid_list = 2;
  total_size += 1 * this->stay_guid_list_size();
  for (int i = 0; i < this->stay_guid_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stay_guid_list(i));
  }

  // repeated .AFMsg.BigMapLeaveMsg leave_msg = 3;
  total_size += 1 * this->leave_msg_size();
  for (int i = 0; i < this->leave_msg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leave_msg(i));
  }

  // repeated .AFMsg.BigMapWarHistory war_history = 4;
  total_size += 1 * this->war_history_size();
  for (int i = 0; i < this->war_history_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->war_history(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BigMapGridDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.BigMapGridDetailInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BigMapGridDetailInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BigMapGridDetailInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.BigMapGridDetailInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.BigMapGridDetailInfo)
    MergeFrom(*source);
  }
}

void BigMapGridDetailInfo::MergeFrom(const BigMapGridDetailInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.BigMapGridDetailInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  stay_guid_list_.MergeFrom(from.stay_guid_list_);
  leave_msg_.MergeFrom(from.leave_msg_);
  war_history_.MergeFrom(from.war_history_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grid_base_info()) {
      mutable_grid_base_info()->::AFMsg::BigMapGridBaseInfo::MergeFrom(from.grid_base_info());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BigMapGridDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.BigMapGridDetailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigMapGridDetailInfo::CopyFrom(const BigMapGridDetailInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.BigMapGridDetailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigMapGridDetailInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_grid_base_info()) {
    if (!this->grid_base_info_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->stay_guid_list())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->leave_msg())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->war_history())) return false;
  return true;
}

void BigMapGridDetailInfo::Swap(BigMapGridDetailInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BigMapGridDetailInfo::InternalSwap(BigMapGridDetailInfo* other) {
  std::swap(grid_base_info_, other->grid_base_info_);
  stay_guid_list_.UnsafeArenaSwap(&other->stay_guid_list_);
  leave_msg_.UnsafeArenaSwap(&other->leave_msg_);
  war_history_.UnsafeArenaSwap(&other->war_history_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BigMapGridDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BigMapGridDetailInfo_descriptor_;
  metadata.reflection = BigMapGridDetailInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BigMapGridDetailInfo

// required .AFMsg.BigMapGridBaseInfo grid_base_info = 1;
bool BigMapGridDetailInfo::has_grid_base_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BigMapGridDetailInfo::set_has_grid_base_info() {
  _has_bits_[0] |= 0x00000001u;
}
void BigMapGridDetailInfo::clear_has_grid_base_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void BigMapGridDetailInfo::clear_grid_base_info() {
  if (grid_base_info_ != NULL) grid_base_info_->::AFMsg::BigMapGridBaseInfo::Clear();
  clear_has_grid_base_info();
}
const ::AFMsg::BigMapGridBaseInfo& BigMapGridDetailInfo::grid_base_info() const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridDetailInfo.grid_base_info)
  return grid_base_info_ != NULL ? *grid_base_info_ : *default_instance_->grid_base_info_;
}
::AFMsg::BigMapGridBaseInfo* BigMapGridDetailInfo::mutable_grid_base_info() {
  set_has_grid_base_info();
  if (grid_base_info_ == NULL) {
    grid_base_info_ = new ::AFMsg::BigMapGridBaseInfo;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapGridDetailInfo.grid_base_info)
  return grid_base_info_;
}
::AFMsg::BigMapGridBaseInfo* BigMapGridDetailInfo::release_grid_base_info() {
  // @@protoc_insertion_point(field_release:AFMsg.BigMapGridDetailInfo.grid_base_info)
  clear_has_grid_base_info();
  ::AFMsg::BigMapGridBaseInfo* temp = grid_base_info_;
  grid_base_info_ = NULL;
  return temp;
}
void BigMapGridDetailInfo::set_allocated_grid_base_info(::AFMsg::BigMapGridBaseInfo* grid_base_info) {
  delete grid_base_info_;
  grid_base_info_ = grid_base_info;
  if (grid_base_info) {
    set_has_grid_base_info();
  } else {
    clear_has_grid_base_info();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.BigMapGridDetailInfo.grid_base_info)
}

// repeated .AFMsg.GridGuildBaseInfo stay_guid_list = 2;
int BigMapGridDetailInfo::stay_guid_list_size() const {
  return stay_guid_list_.size();
}
void BigMapGridDetailInfo::clear_stay_guid_list() {
  stay_guid_list_.Clear();
}
const ::AFMsg::GridGuildBaseInfo& BigMapGridDetailInfo::stay_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridDetailInfo.stay_guid_list)
  return stay_guid_list_.Get(index);
}
::AFMsg::GridGuildBaseInfo* BigMapGridDetailInfo::mutable_stay_guid_list(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapGridDetailInfo.stay_guid_list)
  return stay_guid_list_.Mutable(index);
}
::AFMsg::GridGuildBaseInfo* BigMapGridDetailInfo::add_stay_guid_list() {
  // @@protoc_insertion_point(field_add:AFMsg.BigMapGridDetailInfo.stay_guid_list)
  return stay_guid_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::AFMsg::GridGuildBaseInfo >*
BigMapGridDetailInfo::mutable_stay_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.BigMapGridDetailInfo.stay_guid_list)
  return &stay_guid_list_;
}
const ::google::protobuf::RepeatedPtrField< ::AFMsg::GridGuildBaseInfo >&
BigMapGridDetailInfo::stay_guid_list() const {
  // @@protoc_insertion_point(field_list:AFMsg.BigMapGridDetailInfo.stay_guid_list)
  return stay_guid_list_;
}

// repeated .AFMsg.BigMapLeaveMsg leave_msg = 3;
int BigMapGridDetailInfo::leave_msg_size() const {
  return leave_msg_.size();
}
void BigMapGridDetailInfo::clear_leave_msg() {
  leave_msg_.Clear();
}
const ::AFMsg::BigMapLeaveMsg& BigMapGridDetailInfo::leave_msg(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridDetailInfo.leave_msg)
  return leave_msg_.Get(index);
}
::AFMsg::BigMapLeaveMsg* BigMapGridDetailInfo::mutable_leave_msg(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapGridDetailInfo.leave_msg)
  return leave_msg_.Mutable(index);
}
::AFMsg::BigMapLeaveMsg* BigMapGridDetailInfo::add_leave_msg() {
  // @@protoc_insertion_point(field_add:AFMsg.BigMapGridDetailInfo.leave_msg)
  return leave_msg_.Add();
}
::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapLeaveMsg >*
BigMapGridDetailInfo::mutable_leave_msg() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.BigMapGridDetailInfo.leave_msg)
  return &leave_msg_;
}
const ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapLeaveMsg >&
BigMapGridDetailInfo::leave_msg() const {
  // @@protoc_insertion_point(field_list:AFMsg.BigMapGridDetailInfo.leave_msg)
  return leave_msg_;
}

// repeated .AFMsg.BigMapWarHistory war_history = 4;
int BigMapGridDetailInfo::war_history_size() const {
  return war_history_.size();
}
void BigMapGridDetailInfo::clear_war_history() {
  war_history_.Clear();
}
const ::AFMsg::BigMapWarHistory& BigMapGridDetailInfo::war_history(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.BigMapGridDetailInfo.war_history)
  return war_history_.Get(index);
}
::AFMsg::BigMapWarHistory* BigMapGridDetailInfo::mutable_war_history(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.BigMapGridDetailInfo.war_history)
  return war_history_.Mutable(index);
}
::AFMsg::BigMapWarHistory* BigMapGridDetailInfo::add_war_history() {
  // @@protoc_insertion_point(field_add:AFMsg.BigMapGridDetailInfo.war_history)
  return war_history_.Add();
}
::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapWarHistory >*
BigMapGridDetailInfo::mutable_war_history() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.BigMapGridDetailInfo.war_history)
  return &war_history_;
}
const ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapWarHistory >&
BigMapGridDetailInfo::war_history() const {
  // @@protoc_insertion_point(field_list:AFMsg.BigMapGridDetailInfo.war_history)
  return war_history_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckBigMapGridInfo::kMapDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckBigMapGridInfo::AckBigMapGridInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckBigMapGridInfo)
}

void AckBigMapGridInfo::InitAsDefaultInstance() {
}

AckBigMapGridInfo::AckBigMapGridInfo(const AckBigMapGridInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckBigMapGridInfo)
}

void AckBigMapGridInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBigMapGridInfo::~AckBigMapGridInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.AckBigMapGridInfo)
  SharedDtor();
}

void AckBigMapGridInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBigMapGridInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBigMapGridInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBigMapGridInfo_descriptor_;
}

const AckBigMapGridInfo& AckBigMapGridInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

AckBigMapGridInfo* AckBigMapGridInfo::default_instance_ = NULL;

AckBigMapGridInfo* AckBigMapGridInfo::New(::google::protobuf::Arena* arena) const {
  AckBigMapGridInfo* n = new AckBigMapGridInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckBigMapGridInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckBigMapGridInfo)
  map_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AckBigMapGridInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckBigMapGridInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFMsg.BigMapGridDetailInfo map_data = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_map_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_map_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_map_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckBigMapGridInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckBigMapGridInfo)
  return false;
#undef DO_
}

void AckBigMapGridInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckBigMapGridInfo)
  // repeated .AFMsg.BigMapGridDetailInfo map_data = 1;
  for (unsigned int i = 0, n = this->map_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->map_data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckBigMapGridInfo)
}

::google::protobuf::uint8* AckBigMapGridInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckBigMapGridInfo)
  // repeated .AFMsg.BigMapGridDetailInfo map_data = 1;
  for (unsigned int i = 0, n = this->map_data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->map_data(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckBigMapGridInfo)
  return target;
}

int AckBigMapGridInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckBigMapGridInfo)
  int total_size = 0;

  // repeated .AFMsg.BigMapGridDetailInfo map_data = 1;
  total_size += 1 * this->map_data_size();
  for (int i = 0; i < this->map_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBigMapGridInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckBigMapGridInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AckBigMapGridInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AckBigMapGridInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckBigMapGridInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckBigMapGridInfo)
    MergeFrom(*source);
  }
}

void AckBigMapGridInfo::MergeFrom(const AckBigMapGridInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckBigMapGridInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  map_data_.MergeFrom(from.map_data_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AckBigMapGridInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckBigMapGridInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBigMapGridInfo::CopyFrom(const AckBigMapGridInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckBigMapGridInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBigMapGridInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->map_data())) return false;
  return true;
}

void AckBigMapGridInfo::Swap(AckBigMapGridInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckBigMapGridInfo::InternalSwap(AckBigMapGridInfo* other) {
  map_data_.UnsafeArenaSwap(&other->map_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckBigMapGridInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBigMapGridInfo_descriptor_;
  metadata.reflection = AckBigMapGridInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckBigMapGridInfo

// repeated .AFMsg.BigMapGridDetailInfo map_data = 1;
int AckBigMapGridInfo::map_data_size() const {
  return map_data_.size();
}
void AckBigMapGridInfo::clear_map_data() {
  map_data_.Clear();
}
const ::AFMsg::BigMapGridDetailInfo& AckBigMapGridInfo::map_data(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.AckBigMapGridInfo.map_data)
  return map_data_.Get(index);
}
::AFMsg::BigMapGridDetailInfo* AckBigMapGridInfo::mutable_map_data(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.AckBigMapGridInfo.map_data)
  return map_data_.Mutable(index);
}
::AFMsg::BigMapGridDetailInfo* AckBigMapGridInfo::add_map_data() {
  // @@protoc_insertion_point(field_add:AFMsg.AckBigMapGridInfo.map_data)
  return map_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapGridDetailInfo >*
AckBigMapGridInfo::mutable_map_data() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.AckBigMapGridInfo.map_data)
  return &map_data_;
}
const ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapGridDetailInfo >&
AckBigMapGridInfo::map_data() const {
  // @@protoc_insertion_point(field_list:AFMsg.AckBigMapGridInfo.map_data)
  return map_data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqBigMapInfo::ReqBigMapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqBigMapInfo)
}

void ReqBigMapInfo::InitAsDefaultInstance() {
}

ReqBigMapInfo::ReqBigMapInfo(const ReqBigMapInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqBigMapInfo)
}

void ReqBigMapInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBigMapInfo::~ReqBigMapInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqBigMapInfo)
  SharedDtor();
}

void ReqBigMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqBigMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBigMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBigMapInfo_descriptor_;
}

const ReqBigMapInfo& ReqBigMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqBigMapInfo* ReqBigMapInfo::default_instance_ = NULL;

ReqBigMapInfo* ReqBigMapInfo::New(::google::protobuf::Arena* arena) const {
  ReqBigMapInfo* n = new ReqBigMapInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqBigMapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqBigMapInfo)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqBigMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqBigMapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqBigMapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqBigMapInfo)
  return false;
#undef DO_
}

void ReqBigMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqBigMapInfo)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqBigMapInfo)
}

::google::protobuf::uint8* ReqBigMapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqBigMapInfo)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqBigMapInfo)
  return target;
}

int ReqBigMapInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqBigMapInfo)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBigMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqBigMapInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqBigMapInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqBigMapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqBigMapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqBigMapInfo)
    MergeFrom(*source);
  }
}

void ReqBigMapInfo::MergeFrom(const ReqBigMapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqBigMapInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqBigMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqBigMapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBigMapInfo::CopyFrom(const ReqBigMapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqBigMapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBigMapInfo::IsInitialized() const {

  return true;
}

void ReqBigMapInfo::Swap(ReqBigMapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqBigMapInfo::InternalSwap(ReqBigMapInfo* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqBigMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBigMapInfo_descriptor_;
  metadata.reflection = ReqBigMapInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqBigMapInfo

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckBigMapInfo::kGridBaseInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckBigMapInfo::AckBigMapInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckBigMapInfo)
}

void AckBigMapInfo::InitAsDefaultInstance() {
}

AckBigMapInfo::AckBigMapInfo(const AckBigMapInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckBigMapInfo)
}

void AckBigMapInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBigMapInfo::~AckBigMapInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.AckBigMapInfo)
  SharedDtor();
}

void AckBigMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBigMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBigMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBigMapInfo_descriptor_;
}

const AckBigMapInfo& AckBigMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

AckBigMapInfo* AckBigMapInfo::default_instance_ = NULL;

AckBigMapInfo* AckBigMapInfo::New(::google::protobuf::Arena* arena) const {
  AckBigMapInfo* n = new AckBigMapInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckBigMapInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckBigMapInfo)
  grid_base_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AckBigMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckBigMapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AFMsg.BigMapGridBaseInfo grid_base_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_grid_base_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_grid_base_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_grid_base_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckBigMapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckBigMapInfo)
  return false;
#undef DO_
}

void AckBigMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckBigMapInfo)
  // repeated .AFMsg.BigMapGridBaseInfo grid_base_info = 1;
  for (unsigned int i = 0, n = this->grid_base_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->grid_base_info(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckBigMapInfo)
}

::google::protobuf::uint8* AckBigMapInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckBigMapInfo)
  // repeated .AFMsg.BigMapGridBaseInfo grid_base_info = 1;
  for (unsigned int i = 0, n = this->grid_base_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->grid_base_info(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckBigMapInfo)
  return target;
}

int AckBigMapInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckBigMapInfo)
  int total_size = 0;

  // repeated .AFMsg.BigMapGridBaseInfo grid_base_info = 1;
  total_size += 1 * this->grid_base_info_size();
  for (int i = 0; i < this->grid_base_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grid_base_info(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBigMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckBigMapInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AckBigMapInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AckBigMapInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckBigMapInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckBigMapInfo)
    MergeFrom(*source);
  }
}

void AckBigMapInfo::MergeFrom(const AckBigMapInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckBigMapInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  grid_base_info_.MergeFrom(from.grid_base_info_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AckBigMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckBigMapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBigMapInfo::CopyFrom(const AckBigMapInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckBigMapInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBigMapInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->grid_base_info())) return false;
  return true;
}

void AckBigMapInfo::Swap(AckBigMapInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckBigMapInfo::InternalSwap(AckBigMapInfo* other) {
  grid_base_info_.UnsafeArenaSwap(&other->grid_base_info_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckBigMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBigMapInfo_descriptor_;
  metadata.reflection = AckBigMapInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckBigMapInfo

// repeated .AFMsg.BigMapGridBaseInfo grid_base_info = 1;
int AckBigMapInfo::grid_base_info_size() const {
  return grid_base_info_.size();
}
void AckBigMapInfo::clear_grid_base_info() {
  grid_base_info_.Clear();
}
const ::AFMsg::BigMapGridBaseInfo& AckBigMapInfo::grid_base_info(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.AckBigMapInfo.grid_base_info)
  return grid_base_info_.Get(index);
}
::AFMsg::BigMapGridBaseInfo* AckBigMapInfo::mutable_grid_base_info(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.AckBigMapInfo.grid_base_info)
  return grid_base_info_.Mutable(index);
}
::AFMsg::BigMapGridBaseInfo* AckBigMapInfo::add_grid_base_info() {
  // @@protoc_insertion_point(field_add:AFMsg.AckBigMapInfo.grid_base_info)
  return grid_base_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapGridBaseInfo >*
AckBigMapInfo::mutable_grid_base_info() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.AckBigMapInfo.grid_base_info)
  return &grid_base_info_;
}
const ::google::protobuf::RepeatedPtrField< ::AFMsg::BigMapGridBaseInfo >&
AckBigMapInfo::grid_base_info() const {
  // @@protoc_insertion_point(field_list:AFMsg.AckBigMapInfo.grid_base_info)
  return grid_base_info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqHoldMapGrid::kMapTitleIdFieldNumber;
const int ReqHoldMapGrid::kGuildIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqHoldMapGrid::ReqHoldMapGrid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqHoldMapGrid)
}

void ReqHoldMapGrid::InitAsDefaultInstance() {
  guild_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqHoldMapGrid::ReqHoldMapGrid(const ReqHoldMapGrid& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqHoldMapGrid)
}

void ReqHoldMapGrid::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  map_title_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqHoldMapGrid::~ReqHoldMapGrid() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqHoldMapGrid)
  SharedDtor();
}

void ReqHoldMapGrid::SharedDtor() {
  map_title_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete guild_id_;
  }
}

void ReqHoldMapGrid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqHoldMapGrid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqHoldMapGrid_descriptor_;
}

const ReqHoldMapGrid& ReqHoldMapGrid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqHoldMapGrid* ReqHoldMapGrid::default_instance_ = NULL;

ReqHoldMapGrid* ReqHoldMapGrid::New(::google::protobuf::Arena* arena) const {
  ReqHoldMapGrid* n = new ReqHoldMapGrid;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqHoldMapGrid::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqHoldMapGrid)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_map_title_id()) {
      map_title_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_guild_id()) {
      if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqHoldMapGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqHoldMapGrid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes map_title_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_title_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_guild_id;
        break;
      }

      // required .AFMsg.Ident guild_id = 2;
      case 2: {
        if (tag == 18) {
         parse_guild_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqHoldMapGrid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqHoldMapGrid)
  return false;
#undef DO_
}

void ReqHoldMapGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqHoldMapGrid)
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->map_title_id(), output);
  }

  // required .AFMsg.Ident guild_id = 2;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->guild_id_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqHoldMapGrid)
}

::google::protobuf::uint8* ReqHoldMapGrid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqHoldMapGrid)
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->map_title_id(), target);
  }

  // required .AFMsg.Ident guild_id = 2;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->guild_id_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqHoldMapGrid)
  return target;
}

int ReqHoldMapGrid::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqHoldMapGrid)
  int total_size = 0;

  if (has_map_title_id()) {
    // required bytes map_title_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_title_id());
  }

  if (has_guild_id()) {
    // required .AFMsg.Ident guild_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->guild_id_);
  }

  return total_size;
}
int ReqHoldMapGrid::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqHoldMapGrid)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes map_title_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_title_id());

    // required .AFMsg.Ident guild_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->guild_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqHoldMapGrid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqHoldMapGrid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqHoldMapGrid* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqHoldMapGrid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqHoldMapGrid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqHoldMapGrid)
    MergeFrom(*source);
  }
}

void ReqHoldMapGrid::MergeFrom(const ReqHoldMapGrid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqHoldMapGrid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_title_id()) {
      set_has_map_title_id();
      map_title_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
    }
    if (from.has_guild_id()) {
      mutable_guild_id()->::AFMsg::Ident::MergeFrom(from.guild_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqHoldMapGrid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqHoldMapGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqHoldMapGrid::CopyFrom(const ReqHoldMapGrid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqHoldMapGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqHoldMapGrid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_guild_id()) {
    if (!this->guild_id_->IsInitialized()) return false;
  }
  return true;
}

void ReqHoldMapGrid::Swap(ReqHoldMapGrid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqHoldMapGrid::InternalSwap(ReqHoldMapGrid* other) {
  map_title_id_.Swap(&other->map_title_id_);
  std::swap(guild_id_, other->guild_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqHoldMapGrid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqHoldMapGrid_descriptor_;
  metadata.reflection = ReqHoldMapGrid_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqHoldMapGrid

// required bytes map_title_id = 1;
bool ReqHoldMapGrid::has_map_title_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqHoldMapGrid::set_has_map_title_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqHoldMapGrid::clear_has_map_title_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqHoldMapGrid::clear_map_title_id() {
  map_title_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_title_id();
}
 const ::std::string& ReqHoldMapGrid::map_title_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqHoldMapGrid.map_title_id)
  return map_title_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqHoldMapGrid::set_map_title_id(const ::std::string& value) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqHoldMapGrid.map_title_id)
}
 void ReqHoldMapGrid::set_map_title_id(const char* value) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqHoldMapGrid.map_title_id)
}
 void ReqHoldMapGrid::set_map_title_id(const void* value, size_t size) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqHoldMapGrid.map_title_id)
}
 ::std::string* ReqHoldMapGrid::mutable_map_title_id() {
  set_has_map_title_id();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqHoldMapGrid.map_title_id)
  return map_title_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReqHoldMapGrid::release_map_title_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqHoldMapGrid.map_title_id)
  clear_has_map_title_id();
  return map_title_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqHoldMapGrid::set_allocated_map_title_id(::std::string* map_title_id) {
  if (map_title_id != NULL) {
    set_has_map_title_id();
  } else {
    clear_has_map_title_id();
  }
  map_title_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_title_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqHoldMapGrid.map_title_id)
}

// required .AFMsg.Ident guild_id = 2;
bool ReqHoldMapGrid::has_guild_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqHoldMapGrid::set_has_guild_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqHoldMapGrid::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqHoldMapGrid::clear_guild_id() {
  if (guild_id_ != NULL) guild_id_->::AFMsg::Ident::Clear();
  clear_has_guild_id();
}
const ::AFMsg::Ident& ReqHoldMapGrid::guild_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqHoldMapGrid.guild_id)
  return guild_id_ != NULL ? *guild_id_ : *default_instance_->guild_id_;
}
::AFMsg::Ident* ReqHoldMapGrid::mutable_guild_id() {
  set_has_guild_id();
  if (guild_id_ == NULL) {
    guild_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqHoldMapGrid.guild_id)
  return guild_id_;
}
::AFMsg::Ident* ReqHoldMapGrid::release_guild_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqHoldMapGrid.guild_id)
  clear_has_guild_id();
  ::AFMsg::Ident* temp = guild_id_;
  guild_id_ = NULL;
  return temp;
}
void ReqHoldMapGrid::set_allocated_guild_id(::AFMsg::Ident* guild_id) {
  delete guild_id_;
  guild_id_ = guild_id;
  if (guild_id) {
    set_has_guild_id();
  } else {
    clear_has_guild_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqHoldMapGrid.guild_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckHoldMapGrid::AckHoldMapGrid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckHoldMapGrid)
}

void AckHoldMapGrid::InitAsDefaultInstance() {
}

AckHoldMapGrid::AckHoldMapGrid(const AckHoldMapGrid& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckHoldMapGrid)
}

void AckHoldMapGrid::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckHoldMapGrid::~AckHoldMapGrid() {
  // @@protoc_insertion_point(destructor:AFMsg.AckHoldMapGrid)
  SharedDtor();
}

void AckHoldMapGrid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckHoldMapGrid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckHoldMapGrid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckHoldMapGrid_descriptor_;
}

const AckHoldMapGrid& AckHoldMapGrid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

AckHoldMapGrid* AckHoldMapGrid::default_instance_ = NULL;

AckHoldMapGrid* AckHoldMapGrid::New(::google::protobuf::Arena* arena) const {
  AckHoldMapGrid* n = new AckHoldMapGrid;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckHoldMapGrid::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckHoldMapGrid)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AckHoldMapGrid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckHoldMapGrid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckHoldMapGrid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckHoldMapGrid)
  return false;
#undef DO_
}

void AckHoldMapGrid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckHoldMapGrid)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckHoldMapGrid)
}

::google::protobuf::uint8* AckHoldMapGrid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckHoldMapGrid)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckHoldMapGrid)
  return target;
}

int AckHoldMapGrid::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckHoldMapGrid)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckHoldMapGrid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckHoldMapGrid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AckHoldMapGrid* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AckHoldMapGrid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckHoldMapGrid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckHoldMapGrid)
    MergeFrom(*source);
  }
}

void AckHoldMapGrid::MergeFrom(const AckHoldMapGrid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckHoldMapGrid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AckHoldMapGrid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckHoldMapGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckHoldMapGrid::CopyFrom(const AckHoldMapGrid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckHoldMapGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckHoldMapGrid::IsInitialized() const {

  return true;
}

void AckHoldMapGrid::Swap(AckHoldMapGrid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckHoldMapGrid::InternalSwap(AckHoldMapGrid* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckHoldMapGrid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckHoldMapGrid_descriptor_;
  metadata.reflection = AckHoldMapGrid_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckHoldMapGrid

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqLeaveMapMsg::kMapTitleIdFieldNumber;
const int ReqLeaveMapMsg::kLeaveMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqLeaveMapMsg::ReqLeaveMapMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqLeaveMapMsg)
}

void ReqLeaveMapMsg::InitAsDefaultInstance() {
  leave_msg_ = const_cast< ::AFMsg::BigMapLeaveMsg*>(&::AFMsg::BigMapLeaveMsg::default_instance());
}

ReqLeaveMapMsg::ReqLeaveMapMsg(const ReqLeaveMapMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqLeaveMapMsg)
}

void ReqLeaveMapMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  map_title_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leave_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLeaveMapMsg::~ReqLeaveMapMsg() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqLeaveMapMsg)
  SharedDtor();
}

void ReqLeaveMapMsg::SharedDtor() {
  map_title_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete leave_msg_;
  }
}

void ReqLeaveMapMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLeaveMapMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLeaveMapMsg_descriptor_;
}

const ReqLeaveMapMsg& ReqLeaveMapMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqLeaveMapMsg* ReqLeaveMapMsg::default_instance_ = NULL;

ReqLeaveMapMsg* ReqLeaveMapMsg::New(::google::protobuf::Arena* arena) const {
  ReqLeaveMapMsg* n = new ReqLeaveMapMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqLeaveMapMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqLeaveMapMsg)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_map_title_id()) {
      map_title_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_leave_msg()) {
      if (leave_msg_ != NULL) leave_msg_->::AFMsg::BigMapLeaveMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqLeaveMapMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqLeaveMapMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes map_title_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_title_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_leave_msg;
        break;
      }

      // required .AFMsg.BigMapLeaveMsg leave_msg = 2;
      case 2: {
        if (tag == 18) {
         parse_leave_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leave_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqLeaveMapMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqLeaveMapMsg)
  return false;
#undef DO_
}

void ReqLeaveMapMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqLeaveMapMsg)
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->map_title_id(), output);
  }

  // required .AFMsg.BigMapLeaveMsg leave_msg = 2;
  if (has_leave_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->leave_msg_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqLeaveMapMsg)
}

::google::protobuf::uint8* ReqLeaveMapMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqLeaveMapMsg)
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->map_title_id(), target);
  }

  // required .AFMsg.BigMapLeaveMsg leave_msg = 2;
  if (has_leave_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->leave_msg_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqLeaveMapMsg)
  return target;
}

int ReqLeaveMapMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqLeaveMapMsg)
  int total_size = 0;

  if (has_map_title_id()) {
    // required bytes map_title_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_title_id());
  }

  if (has_leave_msg()) {
    // required .AFMsg.BigMapLeaveMsg leave_msg = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->leave_msg_);
  }

  return total_size;
}
int ReqLeaveMapMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqLeaveMapMsg)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes map_title_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_title_id());

    // required .AFMsg.BigMapLeaveMsg leave_msg = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->leave_msg_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLeaveMapMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqLeaveMapMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqLeaveMapMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqLeaveMapMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqLeaveMapMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqLeaveMapMsg)
    MergeFrom(*source);
  }
}

void ReqLeaveMapMsg::MergeFrom(const ReqLeaveMapMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqLeaveMapMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_title_id()) {
      set_has_map_title_id();
      map_title_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
    }
    if (from.has_leave_msg()) {
      mutable_leave_msg()->::AFMsg::BigMapLeaveMsg::MergeFrom(from.leave_msg());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqLeaveMapMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqLeaveMapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLeaveMapMsg::CopyFrom(const ReqLeaveMapMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqLeaveMapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLeaveMapMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_leave_msg()) {
    if (!this->leave_msg_->IsInitialized()) return false;
  }
  return true;
}

void ReqLeaveMapMsg::Swap(ReqLeaveMapMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqLeaveMapMsg::InternalSwap(ReqLeaveMapMsg* other) {
  map_title_id_.Swap(&other->map_title_id_);
  std::swap(leave_msg_, other->leave_msg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqLeaveMapMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLeaveMapMsg_descriptor_;
  metadata.reflection = ReqLeaveMapMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqLeaveMapMsg

// required bytes map_title_id = 1;
bool ReqLeaveMapMsg::has_map_title_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqLeaveMapMsg::set_has_map_title_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqLeaveMapMsg::clear_has_map_title_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqLeaveMapMsg::clear_map_title_id() {
  map_title_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_title_id();
}
 const ::std::string& ReqLeaveMapMsg::map_title_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqLeaveMapMsg.map_title_id)
  return map_title_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqLeaveMapMsg::set_map_title_id(const ::std::string& value) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqLeaveMapMsg.map_title_id)
}
 void ReqLeaveMapMsg::set_map_title_id(const char* value) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqLeaveMapMsg.map_title_id)
}
 void ReqLeaveMapMsg::set_map_title_id(const void* value, size_t size) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqLeaveMapMsg.map_title_id)
}
 ::std::string* ReqLeaveMapMsg::mutable_map_title_id() {
  set_has_map_title_id();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqLeaveMapMsg.map_title_id)
  return map_title_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReqLeaveMapMsg::release_map_title_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqLeaveMapMsg.map_title_id)
  clear_has_map_title_id();
  return map_title_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqLeaveMapMsg::set_allocated_map_title_id(::std::string* map_title_id) {
  if (map_title_id != NULL) {
    set_has_map_title_id();
  } else {
    clear_has_map_title_id();
  }
  map_title_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_title_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqLeaveMapMsg.map_title_id)
}

// required .AFMsg.BigMapLeaveMsg leave_msg = 2;
bool ReqLeaveMapMsg::has_leave_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqLeaveMapMsg::set_has_leave_msg() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqLeaveMapMsg::clear_has_leave_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqLeaveMapMsg::clear_leave_msg() {
  if (leave_msg_ != NULL) leave_msg_->::AFMsg::BigMapLeaveMsg::Clear();
  clear_has_leave_msg();
}
const ::AFMsg::BigMapLeaveMsg& ReqLeaveMapMsg::leave_msg() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqLeaveMapMsg.leave_msg)
  return leave_msg_ != NULL ? *leave_msg_ : *default_instance_->leave_msg_;
}
::AFMsg::BigMapLeaveMsg* ReqLeaveMapMsg::mutable_leave_msg() {
  set_has_leave_msg();
  if (leave_msg_ == NULL) {
    leave_msg_ = new ::AFMsg::BigMapLeaveMsg;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqLeaveMapMsg.leave_msg)
  return leave_msg_;
}
::AFMsg::BigMapLeaveMsg* ReqLeaveMapMsg::release_leave_msg() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqLeaveMapMsg.leave_msg)
  clear_has_leave_msg();
  ::AFMsg::BigMapLeaveMsg* temp = leave_msg_;
  leave_msg_ = NULL;
  return temp;
}
void ReqLeaveMapMsg::set_allocated_leave_msg(::AFMsg::BigMapLeaveMsg* leave_msg) {
  delete leave_msg_;
  leave_msg_ = leave_msg;
  if (leave_msg) {
    set_has_leave_msg();
  } else {
    clear_has_leave_msg();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqLeaveMapMsg.leave_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckLeaveMapMsg::AckLeaveMapMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckLeaveMapMsg)
}

void AckLeaveMapMsg::InitAsDefaultInstance() {
}

AckLeaveMapMsg::AckLeaveMapMsg(const AckLeaveMapMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckLeaveMapMsg)
}

void AckLeaveMapMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckLeaveMapMsg::~AckLeaveMapMsg() {
  // @@protoc_insertion_point(destructor:AFMsg.AckLeaveMapMsg)
  SharedDtor();
}

void AckLeaveMapMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckLeaveMapMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckLeaveMapMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckLeaveMapMsg_descriptor_;
}

const AckLeaveMapMsg& AckLeaveMapMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

AckLeaveMapMsg* AckLeaveMapMsg::default_instance_ = NULL;

AckLeaveMapMsg* AckLeaveMapMsg::New(::google::protobuf::Arena* arena) const {
  AckLeaveMapMsg* n = new AckLeaveMapMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckLeaveMapMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckLeaveMapMsg)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AckLeaveMapMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckLeaveMapMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckLeaveMapMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckLeaveMapMsg)
  return false;
#undef DO_
}

void AckLeaveMapMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckLeaveMapMsg)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckLeaveMapMsg)
}

::google::protobuf::uint8* AckLeaveMapMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckLeaveMapMsg)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckLeaveMapMsg)
  return target;
}

int AckLeaveMapMsg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckLeaveMapMsg)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckLeaveMapMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckLeaveMapMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AckLeaveMapMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AckLeaveMapMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckLeaveMapMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckLeaveMapMsg)
    MergeFrom(*source);
  }
}

void AckLeaveMapMsg::MergeFrom(const AckLeaveMapMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckLeaveMapMsg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AckLeaveMapMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckLeaveMapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLeaveMapMsg::CopyFrom(const AckLeaveMapMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckLeaveMapMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLeaveMapMsg::IsInitialized() const {

  return true;
}

void AckLeaveMapMsg::Swap(AckLeaveMapMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckLeaveMapMsg::InternalSwap(AckLeaveMapMsg* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckLeaveMapMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckLeaveMapMsg_descriptor_;
  metadata.reflection = AckLeaveMapMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckLeaveMapMsg

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqGetMapAward::kMapTitleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqGetMapAward::ReqGetMapAward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqGetMapAward)
}

void ReqGetMapAward::InitAsDefaultInstance() {
}

ReqGetMapAward::ReqGetMapAward(const ReqGetMapAward& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqGetMapAward)
}

void ReqGetMapAward::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  map_title_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGetMapAward::~ReqGetMapAward() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqGetMapAward)
  SharedDtor();
}

void ReqGetMapAward::SharedDtor() {
  map_title_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ReqGetMapAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetMapAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGetMapAward_descriptor_;
}

const ReqGetMapAward& ReqGetMapAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqGetMapAward* ReqGetMapAward::default_instance_ = NULL;

ReqGetMapAward* ReqGetMapAward::New(::google::protobuf::Arena* arena) const {
  ReqGetMapAward* n = new ReqGetMapAward;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqGetMapAward::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqGetMapAward)
  if (has_map_title_id()) {
    map_title_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqGetMapAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqGetMapAward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes map_title_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_title_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqGetMapAward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqGetMapAward)
  return false;
#undef DO_
}

void ReqGetMapAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqGetMapAward)
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->map_title_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqGetMapAward)
}

::google::protobuf::uint8* ReqGetMapAward::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqGetMapAward)
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->map_title_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqGetMapAward)
  return target;
}

int ReqGetMapAward::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqGetMapAward)
  int total_size = 0;

  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_title_id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetMapAward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqGetMapAward)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqGetMapAward* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqGetMapAward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqGetMapAward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqGetMapAward)
    MergeFrom(*source);
  }
}

void ReqGetMapAward::MergeFrom(const ReqGetMapAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqGetMapAward)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_title_id()) {
      set_has_map_title_id();
      map_title_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqGetMapAward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqGetMapAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetMapAward::CopyFrom(const ReqGetMapAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqGetMapAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetMapAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqGetMapAward::Swap(ReqGetMapAward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqGetMapAward::InternalSwap(ReqGetMapAward* other) {
  map_title_id_.Swap(&other->map_title_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqGetMapAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGetMapAward_descriptor_;
  metadata.reflection = ReqGetMapAward_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqGetMapAward

// required bytes map_title_id = 1;
bool ReqGetMapAward::has_map_title_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqGetMapAward::set_has_map_title_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqGetMapAward::clear_has_map_title_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqGetMapAward::clear_map_title_id() {
  map_title_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_title_id();
}
 const ::std::string& ReqGetMapAward::map_title_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqGetMapAward.map_title_id)
  return map_title_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqGetMapAward::set_map_title_id(const ::std::string& value) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqGetMapAward.map_title_id)
}
 void ReqGetMapAward::set_map_title_id(const char* value) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqGetMapAward.map_title_id)
}
 void ReqGetMapAward::set_map_title_id(const void* value, size_t size) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqGetMapAward.map_title_id)
}
 ::std::string* ReqGetMapAward::mutable_map_title_id() {
  set_has_map_title_id();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqGetMapAward.map_title_id)
  return map_title_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReqGetMapAward::release_map_title_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqGetMapAward.map_title_id)
  clear_has_map_title_id();
  return map_title_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqGetMapAward::set_allocated_map_title_id(::std::string* map_title_id) {
  if (map_title_id != NULL) {
    set_has_map_title_id();
  } else {
    clear_has_map_title_id();
  }
  map_title_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_title_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqGetMapAward.map_title_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckGetMapAward::AckGetMapAward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckGetMapAward)
}

void AckGetMapAward::InitAsDefaultInstance() {
}

AckGetMapAward::AckGetMapAward(const AckGetMapAward& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckGetMapAward)
}

void AckGetMapAward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGetMapAward::~AckGetMapAward() {
  // @@protoc_insertion_point(destructor:AFMsg.AckGetMapAward)
  SharedDtor();
}

void AckGetMapAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckGetMapAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGetMapAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGetMapAward_descriptor_;
}

const AckGetMapAward& AckGetMapAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

AckGetMapAward* AckGetMapAward::default_instance_ = NULL;

AckGetMapAward* AckGetMapAward::New(::google::protobuf::Arena* arena) const {
  AckGetMapAward* n = new AckGetMapAward;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckGetMapAward::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckGetMapAward)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AckGetMapAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckGetMapAward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckGetMapAward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckGetMapAward)
  return false;
#undef DO_
}

void AckGetMapAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckGetMapAward)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckGetMapAward)
}

::google::protobuf::uint8* AckGetMapAward::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckGetMapAward)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckGetMapAward)
  return target;
}

int AckGetMapAward::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckGetMapAward)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGetMapAward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckGetMapAward)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AckGetMapAward* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AckGetMapAward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckGetMapAward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckGetMapAward)
    MergeFrom(*source);
  }
}

void AckGetMapAward::MergeFrom(const AckGetMapAward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckGetMapAward)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AckGetMapAward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckGetMapAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGetMapAward::CopyFrom(const AckGetMapAward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckGetMapAward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGetMapAward::IsInitialized() const {

  return true;
}

void AckGetMapAward::Swap(AckGetMapAward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckGetMapAward::InternalSwap(AckGetMapAward* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckGetMapAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGetMapAward_descriptor_;
  metadata.reflection = AckGetMapAward_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckGetMapAward

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqMapHunting::kMapTitleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqMapHunting::ReqMapHunting()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqMapHunting)
}

void ReqMapHunting::InitAsDefaultInstance() {
}

ReqMapHunting::ReqMapHunting(const ReqMapHunting& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqMapHunting)
}

void ReqMapHunting::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  map_title_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMapHunting::~ReqMapHunting() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqMapHunting)
  SharedDtor();
}

void ReqMapHunting::SharedDtor() {
  map_title_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ReqMapHunting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMapHunting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMapHunting_descriptor_;
}

const ReqMapHunting& ReqMapHunting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqMapHunting* ReqMapHunting::default_instance_ = NULL;

ReqMapHunting* ReqMapHunting::New(::google::protobuf::Arena* arena) const {
  ReqMapHunting* n = new ReqMapHunting;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqMapHunting::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqMapHunting)
  if (has_map_title_id()) {
    map_title_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqMapHunting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqMapHunting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes map_title_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_title_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqMapHunting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqMapHunting)
  return false;
#undef DO_
}

void ReqMapHunting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqMapHunting)
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->map_title_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqMapHunting)
}

::google::protobuf::uint8* ReqMapHunting::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqMapHunting)
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->map_title_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqMapHunting)
  return target;
}

int ReqMapHunting::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqMapHunting)
  int total_size = 0;

  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_title_id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMapHunting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqMapHunting)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqMapHunting* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqMapHunting>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqMapHunting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqMapHunting)
    MergeFrom(*source);
  }
}

void ReqMapHunting::MergeFrom(const ReqMapHunting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqMapHunting)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_title_id()) {
      set_has_map_title_id();
      map_title_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqMapHunting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqMapHunting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMapHunting::CopyFrom(const ReqMapHunting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqMapHunting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMapHunting::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqMapHunting::Swap(ReqMapHunting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqMapHunting::InternalSwap(ReqMapHunting* other) {
  map_title_id_.Swap(&other->map_title_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqMapHunting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMapHunting_descriptor_;
  metadata.reflection = ReqMapHunting_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqMapHunting

// required bytes map_title_id = 1;
bool ReqMapHunting::has_map_title_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqMapHunting::set_has_map_title_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqMapHunting::clear_has_map_title_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqMapHunting::clear_map_title_id() {
  map_title_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_title_id();
}
 const ::std::string& ReqMapHunting::map_title_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqMapHunting.map_title_id)
  return map_title_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqMapHunting::set_map_title_id(const ::std::string& value) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqMapHunting.map_title_id)
}
 void ReqMapHunting::set_map_title_id(const char* value) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqMapHunting.map_title_id)
}
 void ReqMapHunting::set_map_title_id(const void* value, size_t size) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqMapHunting.map_title_id)
}
 ::std::string* ReqMapHunting::mutable_map_title_id() {
  set_has_map_title_id();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqMapHunting.map_title_id)
  return map_title_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReqMapHunting::release_map_title_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqMapHunting.map_title_id)
  clear_has_map_title_id();
  return map_title_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqMapHunting::set_allocated_map_title_id(::std::string* map_title_id) {
  if (map_title_id != NULL) {
    set_has_map_title_id();
  } else {
    clear_has_map_title_id();
  }
  map_title_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_title_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqMapHunting.map_title_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckMapHunting::AckMapHunting()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckMapHunting)
}

void AckMapHunting::InitAsDefaultInstance() {
}

AckMapHunting::AckMapHunting(const AckMapHunting& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckMapHunting)
}

void AckMapHunting::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckMapHunting::~AckMapHunting() {
  // @@protoc_insertion_point(destructor:AFMsg.AckMapHunting)
  SharedDtor();
}

void AckMapHunting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckMapHunting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckMapHunting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckMapHunting_descriptor_;
}

const AckMapHunting& AckMapHunting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

AckMapHunting* AckMapHunting::default_instance_ = NULL;

AckMapHunting* AckMapHunting::New(::google::protobuf::Arena* arena) const {
  AckMapHunting* n = new AckMapHunting;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckMapHunting::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckMapHunting)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AckMapHunting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckMapHunting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckMapHunting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckMapHunting)
  return false;
#undef DO_
}

void AckMapHunting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckMapHunting)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckMapHunting)
}

::google::protobuf::uint8* AckMapHunting::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckMapHunting)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckMapHunting)
  return target;
}

int AckMapHunting::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckMapHunting)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckMapHunting::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckMapHunting)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AckMapHunting* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AckMapHunting>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckMapHunting)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckMapHunting)
    MergeFrom(*source);
  }
}

void AckMapHunting::MergeFrom(const AckMapHunting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckMapHunting)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AckMapHunting::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckMapHunting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckMapHunting::CopyFrom(const AckMapHunting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckMapHunting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckMapHunting::IsInitialized() const {

  return true;
}

void AckMapHunting::Swap(AckMapHunting* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckMapHunting::InternalSwap(AckMapHunting* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckMapHunting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckMapHunting_descriptor_;
  metadata.reflection = AckMapHunting_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckMapHunting

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqMapKingWar::kMapTitleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqMapKingWar::ReqMapKingWar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqMapKingWar)
}

void ReqMapKingWar::InitAsDefaultInstance() {
}

ReqMapKingWar::ReqMapKingWar(const ReqMapKingWar& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqMapKingWar)
}

void ReqMapKingWar::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  map_title_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMapKingWar::~ReqMapKingWar() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqMapKingWar)
  SharedDtor();
}

void ReqMapKingWar::SharedDtor() {
  map_title_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ReqMapKingWar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMapKingWar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMapKingWar_descriptor_;
}

const ReqMapKingWar& ReqMapKingWar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqMapKingWar* ReqMapKingWar::default_instance_ = NULL;

ReqMapKingWar* ReqMapKingWar::New(::google::protobuf::Arena* arena) const {
  ReqMapKingWar* n = new ReqMapKingWar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqMapKingWar::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqMapKingWar)
  if (has_map_title_id()) {
    map_title_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqMapKingWar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqMapKingWar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes map_title_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_title_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqMapKingWar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqMapKingWar)
  return false;
#undef DO_
}

void ReqMapKingWar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqMapKingWar)
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->map_title_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqMapKingWar)
}

::google::protobuf::uint8* ReqMapKingWar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqMapKingWar)
  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->map_title_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqMapKingWar)
  return target;
}

int ReqMapKingWar::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqMapKingWar)
  int total_size = 0;

  // required bytes map_title_id = 1;
  if (has_map_title_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->map_title_id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMapKingWar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqMapKingWar)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqMapKingWar* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqMapKingWar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqMapKingWar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqMapKingWar)
    MergeFrom(*source);
  }
}

void ReqMapKingWar::MergeFrom(const ReqMapKingWar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqMapKingWar)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_title_id()) {
      set_has_map_title_id();
      map_title_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_title_id_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqMapKingWar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqMapKingWar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMapKingWar::CopyFrom(const ReqMapKingWar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqMapKingWar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMapKingWar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqMapKingWar::Swap(ReqMapKingWar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqMapKingWar::InternalSwap(ReqMapKingWar* other) {
  map_title_id_.Swap(&other->map_title_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqMapKingWar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMapKingWar_descriptor_;
  metadata.reflection = ReqMapKingWar_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqMapKingWar

// required bytes map_title_id = 1;
bool ReqMapKingWar::has_map_title_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqMapKingWar::set_has_map_title_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqMapKingWar::clear_has_map_title_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqMapKingWar::clear_map_title_id() {
  map_title_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_title_id();
}
 const ::std::string& ReqMapKingWar::map_title_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqMapKingWar.map_title_id)
  return map_title_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqMapKingWar::set_map_title_id(const ::std::string& value) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AFMsg.ReqMapKingWar.map_title_id)
}
 void ReqMapKingWar::set_map_title_id(const char* value) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AFMsg.ReqMapKingWar.map_title_id)
}
 void ReqMapKingWar::set_map_title_id(const void* value, size_t size) {
  set_has_map_title_id();
  map_title_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AFMsg.ReqMapKingWar.map_title_id)
}
 ::std::string* ReqMapKingWar::mutable_map_title_id() {
  set_has_map_title_id();
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqMapKingWar.map_title_id)
  return map_title_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReqMapKingWar::release_map_title_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqMapKingWar.map_title_id)
  clear_has_map_title_id();
  return map_title_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqMapKingWar::set_allocated_map_title_id(::std::string* map_title_id) {
  if (map_title_id != NULL) {
    set_has_map_title_id();
  } else {
    clear_has_map_title_id();
  }
  map_title_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_title_id);
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqMapKingWar.map_title_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckMapKingWar::AckMapKingWar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckMapKingWar)
}

void AckMapKingWar::InitAsDefaultInstance() {
}

AckMapKingWar::AckMapKingWar(const AckMapKingWar& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckMapKingWar)
}

void AckMapKingWar::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckMapKingWar::~AckMapKingWar() {
  // @@protoc_insertion_point(destructor:AFMsg.AckMapKingWar)
  SharedDtor();
}

void AckMapKingWar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckMapKingWar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckMapKingWar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckMapKingWar_descriptor_;
}

const AckMapKingWar& AckMapKingWar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

AckMapKingWar* AckMapKingWar::default_instance_ = NULL;

AckMapKingWar* AckMapKingWar::New(::google::protobuf::Arena* arena) const {
  AckMapKingWar* n = new AckMapKingWar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckMapKingWar::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckMapKingWar)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AckMapKingWar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckMapKingWar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckMapKingWar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckMapKingWar)
  return false;
#undef DO_
}

void AckMapKingWar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckMapKingWar)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckMapKingWar)
}

::google::protobuf::uint8* AckMapKingWar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckMapKingWar)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckMapKingWar)
  return target;
}

int AckMapKingWar::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckMapKingWar)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckMapKingWar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckMapKingWar)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AckMapKingWar* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AckMapKingWar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckMapKingWar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckMapKingWar)
    MergeFrom(*source);
  }
}

void AckMapKingWar::MergeFrom(const AckMapKingWar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckMapKingWar)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AckMapKingWar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckMapKingWar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckMapKingWar::CopyFrom(const AckMapKingWar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckMapKingWar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckMapKingWar::IsInitialized() const {

  return true;
}

void AckMapKingWar::Swap(AckMapKingWar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckMapKingWar::InternalSwap(AckMapKingWar* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckMapKingWar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckMapKingWar_descriptor_;
  metadata.reflection = AckMapKingWar_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckMapKingWar

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PVPRoomInfo::kNCellStatusFieldNumber;
const int PVPRoomInfo::kRoomIDFieldNumber;
const int PVPRoomInfo::kNPVPModeFieldNumber;
const int PVPRoomInfo::kNPVPGradeFieldNumber;
const int PVPRoomInfo::kMaxPalyerFieldNumber;
const int PVPRoomInfo::kXRedPlayerFieldNumber;
const int PVPRoomInfo::kXBluePlayerFieldNumber;
const int PVPRoomInfo::kServeridFieldNumber;
const int PVPRoomInfo::kSceneIDFieldNumber;
const int PVPRoomInfo::kGroupIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PVPRoomInfo::PVPRoomInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.PVPRoomInfo)
}

void PVPRoomInfo::InitAsDefaultInstance() {
  roomid_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

PVPRoomInfo::PVPRoomInfo(const PVPRoomInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.PVPRoomInfo)
}

void PVPRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  ncellstatus_ = 0;
  roomid_ = NULL;
  npvpmode_ = 0;
  npvpgrade_ = 0;
  maxpalyer_ = 0;
  serverid_ = GOOGLE_LONGLONG(0);
  sceneid_ = GOOGLE_LONGLONG(0);
  groupid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVPRoomInfo::~PVPRoomInfo() {
  // @@protoc_insertion_point(destructor:AFMsg.PVPRoomInfo)
  SharedDtor();
}

void PVPRoomInfo::SharedDtor() {
  if (this != default_instance_) {
    delete roomid_;
  }
}

void PVPRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVPRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVPRoomInfo_descriptor_;
}

const PVPRoomInfo& PVPRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

PVPRoomInfo* PVPRoomInfo::default_instance_ = NULL;

PVPRoomInfo* PVPRoomInfo::New(::google::protobuf::Arena* arena) const {
  PVPRoomInfo* n = new PVPRoomInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PVPRoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.PVPRoomInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PVPRoomInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PVPRoomInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 159u) {
    ZR_(ncellstatus_, maxpalyer_);
    if (has_roomid()) {
      if (roomid_ != NULL) roomid_->::AFMsg::Ident::Clear();
    }
    serverid_ = GOOGLE_LONGLONG(0);
  }
  ZR_(sceneid_, groupid_);

#undef ZR_HELPER_
#undef ZR_

  xredplayer_.Clear();
  xblueplayer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PVPRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.PVPRoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nCellStatus = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncellstatus_)));
          set_has_ncellstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RoomID;
        break;
      }

      // required .AFMsg.Ident RoomID = 2;
      case 2: {
        if (tag == 18) {
         parse_RoomID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_nPVPMode;
        break;
      }

      // required int32 nPVPMode = 3;
      case 3: {
        if (tag == 24) {
         parse_nPVPMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npvpmode_)));
          set_has_npvpmode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_nPVPGrade;
        break;
      }

      // required int32 nPVPGrade = 4;
      case 4: {
        if (tag == 32) {
         parse_nPVPGrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npvpgrade_)));
          set_has_npvpgrade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_MaxPalyer;
        break;
      }

      // required int32 MaxPalyer = 5;
      case 5: {
        if (tag == 40) {
         parse_MaxPalyer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxpalyer_)));
          set_has_maxpalyer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_xRedPlayer;
        break;
      }

      // repeated .AFMsg.Ident xRedPlayer = 6;
      case 6: {
        if (tag == 50) {
         parse_xRedPlayer:
          DO_(input->IncrementRecursionDepth());
         parse_loop_xRedPlayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_xredplayer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_xRedPlayer;
        if (input->ExpectTag(58)) goto parse_loop_xBluePlayer;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .AFMsg.Ident xBluePlayer = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_xBluePlayer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_xblueplayer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_xBluePlayer;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(64)) goto parse_serverid;
        break;
      }

      // optional int64 serverid = 8;
      case 8: {
        if (tag == 64) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_SceneID;
        break;
      }

      // optional int64 SceneID = 9;
      case 9: {
        if (tag == 72) {
         parse_SceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_groupID;
        break;
      }

      // optional int64 groupID = 10;
      case 10: {
        if (tag == 80) {
         parse_groupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.PVPRoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.PVPRoomInfo)
  return false;
#undef DO_
}

void PVPRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.PVPRoomInfo)
  // required int32 nCellStatus = 1;
  if (has_ncellstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ncellstatus(), output);
  }

  // required .AFMsg.Ident RoomID = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->roomid_, output);
  }

  // required int32 nPVPMode = 3;
  if (has_npvpmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->npvpmode(), output);
  }

  // required int32 nPVPGrade = 4;
  if (has_npvpgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->npvpgrade(), output);
  }

  // required int32 MaxPalyer = 5;
  if (has_maxpalyer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxpalyer(), output);
  }

  // repeated .AFMsg.Ident xRedPlayer = 6;
  for (unsigned int i = 0, n = this->xredplayer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->xredplayer(i), output);
  }

  // repeated .AFMsg.Ident xBluePlayer = 7;
  for (unsigned int i = 0, n = this->xblueplayer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->xblueplayer(i), output);
  }

  // optional int64 serverid = 8;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->serverid(), output);
  }

  // optional int64 SceneID = 9;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->sceneid(), output);
  }

  // optional int64 groupID = 10;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->groupid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.PVPRoomInfo)
}

::google::protobuf::uint8* PVPRoomInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.PVPRoomInfo)
  // required int32 nCellStatus = 1;
  if (has_ncellstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ncellstatus(), target);
  }

  // required .AFMsg.Ident RoomID = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->roomid_, false, target);
  }

  // required int32 nPVPMode = 3;
  if (has_npvpmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->npvpmode(), target);
  }

  // required int32 nPVPGrade = 4;
  if (has_npvpgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->npvpgrade(), target);
  }

  // required int32 MaxPalyer = 5;
  if (has_maxpalyer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxpalyer(), target);
  }

  // repeated .AFMsg.Ident xRedPlayer = 6;
  for (unsigned int i = 0, n = this->xredplayer_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->xredplayer(i), false, target);
  }

  // repeated .AFMsg.Ident xBluePlayer = 7;
  for (unsigned int i = 0, n = this->xblueplayer_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->xblueplayer(i), false, target);
  }

  // optional int64 serverid = 8;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->serverid(), target);
  }

  // optional int64 SceneID = 9;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->sceneid(), target);
  }

  // optional int64 groupID = 10;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->groupid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.PVPRoomInfo)
  return target;
}

int PVPRoomInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.PVPRoomInfo)
  int total_size = 0;

  if (has_ncellstatus()) {
    // required int32 nCellStatus = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ncellstatus());
  }

  if (has_roomid()) {
    // required .AFMsg.Ident RoomID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->roomid_);
  }

  if (has_npvpmode()) {
    // required int32 nPVPMode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->npvpmode());
  }

  if (has_npvpgrade()) {
    // required int32 nPVPGrade = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->npvpgrade());
  }

  if (has_maxpalyer()) {
    // required int32 MaxPalyer = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxpalyer());
  }

  return total_size;
}
int PVPRoomInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.PVPRoomInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 nCellStatus = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ncellstatus());

    // required .AFMsg.Ident RoomID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->roomid_);

    // required int32 nPVPMode = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->npvpmode());

    // required int32 nPVPGrade = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->npvpgrade());

    // required int32 MaxPalyer = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxpalyer());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int64 serverid = 8;
  if (has_serverid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->serverid());
  }

  if (_has_bits_[8 / 32] & 768u) {
    // optional int64 SceneID = 9;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sceneid());
    }

    // optional int64 groupID = 10;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->groupid());
    }

  }
  // repeated .AFMsg.Ident xRedPlayer = 6;
  total_size += 1 * this->xredplayer_size();
  for (int i = 0; i < this->xredplayer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xredplayer(i));
  }

  // repeated .AFMsg.Ident xBluePlayer = 7;
  total_size += 1 * this->xblueplayer_size();
  for (int i = 0; i < this->xblueplayer_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->xblueplayer(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVPRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.PVPRoomInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PVPRoomInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PVPRoomInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.PVPRoomInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.PVPRoomInfo)
    MergeFrom(*source);
  }
}

void PVPRoomInfo::MergeFrom(const PVPRoomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.PVPRoomInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  xredplayer_.MergeFrom(from.xredplayer_);
  xblueplayer_.MergeFrom(from.xblueplayer_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ncellstatus()) {
      set_ncellstatus(from.ncellstatus());
    }
    if (from.has_roomid()) {
      mutable_roomid()->::AFMsg::Ident::MergeFrom(from.roomid());
    }
    if (from.has_npvpmode()) {
      set_npvpmode(from.npvpmode());
    }
    if (from.has_npvpgrade()) {
      set_npvpgrade(from.npvpgrade());
    }
    if (from.has_maxpalyer()) {
      set_maxpalyer(from.maxpalyer());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PVPRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.PVPRoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPRoomInfo::CopyFrom(const PVPRoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.PVPRoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPRoomInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_roomid()) {
    if (!this->roomid_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->xredplayer())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->xblueplayer())) return false;
  return true;
}

void PVPRoomInfo::Swap(PVPRoomInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PVPRoomInfo::InternalSwap(PVPRoomInfo* other) {
  std::swap(ncellstatus_, other->ncellstatus_);
  std::swap(roomid_, other->roomid_);
  std::swap(npvpmode_, other->npvpmode_);
  std::swap(npvpgrade_, other->npvpgrade_);
  std::swap(maxpalyer_, other->maxpalyer_);
  xredplayer_.UnsafeArenaSwap(&other->xredplayer_);
  xblueplayer_.UnsafeArenaSwap(&other->xblueplayer_);
  std::swap(serverid_, other->serverid_);
  std::swap(sceneid_, other->sceneid_);
  std::swap(groupid_, other->groupid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PVPRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVPRoomInfo_descriptor_;
  metadata.reflection = PVPRoomInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PVPRoomInfo

// required int32 nCellStatus = 1;
bool PVPRoomInfo::has_ncellstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PVPRoomInfo::set_has_ncellstatus() {
  _has_bits_[0] |= 0x00000001u;
}
void PVPRoomInfo::clear_has_ncellstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
void PVPRoomInfo::clear_ncellstatus() {
  ncellstatus_ = 0;
  clear_has_ncellstatus();
}
 ::google::protobuf::int32 PVPRoomInfo::ncellstatus() const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.nCellStatus)
  return ncellstatus_;
}
 void PVPRoomInfo::set_ncellstatus(::google::protobuf::int32 value) {
  set_has_ncellstatus();
  ncellstatus_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PVPRoomInfo.nCellStatus)
}

// required .AFMsg.Ident RoomID = 2;
bool PVPRoomInfo::has_roomid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PVPRoomInfo::set_has_roomid() {
  _has_bits_[0] |= 0x00000002u;
}
void PVPRoomInfo::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000002u;
}
void PVPRoomInfo::clear_roomid() {
  if (roomid_ != NULL) roomid_->::AFMsg::Ident::Clear();
  clear_has_roomid();
}
const ::AFMsg::Ident& PVPRoomInfo::roomid() const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.RoomID)
  return roomid_ != NULL ? *roomid_ : *default_instance_->roomid_;
}
::AFMsg::Ident* PVPRoomInfo::mutable_roomid() {
  set_has_roomid();
  if (roomid_ == NULL) {
    roomid_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.PVPRoomInfo.RoomID)
  return roomid_;
}
::AFMsg::Ident* PVPRoomInfo::release_roomid() {
  // @@protoc_insertion_point(field_release:AFMsg.PVPRoomInfo.RoomID)
  clear_has_roomid();
  ::AFMsg::Ident* temp = roomid_;
  roomid_ = NULL;
  return temp;
}
void PVPRoomInfo::set_allocated_roomid(::AFMsg::Ident* roomid) {
  delete roomid_;
  roomid_ = roomid;
  if (roomid) {
    set_has_roomid();
  } else {
    clear_has_roomid();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.PVPRoomInfo.RoomID)
}

// required int32 nPVPMode = 3;
bool PVPRoomInfo::has_npvpmode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PVPRoomInfo::set_has_npvpmode() {
  _has_bits_[0] |= 0x00000004u;
}
void PVPRoomInfo::clear_has_npvpmode() {
  _has_bits_[0] &= ~0x00000004u;
}
void PVPRoomInfo::clear_npvpmode() {
  npvpmode_ = 0;
  clear_has_npvpmode();
}
 ::google::protobuf::int32 PVPRoomInfo::npvpmode() const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.nPVPMode)
  return npvpmode_;
}
 void PVPRoomInfo::set_npvpmode(::google::protobuf::int32 value) {
  set_has_npvpmode();
  npvpmode_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PVPRoomInfo.nPVPMode)
}

// required int32 nPVPGrade = 4;
bool PVPRoomInfo::has_npvpgrade() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PVPRoomInfo::set_has_npvpgrade() {
  _has_bits_[0] |= 0x00000008u;
}
void PVPRoomInfo::clear_has_npvpgrade() {
  _has_bits_[0] &= ~0x00000008u;
}
void PVPRoomInfo::clear_npvpgrade() {
  npvpgrade_ = 0;
  clear_has_npvpgrade();
}
 ::google::protobuf::int32 PVPRoomInfo::npvpgrade() const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.nPVPGrade)
  return npvpgrade_;
}
 void PVPRoomInfo::set_npvpgrade(::google::protobuf::int32 value) {
  set_has_npvpgrade();
  npvpgrade_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PVPRoomInfo.nPVPGrade)
}

// required int32 MaxPalyer = 5;
bool PVPRoomInfo::has_maxpalyer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PVPRoomInfo::set_has_maxpalyer() {
  _has_bits_[0] |= 0x00000010u;
}
void PVPRoomInfo::clear_has_maxpalyer() {
  _has_bits_[0] &= ~0x00000010u;
}
void PVPRoomInfo::clear_maxpalyer() {
  maxpalyer_ = 0;
  clear_has_maxpalyer();
}
 ::google::protobuf::int32 PVPRoomInfo::maxpalyer() const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.MaxPalyer)
  return maxpalyer_;
}
 void PVPRoomInfo::set_maxpalyer(::google::protobuf::int32 value) {
  set_has_maxpalyer();
  maxpalyer_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PVPRoomInfo.MaxPalyer)
}

// repeated .AFMsg.Ident xRedPlayer = 6;
int PVPRoomInfo::xredplayer_size() const {
  return xredplayer_.size();
}
void PVPRoomInfo::clear_xredplayer() {
  xredplayer_.Clear();
}
const ::AFMsg::Ident& PVPRoomInfo::xredplayer(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.xRedPlayer)
  return xredplayer_.Get(index);
}
::AFMsg::Ident* PVPRoomInfo::mutable_xredplayer(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.PVPRoomInfo.xRedPlayer)
  return xredplayer_.Mutable(index);
}
::AFMsg::Ident* PVPRoomInfo::add_xredplayer() {
  // @@protoc_insertion_point(field_add:AFMsg.PVPRoomInfo.xRedPlayer)
  return xredplayer_.Add();
}
::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
PVPRoomInfo::mutable_xredplayer() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.PVPRoomInfo.xRedPlayer)
  return &xredplayer_;
}
const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
PVPRoomInfo::xredplayer() const {
  // @@protoc_insertion_point(field_list:AFMsg.PVPRoomInfo.xRedPlayer)
  return xredplayer_;
}

// repeated .AFMsg.Ident xBluePlayer = 7;
int PVPRoomInfo::xblueplayer_size() const {
  return xblueplayer_.size();
}
void PVPRoomInfo::clear_xblueplayer() {
  xblueplayer_.Clear();
}
const ::AFMsg::Ident& PVPRoomInfo::xblueplayer(int index) const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.xBluePlayer)
  return xblueplayer_.Get(index);
}
::AFMsg::Ident* PVPRoomInfo::mutable_xblueplayer(int index) {
  // @@protoc_insertion_point(field_mutable:AFMsg.PVPRoomInfo.xBluePlayer)
  return xblueplayer_.Mutable(index);
}
::AFMsg::Ident* PVPRoomInfo::add_xblueplayer() {
  // @@protoc_insertion_point(field_add:AFMsg.PVPRoomInfo.xBluePlayer)
  return xblueplayer_.Add();
}
::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >*
PVPRoomInfo::mutable_xblueplayer() {
  // @@protoc_insertion_point(field_mutable_list:AFMsg.PVPRoomInfo.xBluePlayer)
  return &xblueplayer_;
}
const ::google::protobuf::RepeatedPtrField< ::AFMsg::Ident >&
PVPRoomInfo::xblueplayer() const {
  // @@protoc_insertion_point(field_list:AFMsg.PVPRoomInfo.xBluePlayer)
  return xblueplayer_;
}

// optional int64 serverid = 8;
bool PVPRoomInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PVPRoomInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00000080u;
}
void PVPRoomInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000080u;
}
void PVPRoomInfo::clear_serverid() {
  serverid_ = GOOGLE_LONGLONG(0);
  clear_has_serverid();
}
 ::google::protobuf::int64 PVPRoomInfo::serverid() const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.serverid)
  return serverid_;
}
 void PVPRoomInfo::set_serverid(::google::protobuf::int64 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PVPRoomInfo.serverid)
}

// optional int64 SceneID = 9;
bool PVPRoomInfo::has_sceneid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PVPRoomInfo::set_has_sceneid() {
  _has_bits_[0] |= 0x00000100u;
}
void PVPRoomInfo::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000100u;
}
void PVPRoomInfo::clear_sceneid() {
  sceneid_ = GOOGLE_LONGLONG(0);
  clear_has_sceneid();
}
 ::google::protobuf::int64 PVPRoomInfo::sceneid() const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.SceneID)
  return sceneid_;
}
 void PVPRoomInfo::set_sceneid(::google::protobuf::int64 value) {
  set_has_sceneid();
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PVPRoomInfo.SceneID)
}

// optional int64 groupID = 10;
bool PVPRoomInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PVPRoomInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000200u;
}
void PVPRoomInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000200u;
}
void PVPRoomInfo::clear_groupid() {
  groupid_ = GOOGLE_LONGLONG(0);
  clear_has_groupid();
}
 ::google::protobuf::int64 PVPRoomInfo::groupid() const {
  // @@protoc_insertion_point(field_get:AFMsg.PVPRoomInfo.groupID)
  return groupid_;
}
 void PVPRoomInfo::set_groupid(::google::protobuf::int64 value) {
  set_has_groupid();
  groupid_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.PVPRoomInfo.groupID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqPVPApplyMatch_EApplyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPVPApplyMatch_EApplyType_descriptor_;
}
bool ReqPVPApplyMatch_EApplyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReqPVPApplyMatch_EApplyType ReqPVPApplyMatch::EApplyType_Single;
const ReqPVPApplyMatch_EApplyType ReqPVPApplyMatch::EApplyType_Team;
const ReqPVPApplyMatch_EApplyType ReqPVPApplyMatch::EApplyType_MIN;
const ReqPVPApplyMatch_EApplyType ReqPVPApplyMatch::EApplyType_MAX;
const int ReqPVPApplyMatch::EApplyType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqPVPApplyMatch::kSelfIdFieldNumber;
const int ReqPVPApplyMatch::kNPVPModeFieldNumber;
const int ReqPVPApplyMatch::kScoreFieldNumber;
const int ReqPVPApplyMatch::kApplyTypeFieldNumber;
const int ReqPVPApplyMatch::kTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqPVPApplyMatch::ReqPVPApplyMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqPVPApplyMatch)
}

void ReqPVPApplyMatch::InitAsDefaultInstance() {
  self_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  team_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
}

ReqPVPApplyMatch::ReqPVPApplyMatch(const ReqPVPApplyMatch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqPVPApplyMatch)
}

void ReqPVPApplyMatch::SharedCtor() {
  _cached_size_ = 0;
  self_id_ = NULL;
  npvpmode_ = 0;
  score_ = GOOGLE_LONGLONG(0);
  applytype_ = 0;
  team_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqPVPApplyMatch::~ReqPVPApplyMatch() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqPVPApplyMatch)
  SharedDtor();
}

void ReqPVPApplyMatch::SharedDtor() {
  if (this != default_instance_) {
    delete self_id_;
    delete team_id_;
  }
}

void ReqPVPApplyMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPVPApplyMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPVPApplyMatch_descriptor_;
}

const ReqPVPApplyMatch& ReqPVPApplyMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqPVPApplyMatch* ReqPVPApplyMatch::default_instance_ = NULL;

ReqPVPApplyMatch* ReqPVPApplyMatch::New(::google::protobuf::Arena* arena) const {
  ReqPVPApplyMatch* n = new ReqPVPApplyMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqPVPApplyMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqPVPApplyMatch)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ReqPVPApplyMatch, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ReqPVPApplyMatch*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(score_, applytype_);
    if (has_self_id()) {
      if (self_id_ != NULL) self_id_->::AFMsg::Ident::Clear();
    }
    if (has_team_id()) {
      if (team_id_ != NULL) team_id_->::AFMsg::Ident::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqPVPApplyMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqPVPApplyMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident self_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_nPVPMode;
        break;
      }

      // required int32 nPVPMode = 2;
      case 2: {
        if (tag == 16) {
         parse_nPVPMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npvpmode_)));
          set_has_npvpmode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional int64 score = 3;
      case 3: {
        if (tag == 24) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ApplyType;
        break;
      }

      // required int32 ApplyType = 4;
      case 4: {
        if (tag == 32) {
         parse_ApplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &applytype_)));
          set_has_applytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_team_id;
        break;
      }

      // optional .AFMsg.Ident team_id = 5;
      case 5: {
        if (tag == 42) {
         parse_team_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqPVPApplyMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqPVPApplyMatch)
  return false;
#undef DO_
}

void ReqPVPApplyMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqPVPApplyMatch)
  // required .AFMsg.Ident self_id = 1;
  if (has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->self_id_, output);
  }

  // required int32 nPVPMode = 2;
  if (has_npvpmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->npvpmode(), output);
  }

  // optional int64 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->score(), output);
  }

  // required int32 ApplyType = 4;
  if (has_applytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->applytype(), output);
  }

  // optional .AFMsg.Ident team_id = 5;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->team_id_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqPVPApplyMatch)
}

::google::protobuf::uint8* ReqPVPApplyMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqPVPApplyMatch)
  // required .AFMsg.Ident self_id = 1;
  if (has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->self_id_, false, target);
  }

  // required int32 nPVPMode = 2;
  if (has_npvpmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->npvpmode(), target);
  }

  // optional int64 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->score(), target);
  }

  // required int32 ApplyType = 4;
  if (has_applytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->applytype(), target);
  }

  // optional .AFMsg.Ident team_id = 5;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->team_id_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqPVPApplyMatch)
  return target;
}

int ReqPVPApplyMatch::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqPVPApplyMatch)
  int total_size = 0;

  if (has_self_id()) {
    // required .AFMsg.Ident self_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->self_id_);
  }

  if (has_npvpmode()) {
    // required int32 nPVPMode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->npvpmode());
  }

  if (has_applytype()) {
    // required int32 ApplyType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->applytype());
  }

  return total_size;
}
int ReqPVPApplyMatch::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqPVPApplyMatch)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required .AFMsg.Ident self_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->self_id_);

    // required int32 nPVPMode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->npvpmode());

    // required int32 ApplyType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->applytype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 20u) {
    // optional int64 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

    // optional .AFMsg.Ident team_id = 5;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->team_id_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPVPApplyMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqPVPApplyMatch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqPVPApplyMatch* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqPVPApplyMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqPVPApplyMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqPVPApplyMatch)
    MergeFrom(*source);
  }
}

void ReqPVPApplyMatch::MergeFrom(const ReqPVPApplyMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqPVPApplyMatch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_self_id()) {
      mutable_self_id()->::AFMsg::Ident::MergeFrom(from.self_id());
    }
    if (from.has_npvpmode()) {
      set_npvpmode(from.npvpmode());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_applytype()) {
      set_applytype(from.applytype());
    }
    if (from.has_team_id()) {
      mutable_team_id()->::AFMsg::Ident::MergeFrom(from.team_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqPVPApplyMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqPVPApplyMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPVPApplyMatch::CopyFrom(const ReqPVPApplyMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqPVPApplyMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPVPApplyMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (has_self_id()) {
    if (!this->self_id_->IsInitialized()) return false;
  }
  if (has_team_id()) {
    if (!this->team_id_->IsInitialized()) return false;
  }
  return true;
}

void ReqPVPApplyMatch::Swap(ReqPVPApplyMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqPVPApplyMatch::InternalSwap(ReqPVPApplyMatch* other) {
  std::swap(self_id_, other->self_id_);
  std::swap(npvpmode_, other->npvpmode_);
  std::swap(score_, other->score_);
  std::swap(applytype_, other->applytype_);
  std::swap(team_id_, other->team_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqPVPApplyMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqPVPApplyMatch_descriptor_;
  metadata.reflection = ReqPVPApplyMatch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqPVPApplyMatch

// required .AFMsg.Ident self_id = 1;
bool ReqPVPApplyMatch::has_self_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqPVPApplyMatch::set_has_self_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqPVPApplyMatch::clear_has_self_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqPVPApplyMatch::clear_self_id() {
  if (self_id_ != NULL) self_id_->::AFMsg::Ident::Clear();
  clear_has_self_id();
}
const ::AFMsg::Ident& ReqPVPApplyMatch::self_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqPVPApplyMatch.self_id)
  return self_id_ != NULL ? *self_id_ : *default_instance_->self_id_;
}
::AFMsg::Ident* ReqPVPApplyMatch::mutable_self_id() {
  set_has_self_id();
  if (self_id_ == NULL) {
    self_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqPVPApplyMatch.self_id)
  return self_id_;
}
::AFMsg::Ident* ReqPVPApplyMatch::release_self_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqPVPApplyMatch.self_id)
  clear_has_self_id();
  ::AFMsg::Ident* temp = self_id_;
  self_id_ = NULL;
  return temp;
}
void ReqPVPApplyMatch::set_allocated_self_id(::AFMsg::Ident* self_id) {
  delete self_id_;
  self_id_ = self_id;
  if (self_id) {
    set_has_self_id();
  } else {
    clear_has_self_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqPVPApplyMatch.self_id)
}

// required int32 nPVPMode = 2;
bool ReqPVPApplyMatch::has_npvpmode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqPVPApplyMatch::set_has_npvpmode() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqPVPApplyMatch::clear_has_npvpmode() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqPVPApplyMatch::clear_npvpmode() {
  npvpmode_ = 0;
  clear_has_npvpmode();
}
 ::google::protobuf::int32 ReqPVPApplyMatch::npvpmode() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqPVPApplyMatch.nPVPMode)
  return npvpmode_;
}
 void ReqPVPApplyMatch::set_npvpmode(::google::protobuf::int32 value) {
  set_has_npvpmode();
  npvpmode_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqPVPApplyMatch.nPVPMode)
}

// optional int64 score = 3;
bool ReqPVPApplyMatch::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqPVPApplyMatch::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqPVPApplyMatch::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqPVPApplyMatch::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  clear_has_score();
}
 ::google::protobuf::int64 ReqPVPApplyMatch::score() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqPVPApplyMatch.score)
  return score_;
}
 void ReqPVPApplyMatch::set_score(::google::protobuf::int64 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqPVPApplyMatch.score)
}

// required int32 ApplyType = 4;
bool ReqPVPApplyMatch::has_applytype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReqPVPApplyMatch::set_has_applytype() {
  _has_bits_[0] |= 0x00000008u;
}
void ReqPVPApplyMatch::clear_has_applytype() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReqPVPApplyMatch::clear_applytype() {
  applytype_ = 0;
  clear_has_applytype();
}
 ::google::protobuf::int32 ReqPVPApplyMatch::applytype() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqPVPApplyMatch.ApplyType)
  return applytype_;
}
 void ReqPVPApplyMatch::set_applytype(::google::protobuf::int32 value) {
  set_has_applytype();
  applytype_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.ReqPVPApplyMatch.ApplyType)
}

// optional .AFMsg.Ident team_id = 5;
bool ReqPVPApplyMatch::has_team_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ReqPVPApplyMatch::set_has_team_id() {
  _has_bits_[0] |= 0x00000010u;
}
void ReqPVPApplyMatch::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void ReqPVPApplyMatch::clear_team_id() {
  if (team_id_ != NULL) team_id_->::AFMsg::Ident::Clear();
  clear_has_team_id();
}
const ::AFMsg::Ident& ReqPVPApplyMatch::team_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqPVPApplyMatch.team_id)
  return team_id_ != NULL ? *team_id_ : *default_instance_->team_id_;
}
::AFMsg::Ident* ReqPVPApplyMatch::mutable_team_id() {
  set_has_team_id();
  if (team_id_ == NULL) {
    team_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqPVPApplyMatch.team_id)
  return team_id_;
}
::AFMsg::Ident* ReqPVPApplyMatch::release_team_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqPVPApplyMatch.team_id)
  clear_has_team_id();
  ::AFMsg::Ident* temp = team_id_;
  team_id_ = NULL;
  return temp;
}
void ReqPVPApplyMatch::set_allocated_team_id(::AFMsg::Ident* team_id) {
  delete team_id_;
  team_id_ = team_id;
  if (team_id) {
    set_has_team_id();
  } else {
    clear_has_team_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqPVPApplyMatch.team_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckPVPApplyMatch::kSelfIdFieldNumber;
const int AckPVPApplyMatch::kXRoomInfoFieldNumber;
const int AckPVPApplyMatch::kApplyTypeFieldNumber;
const int AckPVPApplyMatch::kNResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckPVPApplyMatch::AckPVPApplyMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckPVPApplyMatch)
}

void AckPVPApplyMatch::InitAsDefaultInstance() {
  self_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  xroominfo_ = const_cast< ::AFMsg::PVPRoomInfo*>(&::AFMsg::PVPRoomInfo::default_instance());
}

AckPVPApplyMatch::AckPVPApplyMatch(const AckPVPApplyMatch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckPVPApplyMatch)
}

void AckPVPApplyMatch::SharedCtor() {
  _cached_size_ = 0;
  self_id_ = NULL;
  xroominfo_ = NULL;
  applytype_ = 0;
  nresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPVPApplyMatch::~AckPVPApplyMatch() {
  // @@protoc_insertion_point(destructor:AFMsg.AckPVPApplyMatch)
  SharedDtor();
}

void AckPVPApplyMatch::SharedDtor() {
  if (this != default_instance_) {
    delete self_id_;
    delete xroominfo_;
  }
}

void AckPVPApplyMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPVPApplyMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPVPApplyMatch_descriptor_;
}

const AckPVPApplyMatch& AckPVPApplyMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

AckPVPApplyMatch* AckPVPApplyMatch::default_instance_ = NULL;

AckPVPApplyMatch* AckPVPApplyMatch::New(::google::protobuf::Arena* arena) const {
  AckPVPApplyMatch* n = new AckPVPApplyMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckPVPApplyMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckPVPApplyMatch)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AckPVPApplyMatch, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AckPVPApplyMatch*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(applytype_, nresult_);
    if (has_self_id()) {
      if (self_id_ != NULL) self_id_->::AFMsg::Ident::Clear();
    }
    if (has_xroominfo()) {
      if (xroominfo_ != NULL) xroominfo_->::AFMsg::PVPRoomInfo::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AckPVPApplyMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckPVPApplyMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident self_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_xRoomInfo;
        break;
      }

      // optional .AFMsg.PVPRoomInfo xRoomInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_xRoomInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xroominfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ApplyType;
        break;
      }

      // required int32 ApplyType = 3;
      case 3: {
        if (tag == 24) {
         parse_ApplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &applytype_)));
          set_has_applytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_nResult;
        break;
      }

      // required int32 nResult = 4;
      case 4: {
        if (tag == 32) {
         parse_nResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nresult_)));
          set_has_nresult();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckPVPApplyMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckPVPApplyMatch)
  return false;
#undef DO_
}

void AckPVPApplyMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckPVPApplyMatch)
  // required .AFMsg.Ident self_id = 1;
  if (has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->self_id_, output);
  }

  // optional .AFMsg.PVPRoomInfo xRoomInfo = 2;
  if (has_xroominfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->xroominfo_, output);
  }

  // required int32 ApplyType = 3;
  if (has_applytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->applytype(), output);
  }

  // required int32 nResult = 4;
  if (has_nresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nresult(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckPVPApplyMatch)
}

::google::protobuf::uint8* AckPVPApplyMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckPVPApplyMatch)
  // required .AFMsg.Ident self_id = 1;
  if (has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->self_id_, false, target);
  }

  // optional .AFMsg.PVPRoomInfo xRoomInfo = 2;
  if (has_xroominfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->xroominfo_, false, target);
  }

  // required int32 ApplyType = 3;
  if (has_applytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->applytype(), target);
  }

  // required int32 nResult = 4;
  if (has_nresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nresult(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckPVPApplyMatch)
  return target;
}

int AckPVPApplyMatch::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.AckPVPApplyMatch)
  int total_size = 0;

  if (has_self_id()) {
    // required .AFMsg.Ident self_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->self_id_);
  }

  if (has_applytype()) {
    // required int32 ApplyType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->applytype());
  }

  if (has_nresult()) {
    // required int32 nResult = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nresult());
  }

  return total_size;
}
int AckPVPApplyMatch::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckPVPApplyMatch)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required .AFMsg.Ident self_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->self_id_);

    // required int32 ApplyType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->applytype());

    // required int32 nResult = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nresult());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .AFMsg.PVPRoomInfo xRoomInfo = 2;
  if (has_xroominfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->xroominfo_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPVPApplyMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckPVPApplyMatch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AckPVPApplyMatch* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AckPVPApplyMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckPVPApplyMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckPVPApplyMatch)
    MergeFrom(*source);
  }
}

void AckPVPApplyMatch::MergeFrom(const AckPVPApplyMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckPVPApplyMatch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_self_id()) {
      mutable_self_id()->::AFMsg::Ident::MergeFrom(from.self_id());
    }
    if (from.has_xroominfo()) {
      mutable_xroominfo()->::AFMsg::PVPRoomInfo::MergeFrom(from.xroominfo());
    }
    if (from.has_applytype()) {
      set_applytype(from.applytype());
    }
    if (from.has_nresult()) {
      set_nresult(from.nresult());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AckPVPApplyMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckPVPApplyMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPVPApplyMatch::CopyFrom(const AckPVPApplyMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckPVPApplyMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPVPApplyMatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (has_self_id()) {
    if (!this->self_id_->IsInitialized()) return false;
  }
  if (has_xroominfo()) {
    if (!this->xroominfo_->IsInitialized()) return false;
  }
  return true;
}

void AckPVPApplyMatch::Swap(AckPVPApplyMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckPVPApplyMatch::InternalSwap(AckPVPApplyMatch* other) {
  std::swap(self_id_, other->self_id_);
  std::swap(xroominfo_, other->xroominfo_);
  std::swap(applytype_, other->applytype_);
  std::swap(nresult_, other->nresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckPVPApplyMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPVPApplyMatch_descriptor_;
  metadata.reflection = AckPVPApplyMatch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckPVPApplyMatch

// required .AFMsg.Ident self_id = 1;
bool AckPVPApplyMatch::has_self_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AckPVPApplyMatch::set_has_self_id() {
  _has_bits_[0] |= 0x00000001u;
}
void AckPVPApplyMatch::clear_has_self_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void AckPVPApplyMatch::clear_self_id() {
  if (self_id_ != NULL) self_id_->::AFMsg::Ident::Clear();
  clear_has_self_id();
}
const ::AFMsg::Ident& AckPVPApplyMatch::self_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckPVPApplyMatch.self_id)
  return self_id_ != NULL ? *self_id_ : *default_instance_->self_id_;
}
::AFMsg::Ident* AckPVPApplyMatch::mutable_self_id() {
  set_has_self_id();
  if (self_id_ == NULL) {
    self_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckPVPApplyMatch.self_id)
  return self_id_;
}
::AFMsg::Ident* AckPVPApplyMatch::release_self_id() {
  // @@protoc_insertion_point(field_release:AFMsg.AckPVPApplyMatch.self_id)
  clear_has_self_id();
  ::AFMsg::Ident* temp = self_id_;
  self_id_ = NULL;
  return temp;
}
void AckPVPApplyMatch::set_allocated_self_id(::AFMsg::Ident* self_id) {
  delete self_id_;
  self_id_ = self_id;
  if (self_id) {
    set_has_self_id();
  } else {
    clear_has_self_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckPVPApplyMatch.self_id)
}

// optional .AFMsg.PVPRoomInfo xRoomInfo = 2;
bool AckPVPApplyMatch::has_xroominfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AckPVPApplyMatch::set_has_xroominfo() {
  _has_bits_[0] |= 0x00000002u;
}
void AckPVPApplyMatch::clear_has_xroominfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void AckPVPApplyMatch::clear_xroominfo() {
  if (xroominfo_ != NULL) xroominfo_->::AFMsg::PVPRoomInfo::Clear();
  clear_has_xroominfo();
}
const ::AFMsg::PVPRoomInfo& AckPVPApplyMatch::xroominfo() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckPVPApplyMatch.xRoomInfo)
  return xroominfo_ != NULL ? *xroominfo_ : *default_instance_->xroominfo_;
}
::AFMsg::PVPRoomInfo* AckPVPApplyMatch::mutable_xroominfo() {
  set_has_xroominfo();
  if (xroominfo_ == NULL) {
    xroominfo_ = new ::AFMsg::PVPRoomInfo;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckPVPApplyMatch.xRoomInfo)
  return xroominfo_;
}
::AFMsg::PVPRoomInfo* AckPVPApplyMatch::release_xroominfo() {
  // @@protoc_insertion_point(field_release:AFMsg.AckPVPApplyMatch.xRoomInfo)
  clear_has_xroominfo();
  ::AFMsg::PVPRoomInfo* temp = xroominfo_;
  xroominfo_ = NULL;
  return temp;
}
void AckPVPApplyMatch::set_allocated_xroominfo(::AFMsg::PVPRoomInfo* xroominfo) {
  delete xroominfo_;
  xroominfo_ = xroominfo;
  if (xroominfo) {
    set_has_xroominfo();
  } else {
    clear_has_xroominfo();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckPVPApplyMatch.xRoomInfo)
}

// required int32 ApplyType = 3;
bool AckPVPApplyMatch::has_applytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AckPVPApplyMatch::set_has_applytype() {
  _has_bits_[0] |= 0x00000004u;
}
void AckPVPApplyMatch::clear_has_applytype() {
  _has_bits_[0] &= ~0x00000004u;
}
void AckPVPApplyMatch::clear_applytype() {
  applytype_ = 0;
  clear_has_applytype();
}
 ::google::protobuf::int32 AckPVPApplyMatch::applytype() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckPVPApplyMatch.ApplyType)
  return applytype_;
}
 void AckPVPApplyMatch::set_applytype(::google::protobuf::int32 value) {
  set_has_applytype();
  applytype_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckPVPApplyMatch.ApplyType)
}

// required int32 nResult = 4;
bool AckPVPApplyMatch::has_nresult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AckPVPApplyMatch::set_has_nresult() {
  _has_bits_[0] |= 0x00000008u;
}
void AckPVPApplyMatch::clear_has_nresult() {
  _has_bits_[0] &= ~0x00000008u;
}
void AckPVPApplyMatch::clear_nresult() {
  nresult_ = 0;
  clear_has_nresult();
}
 ::google::protobuf::int32 AckPVPApplyMatch::nresult() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckPVPApplyMatch.nResult)
  return nresult_;
}
 void AckPVPApplyMatch::set_nresult(::google::protobuf::int32 value) {
  set_has_nresult();
  nresult_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckPVPApplyMatch.nResult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqCreatePVPEctype::kSelfIdFieldNumber;
const int ReqCreatePVPEctype::kXRoomInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqCreatePVPEctype::ReqCreatePVPEctype()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.ReqCreatePVPEctype)
}

void ReqCreatePVPEctype::InitAsDefaultInstance() {
  self_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  xroominfo_ = const_cast< ::AFMsg::PVPRoomInfo*>(&::AFMsg::PVPRoomInfo::default_instance());
}

ReqCreatePVPEctype::ReqCreatePVPEctype(const ReqCreatePVPEctype& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.ReqCreatePVPEctype)
}

void ReqCreatePVPEctype::SharedCtor() {
  _cached_size_ = 0;
  self_id_ = NULL;
  xroominfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCreatePVPEctype::~ReqCreatePVPEctype() {
  // @@protoc_insertion_point(destructor:AFMsg.ReqCreatePVPEctype)
  SharedDtor();
}

void ReqCreatePVPEctype::SharedDtor() {
  if (this != default_instance_) {
    delete self_id_;
    delete xroominfo_;
  }
}

void ReqCreatePVPEctype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCreatePVPEctype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCreatePVPEctype_descriptor_;
}

const ReqCreatePVPEctype& ReqCreatePVPEctype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

ReqCreatePVPEctype* ReqCreatePVPEctype::default_instance_ = NULL;

ReqCreatePVPEctype* ReqCreatePVPEctype::New(::google::protobuf::Arena* arena) const {
  ReqCreatePVPEctype* n = new ReqCreatePVPEctype;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqCreatePVPEctype::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.ReqCreatePVPEctype)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_self_id()) {
      if (self_id_ != NULL) self_id_->::AFMsg::Ident::Clear();
    }
    if (has_xroominfo()) {
      if (xroominfo_ != NULL) xroominfo_->::AFMsg::PVPRoomInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqCreatePVPEctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.ReqCreatePVPEctype)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident self_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_xRoomInfo;
        break;
      }

      // required .AFMsg.PVPRoomInfo xRoomInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_xRoomInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xroominfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.ReqCreatePVPEctype)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.ReqCreatePVPEctype)
  return false;
#undef DO_
}

void ReqCreatePVPEctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.ReqCreatePVPEctype)
  // required .AFMsg.Ident self_id = 1;
  if (has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->self_id_, output);
  }

  // required .AFMsg.PVPRoomInfo xRoomInfo = 2;
  if (has_xroominfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->xroominfo_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.ReqCreatePVPEctype)
}

::google::protobuf::uint8* ReqCreatePVPEctype::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.ReqCreatePVPEctype)
  // required .AFMsg.Ident self_id = 1;
  if (has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->self_id_, false, target);
  }

  // required .AFMsg.PVPRoomInfo xRoomInfo = 2;
  if (has_xroominfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->xroominfo_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.ReqCreatePVPEctype)
  return target;
}

int ReqCreatePVPEctype::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.ReqCreatePVPEctype)
  int total_size = 0;

  if (has_self_id()) {
    // required .AFMsg.Ident self_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->self_id_);
  }

  if (has_xroominfo()) {
    // required .AFMsg.PVPRoomInfo xRoomInfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->xroominfo_);
  }

  return total_size;
}
int ReqCreatePVPEctype::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.ReqCreatePVPEctype)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .AFMsg.Ident self_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->self_id_);

    // required .AFMsg.PVPRoomInfo xRoomInfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->xroominfo_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCreatePVPEctype::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.ReqCreatePVPEctype)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqCreatePVPEctype* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqCreatePVPEctype>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.ReqCreatePVPEctype)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.ReqCreatePVPEctype)
    MergeFrom(*source);
  }
}

void ReqCreatePVPEctype::MergeFrom(const ReqCreatePVPEctype& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.ReqCreatePVPEctype)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_self_id()) {
      mutable_self_id()->::AFMsg::Ident::MergeFrom(from.self_id());
    }
    if (from.has_xroominfo()) {
      mutable_xroominfo()->::AFMsg::PVPRoomInfo::MergeFrom(from.xroominfo());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqCreatePVPEctype::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.ReqCreatePVPEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCreatePVPEctype::CopyFrom(const ReqCreatePVPEctype& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.ReqCreatePVPEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCreatePVPEctype::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_self_id()) {
    if (!this->self_id_->IsInitialized()) return false;
  }
  if (has_xroominfo()) {
    if (!this->xroominfo_->IsInitialized()) return false;
  }
  return true;
}

void ReqCreatePVPEctype::Swap(ReqCreatePVPEctype* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqCreatePVPEctype::InternalSwap(ReqCreatePVPEctype* other) {
  std::swap(self_id_, other->self_id_);
  std::swap(xroominfo_, other->xroominfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqCreatePVPEctype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCreatePVPEctype_descriptor_;
  metadata.reflection = ReqCreatePVPEctype_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqCreatePVPEctype

// required .AFMsg.Ident self_id = 1;
bool ReqCreatePVPEctype::has_self_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqCreatePVPEctype::set_has_self_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqCreatePVPEctype::clear_has_self_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqCreatePVPEctype::clear_self_id() {
  if (self_id_ != NULL) self_id_->::AFMsg::Ident::Clear();
  clear_has_self_id();
}
const ::AFMsg::Ident& ReqCreatePVPEctype::self_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqCreatePVPEctype.self_id)
  return self_id_ != NULL ? *self_id_ : *default_instance_->self_id_;
}
::AFMsg::Ident* ReqCreatePVPEctype::mutable_self_id() {
  set_has_self_id();
  if (self_id_ == NULL) {
    self_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqCreatePVPEctype.self_id)
  return self_id_;
}
::AFMsg::Ident* ReqCreatePVPEctype::release_self_id() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqCreatePVPEctype.self_id)
  clear_has_self_id();
  ::AFMsg::Ident* temp = self_id_;
  self_id_ = NULL;
  return temp;
}
void ReqCreatePVPEctype::set_allocated_self_id(::AFMsg::Ident* self_id) {
  delete self_id_;
  self_id_ = self_id;
  if (self_id) {
    set_has_self_id();
  } else {
    clear_has_self_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqCreatePVPEctype.self_id)
}

// required .AFMsg.PVPRoomInfo xRoomInfo = 2;
bool ReqCreatePVPEctype::has_xroominfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqCreatePVPEctype::set_has_xroominfo() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqCreatePVPEctype::clear_has_xroominfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqCreatePVPEctype::clear_xroominfo() {
  if (xroominfo_ != NULL) xroominfo_->::AFMsg::PVPRoomInfo::Clear();
  clear_has_xroominfo();
}
const ::AFMsg::PVPRoomInfo& ReqCreatePVPEctype::xroominfo() const {
  // @@protoc_insertion_point(field_get:AFMsg.ReqCreatePVPEctype.xRoomInfo)
  return xroominfo_ != NULL ? *xroominfo_ : *default_instance_->xroominfo_;
}
::AFMsg::PVPRoomInfo* ReqCreatePVPEctype::mutable_xroominfo() {
  set_has_xroominfo();
  if (xroominfo_ == NULL) {
    xroominfo_ = new ::AFMsg::PVPRoomInfo;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.ReqCreatePVPEctype.xRoomInfo)
  return xroominfo_;
}
::AFMsg::PVPRoomInfo* ReqCreatePVPEctype::release_xroominfo() {
  // @@protoc_insertion_point(field_release:AFMsg.ReqCreatePVPEctype.xRoomInfo)
  clear_has_xroominfo();
  ::AFMsg::PVPRoomInfo* temp = xroominfo_;
  xroominfo_ = NULL;
  return temp;
}
void ReqCreatePVPEctype::set_allocated_xroominfo(::AFMsg::PVPRoomInfo* xroominfo) {
  delete xroominfo_;
  xroominfo_ = xroominfo;
  if (xroominfo) {
    set_has_xroominfo();
  } else {
    clear_has_xroominfo();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.ReqCreatePVPEctype.xRoomInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckCreatePVPEctype::kSelfIdFieldNumber;
const int AckCreatePVPEctype::kXRoomInfoFieldNumber;
const int AckCreatePVPEctype::kApplyTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckCreatePVPEctype::AckCreatePVPEctype()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AFMsg.AckCreatePVPEctype)
}

void AckCreatePVPEctype::InitAsDefaultInstance() {
  self_id_ = const_cast< ::AFMsg::Ident*>(&::AFMsg::Ident::default_instance());
  xroominfo_ = const_cast< ::AFMsg::PVPRoomInfo*>(&::AFMsg::PVPRoomInfo::default_instance());
}

AckCreatePVPEctype::AckCreatePVPEctype(const AckCreatePVPEctype& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AFMsg.AckCreatePVPEctype)
}

void AckCreatePVPEctype::SharedCtor() {
  _cached_size_ = 0;
  self_id_ = NULL;
  xroominfo_ = NULL;
  applytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckCreatePVPEctype::~AckCreatePVPEctype() {
  // @@protoc_insertion_point(destructor:AFMsg.AckCreatePVPEctype)
  SharedDtor();
}

void AckCreatePVPEctype::SharedDtor() {
  if (this != default_instance_) {
    delete self_id_;
    delete xroominfo_;
  }
}

void AckCreatePVPEctype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckCreatePVPEctype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckCreatePVPEctype_descriptor_;
}

const AckCreatePVPEctype& AckCreatePVPEctype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AFMsgShare_2eproto();
  return *default_instance_;
}

AckCreatePVPEctype* AckCreatePVPEctype::default_instance_ = NULL;

AckCreatePVPEctype* AckCreatePVPEctype::New(::google::protobuf::Arena* arena) const {
  AckCreatePVPEctype* n = new AckCreatePVPEctype;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckCreatePVPEctype::Clear() {
// @@protoc_insertion_point(message_clear_start:AFMsg.AckCreatePVPEctype)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_self_id()) {
      if (self_id_ != NULL) self_id_->::AFMsg::Ident::Clear();
    }
    if (has_xroominfo()) {
      if (xroominfo_ != NULL) xroominfo_->::AFMsg::PVPRoomInfo::Clear();
    }
    applytype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AckCreatePVPEctype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AFMsg.AckCreatePVPEctype)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .AFMsg.Ident self_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_xRoomInfo;
        break;
      }

      // required .AFMsg.PVPRoomInfo xRoomInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_xRoomInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_xroominfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ApplyType;
        break;
      }

      // required int32 ApplyType = 3;
      case 3: {
        if (tag == 24) {
         parse_ApplyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &applytype_)));
          set_has_applytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AFMsg.AckCreatePVPEctype)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AFMsg.AckCreatePVPEctype)
  return false;
#undef DO_
}

void AckCreatePVPEctype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AFMsg.AckCreatePVPEctype)
  // required .AFMsg.Ident self_id = 1;
  if (has_self_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->self_id_, output);
  }

  // required .AFMsg.PVPRoomInfo xRoomInfo = 2;
  if (has_xroominfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->xroominfo_, output);
  }

  // required int32 ApplyType = 3;
  if (has_applytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->applytype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AFMsg.AckCreatePVPEctype)
}

::google::protobuf::uint8* AckCreatePVPEctype::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AFMsg.AckCreatePVPEctype)
  // required .AFMsg.Ident self_id = 1;
  if (has_self_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->self_id_, false, target);
  }

  // required .AFMsg.PVPRoomInfo xRoomInfo = 2;
  if (has_xroominfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->xroominfo_, false, target);
  }

  // required int32 ApplyType = 3;
  if (has_applytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->applytype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AFMsg.AckCreatePVPEctype)
  return target;
}

int AckCreatePVPEctype::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AFMsg.AckCreatePVPEctype)
  int total_size = 0;

  if (has_self_id()) {
    // required .AFMsg.Ident self_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->self_id_);
  }

  if (has_xroominfo()) {
    // required .AFMsg.PVPRoomInfo xRoomInfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->xroominfo_);
  }

  if (has_applytype()) {
    // required int32 ApplyType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->applytype());
  }

  return total_size;
}
int AckCreatePVPEctype::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:AFMsg.AckCreatePVPEctype)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .AFMsg.Ident self_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->self_id_);

    // required .AFMsg.PVPRoomInfo xRoomInfo = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->xroominfo_);

    // required int32 ApplyType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->applytype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckCreatePVPEctype::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AFMsg.AckCreatePVPEctype)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AckCreatePVPEctype* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AckCreatePVPEctype>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AFMsg.AckCreatePVPEctype)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AFMsg.AckCreatePVPEctype)
    MergeFrom(*source);
  }
}

void AckCreatePVPEctype::MergeFrom(const AckCreatePVPEctype& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AFMsg.AckCreatePVPEctype)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_self_id()) {
      mutable_self_id()->::AFMsg::Ident::MergeFrom(from.self_id());
    }
    if (from.has_xroominfo()) {
      mutable_xroominfo()->::AFMsg::PVPRoomInfo::MergeFrom(from.xroominfo());
    }
    if (from.has_applytype()) {
      set_applytype(from.applytype());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AckCreatePVPEctype::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AFMsg.AckCreatePVPEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCreatePVPEctype::CopyFrom(const AckCreatePVPEctype& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AFMsg.AckCreatePVPEctype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCreatePVPEctype::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_self_id()) {
    if (!this->self_id_->IsInitialized()) return false;
  }
  if (has_xroominfo()) {
    if (!this->xroominfo_->IsInitialized()) return false;
  }
  return true;
}

void AckCreatePVPEctype::Swap(AckCreatePVPEctype* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckCreatePVPEctype::InternalSwap(AckCreatePVPEctype* other) {
  std::swap(self_id_, other->self_id_);
  std::swap(xroominfo_, other->xroominfo_);
  std::swap(applytype_, other->applytype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckCreatePVPEctype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckCreatePVPEctype_descriptor_;
  metadata.reflection = AckCreatePVPEctype_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckCreatePVPEctype

// required .AFMsg.Ident self_id = 1;
bool AckCreatePVPEctype::has_self_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AckCreatePVPEctype::set_has_self_id() {
  _has_bits_[0] |= 0x00000001u;
}
void AckCreatePVPEctype::clear_has_self_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void AckCreatePVPEctype::clear_self_id() {
  if (self_id_ != NULL) self_id_->::AFMsg::Ident::Clear();
  clear_has_self_id();
}
const ::AFMsg::Ident& AckCreatePVPEctype::self_id() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckCreatePVPEctype.self_id)
  return self_id_ != NULL ? *self_id_ : *default_instance_->self_id_;
}
::AFMsg::Ident* AckCreatePVPEctype::mutable_self_id() {
  set_has_self_id();
  if (self_id_ == NULL) {
    self_id_ = new ::AFMsg::Ident;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckCreatePVPEctype.self_id)
  return self_id_;
}
::AFMsg::Ident* AckCreatePVPEctype::release_self_id() {
  // @@protoc_insertion_point(field_release:AFMsg.AckCreatePVPEctype.self_id)
  clear_has_self_id();
  ::AFMsg::Ident* temp = self_id_;
  self_id_ = NULL;
  return temp;
}
void AckCreatePVPEctype::set_allocated_self_id(::AFMsg::Ident* self_id) {
  delete self_id_;
  self_id_ = self_id;
  if (self_id) {
    set_has_self_id();
  } else {
    clear_has_self_id();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckCreatePVPEctype.self_id)
}

// required .AFMsg.PVPRoomInfo xRoomInfo = 2;
bool AckCreatePVPEctype::has_xroominfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AckCreatePVPEctype::set_has_xroominfo() {
  _has_bits_[0] |= 0x00000002u;
}
void AckCreatePVPEctype::clear_has_xroominfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void AckCreatePVPEctype::clear_xroominfo() {
  if (xroominfo_ != NULL) xroominfo_->::AFMsg::PVPRoomInfo::Clear();
  clear_has_xroominfo();
}
const ::AFMsg::PVPRoomInfo& AckCreatePVPEctype::xroominfo() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckCreatePVPEctype.xRoomInfo)
  return xroominfo_ != NULL ? *xroominfo_ : *default_instance_->xroominfo_;
}
::AFMsg::PVPRoomInfo* AckCreatePVPEctype::mutable_xroominfo() {
  set_has_xroominfo();
  if (xroominfo_ == NULL) {
    xroominfo_ = new ::AFMsg::PVPRoomInfo;
  }
  // @@protoc_insertion_point(field_mutable:AFMsg.AckCreatePVPEctype.xRoomInfo)
  return xroominfo_;
}
::AFMsg::PVPRoomInfo* AckCreatePVPEctype::release_xroominfo() {
  // @@protoc_insertion_point(field_release:AFMsg.AckCreatePVPEctype.xRoomInfo)
  clear_has_xroominfo();
  ::AFMsg::PVPRoomInfo* temp = xroominfo_;
  xroominfo_ = NULL;
  return temp;
}
void AckCreatePVPEctype::set_allocated_xroominfo(::AFMsg::PVPRoomInfo* xroominfo) {
  delete xroominfo_;
  xroominfo_ = xroominfo;
  if (xroominfo) {
    set_has_xroominfo();
  } else {
    clear_has_xroominfo();
  }
  // @@protoc_insertion_point(field_set_allocated:AFMsg.AckCreatePVPEctype.xRoomInfo)
}

// required int32 ApplyType = 3;
bool AckCreatePVPEctype::has_applytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AckCreatePVPEctype::set_has_applytype() {
  _has_bits_[0] |= 0x00000004u;
}
void AckCreatePVPEctype::clear_has_applytype() {
  _has_bits_[0] &= ~0x00000004u;
}
void AckCreatePVPEctype::clear_applytype() {
  applytype_ = 0;
  clear_has_applytype();
}
 ::google::protobuf::int32 AckCreatePVPEctype::applytype() const {
  // @@protoc_insertion_point(field_get:AFMsg.AckCreatePVPEctype.ApplyType)
  return applytype_;
}
 void AckCreatePVPEctype::set_applytype(::google::protobuf::int32 value) {
  set_has_applytype();
  applytype_ = value;
  // @@protoc_insertion_point(field_set:AFMsg.AckCreatePVPEctype.ApplyType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace AFMsg

// @@protoc_insertion_point(global_scope)
